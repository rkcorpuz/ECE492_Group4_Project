
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0080019c

Program Header:
    LOAD off    0x00001020 vaddr 0x01104020 paddr 0x00800000 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x
    LOAD off    0x0000219c vaddr 0x0080019c paddr 0x0080019c align 2**12
         filesz 0x00015ca4 memsz 0x00015ca4 flags r-x
    LOAD off    0x00017e40 vaddr 0x00815e40 paddr 0x00817950 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x0001a460 vaddr 0x00819460 paddr 0x00819460 align 2**12
         filesz 0x00000000 memsz 0x00007578 flags rw-
    LOAD off    0x0001a000 vaddr 0x01104000 paddr 0x01104000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01104000  01104000  0001a000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01104020  00800000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000157d8  0080019c  0080019c  0000219c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000004cc  00815974  00815974  00017974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  00815e40  00817950  00017e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007578  00819460  00819460  0001a460  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001a020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000df8  00000000  00000000  0001a048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000021f9  00000000  00000000  0001ae40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00030179  00000000  00000000  0001d039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009337  00000000  00000000  0004d1b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001b0c4  00000000  00000000  000564e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000025e8  00000000  00000000  000715b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002405  00000000  00000000  00073b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000d173  00000000  00000000  00075f9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00083110  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009a8  00000000  00000000  00083140  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  00088536  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0008853c  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00088548  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00088549  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0008854a  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0008854e  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  00088552  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  00088556  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  00088561  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  0008856c  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000015  00000000  00000000  00088577  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000041  00000000  00000000  0008858c  2**0
                  CONTENTS, READONLY
 29 .jdi          00005a51  00000000  00000000  000885cd  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     000632f7  00000000  00000000  0008e01e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01104000 l    d  .entry	00000000 .entry
01104020 l    d  .exceptions	00000000 .exceptions
0080019c l    d  .text	00000000 .text
00815974 l    d  .rodata	00000000 .rodata
00815e40 l    d  .rwdata	00000000 .rwdata
00819460 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
008001e4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080064c l     F .text	00000058 __sprint_r
00815a32 l     O .rodata	00000010 blanks.3452
00815a22 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008026b0 l     F .text	00000218 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008040ac l     F .text	00000058 std
008041b8 l     F .text	00000008 __fp_lock
008041c0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00815e40 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
008178a0 l     O .rwdata	00000004 charset
00815a68 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00815bb0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080834c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00809478 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
00809cec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00809d4c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00809e4c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00809f6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0080a04c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0080a1a8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080a3f0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008178c4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080a68c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
008178c8 l     O .rwdata	00000004 lockid
00819490 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
008178cc l     O .rwdata	00000004 lockid
00819498 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080c0c4 l     F .text	00000044 OS_InitMisc
0080c108 l     F .text	0000006c OS_InitRdyList
0080c26c l     F .text	000000e0 OS_InitTCBList
0080bfe8 l     F .text	000000dc OS_InitEventList
0080c174 l     F .text	0000007c OS_InitTaskIdle
0080c1f0 l     F .text	0000007c OS_InitTaskStat
0080c4e0 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
0080e400 l     F .text	00000110 OS_FlagTaskRdy
0080e158 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
008167fc l     O .rwdata	0000106c jtag_uart_0
00817868 l     O .rwdata	0000002c character_lcd_0
00812d40 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00812ff8 l     F .text	000002c4 altera_avalon_jtag_uart_irq
008132bc l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00813ad4 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00814350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00814808 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00814944 l     F .text	000000dc alt_file_locked
00814ba8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00815750 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
00815904 l     F .text	00000040 alt_sim_halt
00805e68 g     F .text	00000094 _mprec_log10
0081791a g     O .rwdata	00000002 OSTaskNameSize
00805f54 g     F .text	00000088 __any_on
00807660 g     F .text	00000070 _isatty_r
00815b88 g     O .rodata	00000028 __mprec_tinytens
0080a208 g     F .text	000000c8 alt_main
00800524 g     F .text	000000a0 _puts_r
00820748 g     O .bss	00000100 alt_irq
008076d0 g     F .text	00000078 _lseek_r
0080ecf4 g     F .text	000000d0 OS_MemInit
00817950 g       *ABS*	00000000 __flash_rwdata_start
00812c34 g     F .text	00000064 OSTimeSet
00813c50 g     F .text	00000034 alt_up_character_lcd_send_cmd
00808e6c g     F .text	00000088 __eqdf2
0080ac40 g     F .text	000006b4 OSEventPendMulti
008209d8 g       *ABS*	00000000 __alt_heap_start
008151b0 g     F .text	00000020 OSTaskCreateHook
00819524 g     O .bss	00002000 task1_stk
008004ac g     F .text	00000044 printf
008178f2 g     O .rwdata	00000002 OSMboxEn
0080b348 g     F .text	0000007c OSIntEnter
0080712c g     F .text	00000068 __sseek
00804114 g     F .text	000000a4 __sinit
00817902 g     O .rwdata	00000002 OSQEn
00804dec g     F .text	00000084 _setlocale_r
00804214 g     F .text	00000068 __sfmoreglue
0080a8fc g     F .text	000000d0 __malloc_unlock
0081520c g     F .text	0000001c OSTaskStatHook
008194a0 g     O .bss	00000001 OSLockNesting
00817940 g     O .rwdata	00000002 OSDataSize
008194a1 g     O .bss	00000001 OSRunning
008058e4 g     F .text	000000e0 memmove
00815244 g     F .text	0000001c OSInitHookBegin
00817938 g     O .rwdata	00000002 OSTmrSize
00804204 g     F .text	00000010 _cleanup
00805fdc g     F .text	000000bc _Balloc
008194a4 g     O .bss	00000004 OSIdleCtr
00808f7c g     F .text	00000088 __gtdf2
00814e7c g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00813bd4 g     F .text	0000007c get_DDRAM_addr
0080c814 g     F .text	000002e0 OS_TCBInit
01104000 g     F .entry	0000001c __reset
0081793e g     O .rwdata	00000002 OSTmrWheelTblSize
00800000 g       *ABS*	00000000 __flash_exceptions_start
008178de g     O .rwdata	00000002 OSEventSize
008194a8 g     O .bss	00000001 OSPrioHighRdy
008075ec g     F .text	00000074 _fstat_r
008151d0 g     F .text	00000020 OSTaskDelHook
0081947c g     O .bss	00000004 errno
00814e5c g       .text	00000000 OSStartHighRdy
00811408 g     F .text	00000200 OSTaskCreateExt
0080dc74 g     F .text	00000068 OSFlagPendGetFlagsRdy
0081791e g     O .rwdata	00000002 OSTaskStatStkSize
0080cc80 g     F .text	00000334 OSFlagAccept
0080f42c g     F .text	000000c8 OSQFlush
0080edc4 g     F .text	00000154 OSQAccept
00819488 g     O .bss	00000004 alt_argv
0081f894 g       *ABS*	00000000 _gp
00811234 g     F .text	000001d4 OSTaskCreate
00810cc0 g     F .text	00000574 OSTaskChangePrio
0081949c g     O .bss	00000004 alt_heapsem
0080caf4 g     F .text	0000018c OSDebugInit
00811608 g     F .text	0000040c OSTaskDel
0081667c g     O .rwdata	00000180 alt_fd_list
0081d524 g     O .bss	00000370 OSFlagTbl
0080bdc4 g     F .text	000000b8 OS_EventTaskRemove
00814478 g     F .text	00000094 alt_find_dev
00805844 g     F .text	000000a0 memcpy
00817908 g     O .rwdata	00000002 OSRdyTblSize
00813de8 g     F .text	0000004c alt_up_character_lcd_write_fd
008041f8 g     F .text	0000000c _cleanup_r
00809114 g     F .text	000000f8 __floatsidf
008148cc g     F .text	00000078 alt_io_redirect
0080908c g     F .text	00000088 __ltdf2
00815974 g       *ABS*	00000000 __DTOR_END__
008005c4 g     F .text	00000014 puts
0080a9cc g     F .text	00000130 OSEventNameGet
008178ec g     O .rwdata	00000002 OSFlagMax
00805db8 g     F .text	000000b0 __ratio
0080b3c4 g     F .text	00000100 OSIntExit
00817926 g     O .rwdata	00000002 OSTCBSize
008194a9 g     O .bss	00000001 OSPrioCur
00813538 g     F .text	000002c0 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
008004f0 g     F .text	00000034 _printf_r
01104000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
008095b4 g     F .text	00000008 __udivsi3
00809eac g     F .text	000000c0 isatty
0081790c g     O .rwdata	00000002 OSStkWidth
00815a98 g     O .rodata	000000c8 __mprec_tens
00817900 g     O .rwdata	00000002 OSPtrSize
00804dc8 g     F .text	00000008 __locale_charset
008178e0 g     O .rwdata	00000002 OSEventTblSize
00814dd0 g       .text	00000000 OSCtxSw
008154cc g     F .text	00000090 alt_icache_flush
00819470 g     O .bss	00000004 __malloc_top_pad
008194ac g     O .bss	00000004 OSTCBList
00819480 g     O .bss	00000004 alt_fd_list_lock
0081789c g     O .rwdata	00000004 __mb_cur_max
00804dd0 g     F .text	0000000c _localeconv_r
008066d4 g     F .text	0000003c __i2b
008047ac g     F .text	0000049c __sfvwrite_r
0081d894 g     O .bss	00000c30 OSMemTbl
008194b0 g     O .bss	00000001 OSTickStepState
008070b4 g     F .text	00000070 _sbrk_r
00817904 g     O .rwdata	00000002 OSQMax
0081e4c4 g     O .bss	00000800 OSTaskStatStk
0080e8dc g     F .text	0000010c OSMemNameGet
008178e4 g     O .rwdata	00000002 OSFlagEn
00807748 g     F .text	00000078 _read_r
0081792a g     O .rwdata	00000002 OSTimeTickHookEn
0080f990 g     F .text	00000180 OSQPost
0080e510 g     F .text	000000ac OS_FlagUnlink
00816240 g     O .rwdata	0000000c __lc_ctype
008178bc g     O .rwdata	00000004 alt_max_fd
0080c3a0 g     F .text	0000006c OS_MemCopy
0080c40c g     F .text	000000d4 OS_Sched
008099f0 g     F .text	00000138 __unpack_d
008074c8 g     F .text	00000110 _fclose_r
0080e7d8 g     F .text	00000104 OSMemGet
00811d3c g     F .text	000001c4 OSTaskNameSet
00804078 g     F .text	00000034 fflush
00819474 g     O .bss	00000004 __malloc_max_sbrked_mem
008194b4 g     O .bss	00000004 OSCtxSwCtr
00815228 g     F .text	0000001c OSTimeTickHook
008178ee g     O .rwdata	00000002 OSFlagNameSize
0080be7c g     F .text	00000104 OS_EventTaskRemoveMulti
008087dc g     F .text	00000074 __adddf3
0080bc70 g     F .text	00000154 OS_EventTaskWaitMulti
00805c98 g     F .text	00000120 __b2d
00817906 g     O .rwdata	00000002 OSQSize
00807d9c g     F .text	000005b0 __umoddi3
0080a0b8 g     F .text	000000f0 lseek
0081056c g     F .text	0000027c OSSemPend
00817898 g     O .rwdata	00000004 _global_impure_ptr
00806a50 g     F .text	000005f4 _realloc_r
008178f0 g     O .rwdata	00000002 OSLowestPrio
008209d8 g       *ABS*	00000000 __bss_end
00814710 g     F .text	000000f8 alt_iic_isr_register
00815298 g     F .text	00000020 OSTCBInitHook
00817936 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00814ca0 g     F .text	00000110 alt_tick
008077c0 g     F .text	000005dc __udivdi3
008178d8 g     O .rwdata	00000002 OSEventEn
00815b60 g     O .rodata	00000028 __mprec_bigtens
00806930 g     F .text	00000120 __s2b
00817932 g     O .rwdata	00000002 OSTmrCfgNameSize
008092e4 g     F .text	00000194 __floatunsidf
00805bb8 g     F .text	00000060 __mcmp
008041e0 g     F .text	00000018 __fp_lock_all
008146c8 g     F .text	00000048 alt_ic_irq_enabled
0080e31c g     F .text	000000e4 OS_FlagInit
00814c08 g     F .text	00000098 alt_alarm_stop
00817914 g     O .rwdata	00000002 OSTaskIdleStkSize
008194f0 g     O .bss	00000004 alt_irq_active
008100f8 g     F .text	000000c0 OSSemAccept
0080eb08 g     F .text	000000f0 OSMemPut
0080e5bc g     F .text	0000021c OSMemCreate
008194b8 g     O .bss	00000004 OSIdleCtrMax
011040ec g     F .exceptions	000000d0 alt_irq_handler
00816654 g     O .rwdata	00000028 alt_dev_null
00817928 g     O .rwdata	00000002 OSTicksPerSec
008140d0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00814dd0 g       .text	00000000 OSIntCtxSw
00814258 g     F .text	00000044 alt_dcache_flush_all
00805a84 g     F .text	00000070 __hi0bits
0080920c g     F .text	000000d8 __fixdfsi
008194bc g     O .bss	00000004 OSTCBFreeList
00817950 g       *ABS*	00000000 __ram_rwdata_end
008107e8 g     F .text	0000017c OSSemPendAbort
008178b4 g     O .rwdata	00000008 alt_dev_list
0080a56c g     F .text	00000120 write
0081792c g     O .rwdata	00000002 OSVersionNbr
00815e40 g       *ABS*	00000000 __ram_rodata_end
00809d78 g     F .text	000000d4 fstat
008178d4 g     O .rwdata	00000004 OSEndiannessTest
00806810 g     F .text	00000120 __pow5mult
00819464 g     O .bss	00000004 __nlocale_changed
008095bc g     F .text	00000008 __umodsi3
008178e6 g     O .rwdata	00000002 OSFlagGrpSize
008209d8 g       *ABS*	00000000 end
00812ec0 g     F .text	00000138 altera_avalon_jtag_uart_init
0080c684 g     F .text	000000c8 OS_TaskStat
00815970 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00813b44 g     F .text	00000090 alt_avalon_timer_sc_init
0080965c g     F .text	00000080 __clzsi2
008137f8 g     F .text	000002dc altera_avalon_jtag_uart_write
00804104 g     F .text	00000004 __sfp_lock_acquire
00805760 g     F .text	000000e4 memchr
0080c34c g     F .text	00000054 OS_MemClr
00813cf8 g     F .text	00000078 alt_up_character_lcd_write
008006a4 g     F .text	00001eac ___vfprintf_internal_r
00814ea0 g     F .text	00000310 OSTaskStkInit
008001e8 g     F .text	00000120 task1
00804498 g     F .text	00000314 _free_r
0080b9cc g     F .text	00000194 OS_EventTaskRdy
00815754 g     F .text	000001b0 __call_exitprocs
008194c0 g     O .bss	00000001 OSCPUUsage
00819468 g     O .bss	00000004 __mlocale_changed
008178a8 g     O .rwdata	00000004 __malloc_sbrk_base
0080019c g     F .text	0000004c _start
00819460 g     O .bss	00000004 char_lcd
00800308 g     F .text	0000002c task2
008194f4 g     O .bss	00000004 _alt_tick_rate
0080f4f4 g     F .text	00000320 OSQPend
00812700 g     F .text	0000014c OSTimeDly
008063a0 g     F .text	0000014c __lshift
008194f8 g     O .bss	00000004 _alt_nticks
0080a2d0 g     F .text	00000120 read
00812ccc g     F .text	00000074 alt_sys_init
00813f5c g     F .text	000000b0 alt_up_character_lcd_shift_display
0081561c g     F .text	00000134 __register_exitproc
008194c1 g     O .bss	00000001 OSTaskCtr
0081284c g     F .text	00000174 OSTimeDlyHMSM
008064ec g     F .text	000001e8 __multiply
0081400c g     F .text	00000090 alt_up_character_lcd_erase_pos
008133d0 g     F .text	00000074 altera_avalon_jtag_uart_close
00815e40 g       *ABS*	00000000 __ram_rwdata_start
00815974 g       *ABS*	00000000 __ram_rodata_start
008194fc g     O .bss	00000028 __malloc_current_mallinfo
008178da g     O .rwdata	00000002 OSEventMax
00806098 g     F .text	0000017c __d2b
00810964 g     F .text	00000128 OSSemPost
0080b550 g     F .text	000000e4 OSSchedUnlock
00812d78 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
008153d8 g     F .text	000000f4 alt_get_fd
008194c4 g     O .bss	00000004 OSMemFreeList
0080b6a4 g     F .text	000000ac OSStatInit
0080e084 g     F .text	000000d4 OSFlagQuery
00809b28 g     F .text	000000c8 __fpcmp_parts_d
00817910 g     O .rwdata	00000002 OSTaskCreateExtEn
00807458 g     F .text	00000070 _close_r
008155a8 g     F .text	00000074 memcmp
0080b9b0 g     F .text	0000001c OS_Dummy
00812e28 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
008209d8 g       *ABS*	00000000 __alt_stack_base
00812e70 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
00802574 g     F .text	0000013c __swsetup_r
0081ecc4 g     O .bss	000001e0 OSQTbl
00808c14 g     F .text	00000258 __divdf3
0080427c g     F .text	000000f0 __sfp
00805efc g     F .text	00000058 __copybits
0081624c g     O .rwdata	00000408 __malloc_av_
00804110 g     F .text	00000004 __sinit_lock_release
008194c8 g     O .bss	00000004 OSTCBHighRdy
00808850 g     F .text	000003c4 __muldf3
00807210 g     F .text	00000060 __sread
008194cc g     O .bss	00000004 OSQFreeList
008152b8 g     F .text	00000120 alt_find_file
0081429c g     F .text	000000b4 alt_dev_llist_insert
0080a7f4 g     F .text	00000108 __malloc_lock
0080a4b0 g     F .text	000000bc sbrk
0080aafc g     F .text	00000144 OSEventNameSet
00803e7c g     F .text	000001fc _fflush_r
008073a4 g     F .text	000000b4 _calloc_r
008194d0 g     O .bss	00000001 OSRdyGrp
00819460 g       *ABS*	00000000 __bss_start
008059c4 g     F .text	00000098 memset
008003c4 g     F .text	000000e8 main
0081948c g     O .bss	00000004 alt_envp
00819478 g     O .bss	00000004 __malloc_max_total_mem
00812dd0 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
00815cf0 g     O .rodata	00000100 OSUnMapTbl
0081790a g     O .rwdata	00000002 OSSemEn
00813eac g     F .text	000000b0 alt_up_character_lcd_shift_cursor
0080dcdc g     F .text	000003a8 OSFlagPost
00807124 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
008075d8 g     F .text	00000014 fclose
0080bb60 g     F .text	00000110 OS_EventTaskWait
0081b524 g     O .bss	00002000 task2_stk
0080c74c g     F .text	000000c8 OS_TaskStatStkChk
00820848 g     O .bss	00000190 _atexit0
00811a14 g     F .text	00000170 OSTaskDelReq
008028c8 g     F .text	000015b4 _dtoa_r
00805020 g     F .text	00000740 _malloc_r
008178c0 g     O .rwdata	00000004 alt_errno
0080b634 g     F .text	00000070 OSStart
0080a798 g     F .text	0000005c __env_unlock
00804d10 g     F .text	000000b8 _fwalk
00811f00 g     F .text	00000218 OSTaskResume
0080ebf8 g     F .text	000000fc OSMemQuery
0081791c g     O .rwdata	00000002 OSTaskStatEn
008178f6 g     O .rwdata	00000002 OSMemMax
0080fb10 g     F .text	00000188 OSQPostFront
008094f4 g     F .text	00000060 __divsi3
008194d1 g     O .bss	00000003 OSRdyTbl
008178d0 g     O .rwdata	00000002 OSDebugEn
00815bbc g     O .rodata	00000014 __thenan_df
00813cb8 g     F .text	00000040 alt_up_character_lcd_open_dev
0080436c g     F .text	0000012c _malloc_trim_r
00815974 g       *ABS*	00000000 __CTOR_END__
008178e8 g     O .rwdata	00000002 OSFlagNodeSize
00817930 g     O .rwdata	00000002 OSTmrCfgMax
00813c84 g     F .text	00000034 alt_up_character_lcd_init
00807270 g     F .text	000000bc strcmp
0080ef18 g     F .text	00000214 OSQCreate
00800334 g     F .text	00000090 clear_lcd
00811b84 g     F .text	000001b8 OSTaskNameGet
00815974 g       *ABS*	00000000 __flash_rodata_start
0080fc98 g     F .text	00000234 OSQPostOpt
0080b750 g     F .text	00000240 OSTimeTick
00817918 g     O .rwdata	00000002 OSTaskMax
00815974 g       *ABS*	00000000 __DTOR_LIST__
008101b8 g     F .text	00000114 OSSemCreate
0081793c g     O .rwdata	00000002 OSTmrWheelSize
00808ef4 g     F .text	00000088 __nedf2
00817912 g     O .rwdata	00000002 OSTaskDelEn
01080000 g       *ABS*	00000000 __alt_mem_sram_0
00810a8c g     F .text	00000130 OSSemQuery
0080f12c g     F .text	00000300 OSQDel
0080f814 g     F .text	0000017c OSQPendAbort
00812c98 g     F .text	00000034 alt_irq_init
0080a450 g     F .text	00000060 alt_release_fd
0081409c g     F .text	00000034 alt_up_character_lcd_cursor_off
00815bd0 g     O .rodata	00000100 __clz_tab
0081946c g     O .bss	00000004 _PathLocale
0081555c g     F .text	00000014 atexit
0080732c g     F .text	00000078 _write_r
0080b4c4 g     F .text	0000008c OSSchedLock
00804e70 g     F .text	0000001c setlocale
0080cfb4 g     F .text	0000013c OSFlagCreate
00817894 g     O .rwdata	00000004 _impure_ptr
00819484 g     O .bss	00000004 alt_argc
00814414 g     F .text	00000064 _do_dtors
008178e2 g     O .rwdata	00000002 OSEventMultiEn
0080d0f0 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
008194d4 g     O .bss	00000004 OSEventFreeList
01104020 g       .exceptions	00000000 alt_irq_entry
00805c18 g     F .text	00000080 __ulp
00807044 g     F .text	00000040 __isinfd
0080d630 g     F .text	00000644 OSFlagPend
0081792e g     O .rwdata	00000002 OSTmrEn
008041c8 g     F .text	00000018 __fp_unlock_all
008178ac g     O .rwdata	00000008 alt_fs_list
0080c550 g     F .text	00000080 OS_StrCopy
008178f8 g     O .rwdata	00000002 OSMemNameSize
00815260 g     F .text	0000001c OSInitHookEnd
01104020 g       *ABS*	00000000 __ram_exceptions_start
00817924 g     O .rwdata	00000002 OSTCBPrioTblMax
00804ddc g     F .text	00000010 localeconv
00817920 g     O .rwdata	00000002 OSTaskStatStkChkEn
0081453c g     F .text	00000050 alt_ic_isr_register
008178f4 g     O .rwdata	00000002 OSMemEn
008178fe g     O .rwdata	00000002 OSMutexEn
00817950 g       *ABS*	00000000 _edata
008209d8 g       *ABS*	00000000 _end
008194d8 g     O .bss	00000001 OSIntNesting
011041bc g       *ABS*	00000000 __ram_exceptions_end
00813444 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008129c0 g     F .text	00000210 OSTimeDlyResume
0080d4dc g     F .text	00000154 OSFlagNameSet
00812118 g     F .text	000001fc OSTaskStkChk
00814628 g     F .text	000000a0 alt_ic_irq_disable
008178fa g     O .rwdata	00000002 OSMemSize
00807194 g     F .text	0000007c __swrite
008178a4 g     O .rwdata	00000004 __malloc_trim_threshold
00814db0 g     F .text	00000020 altera_nios2_qsys_irq_init
008194dc g     O .bss	00000004 OSTCBCur
00815570 g     F .text	00000038 exit
008178fc g     O .rwdata	00000002 OSMemTblSize
00804c48 g     F .text	000000c8 _fwalk_reent
00806214 g     F .text	0000018c __mdiff
00809554 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01104020 g     F .exceptions	00000000 alt_exception
00804108 g     F .text	00000004 __sfp_lock_release
0080b2f4 g     F .text	00000054 OSInit
00812540 g     F .text	00000144 OSTaskQuery
00813d70 g     F .text	00000078 alt_up_character_lcd_string
0081004c g     F .text	000000ac OS_QInit
0080c5d0 g     F .text	00000058 OS_StrLen
0080e9e8 g     F .text	00000120 OSMemNameSet
00817916 g     O .rwdata	00000002 OSTaskProfileEn
008194e0 g     O .bss	00000004 OSTime
0081eea4 g     O .bss	00000800 OSTaskIdleStk
00815944 g     F .text	0000002c _exit
00807084 g     F .text	00000030 __isnand
00814104 g     F .text	00000154 alt_alarm_start
0080d398 g     F .text	00000144 OSFlagNameGet
00812bd0 g     F .text	00000064 OSTimeGet
008095c4 g     F .text	00000098 __muldi3
00804e8c g     F .text	00000194 __smakebuf_r
008005d8 g     F .text	00000074 strlen
008151f0 g     F .text	0000001c OSTaskSwHook
00814a20 g     F .text	00000188 open
0081f6a4 g     O .bss	00000b40 OSEventTbl
00809004 g     F .text	00000088 __gedf2
008201e4 g     O .bss	00000510 OSTCBTbl
00810bbc g     F .text	00000104 OSSemSet
0081450c g     F .text	00000030 alt_icache_flush_all
00813e34 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
00817944 g     O .rwdata	00000004 alt_priority_mask
008102cc g     F .text	000002a0 OSSemDel
008194e4 g     O .bss	00000004 OSFlagFreeList
0081458c g     F .text	0000009c alt_ic_irq_enable
008178dc g     O .rwdata	00000002 OSEventNameSize
00802550 g     F .text	00000024 __vfprintf_internal
008194e8 g     O .bss	00000001 OSStatRdy
008206f4 g     O .bss	00000054 OSTCBPrioTbl
0080a6ec g     F .text	000000ac __env_lock
00817922 g     O .rwdata	00000002 OSTaskSwHookEn
0080875c g     F .text	00000080 __subdf3
00805af4 g     F .text	000000c4 __lo0bits
00817948 g     O .rwdata	00000008 alt_alarm_list
008178ea g     O .rwdata	00000002 OSFlagWidth
008143b0 g     F .text	00000064 _do_ctors
00809bf0 g     F .text	000000fc close
00819494 g     O .bss	00000004 alt_envsem
008194ec g     O .bss	00000004 OSIdleCtrRun
0080b990 g     F .text	00000020 OSVersion
00817934 g     O .rwdata	00000002 OSTmrCfgWheelSize
00809fcc g     F .text	00000080 alt_load
00812684 g     F .text	0000007c OS_TaskStkClr
008096dc g     F .text	00000314 __pack_d
0081790e g     O .rwdata	00000002 OSTaskCreateEn
0080bf80 g     F .text	00000068 OS_EventWaitListInit
0081527c g     F .text	0000001c OSTaskIdleHook
00000000  w      *UND*	00000000 free
0080410c g     F .text	00000004 __sinit_lock_acquire
00806710 g     F .text	00000100 __multadd
00812314 g     F .text	0000022c OSTaskSuspend
00805a5c g     F .text	00000028 _Bfree
0080c628 g     F .text	0000005c OS_TaskIdle
0081793a g     O .rwdata	00000002 OSTmrTblSize
0080fecc g     F .text	00000180 OSQQuery



Disassembly of section .entry:

01104000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1104000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 1104004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1104008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 110400c:	00bffd16 	blt	zero,r2,1104004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1104010:	00402034 	movhi	at,128
    ori r1, r1, %lo(_start)
 1104014:	08406714 	ori	at,at,412
    jmp r1
 1104018:	0800683a 	jmp	at
 110401c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

01104020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1104020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1104024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1104028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 110402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1104030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1104034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1104038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 110403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1104040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1104044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1104048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 110404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1104050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1104054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1104058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 110405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1104060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1104064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1104068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 110406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1104070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1104074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1104078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 110407c:	10000326 	beq	r2,zero,110408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1104080:	20000226 	beq	r4,zero,110408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1104084:	11040ec0 	call	11040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1104088:	00000306 	br	1104098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 110408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1104090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1104094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1104098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 110409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 11040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 11040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 11040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 11040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 11040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 11040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 11040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 11040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 11040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 11040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 11040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 11040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 11040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 11040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 11040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 11040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 11040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 11040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 11040e8:	ef80083a 	eret

011040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 11040ec:	defff904 	addi	sp,sp,-28
 11040f0:	dfc00615 	stw	ra,24(sp)
 11040f4:	df000515 	stw	fp,20(sp)
 11040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 11040fc:	080b3480 	call	80b348 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104100:	0005313a 	rdctl	r2,ipending
 1104104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1104108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 110410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1104110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1104114:	00800044 	movi	r2,1
 1104118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 110411c:	e0ffff17 	ldw	r3,-4(fp)
 1104120:	e0bffe17 	ldw	r2,-8(fp)
 1104124:	1884703a 	and	r2,r3,r2
 1104128:	1005003a 	cmpeq	r2,r2,zero
 110412c:	1000161e 	bne	r2,zero,1104188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1104130:	e0bffd17 	ldw	r2,-12(fp)
 1104134:	00c020b4 	movhi	r3,130
 1104138:	18c1d204 	addi	r3,r3,1864
 110413c:	100490fa 	slli	r2,r2,3
 1104140:	10c5883a 	add	r2,r2,r3
 1104144:	11400017 	ldw	r5,0(r2)
 1104148:	e0bffd17 	ldw	r2,-12(fp)
 110414c:	00c020b4 	movhi	r3,130
 1104150:	18c1d204 	addi	r3,r3,1864
 1104154:	100490fa 	slli	r2,r2,3
 1104158:	10c5883a 	add	r2,r2,r3
 110415c:	10800104 	addi	r2,r2,4
 1104160:	11000017 	ldw	r4,0(r2)
 1104164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1104168:	0005313a 	rdctl	r2,ipending
 110416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1104170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1104174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1104178:	e0bfff17 	ldw	r2,-4(fp)
 110417c:	1004c03a 	cmpne	r2,r2,zero
 1104180:	103fe31e 	bne	r2,zero,1104110 <alt_irq_handler+0x24>
 1104184:	00000706 	br	11041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1104188:	e0bffe17 	ldw	r2,-8(fp)
 110418c:	1085883a 	add	r2,r2,r2
 1104190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1104194:	e0bffd17 	ldw	r2,-12(fp)
 1104198:	10800044 	addi	r2,r2,1
 110419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 11041a0:	003fde06 	br	110411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 11041a4:	080b3c40 	call	80b3c4 <OSIntExit>
}
 11041a8:	e037883a 	mov	sp,fp
 11041ac:	dfc00117 	ldw	ra,4(sp)
 11041b0:	df000017 	ldw	fp,0(sp)
 11041b4:	dec00204 	addi	sp,sp,8
 11041b8:	f800283a 	ret

Disassembly of section .text:

0080019c <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  80019c:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  8001a0:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  8001a4:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
  8001a8:	00bffd16 	blt	zero,r2,8001a0 <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  8001ac:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  8001b0:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  8001b4:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  8001b8:	d6be2514 	ori	gp,gp,63636
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  8001bc:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  8001c0:	10a51814 	ori	r2,r2,37984

    movhi r3, %hi(__bss_end)
  8001c4:	00c020b4 	movhi	r3,130
    ori r3, r3, %lo(__bss_end)
  8001c8:	18c27614 	ori	r3,r3,2520

    beq r2, r3, 1f
  8001cc:	10c00326 	beq	r2,r3,8001dc <_start+0x40>

0:
    stw zero, (r2)
  8001d0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  8001d4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  8001d8:	10fffd36 	bltu	r2,r3,8001d0 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  8001dc:	0809fcc0 	call	809fcc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  8001e0:	080a2080 	call	80a208 <alt_main>

008001e4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  8001e4:	003fff06 	br	8001e4 <alt_after_alt_main>

008001e8 <task1>:

alt_up_character_lcd_dev *char_lcd;

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
  8001e8:	defffa04 	addi	sp,sp,-24
  8001ec:	dfc00515 	stw	ra,20(sp)
  8001f0:	df000415 	stw	fp,16(sp)
  8001f4:	df000404 	addi	fp,sp,16
  8001f8:	e13fff15 	stw	r4,-4(fp)

	int *sw0 = (int*)SWITCH_BASE;
  8001fc:	00804474 	movhi	r2,273
  800200:	10a40c04 	addi	r2,r2,-28624
  800204:	e0bffe15 	stw	r2,-8(fp)
	int *sw1 = (int*)SWITCH_0_BASE;
  800208:	00804474 	movhi	r2,273
  80020c:	10a40804 	addi	r2,r2,-28640
  800210:	e0bffd15 	stw	r2,-12(fp)
	char *p = SERVO_PWM_0_BASE;
  800214:	00804474 	movhi	r2,273
  800218:	10a41c84 	addi	r2,r2,-28558
  80021c:	e0bffc15 	stw	r2,-16(fp)
  while (1)
  { 
	  if (*sw0 == SWITCH_HAS_IN && *sw1 == SWITCH_HAS_OUT){
  800220:	e0bffe17 	ldw	r2,-8(fp)
  800224:	10800017 	ldw	r2,0(r2)
  800228:	10800058 	cmpnei	r2,r2,1
  80022c:	10000c1e 	bne	r2,zero,800260 <task1+0x78>
  800230:	e0bffd17 	ldw	r2,-12(fp)
  800234:	10800017 	ldw	r2,0(r2)
  800238:	1004c03a 	cmpne	r2,r2,zero
  80023c:	1000081e 	bne	r2,zero,800260 <task1+0x78>
		  IOWR_8DIRECT(SERVO_PWM_0_BASE, 0, 0x11);
  800240:	00c04474 	movhi	r3,273
  800244:	18e41c84 	addi	r3,r3,-28558
  800248:	00800444 	movi	r2,17
  80024c:	18800025 	stbio	r2,0(r3)
//		  clear_lcd(char_lcd);
//		  alt_up_character_lcd_set_cursor_pos(char_lcd,0,0);
//		  alt_up_character_lcd_string(char_lcd, "CW");
		printf("CW\n");
  800250:	01002074 	movhi	r4,129
  800254:	21165d04 	addi	r4,r4,22900
  800258:	08005c40 	call	8005c4 <puts>
	int *sw0 = (int*)SWITCH_BASE;
	int *sw1 = (int*)SWITCH_0_BASE;
	char *p = SERVO_PWM_0_BASE;
  while (1)
  { 
	  if (*sw0 == SWITCH_HAS_IN && *sw1 == SWITCH_HAS_OUT){
  80025c:	00001606 	br	8002b8 <task1+0xd0>
		printf("CW\n");
	  	}



	  else if (*sw1 == SWITCH_HAS_IN && *sw0 == SWITCH_HAS_OUT){
  800260:	e0bffd17 	ldw	r2,-12(fp)
  800264:	10800017 	ldw	r2,0(r2)
  800268:	10800058 	cmpnei	r2,r2,1
  80026c:	10000c1e 	bne	r2,zero,8002a0 <task1+0xb8>
  800270:	e0bffe17 	ldw	r2,-8(fp)
  800274:	10800017 	ldw	r2,0(r2)
  800278:	1004c03a 	cmpne	r2,r2,zero
  80027c:	1000081e 	bne	r2,zero,8002a0 <task1+0xb8>
		  IOWR_8DIRECT(SERVO_PWM_0_BASE, 0, 0xFF);
  800280:	00c04474 	movhi	r3,273
  800284:	18e41c84 	addi	r3,r3,-28558
  800288:	00803fc4 	movi	r2,255
  80028c:	18800025 	stbio	r2,0(r3)
//		  clear_lcd(char_lcd);
//		  alt_up_character_lcd_set_cursor_pos(char_lcd,0,0);
//		  alt_up_character_lcd_string(char_lcd, "CCW");
		printf("CCW\n");
  800290:	01002074 	movhi	r4,129
  800294:	21165e04 	addi	r4,r4,22904
  800298:	08005c40 	call	8005c4 <puts>
		printf("CW\n");
	  	}



	  else if (*sw1 == SWITCH_HAS_IN && *sw0 == SWITCH_HAS_OUT){
  80029c:	00000606 	br	8002b8 <task1+0xd0>
//		  alt_up_character_lcd_string(char_lcd, "CCW");
		printf("CCW\n");
	  }

	  else{
		IOWR_8DIRECT(SERVO_PWM_0_BASE, 0, 0x00);
  8002a0:	00804474 	movhi	r2,273
  8002a4:	10a41c84 	addi	r2,r2,-28558
  8002a8:	10000025 	stbio	zero,0(r2)
//		clear_lcd(char_lcd);
//		alt_up_character_lcd_set_cursor_pos(char_lcd,0,0);
//		alt_up_character_lcd_string(char_lcd, "NEUTRAL");
		printf("NEUTRAL\n");
  8002ac:	01002074 	movhi	r4,129
  8002b0:	21165f04 	addi	r4,r4,22908
  8002b4:	08005c40 	call	8005c4 <puts>
	  }
	  printf("%x %x\n",p[0],p[1]);
  8002b8:	e0bffc17 	ldw	r2,-16(fp)
  8002bc:	10800003 	ldbu	r2,0(r2)
  8002c0:	11403fcc 	andi	r5,r2,255
  8002c4:	2940201c 	xori	r5,r5,128
  8002c8:	297fe004 	addi	r5,r5,-128
  8002cc:	e0bffc17 	ldw	r2,-16(fp)
  8002d0:	10800044 	addi	r2,r2,1
  8002d4:	10800003 	ldbu	r2,0(r2)
  8002d8:	11803fcc 	andi	r6,r2,255
  8002dc:	3180201c 	xori	r6,r6,128
  8002e0:	31bfe004 	addi	r6,r6,-128
  8002e4:	01002074 	movhi	r4,129
  8002e8:	21166104 	addi	r4,r4,22916
  8002ec:	08004ac0 	call	8004ac <printf>

	  OSTimeDlyHMSM(0, 0, 5, 0);
  8002f0:	0009883a 	mov	r4,zero
  8002f4:	000b883a 	mov	r5,zero
  8002f8:	01800144 	movi	r6,5
  8002fc:	000f883a 	mov	r7,zero
  800300:	081284c0 	call	81284c <OSTimeDlyHMSM>
  }
  800304:	003fc606 	br	800220 <task1+0x38>

00800308 <task2>:
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  800308:	defffd04 	addi	sp,sp,-12
  80030c:	dfc00215 	stw	ra,8(sp)
  800310:	df000115 	stw	fp,4(sp)
  800314:	df000104 	addi	fp,sp,4
  800318:	e13fff15 	stw	r4,-4(fp)
  while (1)
  {
//    printf("Hello from task2\n");
    OSTimeDlyHMSM(0, 0, 3, 0);
  80031c:	0009883a 	mov	r4,zero
  800320:	000b883a 	mov	r5,zero
  800324:	018000c4 	movi	r6,3
  800328:	000f883a 	mov	r7,zero
  80032c:	081284c0 	call	81284c <OSTimeDlyHMSM>
  }
  800330:	003ffa06 	br	80031c <task2+0x14>

00800334 <clear_lcd>:
}


void clear_lcd(alt_up_character_lcd_dev *lcd){
  800334:	defffb04 	addi	sp,sp,-20
  800338:	dfc00415 	stw	ra,16(sp)
  80033c:	df000315 	stw	fp,12(sp)
  800340:	df000304 	addi	fp,sp,12
  800344:	e13fff15 	stw	r4,-4(fp)
	int x = 0;
  800348:	e03ffe15 	stw	zero,-8(fp)
	int y = 0;
  80034c:	e03ffd15 	stw	zero,-12(fp)
	for(y = 0; y < 2; y++){
  800350:	e03ffd15 	stw	zero,-12(fp)
  800354:	00001306 	br	8003a4 <clear_lcd+0x70>
		for(x = 0; x < 16; x++){
  800358:	e03ffe15 	stw	zero,-8(fp)
  80035c:	00000b06 	br	80038c <clear_lcd+0x58>
			alt_up_character_lcd_set_cursor_pos(lcd,0,0);
  800360:	e13fff17 	ldw	r4,-4(fp)
  800364:	000b883a 	mov	r5,zero
  800368:	000d883a 	mov	r6,zero
  80036c:	0813e340 	call	813e34 <alt_up_character_lcd_set_cursor_pos>
			alt_up_character_lcd_erase_pos(lcd,x,y);
  800370:	e17ffe17 	ldw	r5,-8(fp)
  800374:	e1bffd17 	ldw	r6,-12(fp)
  800378:	e13fff17 	ldw	r4,-4(fp)
  80037c:	081400c0 	call	81400c <alt_up_character_lcd_erase_pos>

void clear_lcd(alt_up_character_lcd_dev *lcd){
	int x = 0;
	int y = 0;
	for(y = 0; y < 2; y++){
		for(x = 0; x < 16; x++){
  800380:	e0bffe17 	ldw	r2,-8(fp)
  800384:	10800044 	addi	r2,r2,1
  800388:	e0bffe15 	stw	r2,-8(fp)
  80038c:	e0bffe17 	ldw	r2,-8(fp)
  800390:	10800410 	cmplti	r2,r2,16
  800394:	103ff21e 	bne	r2,zero,800360 <clear_lcd+0x2c>


void clear_lcd(alt_up_character_lcd_dev *lcd){
	int x = 0;
	int y = 0;
	for(y = 0; y < 2; y++){
  800398:	e0bffd17 	ldw	r2,-12(fp)
  80039c:	10800044 	addi	r2,r2,1
  8003a0:	e0bffd15 	stw	r2,-12(fp)
  8003a4:	e0bffd17 	ldw	r2,-12(fp)
  8003a8:	10800090 	cmplti	r2,r2,2
  8003ac:	103fea1e 	bne	r2,zero,800358 <clear_lcd+0x24>
		for(x = 0; x < 16; x++){
			alt_up_character_lcd_set_cursor_pos(lcd,0,0);
			alt_up_character_lcd_erase_pos(lcd,x,y);
		}
	}
}
  8003b0:	e037883a 	mov	sp,fp
  8003b4:	dfc00117 	ldw	ra,4(sp)
  8003b8:	df000017 	ldw	fp,0(sp)
  8003bc:	dec00204 	addi	sp,sp,8
  8003c0:	f800283a 	ret

008003c4 <main>:

/* The main function creates two task and starts multi-tasking */
int main(void)
{
  8003c4:	defff904 	addi	sp,sp,-28
  8003c8:	dfc00615 	stw	ra,24(sp)
  8003cc:	df000515 	stw	fp,20(sp)
  8003d0:	df000504 	addi	fp,sp,20
	char_lcd = alt_up_character_lcd_open_dev("/dev/character_lcd_0");
  8003d4:	01002074 	movhi	r4,129
  8003d8:	21166304 	addi	r4,r4,22924
  8003dc:	0813cb80 	call	813cb8 <alt_up_character_lcd_open_dev>
  8003e0:	d0a6f315 	stw	r2,-25652(gp)
	if(char_lcd ==NULL){
  8003e4:	d0a6f317 	ldw	r2,-25652(gp)
  8003e8:	1004c03a 	cmpne	r2,r2,zero
  8003ec:	1000031e 	bne	r2,zero,8003fc <main+0x38>
	printf("Could not open lcd device\n");}
  8003f0:	01002074 	movhi	r4,129
  8003f4:	21166904 	addi	r4,r4,22948
  8003f8:	08005c40 	call	8005c4 <puts>

	alt_up_character_lcd_init(char_lcd);
  8003fc:	d126f317 	ldw	r4,-25652(gp)
  800400:	0813c840 	call	813c84 <alt_up_character_lcd_init>
//	alt_up_character_lcd_cursor_off(char_lcd);
	IOWR_8DIRECT(SERVO_PWM_0_BASE, 0, 0x00);
  800404:	00804474 	movhi	r2,273
  800408:	10a41c84 	addi	r2,r2,-28558
  80040c:	10000025 	stbio	zero,0(r2)

  OSTaskCreateExt(task1,
  800410:	018020b4 	movhi	r6,130
  800414:	31ad4804 	addi	r6,r6,-19168
  800418:	00800044 	movi	r2,1
  80041c:	d8800015 	stw	r2,0(sp)
  800420:	008020b4 	movhi	r2,130
  800424:	10a54904 	addi	r2,r2,-27356
  800428:	d8800115 	stw	r2,4(sp)
  80042c:	00820004 	movi	r2,2048
  800430:	d8800215 	stw	r2,8(sp)
  800434:	d8000315 	stw	zero,12(sp)
  800438:	d8000415 	stw	zero,16(sp)
  80043c:	01002034 	movhi	r4,128
  800440:	21007a04 	addi	r4,r4,488
  800444:	000b883a 	mov	r5,zero
  800448:	01c00044 	movi	r7,1
  80044c:	08114080 	call	811408 <OSTaskCreateExt>
                  TASK_STACKSIZE,
                  NULL,
                  0);
              

  OSTaskCreateExt(task2,
  800450:	018020b4 	movhi	r6,130
  800454:	31b54804 	addi	r6,r6,-10976
  800458:	00800084 	movi	r2,2
  80045c:	d8800015 	stw	r2,0(sp)
  800460:	008020b4 	movhi	r2,130
  800464:	10ad4904 	addi	r2,r2,-19164
  800468:	d8800115 	stw	r2,4(sp)
  80046c:	00820004 	movi	r2,2048
  800470:	d8800215 	stw	r2,8(sp)
  800474:	d8000315 	stw	zero,12(sp)
  800478:	d8000415 	stw	zero,16(sp)
  80047c:	01002034 	movhi	r4,128
  800480:	2100c204 	addi	r4,r4,776
  800484:	000b883a 	mov	r5,zero
  800488:	01c00084 	movi	r7,2
  80048c:	08114080 	call	811408 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
  OSStart();
  800490:	080b6340 	call	80b634 <OSStart>
  return 0;
  800494:	0005883a 	mov	r2,zero
}
  800498:	e037883a 	mov	sp,fp
  80049c:	dfc00117 	ldw	ra,4(sp)
  8004a0:	df000017 	ldw	fp,0(sp)
  8004a4:	dec00204 	addi	sp,sp,8
  8004a8:	f800283a 	ret

008004ac <printf>:
  8004ac:	defffb04 	addi	sp,sp,-20
  8004b0:	dfc00115 	stw	ra,4(sp)
  8004b4:	d9400215 	stw	r5,8(sp)
  8004b8:	d9800315 	stw	r6,12(sp)
  8004bc:	d9c00415 	stw	r7,16(sp)
  8004c0:	00802074 	movhi	r2,129
  8004c4:	109e2504 	addi	r2,r2,30868
  8004c8:	10c00017 	ldw	r3,0(r2)
  8004cc:	200b883a 	mov	r5,r4
  8004d0:	d8800204 	addi	r2,sp,8
  8004d4:	19000217 	ldw	r4,8(r3)
  8004d8:	100d883a 	mov	r6,r2
  8004dc:	d8800015 	stw	r2,0(sp)
  8004e0:	08025500 	call	802550 <__vfprintf_internal>
  8004e4:	dfc00117 	ldw	ra,4(sp)
  8004e8:	dec00504 	addi	sp,sp,20
  8004ec:	f800283a 	ret

008004f0 <_printf_r>:
  8004f0:	defffc04 	addi	sp,sp,-16
  8004f4:	dfc00115 	stw	ra,4(sp)
  8004f8:	d9800215 	stw	r6,8(sp)
  8004fc:	d9c00315 	stw	r7,12(sp)
  800500:	280d883a 	mov	r6,r5
  800504:	21400217 	ldw	r5,8(r4)
  800508:	d8c00204 	addi	r3,sp,8
  80050c:	180f883a 	mov	r7,r3
  800510:	d8c00015 	stw	r3,0(sp)
  800514:	08006a40 	call	8006a4 <___vfprintf_internal_r>
  800518:	dfc00117 	ldw	ra,4(sp)
  80051c:	dec00404 	addi	sp,sp,16
  800520:	f800283a 	ret

00800524 <_puts_r>:
  800524:	defff604 	addi	sp,sp,-40
  800528:	dc400715 	stw	r17,28(sp)
  80052c:	2023883a 	mov	r17,r4
  800530:	2809883a 	mov	r4,r5
  800534:	dfc00915 	stw	ra,36(sp)
  800538:	dcc00815 	stw	r19,32(sp)
  80053c:	2827883a 	mov	r19,r5
  800540:	08005d80 	call	8005d8 <strlen>
  800544:	89400217 	ldw	r5,8(r17)
  800548:	00c02074 	movhi	r3,129
  80054c:	18d67004 	addi	r3,r3,22976
  800550:	01c00044 	movi	r7,1
  800554:	12000044 	addi	r8,r2,1
  800558:	d8c00515 	stw	r3,20(sp)
  80055c:	d9c00615 	stw	r7,24(sp)
  800560:	d8c00304 	addi	r3,sp,12
  800564:	01c00084 	movi	r7,2
  800568:	8809883a 	mov	r4,r17
  80056c:	d80d883a 	mov	r6,sp
  800570:	d8c00015 	stw	r3,0(sp)
  800574:	dcc00315 	stw	r19,12(sp)
  800578:	da000215 	stw	r8,8(sp)
  80057c:	d9c00115 	stw	r7,4(sp)
  800580:	d8800415 	stw	r2,16(sp)
  800584:	08047ac0 	call	8047ac <__sfvwrite_r>
  800588:	00ffffc4 	movi	r3,-1
  80058c:	10000626 	beq	r2,zero,8005a8 <_puts_r+0x84>
  800590:	1805883a 	mov	r2,r3
  800594:	dfc00917 	ldw	ra,36(sp)
  800598:	dcc00817 	ldw	r19,32(sp)
  80059c:	dc400717 	ldw	r17,28(sp)
  8005a0:	dec00a04 	addi	sp,sp,40
  8005a4:	f800283a 	ret
  8005a8:	00c00284 	movi	r3,10
  8005ac:	1805883a 	mov	r2,r3
  8005b0:	dfc00917 	ldw	ra,36(sp)
  8005b4:	dcc00817 	ldw	r19,32(sp)
  8005b8:	dc400717 	ldw	r17,28(sp)
  8005bc:	dec00a04 	addi	sp,sp,40
  8005c0:	f800283a 	ret

008005c4 <puts>:
  8005c4:	00802074 	movhi	r2,129
  8005c8:	109e2504 	addi	r2,r2,30868
  8005cc:	200b883a 	mov	r5,r4
  8005d0:	11000017 	ldw	r4,0(r2)
  8005d4:	08005241 	jmpi	800524 <_puts_r>

008005d8 <strlen>:
  8005d8:	208000cc 	andi	r2,r4,3
  8005dc:	2011883a 	mov	r8,r4
  8005e0:	1000161e 	bne	r2,zero,80063c <strlen+0x64>
  8005e4:	20c00017 	ldw	r3,0(r4)
  8005e8:	017fbff4 	movhi	r5,65279
  8005ec:	297fbfc4 	addi	r5,r5,-257
  8005f0:	01e02074 	movhi	r7,32897
  8005f4:	39e02004 	addi	r7,r7,-32640
  8005f8:	1945883a 	add	r2,r3,r5
  8005fc:	11c4703a 	and	r2,r2,r7
  800600:	00c6303a 	nor	r3,zero,r3
  800604:	1886703a 	and	r3,r3,r2
  800608:	18000c1e 	bne	r3,zero,80063c <strlen+0x64>
  80060c:	280d883a 	mov	r6,r5
  800610:	380b883a 	mov	r5,r7
  800614:	21000104 	addi	r4,r4,4
  800618:	20800017 	ldw	r2,0(r4)
  80061c:	1187883a 	add	r3,r2,r6
  800620:	1946703a 	and	r3,r3,r5
  800624:	0084303a 	nor	r2,zero,r2
  800628:	10c4703a 	and	r2,r2,r3
  80062c:	103ff926 	beq	r2,zero,800614 <strlen+0x3c>
  800630:	20800007 	ldb	r2,0(r4)
  800634:	10000326 	beq	r2,zero,800644 <strlen+0x6c>
  800638:	21000044 	addi	r4,r4,1
  80063c:	20800007 	ldb	r2,0(r4)
  800640:	103ffd1e 	bne	r2,zero,800638 <strlen+0x60>
  800644:	2205c83a 	sub	r2,r4,r8
  800648:	f800283a 	ret

0080064c <__sprint_r>:
  80064c:	30800217 	ldw	r2,8(r6)
  800650:	defffe04 	addi	sp,sp,-8
  800654:	dc000015 	stw	r16,0(sp)
  800658:	dfc00115 	stw	ra,4(sp)
  80065c:	3021883a 	mov	r16,r6
  800660:	0007883a 	mov	r3,zero
  800664:	1000061e 	bne	r2,zero,800680 <__sprint_r+0x34>
  800668:	1805883a 	mov	r2,r3
  80066c:	30000115 	stw	zero,4(r6)
  800670:	dfc00117 	ldw	ra,4(sp)
  800674:	dc000017 	ldw	r16,0(sp)
  800678:	dec00204 	addi	sp,sp,8
  80067c:	f800283a 	ret
  800680:	08047ac0 	call	8047ac <__sfvwrite_r>
  800684:	1007883a 	mov	r3,r2
  800688:	1805883a 	mov	r2,r3
  80068c:	80000115 	stw	zero,4(r16)
  800690:	80000215 	stw	zero,8(r16)
  800694:	dfc00117 	ldw	ra,4(sp)
  800698:	dc000017 	ldw	r16,0(sp)
  80069c:	dec00204 	addi	sp,sp,8
  8006a0:	f800283a 	ret

008006a4 <___vfprintf_internal_r>:
  8006a4:	defea404 	addi	sp,sp,-1392
  8006a8:	dd815815 	stw	r22,1376(sp)
  8006ac:	dc015215 	stw	r16,1352(sp)
  8006b0:	d9c15115 	stw	r7,1348(sp)
  8006b4:	dfc15b15 	stw	ra,1388(sp)
  8006b8:	df015a15 	stw	fp,1384(sp)
  8006bc:	ddc15915 	stw	r23,1380(sp)
  8006c0:	dd415715 	stw	r21,1372(sp)
  8006c4:	dd015615 	stw	r20,1368(sp)
  8006c8:	dcc15515 	stw	r19,1364(sp)
  8006cc:	dc815415 	stw	r18,1360(sp)
  8006d0:	dc415315 	stw	r17,1356(sp)
  8006d4:	282d883a 	mov	r22,r5
  8006d8:	3021883a 	mov	r16,r6
  8006dc:	d9014f15 	stw	r4,1340(sp)
  8006e0:	0804dd00 	call	804dd0 <_localeconv_r>
  8006e4:	10800017 	ldw	r2,0(r2)
  8006e8:	d9c15117 	ldw	r7,1348(sp)
  8006ec:	d8814915 	stw	r2,1316(sp)
  8006f0:	d8814f17 	ldw	r2,1340(sp)
  8006f4:	10000226 	beq	r2,zero,800700 <___vfprintf_internal_r+0x5c>
  8006f8:	10800e17 	ldw	r2,56(r2)
  8006fc:	10020d26 	beq	r2,zero,800f34 <___vfprintf_internal_r+0x890>
  800700:	b080030b 	ldhu	r2,12(r22)
  800704:	1080020c 	andi	r2,r2,8
  800708:	10020e26 	beq	r2,zero,800f44 <___vfprintf_internal_r+0x8a0>
  80070c:	b0800417 	ldw	r2,16(r22)
  800710:	10020c26 	beq	r2,zero,800f44 <___vfprintf_internal_r+0x8a0>
  800714:	b200030b 	ldhu	r8,12(r22)
  800718:	00800284 	movi	r2,10
  80071c:	40c0068c 	andi	r3,r8,26
  800720:	18802f1e 	bne	r3,r2,8007e0 <___vfprintf_internal_r+0x13c>
  800724:	b080038f 	ldh	r2,14(r22)
  800728:	10002d16 	blt	r2,zero,8007e0 <___vfprintf_internal_r+0x13c>
  80072c:	b240038b 	ldhu	r9,14(r22)
  800730:	b2800717 	ldw	r10,28(r22)
  800734:	b2c00917 	ldw	r11,36(r22)
  800738:	d9014f17 	ldw	r4,1340(sp)
  80073c:	dc402904 	addi	r17,sp,164
  800740:	d8804004 	addi	r2,sp,256
  800744:	00c10004 	movi	r3,1024
  800748:	423fff4c 	andi	r8,r8,65533
  80074c:	800d883a 	mov	r6,r16
  800750:	880b883a 	mov	r5,r17
  800754:	da002c0d 	sth	r8,176(sp)
  800758:	da402c8d 	sth	r9,178(sp)
  80075c:	da803015 	stw	r10,192(sp)
  800760:	dac03215 	stw	r11,200(sp)
  800764:	d8802d15 	stw	r2,180(sp)
  800768:	d8c02e15 	stw	r3,184(sp)
  80076c:	d8802915 	stw	r2,164(sp)
  800770:	d8c02b15 	stw	r3,172(sp)
  800774:	d8002f15 	stw	zero,188(sp)
  800778:	08006a40 	call	8006a4 <___vfprintf_internal_r>
  80077c:	d8814b15 	stw	r2,1324(sp)
  800780:	10000416 	blt	r2,zero,800794 <___vfprintf_internal_r+0xf0>
  800784:	d9014f17 	ldw	r4,1340(sp)
  800788:	880b883a 	mov	r5,r17
  80078c:	0803e7c0 	call	803e7c <_fflush_r>
  800790:	1002321e 	bne	r2,zero,80105c <___vfprintf_internal_r+0x9b8>
  800794:	d8802c0b 	ldhu	r2,176(sp)
  800798:	1080100c 	andi	r2,r2,64
  80079c:	10000326 	beq	r2,zero,8007ac <___vfprintf_internal_r+0x108>
  8007a0:	b080030b 	ldhu	r2,12(r22)
  8007a4:	10801014 	ori	r2,r2,64
  8007a8:	b080030d 	sth	r2,12(r22)
  8007ac:	d8814b17 	ldw	r2,1324(sp)
  8007b0:	dfc15b17 	ldw	ra,1388(sp)
  8007b4:	df015a17 	ldw	fp,1384(sp)
  8007b8:	ddc15917 	ldw	r23,1380(sp)
  8007bc:	dd815817 	ldw	r22,1376(sp)
  8007c0:	dd415717 	ldw	r21,1372(sp)
  8007c4:	dd015617 	ldw	r20,1368(sp)
  8007c8:	dcc15517 	ldw	r19,1364(sp)
  8007cc:	dc815417 	ldw	r18,1360(sp)
  8007d0:	dc415317 	ldw	r17,1356(sp)
  8007d4:	dc015217 	ldw	r16,1352(sp)
  8007d8:	dec15c04 	addi	sp,sp,1392
  8007dc:	f800283a 	ret
  8007e0:	0005883a 	mov	r2,zero
  8007e4:	0007883a 	mov	r3,zero
  8007e8:	dd401904 	addi	r21,sp,100
  8007ec:	d8814215 	stw	r2,1288(sp)
  8007f0:	802f883a 	mov	r23,r16
  8007f4:	d8c14315 	stw	r3,1292(sp)
  8007f8:	d8014b15 	stw	zero,1324(sp)
  8007fc:	d8014815 	stw	zero,1312(sp)
  800800:	d8014415 	stw	zero,1296(sp)
  800804:	d8014715 	stw	zero,1308(sp)
  800808:	dd400c15 	stw	r21,48(sp)
  80080c:	d8000e15 	stw	zero,56(sp)
  800810:	d8000d15 	stw	zero,52(sp)
  800814:	b8800007 	ldb	r2,0(r23)
  800818:	10001926 	beq	r2,zero,800880 <___vfprintf_internal_r+0x1dc>
  80081c:	00c00944 	movi	r3,37
  800820:	10c01726 	beq	r2,r3,800880 <___vfprintf_internal_r+0x1dc>
  800824:	b821883a 	mov	r16,r23
  800828:	00000106 	br	800830 <___vfprintf_internal_r+0x18c>
  80082c:	10c00326 	beq	r2,r3,80083c <___vfprintf_internal_r+0x198>
  800830:	84000044 	addi	r16,r16,1
  800834:	80800007 	ldb	r2,0(r16)
  800838:	103ffc1e 	bne	r2,zero,80082c <___vfprintf_internal_r+0x188>
  80083c:	85e7c83a 	sub	r19,r16,r23
  800840:	98000e26 	beq	r19,zero,80087c <___vfprintf_internal_r+0x1d8>
  800844:	dc800e17 	ldw	r18,56(sp)
  800848:	dc400d17 	ldw	r17,52(sp)
  80084c:	008001c4 	movi	r2,7
  800850:	94e5883a 	add	r18,r18,r19
  800854:	8c400044 	addi	r17,r17,1
  800858:	adc00015 	stw	r23,0(r21)
  80085c:	dc800e15 	stw	r18,56(sp)
  800860:	acc00115 	stw	r19,4(r21)
  800864:	dc400d15 	stw	r17,52(sp)
  800868:	14428b16 	blt	r2,r17,801298 <___vfprintf_internal_r+0xbf4>
  80086c:	ad400204 	addi	r21,r21,8
  800870:	d9014b17 	ldw	r4,1324(sp)
  800874:	24c9883a 	add	r4,r4,r19
  800878:	d9014b15 	stw	r4,1324(sp)
  80087c:	802f883a 	mov	r23,r16
  800880:	b8800007 	ldb	r2,0(r23)
  800884:	10013c26 	beq	r2,zero,800d78 <___vfprintf_internal_r+0x6d4>
  800888:	bdc00044 	addi	r23,r23,1
  80088c:	d8000405 	stb	zero,16(sp)
  800890:	b8c00007 	ldb	r3,0(r23)
  800894:	04ffffc4 	movi	r19,-1
  800898:	d8014c15 	stw	zero,1328(sp)
  80089c:	d8014a15 	stw	zero,1320(sp)
  8008a0:	d8c14d15 	stw	r3,1332(sp)
  8008a4:	bdc00044 	addi	r23,r23,1
  8008a8:	d9414d17 	ldw	r5,1332(sp)
  8008ac:	00801604 	movi	r2,88
  8008b0:	28fff804 	addi	r3,r5,-32
  8008b4:	10c06036 	bltu	r2,r3,800a38 <___vfprintf_internal_r+0x394>
  8008b8:	18c5883a 	add	r2,r3,r3
  8008bc:	1085883a 	add	r2,r2,r2
  8008c0:	00c02034 	movhi	r3,128
  8008c4:	18c23504 	addi	r3,r3,2260
  8008c8:	10c5883a 	add	r2,r2,r3
  8008cc:	11000017 	ldw	r4,0(r2)
  8008d0:	2000683a 	jmp	r4
  8008d4:	00801848 	cmpgei	r2,zero,97
  8008d8:	00800a38 	rdprs	r2,zero,40
  8008dc:	00800a38 	rdprs	r2,zero,40
  8008e0:	00801834 	movhi	r2,96
  8008e4:	00800a38 	rdprs	r2,zero,40
  8008e8:	00800a38 	rdprs	r2,zero,40
  8008ec:	00800a38 	rdprs	r2,zero,40
  8008f0:	00800a38 	rdprs	r2,zero,40
  8008f4:	00800a38 	rdprs	r2,zero,40
  8008f8:	00800a38 	rdprs	r2,zero,40
  8008fc:	00801614 	movui	r2,88
  800900:	00801824 	muli	r2,zero,96
  800904:	00800a38 	rdprs	r2,zero,40
  800908:	0080162c 	andhi	r2,zero,88
  80090c:	008018c0 	call	8018c <OSCtxSw_SWITCH_PC+0x8014c>
  800910:	00800a38 	rdprs	r2,zero,40
  800914:	008018ac 	andhi	r2,zero,98
  800918:	00801874 	movhi	r2,97
  80091c:	00801874 	movhi	r2,97
  800920:	00801874 	movhi	r2,97
  800924:	00801874 	movhi	r2,97
  800928:	00801874 	movhi	r2,97
  80092c:	00801874 	movhi	r2,97
  800930:	00801874 	movhi	r2,97
  800934:	00801874 	movhi	r2,97
  800938:	00801874 	movhi	r2,97
  80093c:	00800a38 	rdprs	r2,zero,40
  800940:	00800a38 	rdprs	r2,zero,40
  800944:	00800a38 	rdprs	r2,zero,40
  800948:	00800a38 	rdprs	r2,zero,40
  80094c:	00800a38 	rdprs	r2,zero,40
  800950:	00800a38 	rdprs	r2,zero,40
  800954:	00800a38 	rdprs	r2,zero,40
  800958:	00800a38 	rdprs	r2,zero,40
  80095c:	00800a38 	rdprs	r2,zero,40
  800960:	00800a38 	rdprs	r2,zero,40
  800964:	00801090 	cmplti	r2,zero,66
  800968:	008016fc 	xorhi	r2,zero,91
  80096c:	00800a38 	rdprs	r2,zero,40
  800970:	008016fc 	xorhi	r2,zero,91
  800974:	00800a38 	rdprs	r2,zero,40
  800978:	00800a38 	rdprs	r2,zero,40
  80097c:	00800a38 	rdprs	r2,zero,40
  800980:	00800a38 	rdprs	r2,zero,40
  800984:	00801860 	cmpeqi	r2,zero,97
  800988:	00800a38 	rdprs	r2,zero,40
  80098c:	00800a38 	rdprs	r2,zero,40
  800990:	00801144 	movi	r2,69
  800994:	00800a38 	rdprs	r2,zero,40
  800998:	00800a38 	rdprs	r2,zero,40
  80099c:	00800a38 	rdprs	r2,zero,40
  8009a0:	00800a38 	rdprs	r2,zero,40
  8009a4:	00800a38 	rdprs	r2,zero,40
  8009a8:	00801190 	cmplti	r2,zero,70
  8009ac:	00800a38 	rdprs	r2,zero,40
  8009b0:	00800a38 	rdprs	r2,zero,40
  8009b4:	008017b0 	cmpltui	r2,zero,94
  8009b8:	00800a38 	rdprs	r2,zero,40
  8009bc:	00800a38 	rdprs	r2,zero,40
  8009c0:	00800a38 	rdprs	r2,zero,40
  8009c4:	00800a38 	rdprs	r2,zero,40
  8009c8:	00800a38 	rdprs	r2,zero,40
  8009cc:	00800a38 	rdprs	r2,zero,40
  8009d0:	00800a38 	rdprs	r2,zero,40
  8009d4:	00800a38 	rdprs	r2,zero,40
  8009d8:	00800a38 	rdprs	r2,zero,40
  8009dc:	00800a38 	rdprs	r2,zero,40
  8009e0:	00801784 	movi	r2,94
  8009e4:	0080109c 	xori	r2,zero,66
  8009e8:	008016fc 	xorhi	r2,zero,91
  8009ec:	008016fc 	xorhi	r2,zero,91
  8009f0:	008016fc 	xorhi	r2,zero,91
  8009f4:	008016e8 	cmpgeui	r2,zero,91
  8009f8:	0080109c 	xori	r2,zero,66
  8009fc:	00800a38 	rdprs	r2,zero,40
  800a00:	00800a38 	rdprs	r2,zero,40
  800a04:	00801670 	cmpltui	r2,zero,89
  800a08:	00800a38 	rdprs	r2,zero,40
  800a0c:	00801640 	call	80164 <OSCtxSw_SWITCH_PC+0x80124>
  800a10:	00801150 	cmplti	r2,zero,69
  800a14:	008016a0 	cmpeqi	r2,zero,90
  800a18:	0080168c 	andi	r2,zero,90
  800a1c:	00800a38 	rdprs	r2,zero,40
  800a20:	0080191c 	xori	r2,zero,100
  800a24:	00800a38 	rdprs	r2,zero,40
  800a28:	0080119c 	xori	r2,zero,70
  800a2c:	00800a38 	rdprs	r2,zero,40
  800a30:	00800a38 	rdprs	r2,zero,40
  800a34:	00801814 	movui	r2,96
  800a38:	d9014d17 	ldw	r4,1332(sp)
  800a3c:	2000ce26 	beq	r4,zero,800d78 <___vfprintf_internal_r+0x6d4>
  800a40:	01400044 	movi	r5,1
  800a44:	d9800f04 	addi	r6,sp,60
  800a48:	d9c14015 	stw	r7,1280(sp)
  800a4c:	d9414515 	stw	r5,1300(sp)
  800a50:	d9814115 	stw	r6,1284(sp)
  800a54:	280f883a 	mov	r7,r5
  800a58:	d9000f05 	stb	r4,60(sp)
  800a5c:	d8000405 	stb	zero,16(sp)
  800a60:	d8014615 	stw	zero,1304(sp)
  800a64:	d8c14c17 	ldw	r3,1328(sp)
  800a68:	1880008c 	andi	r2,r3,2
  800a6c:	1005003a 	cmpeq	r2,r2,zero
  800a70:	d8815015 	stw	r2,1344(sp)
  800a74:	1000031e 	bne	r2,zero,800a84 <___vfprintf_internal_r+0x3e0>
  800a78:	d9014517 	ldw	r4,1300(sp)
  800a7c:	21000084 	addi	r4,r4,2
  800a80:	d9014515 	stw	r4,1300(sp)
  800a84:	d9414c17 	ldw	r5,1328(sp)
  800a88:	2940210c 	andi	r5,r5,132
  800a8c:	d9414e15 	stw	r5,1336(sp)
  800a90:	28002d1e 	bne	r5,zero,800b48 <___vfprintf_internal_r+0x4a4>
  800a94:	d9814a17 	ldw	r6,1320(sp)
  800a98:	d8814517 	ldw	r2,1300(sp)
  800a9c:	30a1c83a 	sub	r16,r6,r2
  800aa0:	0400290e 	bge	zero,r16,800b48 <___vfprintf_internal_r+0x4a4>
  800aa4:	00800404 	movi	r2,16
  800aa8:	1404580e 	bge	r2,r16,801c0c <___vfprintf_internal_r+0x1568>
  800aac:	dc800e17 	ldw	r18,56(sp)
  800ab0:	dc400d17 	ldw	r17,52(sp)
  800ab4:	1027883a 	mov	r19,r2
  800ab8:	07002074 	movhi	fp,129
  800abc:	e7168c84 	addi	fp,fp,23090
  800ac0:	050001c4 	movi	r20,7
  800ac4:	00000306 	br	800ad4 <___vfprintf_internal_r+0x430>
  800ac8:	843ffc04 	addi	r16,r16,-16
  800acc:	ad400204 	addi	r21,r21,8
  800ad0:	9c00130e 	bge	r19,r16,800b20 <___vfprintf_internal_r+0x47c>
  800ad4:	94800404 	addi	r18,r18,16
  800ad8:	8c400044 	addi	r17,r17,1
  800adc:	af000015 	stw	fp,0(r21)
  800ae0:	acc00115 	stw	r19,4(r21)
  800ae4:	dc800e15 	stw	r18,56(sp)
  800ae8:	dc400d15 	stw	r17,52(sp)
  800aec:	a47ff60e 	bge	r20,r17,800ac8 <___vfprintf_internal_r+0x424>
  800af0:	d9014f17 	ldw	r4,1340(sp)
  800af4:	b00b883a 	mov	r5,r22
  800af8:	d9800c04 	addi	r6,sp,48
  800afc:	d9c15115 	stw	r7,1348(sp)
  800b00:	080064c0 	call	80064c <__sprint_r>
  800b04:	d9c15117 	ldw	r7,1348(sp)
  800b08:	10009e1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  800b0c:	843ffc04 	addi	r16,r16,-16
  800b10:	dc800e17 	ldw	r18,56(sp)
  800b14:	dc400d17 	ldw	r17,52(sp)
  800b18:	dd401904 	addi	r21,sp,100
  800b1c:	9c3fed16 	blt	r19,r16,800ad4 <___vfprintf_internal_r+0x430>
  800b20:	9425883a 	add	r18,r18,r16
  800b24:	8c400044 	addi	r17,r17,1
  800b28:	008001c4 	movi	r2,7
  800b2c:	af000015 	stw	fp,0(r21)
  800b30:	ac000115 	stw	r16,4(r21)
  800b34:	dc800e15 	stw	r18,56(sp)
  800b38:	dc400d15 	stw	r17,52(sp)
  800b3c:	1441f516 	blt	r2,r17,801314 <___vfprintf_internal_r+0xc70>
  800b40:	ad400204 	addi	r21,r21,8
  800b44:	00000206 	br	800b50 <___vfprintf_internal_r+0x4ac>
  800b48:	dc800e17 	ldw	r18,56(sp)
  800b4c:	dc400d17 	ldw	r17,52(sp)
  800b50:	d8800407 	ldb	r2,16(sp)
  800b54:	10000b26 	beq	r2,zero,800b84 <___vfprintf_internal_r+0x4e0>
  800b58:	00800044 	movi	r2,1
  800b5c:	94800044 	addi	r18,r18,1
  800b60:	8c400044 	addi	r17,r17,1
  800b64:	a8800115 	stw	r2,4(r21)
  800b68:	d8c00404 	addi	r3,sp,16
  800b6c:	008001c4 	movi	r2,7
  800b70:	a8c00015 	stw	r3,0(r21)
  800b74:	dc800e15 	stw	r18,56(sp)
  800b78:	dc400d15 	stw	r17,52(sp)
  800b7c:	1441da16 	blt	r2,r17,8012e8 <___vfprintf_internal_r+0xc44>
  800b80:	ad400204 	addi	r21,r21,8
  800b84:	d9015017 	ldw	r4,1344(sp)
  800b88:	20000b1e 	bne	r4,zero,800bb8 <___vfprintf_internal_r+0x514>
  800b8c:	d8800444 	addi	r2,sp,17
  800b90:	94800084 	addi	r18,r18,2
  800b94:	8c400044 	addi	r17,r17,1
  800b98:	a8800015 	stw	r2,0(r21)
  800b9c:	00c00084 	movi	r3,2
  800ba0:	008001c4 	movi	r2,7
  800ba4:	a8c00115 	stw	r3,4(r21)
  800ba8:	dc800e15 	stw	r18,56(sp)
  800bac:	dc400d15 	stw	r17,52(sp)
  800bb0:	1441c216 	blt	r2,r17,8012bc <___vfprintf_internal_r+0xc18>
  800bb4:	ad400204 	addi	r21,r21,8
  800bb8:	d9414e17 	ldw	r5,1336(sp)
  800bbc:	00802004 	movi	r2,128
  800bc0:	2880b126 	beq	r5,r2,800e88 <___vfprintf_internal_r+0x7e4>
  800bc4:	d8c14617 	ldw	r3,1304(sp)
  800bc8:	19e1c83a 	sub	r16,r3,r7
  800bcc:	0400260e 	bge	zero,r16,800c68 <___vfprintf_internal_r+0x5c4>
  800bd0:	00800404 	movi	r2,16
  800bd4:	1403c90e 	bge	r2,r16,801afc <___vfprintf_internal_r+0x1458>
  800bd8:	1027883a 	mov	r19,r2
  800bdc:	07002074 	movhi	fp,129
  800be0:	e7168884 	addi	fp,fp,23074
  800be4:	050001c4 	movi	r20,7
  800be8:	00000306 	br	800bf8 <___vfprintf_internal_r+0x554>
  800bec:	843ffc04 	addi	r16,r16,-16
  800bf0:	ad400204 	addi	r21,r21,8
  800bf4:	9c00130e 	bge	r19,r16,800c44 <___vfprintf_internal_r+0x5a0>
  800bf8:	94800404 	addi	r18,r18,16
  800bfc:	8c400044 	addi	r17,r17,1
  800c00:	af000015 	stw	fp,0(r21)
  800c04:	acc00115 	stw	r19,4(r21)
  800c08:	dc800e15 	stw	r18,56(sp)
  800c0c:	dc400d15 	stw	r17,52(sp)
  800c10:	a47ff60e 	bge	r20,r17,800bec <___vfprintf_internal_r+0x548>
  800c14:	d9014f17 	ldw	r4,1340(sp)
  800c18:	b00b883a 	mov	r5,r22
  800c1c:	d9800c04 	addi	r6,sp,48
  800c20:	d9c15115 	stw	r7,1348(sp)
  800c24:	080064c0 	call	80064c <__sprint_r>
  800c28:	d9c15117 	ldw	r7,1348(sp)
  800c2c:	1000551e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  800c30:	843ffc04 	addi	r16,r16,-16
  800c34:	dc800e17 	ldw	r18,56(sp)
  800c38:	dc400d17 	ldw	r17,52(sp)
  800c3c:	dd401904 	addi	r21,sp,100
  800c40:	9c3fed16 	blt	r19,r16,800bf8 <___vfprintf_internal_r+0x554>
  800c44:	9425883a 	add	r18,r18,r16
  800c48:	8c400044 	addi	r17,r17,1
  800c4c:	008001c4 	movi	r2,7
  800c50:	af000015 	stw	fp,0(r21)
  800c54:	ac000115 	stw	r16,4(r21)
  800c58:	dc800e15 	stw	r18,56(sp)
  800c5c:	dc400d15 	stw	r17,52(sp)
  800c60:	14418216 	blt	r2,r17,80126c <___vfprintf_internal_r+0xbc8>
  800c64:	ad400204 	addi	r21,r21,8
  800c68:	d9014c17 	ldw	r4,1328(sp)
  800c6c:	2080400c 	andi	r2,r4,256
  800c70:	10004a1e 	bne	r2,zero,800d9c <___vfprintf_internal_r+0x6f8>
  800c74:	d9414117 	ldw	r5,1284(sp)
  800c78:	91e5883a 	add	r18,r18,r7
  800c7c:	8c400044 	addi	r17,r17,1
  800c80:	008001c4 	movi	r2,7
  800c84:	a9400015 	stw	r5,0(r21)
  800c88:	a9c00115 	stw	r7,4(r21)
  800c8c:	dc800e15 	stw	r18,56(sp)
  800c90:	dc400d15 	stw	r17,52(sp)
  800c94:	14416716 	blt	r2,r17,801234 <___vfprintf_internal_r+0xb90>
  800c98:	a8c00204 	addi	r3,r21,8
  800c9c:	d9814c17 	ldw	r6,1328(sp)
  800ca0:	3080010c 	andi	r2,r6,4
  800ca4:	10002826 	beq	r2,zero,800d48 <___vfprintf_internal_r+0x6a4>
  800ca8:	d8814a17 	ldw	r2,1320(sp)
  800cac:	d9014517 	ldw	r4,1300(sp)
  800cb0:	1121c83a 	sub	r16,r2,r4
  800cb4:	0400240e 	bge	zero,r16,800d48 <___vfprintf_internal_r+0x6a4>
  800cb8:	00800404 	movi	r2,16
  800cbc:	14044f0e 	bge	r2,r16,801dfc <___vfprintf_internal_r+0x1758>
  800cc0:	dc400d17 	ldw	r17,52(sp)
  800cc4:	1027883a 	mov	r19,r2
  800cc8:	07002074 	movhi	fp,129
  800ccc:	e7168c84 	addi	fp,fp,23090
  800cd0:	050001c4 	movi	r20,7
  800cd4:	00000306 	br	800ce4 <___vfprintf_internal_r+0x640>
  800cd8:	843ffc04 	addi	r16,r16,-16
  800cdc:	18c00204 	addi	r3,r3,8
  800ce0:	9c00110e 	bge	r19,r16,800d28 <___vfprintf_internal_r+0x684>
  800ce4:	94800404 	addi	r18,r18,16
  800ce8:	8c400044 	addi	r17,r17,1
  800cec:	1f000015 	stw	fp,0(r3)
  800cf0:	1cc00115 	stw	r19,4(r3)
  800cf4:	dc800e15 	stw	r18,56(sp)
  800cf8:	dc400d15 	stw	r17,52(sp)
  800cfc:	a47ff60e 	bge	r20,r17,800cd8 <___vfprintf_internal_r+0x634>
  800d00:	d9014f17 	ldw	r4,1340(sp)
  800d04:	b00b883a 	mov	r5,r22
  800d08:	d9800c04 	addi	r6,sp,48
  800d0c:	080064c0 	call	80064c <__sprint_r>
  800d10:	10001c1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  800d14:	843ffc04 	addi	r16,r16,-16
  800d18:	dc800e17 	ldw	r18,56(sp)
  800d1c:	dc400d17 	ldw	r17,52(sp)
  800d20:	d8c01904 	addi	r3,sp,100
  800d24:	9c3fef16 	blt	r19,r16,800ce4 <___vfprintf_internal_r+0x640>
  800d28:	9425883a 	add	r18,r18,r16
  800d2c:	8c400044 	addi	r17,r17,1
  800d30:	008001c4 	movi	r2,7
  800d34:	1f000015 	stw	fp,0(r3)
  800d38:	1c000115 	stw	r16,4(r3)
  800d3c:	dc800e15 	stw	r18,56(sp)
  800d40:	dc400d15 	stw	r17,52(sp)
  800d44:	1440cb16 	blt	r2,r17,801074 <___vfprintf_internal_r+0x9d0>
  800d48:	d8814a17 	ldw	r2,1320(sp)
  800d4c:	d9414517 	ldw	r5,1300(sp)
  800d50:	1140010e 	bge	r2,r5,800d58 <___vfprintf_internal_r+0x6b4>
  800d54:	2805883a 	mov	r2,r5
  800d58:	d9814b17 	ldw	r6,1324(sp)
  800d5c:	308d883a 	add	r6,r6,r2
  800d60:	d9814b15 	stw	r6,1324(sp)
  800d64:	90013b1e 	bne	r18,zero,801254 <___vfprintf_internal_r+0xbb0>
  800d68:	d9c14017 	ldw	r7,1280(sp)
  800d6c:	dd401904 	addi	r21,sp,100
  800d70:	d8000d15 	stw	zero,52(sp)
  800d74:	003ea706 	br	800814 <___vfprintf_internal_r+0x170>
  800d78:	d8800e17 	ldw	r2,56(sp)
  800d7c:	10053f1e 	bne	r2,zero,80227c <___vfprintf_internal_r+0x1bd8>
  800d80:	d8000d15 	stw	zero,52(sp)
  800d84:	b080030b 	ldhu	r2,12(r22)
  800d88:	1080100c 	andi	r2,r2,64
  800d8c:	103e8726 	beq	r2,zero,8007ac <___vfprintf_internal_r+0x108>
  800d90:	00bfffc4 	movi	r2,-1
  800d94:	d8814b15 	stw	r2,1324(sp)
  800d98:	003e8406 	br	8007ac <___vfprintf_internal_r+0x108>
  800d9c:	d9814d17 	ldw	r6,1332(sp)
  800da0:	00801944 	movi	r2,101
  800da4:	11806e16 	blt	r2,r6,800f60 <___vfprintf_internal_r+0x8bc>
  800da8:	d9414717 	ldw	r5,1308(sp)
  800dac:	00c00044 	movi	r3,1
  800db0:	1943430e 	bge	r3,r5,801ac0 <___vfprintf_internal_r+0x141c>
  800db4:	d8814117 	ldw	r2,1284(sp)
  800db8:	94800044 	addi	r18,r18,1
  800dbc:	8c400044 	addi	r17,r17,1
  800dc0:	a8800015 	stw	r2,0(r21)
  800dc4:	008001c4 	movi	r2,7
  800dc8:	a8c00115 	stw	r3,4(r21)
  800dcc:	dc800e15 	stw	r18,56(sp)
  800dd0:	dc400d15 	stw	r17,52(sp)
  800dd4:	1441ca16 	blt	r2,r17,801500 <___vfprintf_internal_r+0xe5c>
  800dd8:	a8c00204 	addi	r3,r21,8
  800ddc:	d9014917 	ldw	r4,1316(sp)
  800de0:	00800044 	movi	r2,1
  800de4:	94800044 	addi	r18,r18,1
  800de8:	8c400044 	addi	r17,r17,1
  800dec:	18800115 	stw	r2,4(r3)
  800df0:	008001c4 	movi	r2,7
  800df4:	19000015 	stw	r4,0(r3)
  800df8:	dc800e15 	stw	r18,56(sp)
  800dfc:	dc400d15 	stw	r17,52(sp)
  800e00:	1441b616 	blt	r2,r17,8014dc <___vfprintf_internal_r+0xe38>
  800e04:	1cc00204 	addi	r19,r3,8
  800e08:	d9014217 	ldw	r4,1288(sp)
  800e0c:	d9414317 	ldw	r5,1292(sp)
  800e10:	000d883a 	mov	r6,zero
  800e14:	000f883a 	mov	r7,zero
  800e18:	0808ef40 	call	808ef4 <__nedf2>
  800e1c:	10017426 	beq	r2,zero,8013f0 <___vfprintf_internal_r+0xd4c>
  800e20:	d9414717 	ldw	r5,1308(sp)
  800e24:	d9814117 	ldw	r6,1284(sp)
  800e28:	8c400044 	addi	r17,r17,1
  800e2c:	2c85883a 	add	r2,r5,r18
  800e30:	14bfffc4 	addi	r18,r2,-1
  800e34:	28bfffc4 	addi	r2,r5,-1
  800e38:	30c00044 	addi	r3,r6,1
  800e3c:	98800115 	stw	r2,4(r19)
  800e40:	008001c4 	movi	r2,7
  800e44:	98c00015 	stw	r3,0(r19)
  800e48:	dc800e15 	stw	r18,56(sp)
  800e4c:	dc400d15 	stw	r17,52(sp)
  800e50:	14418e16 	blt	r2,r17,80148c <___vfprintf_internal_r+0xde8>
  800e54:	9cc00204 	addi	r19,r19,8
  800e58:	d9414817 	ldw	r5,1312(sp)
  800e5c:	d8800804 	addi	r2,sp,32
  800e60:	8c400044 	addi	r17,r17,1
  800e64:	9165883a 	add	r18,r18,r5
  800e68:	98800015 	stw	r2,0(r19)
  800e6c:	008001c4 	movi	r2,7
  800e70:	99400115 	stw	r5,4(r19)
  800e74:	dc800e15 	stw	r18,56(sp)
  800e78:	dc400d15 	stw	r17,52(sp)
  800e7c:	1440ed16 	blt	r2,r17,801234 <___vfprintf_internal_r+0xb90>
  800e80:	98c00204 	addi	r3,r19,8
  800e84:	003f8506 	br	800c9c <___vfprintf_internal_r+0x5f8>
  800e88:	d9814a17 	ldw	r6,1320(sp)
  800e8c:	d8814517 	ldw	r2,1300(sp)
  800e90:	30a1c83a 	sub	r16,r6,r2
  800e94:	043f4b0e 	bge	zero,r16,800bc4 <___vfprintf_internal_r+0x520>
  800e98:	00800404 	movi	r2,16
  800e9c:	1404340e 	bge	r2,r16,801f70 <___vfprintf_internal_r+0x18cc>
  800ea0:	1027883a 	mov	r19,r2
  800ea4:	07002074 	movhi	fp,129
  800ea8:	e7168884 	addi	fp,fp,23074
  800eac:	050001c4 	movi	r20,7
  800eb0:	00000306 	br	800ec0 <___vfprintf_internal_r+0x81c>
  800eb4:	843ffc04 	addi	r16,r16,-16
  800eb8:	ad400204 	addi	r21,r21,8
  800ebc:	9c00130e 	bge	r19,r16,800f0c <___vfprintf_internal_r+0x868>
  800ec0:	94800404 	addi	r18,r18,16
  800ec4:	8c400044 	addi	r17,r17,1
  800ec8:	af000015 	stw	fp,0(r21)
  800ecc:	acc00115 	stw	r19,4(r21)
  800ed0:	dc800e15 	stw	r18,56(sp)
  800ed4:	dc400d15 	stw	r17,52(sp)
  800ed8:	a47ff60e 	bge	r20,r17,800eb4 <___vfprintf_internal_r+0x810>
  800edc:	d9014f17 	ldw	r4,1340(sp)
  800ee0:	b00b883a 	mov	r5,r22
  800ee4:	d9800c04 	addi	r6,sp,48
  800ee8:	d9c15115 	stw	r7,1348(sp)
  800eec:	080064c0 	call	80064c <__sprint_r>
  800ef0:	d9c15117 	ldw	r7,1348(sp)
  800ef4:	103fa31e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  800ef8:	843ffc04 	addi	r16,r16,-16
  800efc:	dc800e17 	ldw	r18,56(sp)
  800f00:	dc400d17 	ldw	r17,52(sp)
  800f04:	dd401904 	addi	r21,sp,100
  800f08:	9c3fed16 	blt	r19,r16,800ec0 <___vfprintf_internal_r+0x81c>
  800f0c:	9425883a 	add	r18,r18,r16
  800f10:	8c400044 	addi	r17,r17,1
  800f14:	008001c4 	movi	r2,7
  800f18:	af000015 	stw	fp,0(r21)
  800f1c:	ac000115 	stw	r16,4(r21)
  800f20:	dc800e15 	stw	r18,56(sp)
  800f24:	dc400d15 	stw	r17,52(sp)
  800f28:	14416116 	blt	r2,r17,8014b0 <___vfprintf_internal_r+0xe0c>
  800f2c:	ad400204 	addi	r21,r21,8
  800f30:	003f2406 	br	800bc4 <___vfprintf_internal_r+0x520>
  800f34:	d9014f17 	ldw	r4,1340(sp)
  800f38:	08041140 	call	804114 <__sinit>
  800f3c:	d9c15117 	ldw	r7,1348(sp)
  800f40:	003def06 	br	800700 <___vfprintf_internal_r+0x5c>
  800f44:	d9014f17 	ldw	r4,1340(sp)
  800f48:	b00b883a 	mov	r5,r22
  800f4c:	d9c15115 	stw	r7,1348(sp)
  800f50:	08025740 	call	802574 <__swsetup_r>
  800f54:	d9c15117 	ldw	r7,1348(sp)
  800f58:	103dee26 	beq	r2,zero,800714 <___vfprintf_internal_r+0x70>
  800f5c:	003f8c06 	br	800d90 <___vfprintf_internal_r+0x6ec>
  800f60:	d9014217 	ldw	r4,1288(sp)
  800f64:	d9414317 	ldw	r5,1292(sp)
  800f68:	000d883a 	mov	r6,zero
  800f6c:	000f883a 	mov	r7,zero
  800f70:	0808e6c0 	call	808e6c <__eqdf2>
  800f74:	1000f21e 	bne	r2,zero,801340 <___vfprintf_internal_r+0xc9c>
  800f78:	00802074 	movhi	r2,129
  800f7c:	10968804 	addi	r2,r2,23072
  800f80:	94800044 	addi	r18,r18,1
  800f84:	8c400044 	addi	r17,r17,1
  800f88:	a8800015 	stw	r2,0(r21)
  800f8c:	00c00044 	movi	r3,1
  800f90:	008001c4 	movi	r2,7
  800f94:	a8c00115 	stw	r3,4(r21)
  800f98:	dc800e15 	stw	r18,56(sp)
  800f9c:	dc400d15 	stw	r17,52(sp)
  800fa0:	1442fa16 	blt	r2,r17,801b8c <___vfprintf_internal_r+0x14e8>
  800fa4:	a8c00204 	addi	r3,r21,8
  800fa8:	d8800517 	ldw	r2,20(sp)
  800fac:	d9014717 	ldw	r4,1308(sp)
  800fb0:	11015c0e 	bge	r2,r4,801524 <___vfprintf_internal_r+0xe80>
  800fb4:	dc400d17 	ldw	r17,52(sp)
  800fb8:	d9814917 	ldw	r6,1316(sp)
  800fbc:	00800044 	movi	r2,1
  800fc0:	94800044 	addi	r18,r18,1
  800fc4:	8c400044 	addi	r17,r17,1
  800fc8:	18800115 	stw	r2,4(r3)
  800fcc:	008001c4 	movi	r2,7
  800fd0:	19800015 	stw	r6,0(r3)
  800fd4:	dc800e15 	stw	r18,56(sp)
  800fd8:	dc400d15 	stw	r17,52(sp)
  800fdc:	14431016 	blt	r2,r17,801c20 <___vfprintf_internal_r+0x157c>
  800fe0:	18c00204 	addi	r3,r3,8
  800fe4:	d8814717 	ldw	r2,1308(sp)
  800fe8:	143fffc4 	addi	r16,r2,-1
  800fec:	043f2b0e 	bge	zero,r16,800c9c <___vfprintf_internal_r+0x5f8>
  800ff0:	00800404 	movi	r2,16
  800ff4:	1402a20e 	bge	r2,r16,801a80 <___vfprintf_internal_r+0x13dc>
  800ff8:	dc400d17 	ldw	r17,52(sp)
  800ffc:	1027883a 	mov	r19,r2
  801000:	07002074 	movhi	fp,129
  801004:	e7168884 	addi	fp,fp,23074
  801008:	050001c4 	movi	r20,7
  80100c:	00000306 	br	80101c <___vfprintf_internal_r+0x978>
  801010:	18c00204 	addi	r3,r3,8
  801014:	843ffc04 	addi	r16,r16,-16
  801018:	9c029c0e 	bge	r19,r16,801a8c <___vfprintf_internal_r+0x13e8>
  80101c:	94800404 	addi	r18,r18,16
  801020:	8c400044 	addi	r17,r17,1
  801024:	1f000015 	stw	fp,0(r3)
  801028:	1cc00115 	stw	r19,4(r3)
  80102c:	dc800e15 	stw	r18,56(sp)
  801030:	dc400d15 	stw	r17,52(sp)
  801034:	a47ff60e 	bge	r20,r17,801010 <___vfprintf_internal_r+0x96c>
  801038:	d9014f17 	ldw	r4,1340(sp)
  80103c:	b00b883a 	mov	r5,r22
  801040:	d9800c04 	addi	r6,sp,48
  801044:	080064c0 	call	80064c <__sprint_r>
  801048:	103f4e1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  80104c:	dc800e17 	ldw	r18,56(sp)
  801050:	dc400d17 	ldw	r17,52(sp)
  801054:	d8c01904 	addi	r3,sp,100
  801058:	003fee06 	br	801014 <___vfprintf_internal_r+0x970>
  80105c:	d8802c0b 	ldhu	r2,176(sp)
  801060:	00ffffc4 	movi	r3,-1
  801064:	d8c14b15 	stw	r3,1324(sp)
  801068:	1080100c 	andi	r2,r2,64
  80106c:	103dcc1e 	bne	r2,zero,8007a0 <___vfprintf_internal_r+0xfc>
  801070:	003dce06 	br	8007ac <___vfprintf_internal_r+0x108>
  801074:	d9014f17 	ldw	r4,1340(sp)
  801078:	b00b883a 	mov	r5,r22
  80107c:	d9800c04 	addi	r6,sp,48
  801080:	080064c0 	call	80064c <__sprint_r>
  801084:	103f3f1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801088:	dc800e17 	ldw	r18,56(sp)
  80108c:	003f2e06 	br	800d48 <___vfprintf_internal_r+0x6a4>
  801090:	d9414c17 	ldw	r5,1328(sp)
  801094:	29400414 	ori	r5,r5,16
  801098:	d9414c15 	stw	r5,1328(sp)
  80109c:	d9814c17 	ldw	r6,1328(sp)
  8010a0:	3080080c 	andi	r2,r6,32
  8010a4:	10014f1e 	bne	r2,zero,8015e4 <___vfprintf_internal_r+0xf40>
  8010a8:	d8c14c17 	ldw	r3,1328(sp)
  8010ac:	1880040c 	andi	r2,r3,16
  8010b0:	1002ea1e 	bne	r2,zero,801c5c <___vfprintf_internal_r+0x15b8>
  8010b4:	d9014c17 	ldw	r4,1328(sp)
  8010b8:	2080100c 	andi	r2,r4,64
  8010bc:	1002e726 	beq	r2,zero,801c5c <___vfprintf_internal_r+0x15b8>
  8010c0:	3880000f 	ldh	r2,0(r7)
  8010c4:	39c00104 	addi	r7,r7,4
  8010c8:	d9c14015 	stw	r7,1280(sp)
  8010cc:	1023d7fa 	srai	r17,r2,31
  8010d0:	1021883a 	mov	r16,r2
  8010d4:	88037216 	blt	r17,zero,801ea0 <___vfprintf_internal_r+0x17fc>
  8010d8:	01000044 	movi	r4,1
  8010dc:	98000416 	blt	r19,zero,8010f0 <___vfprintf_internal_r+0xa4c>
  8010e0:	d8c14c17 	ldw	r3,1328(sp)
  8010e4:	00bfdfc4 	movi	r2,-129
  8010e8:	1886703a 	and	r3,r3,r2
  8010ec:	d8c14c15 	stw	r3,1328(sp)
  8010f0:	8444b03a 	or	r2,r16,r17
  8010f4:	1002261e 	bne	r2,zero,801990 <___vfprintf_internal_r+0x12ec>
  8010f8:	9802251e 	bne	r19,zero,801990 <___vfprintf_internal_r+0x12ec>
  8010fc:	20803fcc 	andi	r2,r4,255
  801100:	10029b26 	beq	r2,zero,801b70 <___vfprintf_internal_r+0x14cc>
  801104:	d8c01904 	addi	r3,sp,100
  801108:	dd000f04 	addi	r20,sp,60
  80110c:	d8c14115 	stw	r3,1284(sp)
  801110:	d8c14117 	ldw	r3,1284(sp)
  801114:	dcc14515 	stw	r19,1300(sp)
  801118:	a0c5c83a 	sub	r2,r20,r3
  80111c:	11c00a04 	addi	r7,r2,40
  801120:	99c0010e 	bge	r19,r7,801128 <___vfprintf_internal_r+0xa84>
  801124:	d9c14515 	stw	r7,1300(sp)
  801128:	dcc14615 	stw	r19,1304(sp)
  80112c:	d8800407 	ldb	r2,16(sp)
  801130:	103e4c26 	beq	r2,zero,800a64 <___vfprintf_internal_r+0x3c0>
  801134:	d8814517 	ldw	r2,1300(sp)
  801138:	10800044 	addi	r2,r2,1
  80113c:	d8814515 	stw	r2,1300(sp)
  801140:	003e4806 	br	800a64 <___vfprintf_internal_r+0x3c0>
  801144:	d9814c17 	ldw	r6,1328(sp)
  801148:	31800414 	ori	r6,r6,16
  80114c:	d9814c15 	stw	r6,1328(sp)
  801150:	d8c14c17 	ldw	r3,1328(sp)
  801154:	1880080c 	andi	r2,r3,32
  801158:	1001271e 	bne	r2,zero,8015f8 <___vfprintf_internal_r+0xf54>
  80115c:	d9414c17 	ldw	r5,1328(sp)
  801160:	2880040c 	andi	r2,r5,16
  801164:	1002b61e 	bne	r2,zero,801c40 <___vfprintf_internal_r+0x159c>
  801168:	d9814c17 	ldw	r6,1328(sp)
  80116c:	3080100c 	andi	r2,r6,64
  801170:	1002b326 	beq	r2,zero,801c40 <___vfprintf_internal_r+0x159c>
  801174:	3c00000b 	ldhu	r16,0(r7)
  801178:	0009883a 	mov	r4,zero
  80117c:	39c00104 	addi	r7,r7,4
  801180:	0023883a 	mov	r17,zero
  801184:	d9c14015 	stw	r7,1280(sp)
  801188:	d8000405 	stb	zero,16(sp)
  80118c:	003fd306 	br	8010dc <___vfprintf_internal_r+0xa38>
  801190:	d9014c17 	ldw	r4,1328(sp)
  801194:	21000414 	ori	r4,r4,16
  801198:	d9014c15 	stw	r4,1328(sp)
  80119c:	d9414c17 	ldw	r5,1328(sp)
  8011a0:	2880080c 	andi	r2,r5,32
  8011a4:	1001081e 	bne	r2,zero,8015c8 <___vfprintf_internal_r+0xf24>
  8011a8:	d8c14c17 	ldw	r3,1328(sp)
  8011ac:	1880040c 	andi	r2,r3,16
  8011b0:	1002b01e 	bne	r2,zero,801c74 <___vfprintf_internal_r+0x15d0>
  8011b4:	d9014c17 	ldw	r4,1328(sp)
  8011b8:	2080100c 	andi	r2,r4,64
  8011bc:	1002ad26 	beq	r2,zero,801c74 <___vfprintf_internal_r+0x15d0>
  8011c0:	3c00000b 	ldhu	r16,0(r7)
  8011c4:	01000044 	movi	r4,1
  8011c8:	39c00104 	addi	r7,r7,4
  8011cc:	0023883a 	mov	r17,zero
  8011d0:	d9c14015 	stw	r7,1280(sp)
  8011d4:	d8000405 	stb	zero,16(sp)
  8011d8:	003fc006 	br	8010dc <___vfprintf_internal_r+0xa38>
  8011dc:	d9014f17 	ldw	r4,1340(sp)
  8011e0:	b00b883a 	mov	r5,r22
  8011e4:	d9800c04 	addi	r6,sp,48
  8011e8:	080064c0 	call	80064c <__sprint_r>
  8011ec:	103ee51e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8011f0:	dc800e17 	ldw	r18,56(sp)
  8011f4:	d8c01904 	addi	r3,sp,100
  8011f8:	d9814c17 	ldw	r6,1328(sp)
  8011fc:	3080004c 	andi	r2,r6,1
  801200:	1005003a 	cmpeq	r2,r2,zero
  801204:	103ea51e 	bne	r2,zero,800c9c <___vfprintf_internal_r+0x5f8>
  801208:	00800044 	movi	r2,1
  80120c:	dc400d17 	ldw	r17,52(sp)
  801210:	18800115 	stw	r2,4(r3)
  801214:	d8814917 	ldw	r2,1316(sp)
  801218:	94800044 	addi	r18,r18,1
  80121c:	8c400044 	addi	r17,r17,1
  801220:	18800015 	stw	r2,0(r3)
  801224:	008001c4 	movi	r2,7
  801228:	dc800e15 	stw	r18,56(sp)
  80122c:	dc400d15 	stw	r17,52(sp)
  801230:	14421e0e 	bge	r2,r17,801aac <___vfprintf_internal_r+0x1408>
  801234:	d9014f17 	ldw	r4,1340(sp)
  801238:	b00b883a 	mov	r5,r22
  80123c:	d9800c04 	addi	r6,sp,48
  801240:	080064c0 	call	80064c <__sprint_r>
  801244:	103ecf1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801248:	dc800e17 	ldw	r18,56(sp)
  80124c:	d8c01904 	addi	r3,sp,100
  801250:	003e9206 	br	800c9c <___vfprintf_internal_r+0x5f8>
  801254:	d9014f17 	ldw	r4,1340(sp)
  801258:	b00b883a 	mov	r5,r22
  80125c:	d9800c04 	addi	r6,sp,48
  801260:	080064c0 	call	80064c <__sprint_r>
  801264:	103ec026 	beq	r2,zero,800d68 <___vfprintf_internal_r+0x6c4>
  801268:	003ec606 	br	800d84 <___vfprintf_internal_r+0x6e0>
  80126c:	d9014f17 	ldw	r4,1340(sp)
  801270:	b00b883a 	mov	r5,r22
  801274:	d9800c04 	addi	r6,sp,48
  801278:	d9c15115 	stw	r7,1348(sp)
  80127c:	080064c0 	call	80064c <__sprint_r>
  801280:	d9c15117 	ldw	r7,1348(sp)
  801284:	103ebf1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801288:	dc800e17 	ldw	r18,56(sp)
  80128c:	dc400d17 	ldw	r17,52(sp)
  801290:	dd401904 	addi	r21,sp,100
  801294:	003e7406 	br	800c68 <___vfprintf_internal_r+0x5c4>
  801298:	d9014f17 	ldw	r4,1340(sp)
  80129c:	b00b883a 	mov	r5,r22
  8012a0:	d9800c04 	addi	r6,sp,48
  8012a4:	d9c15115 	stw	r7,1348(sp)
  8012a8:	080064c0 	call	80064c <__sprint_r>
  8012ac:	d9c15117 	ldw	r7,1348(sp)
  8012b0:	103eb41e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8012b4:	dd401904 	addi	r21,sp,100
  8012b8:	003d6d06 	br	800870 <___vfprintf_internal_r+0x1cc>
  8012bc:	d9014f17 	ldw	r4,1340(sp)
  8012c0:	b00b883a 	mov	r5,r22
  8012c4:	d9800c04 	addi	r6,sp,48
  8012c8:	d9c15115 	stw	r7,1348(sp)
  8012cc:	080064c0 	call	80064c <__sprint_r>
  8012d0:	d9c15117 	ldw	r7,1348(sp)
  8012d4:	103eab1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8012d8:	dc800e17 	ldw	r18,56(sp)
  8012dc:	dc400d17 	ldw	r17,52(sp)
  8012e0:	dd401904 	addi	r21,sp,100
  8012e4:	003e3406 	br	800bb8 <___vfprintf_internal_r+0x514>
  8012e8:	d9014f17 	ldw	r4,1340(sp)
  8012ec:	b00b883a 	mov	r5,r22
  8012f0:	d9800c04 	addi	r6,sp,48
  8012f4:	d9c15115 	stw	r7,1348(sp)
  8012f8:	080064c0 	call	80064c <__sprint_r>
  8012fc:	d9c15117 	ldw	r7,1348(sp)
  801300:	103ea01e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801304:	dc800e17 	ldw	r18,56(sp)
  801308:	dc400d17 	ldw	r17,52(sp)
  80130c:	dd401904 	addi	r21,sp,100
  801310:	003e1c06 	br	800b84 <___vfprintf_internal_r+0x4e0>
  801314:	d9014f17 	ldw	r4,1340(sp)
  801318:	b00b883a 	mov	r5,r22
  80131c:	d9800c04 	addi	r6,sp,48
  801320:	d9c15115 	stw	r7,1348(sp)
  801324:	080064c0 	call	80064c <__sprint_r>
  801328:	d9c15117 	ldw	r7,1348(sp)
  80132c:	103e951e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801330:	dc800e17 	ldw	r18,56(sp)
  801334:	dc400d17 	ldw	r17,52(sp)
  801338:	dd401904 	addi	r21,sp,100
  80133c:	003e0406 	br	800b50 <___vfprintf_internal_r+0x4ac>
  801340:	d9000517 	ldw	r4,20(sp)
  801344:	0102520e 	bge	zero,r4,801c90 <___vfprintf_internal_r+0x15ec>
  801348:	d9814717 	ldw	r6,1308(sp)
  80134c:	21807a16 	blt	r4,r6,801538 <___vfprintf_internal_r+0xe94>
  801350:	d8814117 	ldw	r2,1284(sp)
  801354:	91a5883a 	add	r18,r18,r6
  801358:	8c400044 	addi	r17,r17,1
  80135c:	a8800015 	stw	r2,0(r21)
  801360:	008001c4 	movi	r2,7
  801364:	a9800115 	stw	r6,4(r21)
  801368:	dc800e15 	stw	r18,56(sp)
  80136c:	dc400d15 	stw	r17,52(sp)
  801370:	1442f616 	blt	r2,r17,801f4c <___vfprintf_internal_r+0x18a8>
  801374:	a8c00204 	addi	r3,r21,8
  801378:	d9414717 	ldw	r5,1308(sp)
  80137c:	2161c83a 	sub	r16,r4,r5
  801380:	043f9d0e 	bge	zero,r16,8011f8 <___vfprintf_internal_r+0xb54>
  801384:	00800404 	movi	r2,16
  801388:	1402130e 	bge	r2,r16,801bd8 <___vfprintf_internal_r+0x1534>
  80138c:	dc400d17 	ldw	r17,52(sp)
  801390:	1027883a 	mov	r19,r2
  801394:	07002074 	movhi	fp,129
  801398:	e7168884 	addi	fp,fp,23074
  80139c:	050001c4 	movi	r20,7
  8013a0:	00000306 	br	8013b0 <___vfprintf_internal_r+0xd0c>
  8013a4:	18c00204 	addi	r3,r3,8
  8013a8:	843ffc04 	addi	r16,r16,-16
  8013ac:	9c020d0e 	bge	r19,r16,801be4 <___vfprintf_internal_r+0x1540>
  8013b0:	94800404 	addi	r18,r18,16
  8013b4:	8c400044 	addi	r17,r17,1
  8013b8:	1f000015 	stw	fp,0(r3)
  8013bc:	1cc00115 	stw	r19,4(r3)
  8013c0:	dc800e15 	stw	r18,56(sp)
  8013c4:	dc400d15 	stw	r17,52(sp)
  8013c8:	a47ff60e 	bge	r20,r17,8013a4 <___vfprintf_internal_r+0xd00>
  8013cc:	d9014f17 	ldw	r4,1340(sp)
  8013d0:	b00b883a 	mov	r5,r22
  8013d4:	d9800c04 	addi	r6,sp,48
  8013d8:	080064c0 	call	80064c <__sprint_r>
  8013dc:	103e691e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8013e0:	dc800e17 	ldw	r18,56(sp)
  8013e4:	dc400d17 	ldw	r17,52(sp)
  8013e8:	d8c01904 	addi	r3,sp,100
  8013ec:	003fee06 	br	8013a8 <___vfprintf_internal_r+0xd04>
  8013f0:	d8814717 	ldw	r2,1308(sp)
  8013f4:	143fffc4 	addi	r16,r2,-1
  8013f8:	043e970e 	bge	zero,r16,800e58 <___vfprintf_internal_r+0x7b4>
  8013fc:	00800404 	movi	r2,16
  801400:	1400180e 	bge	r2,r16,801464 <___vfprintf_internal_r+0xdc0>
  801404:	1029883a 	mov	r20,r2
  801408:	07002074 	movhi	fp,129
  80140c:	e7168884 	addi	fp,fp,23074
  801410:	054001c4 	movi	r21,7
  801414:	00000306 	br	801424 <___vfprintf_internal_r+0xd80>
  801418:	9cc00204 	addi	r19,r19,8
  80141c:	843ffc04 	addi	r16,r16,-16
  801420:	a400120e 	bge	r20,r16,80146c <___vfprintf_internal_r+0xdc8>
  801424:	94800404 	addi	r18,r18,16
  801428:	8c400044 	addi	r17,r17,1
  80142c:	9f000015 	stw	fp,0(r19)
  801430:	9d000115 	stw	r20,4(r19)
  801434:	dc800e15 	stw	r18,56(sp)
  801438:	dc400d15 	stw	r17,52(sp)
  80143c:	ac7ff60e 	bge	r21,r17,801418 <___vfprintf_internal_r+0xd74>
  801440:	d9014f17 	ldw	r4,1340(sp)
  801444:	b00b883a 	mov	r5,r22
  801448:	d9800c04 	addi	r6,sp,48
  80144c:	080064c0 	call	80064c <__sprint_r>
  801450:	103e4c1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801454:	dc800e17 	ldw	r18,56(sp)
  801458:	dc400d17 	ldw	r17,52(sp)
  80145c:	dcc01904 	addi	r19,sp,100
  801460:	003fee06 	br	80141c <___vfprintf_internal_r+0xd78>
  801464:	07002074 	movhi	fp,129
  801468:	e7168884 	addi	fp,fp,23074
  80146c:	9425883a 	add	r18,r18,r16
  801470:	8c400044 	addi	r17,r17,1
  801474:	008001c4 	movi	r2,7
  801478:	9f000015 	stw	fp,0(r19)
  80147c:	9c000115 	stw	r16,4(r19)
  801480:	dc800e15 	stw	r18,56(sp)
  801484:	dc400d15 	stw	r17,52(sp)
  801488:	147e720e 	bge	r2,r17,800e54 <___vfprintf_internal_r+0x7b0>
  80148c:	d9014f17 	ldw	r4,1340(sp)
  801490:	b00b883a 	mov	r5,r22
  801494:	d9800c04 	addi	r6,sp,48
  801498:	080064c0 	call	80064c <__sprint_r>
  80149c:	103e391e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8014a0:	dc800e17 	ldw	r18,56(sp)
  8014a4:	dc400d17 	ldw	r17,52(sp)
  8014a8:	dcc01904 	addi	r19,sp,100
  8014ac:	003e6a06 	br	800e58 <___vfprintf_internal_r+0x7b4>
  8014b0:	d9014f17 	ldw	r4,1340(sp)
  8014b4:	b00b883a 	mov	r5,r22
  8014b8:	d9800c04 	addi	r6,sp,48
  8014bc:	d9c15115 	stw	r7,1348(sp)
  8014c0:	080064c0 	call	80064c <__sprint_r>
  8014c4:	d9c15117 	ldw	r7,1348(sp)
  8014c8:	103e2e1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8014cc:	dc800e17 	ldw	r18,56(sp)
  8014d0:	dc400d17 	ldw	r17,52(sp)
  8014d4:	dd401904 	addi	r21,sp,100
  8014d8:	003dba06 	br	800bc4 <___vfprintf_internal_r+0x520>
  8014dc:	d9014f17 	ldw	r4,1340(sp)
  8014e0:	b00b883a 	mov	r5,r22
  8014e4:	d9800c04 	addi	r6,sp,48
  8014e8:	080064c0 	call	80064c <__sprint_r>
  8014ec:	103e251e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  8014f0:	dc800e17 	ldw	r18,56(sp)
  8014f4:	dc400d17 	ldw	r17,52(sp)
  8014f8:	dcc01904 	addi	r19,sp,100
  8014fc:	003e4206 	br	800e08 <___vfprintf_internal_r+0x764>
  801500:	d9014f17 	ldw	r4,1340(sp)
  801504:	b00b883a 	mov	r5,r22
  801508:	d9800c04 	addi	r6,sp,48
  80150c:	080064c0 	call	80064c <__sprint_r>
  801510:	103e1c1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801514:	dc800e17 	ldw	r18,56(sp)
  801518:	dc400d17 	ldw	r17,52(sp)
  80151c:	d8c01904 	addi	r3,sp,100
  801520:	003e2e06 	br	800ddc <___vfprintf_internal_r+0x738>
  801524:	d9414c17 	ldw	r5,1328(sp)
  801528:	2880004c 	andi	r2,r5,1
  80152c:	1005003a 	cmpeq	r2,r2,zero
  801530:	103dda1e 	bne	r2,zero,800c9c <___vfprintf_internal_r+0x5f8>
  801534:	003e9f06 	br	800fb4 <___vfprintf_internal_r+0x910>
  801538:	d8c14117 	ldw	r3,1284(sp)
  80153c:	9125883a 	add	r18,r18,r4
  801540:	8c400044 	addi	r17,r17,1
  801544:	008001c4 	movi	r2,7
  801548:	a8c00015 	stw	r3,0(r21)
  80154c:	a9000115 	stw	r4,4(r21)
  801550:	dc800e15 	stw	r18,56(sp)
  801554:	dc400d15 	stw	r17,52(sp)
  801558:	14426616 	blt	r2,r17,801ef4 <___vfprintf_internal_r+0x1850>
  80155c:	a8c00204 	addi	r3,r21,8
  801560:	d9414917 	ldw	r5,1316(sp)
  801564:	00800044 	movi	r2,1
  801568:	94800044 	addi	r18,r18,1
  80156c:	8c400044 	addi	r17,r17,1
  801570:	18800115 	stw	r2,4(r3)
  801574:	008001c4 	movi	r2,7
  801578:	19400015 	stw	r5,0(r3)
  80157c:	dc800e15 	stw	r18,56(sp)
  801580:	dc400d15 	stw	r17,52(sp)
  801584:	2021883a 	mov	r16,r4
  801588:	14425016 	blt	r2,r17,801ecc <___vfprintf_internal_r+0x1828>
  80158c:	19400204 	addi	r5,r3,8
  801590:	d9814717 	ldw	r6,1308(sp)
  801594:	8c400044 	addi	r17,r17,1
  801598:	dc400d15 	stw	r17,52(sp)
  80159c:	3107c83a 	sub	r3,r6,r4
  8015a0:	d9014117 	ldw	r4,1284(sp)
  8015a4:	90e5883a 	add	r18,r18,r3
  8015a8:	28c00115 	stw	r3,4(r5)
  8015ac:	8105883a 	add	r2,r16,r4
  8015b0:	28800015 	stw	r2,0(r5)
  8015b4:	008001c4 	movi	r2,7
  8015b8:	dc800e15 	stw	r18,56(sp)
  8015bc:	147f1d16 	blt	r2,r17,801234 <___vfprintf_internal_r+0xb90>
  8015c0:	28c00204 	addi	r3,r5,8
  8015c4:	003db506 	br	800c9c <___vfprintf_internal_r+0x5f8>
  8015c8:	3c000017 	ldw	r16,0(r7)
  8015cc:	3c400117 	ldw	r17,4(r7)
  8015d0:	39800204 	addi	r6,r7,8
  8015d4:	01000044 	movi	r4,1
  8015d8:	d9814015 	stw	r6,1280(sp)
  8015dc:	d8000405 	stb	zero,16(sp)
  8015e0:	003ebe06 	br	8010dc <___vfprintf_internal_r+0xa38>
  8015e4:	3c000017 	ldw	r16,0(r7)
  8015e8:	3c400117 	ldw	r17,4(r7)
  8015ec:	38800204 	addi	r2,r7,8
  8015f0:	d8814015 	stw	r2,1280(sp)
  8015f4:	003eb706 	br	8010d4 <___vfprintf_internal_r+0xa30>
  8015f8:	3c000017 	ldw	r16,0(r7)
  8015fc:	3c400117 	ldw	r17,4(r7)
  801600:	39000204 	addi	r4,r7,8
  801604:	d9014015 	stw	r4,1280(sp)
  801608:	0009883a 	mov	r4,zero
  80160c:	d8000405 	stb	zero,16(sp)
  801610:	003eb206 	br	8010dc <___vfprintf_internal_r+0xa38>
  801614:	38c00017 	ldw	r3,0(r7)
  801618:	39c00104 	addi	r7,r7,4
  80161c:	d8c14a15 	stw	r3,1320(sp)
  801620:	1800d10e 	bge	r3,zero,801968 <___vfprintf_internal_r+0x12c4>
  801624:	00c7c83a 	sub	r3,zero,r3
  801628:	d8c14a15 	stw	r3,1320(sp)
  80162c:	d9014c17 	ldw	r4,1328(sp)
  801630:	b8c00007 	ldb	r3,0(r23)
  801634:	21000114 	ori	r4,r4,4
  801638:	d9014c15 	stw	r4,1328(sp)
  80163c:	003c9806 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801640:	d9814c17 	ldw	r6,1328(sp)
  801644:	3080080c 	andi	r2,r6,32
  801648:	1001f026 	beq	r2,zero,801e0c <___vfprintf_internal_r+0x1768>
  80164c:	d9014b17 	ldw	r4,1324(sp)
  801650:	38800017 	ldw	r2,0(r7)
  801654:	39c00104 	addi	r7,r7,4
  801658:	d9c14015 	stw	r7,1280(sp)
  80165c:	2007d7fa 	srai	r3,r4,31
  801660:	d9c14017 	ldw	r7,1280(sp)
  801664:	11000015 	stw	r4,0(r2)
  801668:	10c00115 	stw	r3,4(r2)
  80166c:	003c6906 	br	800814 <___vfprintf_internal_r+0x170>
  801670:	b8c00007 	ldb	r3,0(r23)
  801674:	00801b04 	movi	r2,108
  801678:	18824f26 	beq	r3,r2,801fb8 <___vfprintf_internal_r+0x1914>
  80167c:	d9414c17 	ldw	r5,1328(sp)
  801680:	29400414 	ori	r5,r5,16
  801684:	d9414c15 	stw	r5,1328(sp)
  801688:	003c8506 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  80168c:	d9814c17 	ldw	r6,1328(sp)
  801690:	b8c00007 	ldb	r3,0(r23)
  801694:	31800814 	ori	r6,r6,32
  801698:	d9814c15 	stw	r6,1328(sp)
  80169c:	003c8006 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  8016a0:	d8814c17 	ldw	r2,1328(sp)
  8016a4:	3c000017 	ldw	r16,0(r7)
  8016a8:	00c01e04 	movi	r3,120
  8016ac:	10800094 	ori	r2,r2,2
  8016b0:	d8814c15 	stw	r2,1328(sp)
  8016b4:	39c00104 	addi	r7,r7,4
  8016b8:	01402074 	movhi	r5,129
  8016bc:	29567104 	addi	r5,r5,22980
  8016c0:	00800c04 	movi	r2,48
  8016c4:	0023883a 	mov	r17,zero
  8016c8:	01000084 	movi	r4,2
  8016cc:	d9c14015 	stw	r7,1280(sp)
  8016d0:	d8c14d15 	stw	r3,1332(sp)
  8016d4:	d9414415 	stw	r5,1296(sp)
  8016d8:	d8800445 	stb	r2,17(sp)
  8016dc:	d8c00485 	stb	r3,18(sp)
  8016e0:	d8000405 	stb	zero,16(sp)
  8016e4:	003e7d06 	br	8010dc <___vfprintf_internal_r+0xa38>
  8016e8:	d8814c17 	ldw	r2,1328(sp)
  8016ec:	b8c00007 	ldb	r3,0(r23)
  8016f0:	10801014 	ori	r2,r2,64
  8016f4:	d8814c15 	stw	r2,1328(sp)
  8016f8:	003c6906 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  8016fc:	d9414c17 	ldw	r5,1328(sp)
  801700:	2880020c 	andi	r2,r5,8
  801704:	1001df26 	beq	r2,zero,801e84 <___vfprintf_internal_r+0x17e0>
  801708:	39800017 	ldw	r6,0(r7)
  80170c:	38800204 	addi	r2,r7,8
  801710:	d8814015 	stw	r2,1280(sp)
  801714:	d9814215 	stw	r6,1288(sp)
  801718:	39c00117 	ldw	r7,4(r7)
  80171c:	d9c14315 	stw	r7,1292(sp)
  801720:	d9014217 	ldw	r4,1288(sp)
  801724:	d9414317 	ldw	r5,1292(sp)
  801728:	08070440 	call	807044 <__isinfd>
  80172c:	10021726 	beq	r2,zero,801f8c <___vfprintf_internal_r+0x18e8>
  801730:	d9014217 	ldw	r4,1288(sp)
  801734:	d9414317 	ldw	r5,1292(sp)
  801738:	000d883a 	mov	r6,zero
  80173c:	000f883a 	mov	r7,zero
  801740:	080908c0 	call	80908c <__ltdf2>
  801744:	1002ca16 	blt	r2,zero,802270 <___vfprintf_internal_r+0x1bcc>
  801748:	d9414d17 	ldw	r5,1332(sp)
  80174c:	008011c4 	movi	r2,71
  801750:	11420a16 	blt	r2,r5,801f7c <___vfprintf_internal_r+0x18d8>
  801754:	01802074 	movhi	r6,129
  801758:	31967604 	addi	r6,r6,23000
  80175c:	d9814115 	stw	r6,1284(sp)
  801760:	d9014c17 	ldw	r4,1328(sp)
  801764:	00c000c4 	movi	r3,3
  801768:	00bfdfc4 	movi	r2,-129
  80176c:	2088703a 	and	r4,r4,r2
  801770:	180f883a 	mov	r7,r3
  801774:	d8c14515 	stw	r3,1300(sp)
  801778:	d9014c15 	stw	r4,1328(sp)
  80177c:	d8014615 	stw	zero,1304(sp)
  801780:	003e6a06 	br	80112c <___vfprintf_internal_r+0xa88>
  801784:	38800017 	ldw	r2,0(r7)
  801788:	00c00044 	movi	r3,1
  80178c:	39c00104 	addi	r7,r7,4
  801790:	d9c14015 	stw	r7,1280(sp)
  801794:	d9000f04 	addi	r4,sp,60
  801798:	180f883a 	mov	r7,r3
  80179c:	d8c14515 	stw	r3,1300(sp)
  8017a0:	d9014115 	stw	r4,1284(sp)
  8017a4:	d8800f05 	stb	r2,60(sp)
  8017a8:	d8000405 	stb	zero,16(sp)
  8017ac:	003cac06 	br	800a60 <___vfprintf_internal_r+0x3bc>
  8017b0:	01402074 	movhi	r5,129
  8017b4:	29567c04 	addi	r5,r5,23024
  8017b8:	d9414415 	stw	r5,1296(sp)
  8017bc:	d9814c17 	ldw	r6,1328(sp)
  8017c0:	3080080c 	andi	r2,r6,32
  8017c4:	1000f926 	beq	r2,zero,801bac <___vfprintf_internal_r+0x1508>
  8017c8:	3c000017 	ldw	r16,0(r7)
  8017cc:	3c400117 	ldw	r17,4(r7)
  8017d0:	38800204 	addi	r2,r7,8
  8017d4:	d8814015 	stw	r2,1280(sp)
  8017d8:	d9414c17 	ldw	r5,1328(sp)
  8017dc:	2880004c 	andi	r2,r5,1
  8017e0:	1005003a 	cmpeq	r2,r2,zero
  8017e4:	1000b31e 	bne	r2,zero,801ab4 <___vfprintf_internal_r+0x1410>
  8017e8:	8444b03a 	or	r2,r16,r17
  8017ec:	1000b126 	beq	r2,zero,801ab4 <___vfprintf_internal_r+0x1410>
  8017f0:	d9814d17 	ldw	r6,1332(sp)
  8017f4:	29400094 	ori	r5,r5,2
  8017f8:	00800c04 	movi	r2,48
  8017fc:	01000084 	movi	r4,2
  801800:	d9414c15 	stw	r5,1328(sp)
  801804:	d8800445 	stb	r2,17(sp)
  801808:	d9800485 	stb	r6,18(sp)
  80180c:	d8000405 	stb	zero,16(sp)
  801810:	003e3206 	br	8010dc <___vfprintf_internal_r+0xa38>
  801814:	01802074 	movhi	r6,129
  801818:	31967104 	addi	r6,r6,22980
  80181c:	d9814415 	stw	r6,1296(sp)
  801820:	003fe606 	br	8017bc <___vfprintf_internal_r+0x1118>
  801824:	00800ac4 	movi	r2,43
  801828:	d8800405 	stb	r2,16(sp)
  80182c:	b8c00007 	ldb	r3,0(r23)
  801830:	003c1b06 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801834:	d8814c17 	ldw	r2,1328(sp)
  801838:	b8c00007 	ldb	r3,0(r23)
  80183c:	10800054 	ori	r2,r2,1
  801840:	d8814c15 	stw	r2,1328(sp)
  801844:	003c1606 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801848:	d8800407 	ldb	r2,16(sp)
  80184c:	1000461e 	bne	r2,zero,801968 <___vfprintf_internal_r+0x12c4>
  801850:	00800804 	movi	r2,32
  801854:	d8800405 	stb	r2,16(sp)
  801858:	b8c00007 	ldb	r3,0(r23)
  80185c:	003c1006 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801860:	d9814c17 	ldw	r6,1328(sp)
  801864:	b8c00007 	ldb	r3,0(r23)
  801868:	31800214 	ori	r6,r6,8
  80186c:	d9814c15 	stw	r6,1328(sp)
  801870:	003c0b06 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801874:	0007883a 	mov	r3,zero
  801878:	01000244 	movi	r4,9
  80187c:	188002a4 	muli	r2,r3,10
  801880:	b8c00007 	ldb	r3,0(r23)
  801884:	d9814d17 	ldw	r6,1332(sp)
  801888:	bdc00044 	addi	r23,r23,1
  80188c:	d8c14d15 	stw	r3,1332(sp)
  801890:	d9414d17 	ldw	r5,1332(sp)
  801894:	3085883a 	add	r2,r6,r2
  801898:	10fff404 	addi	r3,r2,-48
  80189c:	28bff404 	addi	r2,r5,-48
  8018a0:	20bff62e 	bgeu	r4,r2,80187c <___vfprintf_internal_r+0x11d8>
  8018a4:	d8c14a15 	stw	r3,1320(sp)
  8018a8:	003bff06 	br	8008a8 <___vfprintf_internal_r+0x204>
  8018ac:	d9414c17 	ldw	r5,1328(sp)
  8018b0:	b8c00007 	ldb	r3,0(r23)
  8018b4:	29402014 	ori	r5,r5,128
  8018b8:	d9414c15 	stw	r5,1328(sp)
  8018bc:	003bf806 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  8018c0:	b8c00007 	ldb	r3,0(r23)
  8018c4:	00800a84 	movi	r2,42
  8018c8:	bdc00044 	addi	r23,r23,1
  8018cc:	18831526 	beq	r3,r2,802524 <___vfprintf_internal_r+0x1e80>
  8018d0:	d8c14d15 	stw	r3,1332(sp)
  8018d4:	18bff404 	addi	r2,r3,-48
  8018d8:	00c00244 	movi	r3,9
  8018dc:	18827836 	bltu	r3,r2,8022c0 <___vfprintf_internal_r+0x1c1c>
  8018e0:	000d883a 	mov	r6,zero
  8018e4:	308002a4 	muli	r2,r6,10
  8018e8:	b9800007 	ldb	r6,0(r23)
  8018ec:	d9414d17 	ldw	r5,1332(sp)
  8018f0:	bdc00044 	addi	r23,r23,1
  8018f4:	d9814d15 	stw	r6,1332(sp)
  8018f8:	d9014d17 	ldw	r4,1332(sp)
  8018fc:	1145883a 	add	r2,r2,r5
  801900:	11bff404 	addi	r6,r2,-48
  801904:	20bff404 	addi	r2,r4,-48
  801908:	18bff62e 	bgeu	r3,r2,8018e4 <___vfprintf_internal_r+0x1240>
  80190c:	3027883a 	mov	r19,r6
  801910:	303be50e 	bge	r6,zero,8008a8 <___vfprintf_internal_r+0x204>
  801914:	04ffffc4 	movi	r19,-1
  801918:	003be306 	br	8008a8 <___vfprintf_internal_r+0x204>
  80191c:	d8000405 	stb	zero,16(sp)
  801920:	39800017 	ldw	r6,0(r7)
  801924:	39c00104 	addi	r7,r7,4
  801928:	d9c14015 	stw	r7,1280(sp)
  80192c:	d9814115 	stw	r6,1284(sp)
  801930:	3001c926 	beq	r6,zero,802058 <___vfprintf_internal_r+0x19b4>
  801934:	98000e16 	blt	r19,zero,801970 <___vfprintf_internal_r+0x12cc>
  801938:	d9014117 	ldw	r4,1284(sp)
  80193c:	000b883a 	mov	r5,zero
  801940:	980d883a 	mov	r6,r19
  801944:	08057600 	call	805760 <memchr>
  801948:	10025926 	beq	r2,zero,8022b0 <___vfprintf_internal_r+0x1c0c>
  80194c:	d8c14117 	ldw	r3,1284(sp)
  801950:	10cfc83a 	sub	r7,r2,r3
  801954:	99c19e16 	blt	r19,r7,801fd0 <___vfprintf_internal_r+0x192c>
  801958:	d9c14515 	stw	r7,1300(sp)
  80195c:	38000916 	blt	r7,zero,801984 <___vfprintf_internal_r+0x12e0>
  801960:	d8014615 	stw	zero,1304(sp)
  801964:	003df106 	br	80112c <___vfprintf_internal_r+0xa88>
  801968:	b8c00007 	ldb	r3,0(r23)
  80196c:	003bcc06 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801970:	d9014117 	ldw	r4,1284(sp)
  801974:	08005d80 	call	8005d8 <strlen>
  801978:	d8814515 	stw	r2,1300(sp)
  80197c:	100f883a 	mov	r7,r2
  801980:	103ff70e 	bge	r2,zero,801960 <___vfprintf_internal_r+0x12bc>
  801984:	d8014515 	stw	zero,1300(sp)
  801988:	d8014615 	stw	zero,1304(sp)
  80198c:	003de706 	br	80112c <___vfprintf_internal_r+0xa88>
  801990:	20c03fcc 	andi	r3,r4,255
  801994:	00800044 	movi	r2,1
  801998:	18802d26 	beq	r3,r2,801a50 <___vfprintf_internal_r+0x13ac>
  80199c:	18800e36 	bltu	r3,r2,8019d8 <___vfprintf_internal_r+0x1334>
  8019a0:	00800084 	movi	r2,2
  8019a4:	1880fa26 	beq	r3,r2,801d90 <___vfprintf_internal_r+0x16ec>
  8019a8:	01002074 	movhi	r4,129
  8019ac:	21168104 	addi	r4,r4,23044
  8019b0:	08005d80 	call	8005d8 <strlen>
  8019b4:	100f883a 	mov	r7,r2
  8019b8:	dcc14515 	stw	r19,1300(sp)
  8019bc:	9880010e 	bge	r19,r2,8019c4 <___vfprintf_internal_r+0x1320>
  8019c0:	d8814515 	stw	r2,1300(sp)
  8019c4:	00802074 	movhi	r2,129
  8019c8:	10968104 	addi	r2,r2,23044
  8019cc:	dcc14615 	stw	r19,1304(sp)
  8019d0:	d8814115 	stw	r2,1284(sp)
  8019d4:	003dd506 	br	80112c <___vfprintf_internal_r+0xa88>
  8019d8:	d9401904 	addi	r5,sp,100
  8019dc:	dd000f04 	addi	r20,sp,60
  8019e0:	d9414115 	stw	r5,1284(sp)
  8019e4:	880a977a 	slli	r5,r17,29
  8019e8:	d9814117 	ldw	r6,1284(sp)
  8019ec:	8004d0fa 	srli	r2,r16,3
  8019f0:	8806d0fa 	srli	r3,r17,3
  8019f4:	810001cc 	andi	r4,r16,7
  8019f8:	2884b03a 	or	r2,r5,r2
  8019fc:	31bfffc4 	addi	r6,r6,-1
  801a00:	21000c04 	addi	r4,r4,48
  801a04:	d9814115 	stw	r6,1284(sp)
  801a08:	10cab03a 	or	r5,r2,r3
  801a0c:	31000005 	stb	r4,0(r6)
  801a10:	1021883a 	mov	r16,r2
  801a14:	1823883a 	mov	r17,r3
  801a18:	283ff21e 	bne	r5,zero,8019e4 <___vfprintf_internal_r+0x1340>
  801a1c:	d8c14c17 	ldw	r3,1328(sp)
  801a20:	1880004c 	andi	r2,r3,1
  801a24:	1005003a 	cmpeq	r2,r2,zero
  801a28:	103db91e 	bne	r2,zero,801110 <___vfprintf_internal_r+0xa6c>
  801a2c:	20803fcc 	andi	r2,r4,255
  801a30:	1080201c 	xori	r2,r2,128
  801a34:	10bfe004 	addi	r2,r2,-128
  801a38:	00c00c04 	movi	r3,48
  801a3c:	10fdb426 	beq	r2,r3,801110 <___vfprintf_internal_r+0xa6c>
  801a40:	31bfffc4 	addi	r6,r6,-1
  801a44:	d9814115 	stw	r6,1284(sp)
  801a48:	30c00005 	stb	r3,0(r6)
  801a4c:	003db006 	br	801110 <___vfprintf_internal_r+0xa6c>
  801a50:	88800068 	cmpgeui	r2,r17,1
  801a54:	10002c1e 	bne	r2,zero,801b08 <___vfprintf_internal_r+0x1464>
  801a58:	8800021e 	bne	r17,zero,801a64 <___vfprintf_internal_r+0x13c0>
  801a5c:	00800244 	movi	r2,9
  801a60:	14002936 	bltu	r2,r16,801b08 <___vfprintf_internal_r+0x1464>
  801a64:	d90018c4 	addi	r4,sp,99
  801a68:	dd000f04 	addi	r20,sp,60
  801a6c:	d9014115 	stw	r4,1284(sp)
  801a70:	d9014117 	ldw	r4,1284(sp)
  801a74:	80800c04 	addi	r2,r16,48
  801a78:	20800005 	stb	r2,0(r4)
  801a7c:	003da406 	br	801110 <___vfprintf_internal_r+0xa6c>
  801a80:	dc400d17 	ldw	r17,52(sp)
  801a84:	07002074 	movhi	fp,129
  801a88:	e7168884 	addi	fp,fp,23074
  801a8c:	9425883a 	add	r18,r18,r16
  801a90:	8c400044 	addi	r17,r17,1
  801a94:	008001c4 	movi	r2,7
  801a98:	1f000015 	stw	fp,0(r3)
  801a9c:	1c000115 	stw	r16,4(r3)
  801aa0:	dc800e15 	stw	r18,56(sp)
  801aa4:	dc400d15 	stw	r17,52(sp)
  801aa8:	147de216 	blt	r2,r17,801234 <___vfprintf_internal_r+0xb90>
  801aac:	18c00204 	addi	r3,r3,8
  801ab0:	003c7a06 	br	800c9c <___vfprintf_internal_r+0x5f8>
  801ab4:	01000084 	movi	r4,2
  801ab8:	d8000405 	stb	zero,16(sp)
  801abc:	003d8706 	br	8010dc <___vfprintf_internal_r+0xa38>
  801ac0:	d9814c17 	ldw	r6,1328(sp)
  801ac4:	30c4703a 	and	r2,r6,r3
  801ac8:	1005003a 	cmpeq	r2,r2,zero
  801acc:	103cb926 	beq	r2,zero,800db4 <___vfprintf_internal_r+0x710>
  801ad0:	d9014117 	ldw	r4,1284(sp)
  801ad4:	94800044 	addi	r18,r18,1
  801ad8:	8c400044 	addi	r17,r17,1
  801adc:	008001c4 	movi	r2,7
  801ae0:	a9000015 	stw	r4,0(r21)
  801ae4:	a8c00115 	stw	r3,4(r21)
  801ae8:	dc800e15 	stw	r18,56(sp)
  801aec:	dc400d15 	stw	r17,52(sp)
  801af0:	147e6616 	blt	r2,r17,80148c <___vfprintf_internal_r+0xde8>
  801af4:	acc00204 	addi	r19,r21,8
  801af8:	003cd706 	br	800e58 <___vfprintf_internal_r+0x7b4>
  801afc:	07002074 	movhi	fp,129
  801b00:	e7168884 	addi	fp,fp,23074
  801b04:	003c4f06 	br	800c44 <___vfprintf_internal_r+0x5a0>
  801b08:	dd000f04 	addi	r20,sp,60
  801b0c:	dc801904 	addi	r18,sp,100
  801b10:	8009883a 	mov	r4,r16
  801b14:	880b883a 	mov	r5,r17
  801b18:	01800284 	movi	r6,10
  801b1c:	000f883a 	mov	r7,zero
  801b20:	0807d9c0 	call	807d9c <__umoddi3>
  801b24:	12000c04 	addi	r8,r2,48
  801b28:	94bfffc4 	addi	r18,r18,-1
  801b2c:	8009883a 	mov	r4,r16
  801b30:	880b883a 	mov	r5,r17
  801b34:	01800284 	movi	r6,10
  801b38:	000f883a 	mov	r7,zero
  801b3c:	92000005 	stb	r8,0(r18)
  801b40:	08077c00 	call	8077c0 <__udivdi3>
  801b44:	1009883a 	mov	r4,r2
  801b48:	1021883a 	mov	r16,r2
  801b4c:	18800068 	cmpgeui	r2,r3,1
  801b50:	1823883a 	mov	r17,r3
  801b54:	103fee1e 	bne	r2,zero,801b10 <___vfprintf_internal_r+0x146c>
  801b58:	1800021e 	bne	r3,zero,801b64 <___vfprintf_internal_r+0x14c0>
  801b5c:	00800244 	movi	r2,9
  801b60:	113feb36 	bltu	r2,r4,801b10 <___vfprintf_internal_r+0x146c>
  801b64:	94bfffc4 	addi	r18,r18,-1
  801b68:	dc814115 	stw	r18,1284(sp)
  801b6c:	003fc006 	br	801a70 <___vfprintf_internal_r+0x13cc>
  801b70:	d9014c17 	ldw	r4,1328(sp)
  801b74:	2080004c 	andi	r2,r4,1
  801b78:	10009a1e 	bne	r2,zero,801de4 <___vfprintf_internal_r+0x1740>
  801b7c:	d9401904 	addi	r5,sp,100
  801b80:	dd000f04 	addi	r20,sp,60
  801b84:	d9414115 	stw	r5,1284(sp)
  801b88:	003d6106 	br	801110 <___vfprintf_internal_r+0xa6c>
  801b8c:	d9014f17 	ldw	r4,1340(sp)
  801b90:	b00b883a 	mov	r5,r22
  801b94:	d9800c04 	addi	r6,sp,48
  801b98:	080064c0 	call	80064c <__sprint_r>
  801b9c:	103c791e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801ba0:	dc800e17 	ldw	r18,56(sp)
  801ba4:	d8c01904 	addi	r3,sp,100
  801ba8:	003cff06 	br	800fa8 <___vfprintf_internal_r+0x904>
  801bac:	d8c14c17 	ldw	r3,1328(sp)
  801bb0:	1880040c 	andi	r2,r3,16
  801bb4:	1000711e 	bne	r2,zero,801d7c <___vfprintf_internal_r+0x16d8>
  801bb8:	d9014c17 	ldw	r4,1328(sp)
  801bbc:	2080100c 	andi	r2,r4,64
  801bc0:	10006e26 	beq	r2,zero,801d7c <___vfprintf_internal_r+0x16d8>
  801bc4:	3c00000b 	ldhu	r16,0(r7)
  801bc8:	0023883a 	mov	r17,zero
  801bcc:	39c00104 	addi	r7,r7,4
  801bd0:	d9c14015 	stw	r7,1280(sp)
  801bd4:	003f0006 	br	8017d8 <___vfprintf_internal_r+0x1134>
  801bd8:	dc400d17 	ldw	r17,52(sp)
  801bdc:	07002074 	movhi	fp,129
  801be0:	e7168884 	addi	fp,fp,23074
  801be4:	9425883a 	add	r18,r18,r16
  801be8:	8c400044 	addi	r17,r17,1
  801bec:	008001c4 	movi	r2,7
  801bf0:	1f000015 	stw	fp,0(r3)
  801bf4:	1c000115 	stw	r16,4(r3)
  801bf8:	dc800e15 	stw	r18,56(sp)
  801bfc:	dc400d15 	stw	r17,52(sp)
  801c00:	147d7616 	blt	r2,r17,8011dc <___vfprintf_internal_r+0xb38>
  801c04:	18c00204 	addi	r3,r3,8
  801c08:	003d7b06 	br	8011f8 <___vfprintf_internal_r+0xb54>
  801c0c:	dc800e17 	ldw	r18,56(sp)
  801c10:	dc400d17 	ldw	r17,52(sp)
  801c14:	07002074 	movhi	fp,129
  801c18:	e7168c84 	addi	fp,fp,23090
  801c1c:	003bc006 	br	800b20 <___vfprintf_internal_r+0x47c>
  801c20:	d9014f17 	ldw	r4,1340(sp)
  801c24:	b00b883a 	mov	r5,r22
  801c28:	d9800c04 	addi	r6,sp,48
  801c2c:	080064c0 	call	80064c <__sprint_r>
  801c30:	103c541e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801c34:	dc800e17 	ldw	r18,56(sp)
  801c38:	d8c01904 	addi	r3,sp,100
  801c3c:	003ce906 	br	800fe4 <___vfprintf_internal_r+0x940>
  801c40:	3c000017 	ldw	r16,0(r7)
  801c44:	0009883a 	mov	r4,zero
  801c48:	39c00104 	addi	r7,r7,4
  801c4c:	0023883a 	mov	r17,zero
  801c50:	d9c14015 	stw	r7,1280(sp)
  801c54:	d8000405 	stb	zero,16(sp)
  801c58:	003d2006 	br	8010dc <___vfprintf_internal_r+0xa38>
  801c5c:	38800017 	ldw	r2,0(r7)
  801c60:	39c00104 	addi	r7,r7,4
  801c64:	d9c14015 	stw	r7,1280(sp)
  801c68:	1023d7fa 	srai	r17,r2,31
  801c6c:	1021883a 	mov	r16,r2
  801c70:	003d1806 	br	8010d4 <___vfprintf_internal_r+0xa30>
  801c74:	3c000017 	ldw	r16,0(r7)
  801c78:	01000044 	movi	r4,1
  801c7c:	39c00104 	addi	r7,r7,4
  801c80:	0023883a 	mov	r17,zero
  801c84:	d9c14015 	stw	r7,1280(sp)
  801c88:	d8000405 	stb	zero,16(sp)
  801c8c:	003d1306 	br	8010dc <___vfprintf_internal_r+0xa38>
  801c90:	00802074 	movhi	r2,129
  801c94:	10968804 	addi	r2,r2,23072
  801c98:	94800044 	addi	r18,r18,1
  801c9c:	8c400044 	addi	r17,r17,1
  801ca0:	a8800015 	stw	r2,0(r21)
  801ca4:	00c00044 	movi	r3,1
  801ca8:	008001c4 	movi	r2,7
  801cac:	a8c00115 	stw	r3,4(r21)
  801cb0:	dc800e15 	stw	r18,56(sp)
  801cb4:	dc400d15 	stw	r17,52(sp)
  801cb8:	1440ca16 	blt	r2,r17,801fe4 <___vfprintf_internal_r+0x1940>
  801cbc:	a8c00204 	addi	r3,r21,8
  801cc0:	2000061e 	bne	r4,zero,801cdc <___vfprintf_internal_r+0x1638>
  801cc4:	d9414717 	ldw	r5,1308(sp)
  801cc8:	2800041e 	bne	r5,zero,801cdc <___vfprintf_internal_r+0x1638>
  801ccc:	d9814c17 	ldw	r6,1328(sp)
  801cd0:	3080004c 	andi	r2,r6,1
  801cd4:	1005003a 	cmpeq	r2,r2,zero
  801cd8:	103bf01e 	bne	r2,zero,800c9c <___vfprintf_internal_r+0x5f8>
  801cdc:	00800044 	movi	r2,1
  801ce0:	dc400d17 	ldw	r17,52(sp)
  801ce4:	18800115 	stw	r2,4(r3)
  801ce8:	d8814917 	ldw	r2,1316(sp)
  801cec:	94800044 	addi	r18,r18,1
  801cf0:	8c400044 	addi	r17,r17,1
  801cf4:	18800015 	stw	r2,0(r3)
  801cf8:	008001c4 	movi	r2,7
  801cfc:	dc800e15 	stw	r18,56(sp)
  801d00:	dc400d15 	stw	r17,52(sp)
  801d04:	1440ca16 	blt	r2,r17,802030 <___vfprintf_internal_r+0x198c>
  801d08:	18c00204 	addi	r3,r3,8
  801d0c:	0121c83a 	sub	r16,zero,r4
  801d10:	0400500e 	bge	zero,r16,801e54 <___vfprintf_internal_r+0x17b0>
  801d14:	00800404 	movi	r2,16
  801d18:	1400800e 	bge	r2,r16,801f1c <___vfprintf_internal_r+0x1878>
  801d1c:	1027883a 	mov	r19,r2
  801d20:	07002074 	movhi	fp,129
  801d24:	e7168884 	addi	fp,fp,23074
  801d28:	050001c4 	movi	r20,7
  801d2c:	00000306 	br	801d3c <___vfprintf_internal_r+0x1698>
  801d30:	18c00204 	addi	r3,r3,8
  801d34:	843ffc04 	addi	r16,r16,-16
  801d38:	9c007a0e 	bge	r19,r16,801f24 <___vfprintf_internal_r+0x1880>
  801d3c:	94800404 	addi	r18,r18,16
  801d40:	8c400044 	addi	r17,r17,1
  801d44:	1f000015 	stw	fp,0(r3)
  801d48:	1cc00115 	stw	r19,4(r3)
  801d4c:	dc800e15 	stw	r18,56(sp)
  801d50:	dc400d15 	stw	r17,52(sp)
  801d54:	a47ff60e 	bge	r20,r17,801d30 <___vfprintf_internal_r+0x168c>
  801d58:	d9014f17 	ldw	r4,1340(sp)
  801d5c:	b00b883a 	mov	r5,r22
  801d60:	d9800c04 	addi	r6,sp,48
  801d64:	080064c0 	call	80064c <__sprint_r>
  801d68:	103c061e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801d6c:	dc800e17 	ldw	r18,56(sp)
  801d70:	dc400d17 	ldw	r17,52(sp)
  801d74:	d8c01904 	addi	r3,sp,100
  801d78:	003fee06 	br	801d34 <___vfprintf_internal_r+0x1690>
  801d7c:	3c000017 	ldw	r16,0(r7)
  801d80:	0023883a 	mov	r17,zero
  801d84:	39c00104 	addi	r7,r7,4
  801d88:	d9c14015 	stw	r7,1280(sp)
  801d8c:	003e9206 	br	8017d8 <___vfprintf_internal_r+0x1134>
  801d90:	d9401904 	addi	r5,sp,100
  801d94:	dd000f04 	addi	r20,sp,60
  801d98:	d9414115 	stw	r5,1284(sp)
  801d9c:	d9814417 	ldw	r6,1296(sp)
  801da0:	880a973a 	slli	r5,r17,28
  801da4:	8004d13a 	srli	r2,r16,4
  801da8:	810003cc 	andi	r4,r16,15
  801dac:	3109883a 	add	r4,r6,r4
  801db0:	2884b03a 	or	r2,r5,r2
  801db4:	21400003 	ldbu	r5,0(r4)
  801db8:	d9014117 	ldw	r4,1284(sp)
  801dbc:	8806d13a 	srli	r3,r17,4
  801dc0:	1021883a 	mov	r16,r2
  801dc4:	213fffc4 	addi	r4,r4,-1
  801dc8:	d9014115 	stw	r4,1284(sp)
  801dcc:	d9814117 	ldw	r6,1284(sp)
  801dd0:	10c8b03a 	or	r4,r2,r3
  801dd4:	1823883a 	mov	r17,r3
  801dd8:	31400005 	stb	r5,0(r6)
  801ddc:	203fef1e 	bne	r4,zero,801d9c <___vfprintf_internal_r+0x16f8>
  801de0:	003ccb06 	br	801110 <___vfprintf_internal_r+0xa6c>
  801de4:	00800c04 	movi	r2,48
  801de8:	d98018c4 	addi	r6,sp,99
  801dec:	dd000f04 	addi	r20,sp,60
  801df0:	d88018c5 	stb	r2,99(sp)
  801df4:	d9814115 	stw	r6,1284(sp)
  801df8:	003cc506 	br	801110 <___vfprintf_internal_r+0xa6c>
  801dfc:	dc400d17 	ldw	r17,52(sp)
  801e00:	07002074 	movhi	fp,129
  801e04:	e7168c84 	addi	fp,fp,23090
  801e08:	003bc706 	br	800d28 <___vfprintf_internal_r+0x684>
  801e0c:	d9414c17 	ldw	r5,1328(sp)
  801e10:	2880040c 	andi	r2,r5,16
  801e14:	10007c26 	beq	r2,zero,802008 <___vfprintf_internal_r+0x1964>
  801e18:	38800017 	ldw	r2,0(r7)
  801e1c:	39c00104 	addi	r7,r7,4
  801e20:	d9c14015 	stw	r7,1280(sp)
  801e24:	d9814b17 	ldw	r6,1324(sp)
  801e28:	d9c14017 	ldw	r7,1280(sp)
  801e2c:	11800015 	stw	r6,0(r2)
  801e30:	003a7806 	br	800814 <___vfprintf_internal_r+0x170>
  801e34:	d9014f17 	ldw	r4,1340(sp)
  801e38:	b00b883a 	mov	r5,r22
  801e3c:	d9800c04 	addi	r6,sp,48
  801e40:	080064c0 	call	80064c <__sprint_r>
  801e44:	103bcf1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801e48:	dc800e17 	ldw	r18,56(sp)
  801e4c:	dc400d17 	ldw	r17,52(sp)
  801e50:	d8c01904 	addi	r3,sp,100
  801e54:	d9014717 	ldw	r4,1308(sp)
  801e58:	d9414117 	ldw	r5,1284(sp)
  801e5c:	8c400044 	addi	r17,r17,1
  801e60:	9125883a 	add	r18,r18,r4
  801e64:	008001c4 	movi	r2,7
  801e68:	19400015 	stw	r5,0(r3)
  801e6c:	19000115 	stw	r4,4(r3)
  801e70:	dc800e15 	stw	r18,56(sp)
  801e74:	dc400d15 	stw	r17,52(sp)
  801e78:	147cee16 	blt	r2,r17,801234 <___vfprintf_internal_r+0xb90>
  801e7c:	18c00204 	addi	r3,r3,8
  801e80:	003b8606 	br	800c9c <___vfprintf_internal_r+0x5f8>
  801e84:	38c00017 	ldw	r3,0(r7)
  801e88:	39000204 	addi	r4,r7,8
  801e8c:	d9014015 	stw	r4,1280(sp)
  801e90:	d8c14215 	stw	r3,1288(sp)
  801e94:	39c00117 	ldw	r7,4(r7)
  801e98:	d9c14315 	stw	r7,1292(sp)
  801e9c:	003e2006 	br	801720 <___vfprintf_internal_r+0x107c>
  801ea0:	0005883a 	mov	r2,zero
  801ea4:	1409c83a 	sub	r4,r2,r16
  801ea8:	1105803a 	cmpltu	r2,r2,r4
  801eac:	044bc83a 	sub	r5,zero,r17
  801eb0:	2885c83a 	sub	r2,r5,r2
  801eb4:	2021883a 	mov	r16,r4
  801eb8:	1023883a 	mov	r17,r2
  801ebc:	01000044 	movi	r4,1
  801ec0:	00800b44 	movi	r2,45
  801ec4:	d8800405 	stb	r2,16(sp)
  801ec8:	003c8406 	br	8010dc <___vfprintf_internal_r+0xa38>
  801ecc:	d9014f17 	ldw	r4,1340(sp)
  801ed0:	b00b883a 	mov	r5,r22
  801ed4:	d9800c04 	addi	r6,sp,48
  801ed8:	080064c0 	call	80064c <__sprint_r>
  801edc:	103ba91e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801ee0:	dc800e17 	ldw	r18,56(sp)
  801ee4:	dc400d17 	ldw	r17,52(sp)
  801ee8:	d9000517 	ldw	r4,20(sp)
  801eec:	d9401904 	addi	r5,sp,100
  801ef0:	003da706 	br	801590 <___vfprintf_internal_r+0xeec>
  801ef4:	d9014f17 	ldw	r4,1340(sp)
  801ef8:	b00b883a 	mov	r5,r22
  801efc:	d9800c04 	addi	r6,sp,48
  801f00:	080064c0 	call	80064c <__sprint_r>
  801f04:	103b9f1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801f08:	dc800e17 	ldw	r18,56(sp)
  801f0c:	dc400d17 	ldw	r17,52(sp)
  801f10:	d9000517 	ldw	r4,20(sp)
  801f14:	d8c01904 	addi	r3,sp,100
  801f18:	003d9106 	br	801560 <___vfprintf_internal_r+0xebc>
  801f1c:	07002074 	movhi	fp,129
  801f20:	e7168884 	addi	fp,fp,23074
  801f24:	9425883a 	add	r18,r18,r16
  801f28:	8c400044 	addi	r17,r17,1
  801f2c:	008001c4 	movi	r2,7
  801f30:	1f000015 	stw	fp,0(r3)
  801f34:	1c000115 	stw	r16,4(r3)
  801f38:	dc800e15 	stw	r18,56(sp)
  801f3c:	dc400d15 	stw	r17,52(sp)
  801f40:	147fbc16 	blt	r2,r17,801e34 <___vfprintf_internal_r+0x1790>
  801f44:	18c00204 	addi	r3,r3,8
  801f48:	003fc206 	br	801e54 <___vfprintf_internal_r+0x17b0>
  801f4c:	d9014f17 	ldw	r4,1340(sp)
  801f50:	b00b883a 	mov	r5,r22
  801f54:	d9800c04 	addi	r6,sp,48
  801f58:	080064c0 	call	80064c <__sprint_r>
  801f5c:	103b891e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801f60:	dc800e17 	ldw	r18,56(sp)
  801f64:	d9000517 	ldw	r4,20(sp)
  801f68:	d8c01904 	addi	r3,sp,100
  801f6c:	003d0206 	br	801378 <___vfprintf_internal_r+0xcd4>
  801f70:	07002074 	movhi	fp,129
  801f74:	e7168884 	addi	fp,fp,23074
  801f78:	003be406 	br	800f0c <___vfprintf_internal_r+0x868>
  801f7c:	00802074 	movhi	r2,129
  801f80:	10967704 	addi	r2,r2,23004
  801f84:	d8814115 	stw	r2,1284(sp)
  801f88:	003df506 	br	801760 <___vfprintf_internal_r+0x10bc>
  801f8c:	d9014217 	ldw	r4,1288(sp)
  801f90:	d9414317 	ldw	r5,1292(sp)
  801f94:	08070840 	call	807084 <__isnand>
  801f98:	10003926 	beq	r2,zero,802080 <___vfprintf_internal_r+0x19dc>
  801f9c:	d9414d17 	ldw	r5,1332(sp)
  801fa0:	008011c4 	movi	r2,71
  801fa4:	1140ce16 	blt	r2,r5,8022e0 <___vfprintf_internal_r+0x1c3c>
  801fa8:	01802074 	movhi	r6,129
  801fac:	31967804 	addi	r6,r6,23008
  801fb0:	d9814115 	stw	r6,1284(sp)
  801fb4:	003dea06 	br	801760 <___vfprintf_internal_r+0x10bc>
  801fb8:	d9014c17 	ldw	r4,1328(sp)
  801fbc:	bdc00044 	addi	r23,r23,1
  801fc0:	b8c00007 	ldb	r3,0(r23)
  801fc4:	21000814 	ori	r4,r4,32
  801fc8:	d9014c15 	stw	r4,1328(sp)
  801fcc:	003a3406 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  801fd0:	dcc14515 	stw	r19,1300(sp)
  801fd4:	98011016 	blt	r19,zero,802418 <___vfprintf_internal_r+0x1d74>
  801fd8:	980f883a 	mov	r7,r19
  801fdc:	d8014615 	stw	zero,1304(sp)
  801fe0:	003c5206 	br	80112c <___vfprintf_internal_r+0xa88>
  801fe4:	d9014f17 	ldw	r4,1340(sp)
  801fe8:	b00b883a 	mov	r5,r22
  801fec:	d9800c04 	addi	r6,sp,48
  801ff0:	080064c0 	call	80064c <__sprint_r>
  801ff4:	103b631e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  801ff8:	dc800e17 	ldw	r18,56(sp)
  801ffc:	d9000517 	ldw	r4,20(sp)
  802000:	d8c01904 	addi	r3,sp,100
  802004:	003f2e06 	br	801cc0 <___vfprintf_internal_r+0x161c>
  802008:	d8c14c17 	ldw	r3,1328(sp)
  80200c:	1880100c 	andi	r2,r3,64
  802010:	1000a026 	beq	r2,zero,802294 <___vfprintf_internal_r+0x1bf0>
  802014:	38800017 	ldw	r2,0(r7)
  802018:	39c00104 	addi	r7,r7,4
  80201c:	d9c14015 	stw	r7,1280(sp)
  802020:	d9014b17 	ldw	r4,1324(sp)
  802024:	d9c14017 	ldw	r7,1280(sp)
  802028:	1100000d 	sth	r4,0(r2)
  80202c:	0039f906 	br	800814 <___vfprintf_internal_r+0x170>
  802030:	d9014f17 	ldw	r4,1340(sp)
  802034:	b00b883a 	mov	r5,r22
  802038:	d9800c04 	addi	r6,sp,48
  80203c:	080064c0 	call	80064c <__sprint_r>
  802040:	103b501e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  802044:	dc800e17 	ldw	r18,56(sp)
  802048:	dc400d17 	ldw	r17,52(sp)
  80204c:	d9000517 	ldw	r4,20(sp)
  802050:	d8c01904 	addi	r3,sp,100
  802054:	003f2d06 	br	801d0c <___vfprintf_internal_r+0x1668>
  802058:	00800184 	movi	r2,6
  80205c:	14c09a36 	bltu	r2,r19,8022c8 <___vfprintf_internal_r+0x1c24>
  802060:	dcc14515 	stw	r19,1300(sp)
  802064:	9800010e 	bge	r19,zero,80206c <___vfprintf_internal_r+0x19c8>
  802068:	d8014515 	stw	zero,1300(sp)
  80206c:	00802074 	movhi	r2,129
  802070:	10967a04 	addi	r2,r2,23016
  802074:	980f883a 	mov	r7,r19
  802078:	d8814115 	stw	r2,1284(sp)
  80207c:	003a7806 	br	800a60 <___vfprintf_internal_r+0x3bc>
  802080:	00bfffc4 	movi	r2,-1
  802084:	9880e226 	beq	r19,r2,802410 <___vfprintf_internal_r+0x1d6c>
  802088:	d9414d17 	ldw	r5,1332(sp)
  80208c:	008019c4 	movi	r2,103
  802090:	2880dc26 	beq	r5,r2,802404 <___vfprintf_internal_r+0x1d60>
  802094:	008011c4 	movi	r2,71
  802098:	2880da26 	beq	r5,r2,802404 <___vfprintf_internal_r+0x1d60>
  80209c:	d9414c17 	ldw	r5,1328(sp)
  8020a0:	d9014317 	ldw	r4,1292(sp)
  8020a4:	d9814217 	ldw	r6,1288(sp)
  8020a8:	29404014 	ori	r5,r5,256
  8020ac:	d9414c15 	stw	r5,1328(sp)
  8020b0:	2000cc16 	blt	r4,zero,8023e4 <___vfprintf_internal_r+0x1d40>
  8020b4:	3021883a 	mov	r16,r6
  8020b8:	2023883a 	mov	r17,r4
  8020bc:	0039883a 	mov	fp,zero
  8020c0:	d9414d17 	ldw	r5,1332(sp)
  8020c4:	00801984 	movi	r2,102
  8020c8:	2880b726 	beq	r5,r2,8023a8 <___vfprintf_internal_r+0x1d04>
  8020cc:	00801184 	movi	r2,70
  8020d0:	2880b526 	beq	r5,r2,8023a8 <___vfprintf_internal_r+0x1d04>
  8020d4:	00801944 	movi	r2,101
  8020d8:	2880c826 	beq	r5,r2,8023fc <___vfprintf_internal_r+0x1d58>
  8020dc:	00801144 	movi	r2,69
  8020e0:	2880c626 	beq	r5,r2,8023fc <___vfprintf_internal_r+0x1d58>
  8020e4:	9829883a 	mov	r20,r19
  8020e8:	d9014f17 	ldw	r4,1340(sp)
  8020ec:	d8800504 	addi	r2,sp,20
  8020f0:	880d883a 	mov	r6,r17
  8020f4:	d8800115 	stw	r2,4(sp)
  8020f8:	d8c00604 	addi	r3,sp,24
  8020fc:	d8800704 	addi	r2,sp,28
  802100:	800b883a 	mov	r5,r16
  802104:	01c00084 	movi	r7,2
  802108:	d8c00215 	stw	r3,8(sp)
  80210c:	d8800315 	stw	r2,12(sp)
  802110:	dd000015 	stw	r20,0(sp)
  802114:	08028c80 	call	8028c8 <_dtoa_r>
  802118:	d9814d17 	ldw	r6,1332(sp)
  80211c:	d8814115 	stw	r2,1284(sp)
  802120:	008019c4 	movi	r2,103
  802124:	30809526 	beq	r6,r2,80237c <___vfprintf_internal_r+0x1cd8>
  802128:	d8c14d17 	ldw	r3,1332(sp)
  80212c:	008011c4 	movi	r2,71
  802130:	18809226 	beq	r3,r2,80237c <___vfprintf_internal_r+0x1cd8>
  802134:	d9414117 	ldw	r5,1284(sp)
  802138:	d9814d17 	ldw	r6,1332(sp)
  80213c:	00801984 	movi	r2,102
  802140:	2d25883a 	add	r18,r5,r20
  802144:	30808626 	beq	r6,r2,802360 <___vfprintf_internal_r+0x1cbc>
  802148:	00801184 	movi	r2,70
  80214c:	30808426 	beq	r6,r2,802360 <___vfprintf_internal_r+0x1cbc>
  802150:	000d883a 	mov	r6,zero
  802154:	000f883a 	mov	r7,zero
  802158:	880b883a 	mov	r5,r17
  80215c:	8009883a 	mov	r4,r16
  802160:	0808e6c0 	call	808e6c <__eqdf2>
  802164:	1000751e 	bne	r2,zero,80233c <___vfprintf_internal_r+0x1c98>
  802168:	9005883a 	mov	r2,r18
  80216c:	dc800715 	stw	r18,28(sp)
  802170:	d9014117 	ldw	r4,1284(sp)
  802174:	d9414d17 	ldw	r5,1332(sp)
  802178:	00c019c4 	movi	r3,103
  80217c:	1125c83a 	sub	r18,r2,r4
  802180:	28c06826 	beq	r5,r3,802324 <___vfprintf_internal_r+0x1c80>
  802184:	008011c4 	movi	r2,71
  802188:	28806626 	beq	r5,r2,802324 <___vfprintf_internal_r+0x1c80>
  80218c:	d9000517 	ldw	r4,20(sp)
  802190:	d8c14d17 	ldw	r3,1332(sp)
  802194:	00801944 	movi	r2,101
  802198:	10c05516 	blt	r2,r3,8022f0 <___vfprintf_internal_r+0x1c4c>
  80219c:	213fffc4 	addi	r4,r4,-1
  8021a0:	d9000515 	stw	r4,20(sp)
  8021a4:	d8c00805 	stb	r3,32(sp)
  8021a8:	2021883a 	mov	r16,r4
  8021ac:	2000c116 	blt	r4,zero,8024b4 <___vfprintf_internal_r+0x1e10>
  8021b0:	00800ac4 	movi	r2,43
  8021b4:	d8800845 	stb	r2,33(sp)
  8021b8:	00800244 	movi	r2,9
  8021bc:	1400af0e 	bge	r2,r16,80247c <___vfprintf_internal_r+0x1dd8>
  8021c0:	1027883a 	mov	r19,r2
  8021c4:	dc400b84 	addi	r17,sp,46
  8021c8:	8009883a 	mov	r4,r16
  8021cc:	01400284 	movi	r5,10
  8021d0:	08095540 	call	809554 <__modsi3>
  8021d4:	10800c04 	addi	r2,r2,48
  8021d8:	8c7fffc4 	addi	r17,r17,-1
  8021dc:	8009883a 	mov	r4,r16
  8021e0:	01400284 	movi	r5,10
  8021e4:	88800005 	stb	r2,0(r17)
  8021e8:	08094f40 	call	8094f4 <__divsi3>
  8021ec:	1021883a 	mov	r16,r2
  8021f0:	98bff516 	blt	r19,r2,8021c8 <___vfprintf_internal_r+0x1b24>
  8021f4:	10c00c04 	addi	r3,r2,48
  8021f8:	d88009c4 	addi	r2,sp,39
  8021fc:	108001c4 	addi	r2,r2,7
  802200:	897fffc4 	addi	r5,r17,-1
  802204:	88ffffc5 	stb	r3,-1(r17)
  802208:	2880a72e 	bgeu	r5,r2,8024a8 <___vfprintf_internal_r+0x1e04>
  80220c:	1009883a 	mov	r4,r2
  802210:	d9800804 	addi	r6,sp,32
  802214:	d8c00884 	addi	r3,sp,34
  802218:	28800003 	ldbu	r2,0(r5)
  80221c:	29400044 	addi	r5,r5,1
  802220:	18800005 	stb	r2,0(r3)
  802224:	18c00044 	addi	r3,r3,1
  802228:	293ffb36 	bltu	r5,r4,802218 <___vfprintf_internal_r+0x1b74>
  80222c:	1987c83a 	sub	r3,r3,r6
  802230:	00800044 	movi	r2,1
  802234:	d8c14815 	stw	r3,1312(sp)
  802238:	90cf883a 	add	r7,r18,r3
  80223c:	1480960e 	bge	r2,r18,802498 <___vfprintf_internal_r+0x1df4>
  802240:	39c00044 	addi	r7,r7,1
  802244:	d9c14515 	stw	r7,1300(sp)
  802248:	38003416 	blt	r7,zero,80231c <___vfprintf_internal_r+0x1c78>
  80224c:	e0803fcc 	andi	r2,fp,255
  802250:	1080201c 	xori	r2,r2,128
  802254:	10bfe004 	addi	r2,r2,-128
  802258:	10004e26 	beq	r2,zero,802394 <___vfprintf_internal_r+0x1cf0>
  80225c:	00800b44 	movi	r2,45
  802260:	dc814715 	stw	r18,1308(sp)
  802264:	d8014615 	stw	zero,1304(sp)
  802268:	d8800405 	stb	r2,16(sp)
  80226c:	003bb106 	br	801134 <___vfprintf_internal_r+0xa90>
  802270:	00800b44 	movi	r2,45
  802274:	d8800405 	stb	r2,16(sp)
  802278:	003d3306 	br	801748 <___vfprintf_internal_r+0x10a4>
  80227c:	d9014f17 	ldw	r4,1340(sp)
  802280:	b00b883a 	mov	r5,r22
  802284:	d9800c04 	addi	r6,sp,48
  802288:	080064c0 	call	80064c <__sprint_r>
  80228c:	103abd1e 	bne	r2,zero,800d84 <___vfprintf_internal_r+0x6e0>
  802290:	003abb06 	br	800d80 <___vfprintf_internal_r+0x6dc>
  802294:	38800017 	ldw	r2,0(r7)
  802298:	39c00104 	addi	r7,r7,4
  80229c:	d9c14015 	stw	r7,1280(sp)
  8022a0:	d9414b17 	ldw	r5,1324(sp)
  8022a4:	d9c14017 	ldw	r7,1280(sp)
  8022a8:	11400015 	stw	r5,0(r2)
  8022ac:	00395906 	br	800814 <___vfprintf_internal_r+0x170>
  8022b0:	980f883a 	mov	r7,r19
  8022b4:	dcc14515 	stw	r19,1300(sp)
  8022b8:	d8014615 	stw	zero,1304(sp)
  8022bc:	003b9b06 	br	80112c <___vfprintf_internal_r+0xa88>
  8022c0:	0027883a 	mov	r19,zero
  8022c4:	00397806 	br	8008a8 <___vfprintf_internal_r+0x204>
  8022c8:	00c02074 	movhi	r3,129
  8022cc:	18d67a04 	addi	r3,r3,23016
  8022d0:	100f883a 	mov	r7,r2
  8022d4:	d8814515 	stw	r2,1300(sp)
  8022d8:	d8c14115 	stw	r3,1284(sp)
  8022dc:	0039e006 	br	800a60 <___vfprintf_internal_r+0x3bc>
  8022e0:	00802074 	movhi	r2,129
  8022e4:	10967904 	addi	r2,r2,23012
  8022e8:	d8814115 	stw	r2,1284(sp)
  8022ec:	003d1c06 	br	801760 <___vfprintf_internal_r+0x10bc>
  8022f0:	d9414d17 	ldw	r5,1332(sp)
  8022f4:	00801984 	movi	r2,102
  8022f8:	28804926 	beq	r5,r2,802420 <___vfprintf_internal_r+0x1d7c>
  8022fc:	200f883a 	mov	r7,r4
  802300:	24805716 	blt	r4,r18,802460 <___vfprintf_internal_r+0x1dbc>
  802304:	d9414c17 	ldw	r5,1328(sp)
  802308:	2880004c 	andi	r2,r5,1
  80230c:	10000126 	beq	r2,zero,802314 <___vfprintf_internal_r+0x1c70>
  802310:	21c00044 	addi	r7,r4,1
  802314:	d9c14515 	stw	r7,1300(sp)
  802318:	383fcc0e 	bge	r7,zero,80224c <___vfprintf_internal_r+0x1ba8>
  80231c:	d8014515 	stw	zero,1300(sp)
  802320:	003fca06 	br	80224c <___vfprintf_internal_r+0x1ba8>
  802324:	d9000517 	ldw	r4,20(sp)
  802328:	00bfff04 	movi	r2,-4
  80232c:	1100480e 	bge	r2,r4,802450 <___vfprintf_internal_r+0x1dac>
  802330:	99004716 	blt	r19,r4,802450 <___vfprintf_internal_r+0x1dac>
  802334:	d8c14d15 	stw	r3,1332(sp)
  802338:	003ff006 	br	8022fc <___vfprintf_internal_r+0x1c58>
  80233c:	d8800717 	ldw	r2,28(sp)
  802340:	14bf8b2e 	bgeu	r2,r18,802170 <___vfprintf_internal_r+0x1acc>
  802344:	9007883a 	mov	r3,r18
  802348:	01000c04 	movi	r4,48
  80234c:	11000005 	stb	r4,0(r2)
  802350:	10800044 	addi	r2,r2,1
  802354:	d8800715 	stw	r2,28(sp)
  802358:	18bffc1e 	bne	r3,r2,80234c <___vfprintf_internal_r+0x1ca8>
  80235c:	003f8406 	br	802170 <___vfprintf_internal_r+0x1acc>
  802360:	d8814117 	ldw	r2,1284(sp)
  802364:	10c00007 	ldb	r3,0(r2)
  802368:	00800c04 	movi	r2,48
  80236c:	18805b26 	beq	r3,r2,8024dc <___vfprintf_internal_r+0x1e38>
  802370:	d9000517 	ldw	r4,20(sp)
  802374:	9125883a 	add	r18,r18,r4
  802378:	003f7506 	br	802150 <___vfprintf_internal_r+0x1aac>
  80237c:	d9014c17 	ldw	r4,1328(sp)
  802380:	2080004c 	andi	r2,r4,1
  802384:	1005003a 	cmpeq	r2,r2,zero
  802388:	103f6a26 	beq	r2,zero,802134 <___vfprintf_internal_r+0x1a90>
  80238c:	d8800717 	ldw	r2,28(sp)
  802390:	003f7706 	br	802170 <___vfprintf_internal_r+0x1acc>
  802394:	d9c14515 	stw	r7,1300(sp)
  802398:	38004d16 	blt	r7,zero,8024d0 <___vfprintf_internal_r+0x1e2c>
  80239c:	dc814715 	stw	r18,1308(sp)
  8023a0:	d8014615 	stw	zero,1304(sp)
  8023a4:	003b6106 	br	80112c <___vfprintf_internal_r+0xa88>
  8023a8:	d9014f17 	ldw	r4,1340(sp)
  8023ac:	d8800504 	addi	r2,sp,20
  8023b0:	d8800115 	stw	r2,4(sp)
  8023b4:	d8c00604 	addi	r3,sp,24
  8023b8:	d8800704 	addi	r2,sp,28
  8023bc:	800b883a 	mov	r5,r16
  8023c0:	880d883a 	mov	r6,r17
  8023c4:	01c000c4 	movi	r7,3
  8023c8:	d8c00215 	stw	r3,8(sp)
  8023cc:	d8800315 	stw	r2,12(sp)
  8023d0:	dcc00015 	stw	r19,0(sp)
  8023d4:	9829883a 	mov	r20,r19
  8023d8:	08028c80 	call	8028c8 <_dtoa_r>
  8023dc:	d8814115 	stw	r2,1284(sp)
  8023e0:	003f5106 	br	802128 <___vfprintf_internal_r+0x1a84>
  8023e4:	d8c14217 	ldw	r3,1288(sp)
  8023e8:	d9014317 	ldw	r4,1292(sp)
  8023ec:	07000b44 	movi	fp,45
  8023f0:	1821883a 	mov	r16,r3
  8023f4:	2460003c 	xorhi	r17,r4,32768
  8023f8:	003f3106 	br	8020c0 <___vfprintf_internal_r+0x1a1c>
  8023fc:	9d000044 	addi	r20,r19,1
  802400:	003f3906 	br	8020e8 <___vfprintf_internal_r+0x1a44>
  802404:	983f251e 	bne	r19,zero,80209c <___vfprintf_internal_r+0x19f8>
  802408:	04c00044 	movi	r19,1
  80240c:	003f2306 	br	80209c <___vfprintf_internal_r+0x19f8>
  802410:	04c00184 	movi	r19,6
  802414:	003f2106 	br	80209c <___vfprintf_internal_r+0x19f8>
  802418:	d8014515 	stw	zero,1300(sp)
  80241c:	003eee06 	br	801fd8 <___vfprintf_internal_r+0x1934>
  802420:	200f883a 	mov	r7,r4
  802424:	0100370e 	bge	zero,r4,802504 <___vfprintf_internal_r+0x1e60>
  802428:	9800031e 	bne	r19,zero,802438 <___vfprintf_internal_r+0x1d94>
  80242c:	d9814c17 	ldw	r6,1328(sp)
  802430:	3080004c 	andi	r2,r6,1
  802434:	103fb726 	beq	r2,zero,802314 <___vfprintf_internal_r+0x1c70>
  802438:	20800044 	addi	r2,r4,1
  80243c:	98a7883a 	add	r19,r19,r2
  802440:	dcc14515 	stw	r19,1300(sp)
  802444:	980f883a 	mov	r7,r19
  802448:	983f800e 	bge	r19,zero,80224c <___vfprintf_internal_r+0x1ba8>
  80244c:	003fb306 	br	80231c <___vfprintf_internal_r+0x1c78>
  802450:	d9814d17 	ldw	r6,1332(sp)
  802454:	31bfff84 	addi	r6,r6,-2
  802458:	d9814d15 	stw	r6,1332(sp)
  80245c:	003f4c06 	br	802190 <___vfprintf_internal_r+0x1aec>
  802460:	0100180e 	bge	zero,r4,8024c4 <___vfprintf_internal_r+0x1e20>
  802464:	00800044 	movi	r2,1
  802468:	1485883a 	add	r2,r2,r18
  80246c:	d8814515 	stw	r2,1300(sp)
  802470:	100f883a 	mov	r7,r2
  802474:	103f750e 	bge	r2,zero,80224c <___vfprintf_internal_r+0x1ba8>
  802478:	003fa806 	br	80231c <___vfprintf_internal_r+0x1c78>
  80247c:	80c00c04 	addi	r3,r16,48
  802480:	00800c04 	movi	r2,48
  802484:	d8c008c5 	stb	r3,35(sp)
  802488:	d9800804 	addi	r6,sp,32
  80248c:	d8c00904 	addi	r3,sp,36
  802490:	d8800885 	stb	r2,34(sp)
  802494:	003f6506 	br	80222c <___vfprintf_internal_r+0x1b88>
  802498:	d9014c17 	ldw	r4,1328(sp)
  80249c:	2084703a 	and	r2,r4,r2
  8024a0:	103f9c26 	beq	r2,zero,802314 <___vfprintf_internal_r+0x1c70>
  8024a4:	003f6606 	br	802240 <___vfprintf_internal_r+0x1b9c>
  8024a8:	d9800804 	addi	r6,sp,32
  8024ac:	d8c00884 	addi	r3,sp,34
  8024b0:	003f5e06 	br	80222c <___vfprintf_internal_r+0x1b88>
  8024b4:	00800b44 	movi	r2,45
  8024b8:	0121c83a 	sub	r16,zero,r4
  8024bc:	d8800845 	stb	r2,33(sp)
  8024c0:	003f3d06 	br	8021b8 <___vfprintf_internal_r+0x1b14>
  8024c4:	00800084 	movi	r2,2
  8024c8:	1105c83a 	sub	r2,r2,r4
  8024cc:	003fe606 	br	802468 <___vfprintf_internal_r+0x1dc4>
  8024d0:	d8014515 	stw	zero,1300(sp)
  8024d4:	dc814715 	stw	r18,1308(sp)
  8024d8:	003fb106 	br	8023a0 <___vfprintf_internal_r+0x1cfc>
  8024dc:	000d883a 	mov	r6,zero
  8024e0:	000f883a 	mov	r7,zero
  8024e4:	8009883a 	mov	r4,r16
  8024e8:	880b883a 	mov	r5,r17
  8024ec:	0808ef40 	call	808ef4 <__nedf2>
  8024f0:	103f9f26 	beq	r2,zero,802370 <___vfprintf_internal_r+0x1ccc>
  8024f4:	00800044 	movi	r2,1
  8024f8:	1509c83a 	sub	r4,r2,r20
  8024fc:	d9000515 	stw	r4,20(sp)
  802500:	003f9b06 	br	802370 <___vfprintf_internal_r+0x1ccc>
  802504:	98000d1e 	bne	r19,zero,80253c <___vfprintf_internal_r+0x1e98>
  802508:	d8c14c17 	ldw	r3,1328(sp)
  80250c:	1880004c 	andi	r2,r3,1
  802510:	10000a1e 	bne	r2,zero,80253c <___vfprintf_internal_r+0x1e98>
  802514:	01000044 	movi	r4,1
  802518:	200f883a 	mov	r7,r4
  80251c:	d9014515 	stw	r4,1300(sp)
  802520:	003f4a06 	br	80224c <___vfprintf_internal_r+0x1ba8>
  802524:	3cc00017 	ldw	r19,0(r7)
  802528:	39c00104 	addi	r7,r7,4
  80252c:	983d0e0e 	bge	r19,zero,801968 <___vfprintf_internal_r+0x12c4>
  802530:	b8c00007 	ldb	r3,0(r23)
  802534:	04ffffc4 	movi	r19,-1
  802538:	0038d906 	br	8008a0 <___vfprintf_internal_r+0x1fc>
  80253c:	9cc00084 	addi	r19,r19,2
  802540:	dcc14515 	stw	r19,1300(sp)
  802544:	980f883a 	mov	r7,r19
  802548:	983f400e 	bge	r19,zero,80224c <___vfprintf_internal_r+0x1ba8>
  80254c:	003f7306 	br	80231c <___vfprintf_internal_r+0x1c78>

00802550 <__vfprintf_internal>:
  802550:	00802074 	movhi	r2,129
  802554:	109e2504 	addi	r2,r2,30868
  802558:	2013883a 	mov	r9,r4
  80255c:	11000017 	ldw	r4,0(r2)
  802560:	2805883a 	mov	r2,r5
  802564:	300f883a 	mov	r7,r6
  802568:	480b883a 	mov	r5,r9
  80256c:	100d883a 	mov	r6,r2
  802570:	08006a41 	jmpi	8006a4 <___vfprintf_internal_r>

00802574 <__swsetup_r>:
  802574:	00802074 	movhi	r2,129
  802578:	109e2504 	addi	r2,r2,30868
  80257c:	10c00017 	ldw	r3,0(r2)
  802580:	defffd04 	addi	sp,sp,-12
  802584:	dc400115 	stw	r17,4(sp)
  802588:	dc000015 	stw	r16,0(sp)
  80258c:	dfc00215 	stw	ra,8(sp)
  802590:	2023883a 	mov	r17,r4
  802594:	2821883a 	mov	r16,r5
  802598:	18000226 	beq	r3,zero,8025a4 <__swsetup_r+0x30>
  80259c:	18800e17 	ldw	r2,56(r3)
  8025a0:	10001f26 	beq	r2,zero,802620 <__swsetup_r+0xac>
  8025a4:	8100030b 	ldhu	r4,12(r16)
  8025a8:	2080020c 	andi	r2,r4,8
  8025ac:	10002826 	beq	r2,zero,802650 <__swsetup_r+0xdc>
  8025b0:	81400417 	ldw	r5,16(r16)
  8025b4:	28001d26 	beq	r5,zero,80262c <__swsetup_r+0xb8>
  8025b8:	2080004c 	andi	r2,r4,1
  8025bc:	1005003a 	cmpeq	r2,r2,zero
  8025c0:	10000b26 	beq	r2,zero,8025f0 <__swsetup_r+0x7c>
  8025c4:	2080008c 	andi	r2,r4,2
  8025c8:	10001226 	beq	r2,zero,802614 <__swsetup_r+0xa0>
  8025cc:	0005883a 	mov	r2,zero
  8025d0:	80800215 	stw	r2,8(r16)
  8025d4:	28000b26 	beq	r5,zero,802604 <__swsetup_r+0x90>
  8025d8:	0005883a 	mov	r2,zero
  8025dc:	dfc00217 	ldw	ra,8(sp)
  8025e0:	dc400117 	ldw	r17,4(sp)
  8025e4:	dc000017 	ldw	r16,0(sp)
  8025e8:	dec00304 	addi	sp,sp,12
  8025ec:	f800283a 	ret
  8025f0:	80800517 	ldw	r2,20(r16)
  8025f4:	80000215 	stw	zero,8(r16)
  8025f8:	0085c83a 	sub	r2,zero,r2
  8025fc:	80800615 	stw	r2,24(r16)
  802600:	283ff51e 	bne	r5,zero,8025d8 <__swsetup_r+0x64>
  802604:	2080200c 	andi	r2,r4,128
  802608:	103ff326 	beq	r2,zero,8025d8 <__swsetup_r+0x64>
  80260c:	00bfffc4 	movi	r2,-1
  802610:	003ff206 	br	8025dc <__swsetup_r+0x68>
  802614:	80800517 	ldw	r2,20(r16)
  802618:	80800215 	stw	r2,8(r16)
  80261c:	003fed06 	br	8025d4 <__swsetup_r+0x60>
  802620:	1809883a 	mov	r4,r3
  802624:	08041140 	call	804114 <__sinit>
  802628:	003fde06 	br	8025a4 <__swsetup_r+0x30>
  80262c:	20c0a00c 	andi	r3,r4,640
  802630:	00808004 	movi	r2,512
  802634:	18bfe026 	beq	r3,r2,8025b8 <__swsetup_r+0x44>
  802638:	8809883a 	mov	r4,r17
  80263c:	800b883a 	mov	r5,r16
  802640:	0804e8c0 	call	804e8c <__smakebuf_r>
  802644:	8100030b 	ldhu	r4,12(r16)
  802648:	81400417 	ldw	r5,16(r16)
  80264c:	003fda06 	br	8025b8 <__swsetup_r+0x44>
  802650:	2080040c 	andi	r2,r4,16
  802654:	103fed26 	beq	r2,zero,80260c <__swsetup_r+0x98>
  802658:	2080010c 	andi	r2,r4,4
  80265c:	10001226 	beq	r2,zero,8026a8 <__swsetup_r+0x134>
  802660:	81400c17 	ldw	r5,48(r16)
  802664:	28000526 	beq	r5,zero,80267c <__swsetup_r+0x108>
  802668:	80801004 	addi	r2,r16,64
  80266c:	28800226 	beq	r5,r2,802678 <__swsetup_r+0x104>
  802670:	8809883a 	mov	r4,r17
  802674:	08044980 	call	804498 <_free_r>
  802678:	80000c15 	stw	zero,48(r16)
  80267c:	8080030b 	ldhu	r2,12(r16)
  802680:	81400417 	ldw	r5,16(r16)
  802684:	80000115 	stw	zero,4(r16)
  802688:	10bff6cc 	andi	r2,r2,65499
  80268c:	8080030d 	sth	r2,12(r16)
  802690:	81400015 	stw	r5,0(r16)
  802694:	8080030b 	ldhu	r2,12(r16)
  802698:	10800214 	ori	r2,r2,8
  80269c:	113fffcc 	andi	r4,r2,65535
  8026a0:	8080030d 	sth	r2,12(r16)
  8026a4:	003fc306 	br	8025b4 <__swsetup_r+0x40>
  8026a8:	81400417 	ldw	r5,16(r16)
  8026ac:	003ff906 	br	802694 <__swsetup_r+0x120>

008026b0 <quorem>:
  8026b0:	28c00417 	ldw	r3,16(r5)
  8026b4:	20800417 	ldw	r2,16(r4)
  8026b8:	defff604 	addi	sp,sp,-40
  8026bc:	ddc00715 	stw	r23,28(sp)
  8026c0:	dd400515 	stw	r21,20(sp)
  8026c4:	dfc00915 	stw	ra,36(sp)
  8026c8:	df000815 	stw	fp,32(sp)
  8026cc:	dd800615 	stw	r22,24(sp)
  8026d0:	dd000415 	stw	r20,16(sp)
  8026d4:	dcc00315 	stw	r19,12(sp)
  8026d8:	dc800215 	stw	r18,8(sp)
  8026dc:	dc400115 	stw	r17,4(sp)
  8026e0:	dc000015 	stw	r16,0(sp)
  8026e4:	202f883a 	mov	r23,r4
  8026e8:	282b883a 	mov	r21,r5
  8026ec:	10c07416 	blt	r2,r3,8028c0 <quorem+0x210>
  8026f0:	1c7fffc4 	addi	r17,r3,-1
  8026f4:	8c45883a 	add	r2,r17,r17
  8026f8:	1085883a 	add	r2,r2,r2
  8026fc:	2c000504 	addi	r16,r5,20
  802700:	24c00504 	addi	r19,r4,20
  802704:	14ed883a 	add	r22,r2,r19
  802708:	80a5883a 	add	r18,r16,r2
  80270c:	b7000017 	ldw	fp,0(r22)
  802710:	91400017 	ldw	r5,0(r18)
  802714:	e009883a 	mov	r4,fp
  802718:	29400044 	addi	r5,r5,1
  80271c:	08095b40 	call	8095b4 <__udivsi3>
  802720:	1029883a 	mov	r20,r2
  802724:	10003c1e 	bne	r2,zero,802818 <quorem+0x168>
  802728:	a80b883a 	mov	r5,r21
  80272c:	b809883a 	mov	r4,r23
  802730:	0805bb80 	call	805bb8 <__mcmp>
  802734:	10002b16 	blt	r2,zero,8027e4 <quorem+0x134>
  802738:	a5000044 	addi	r20,r20,1
  80273c:	980f883a 	mov	r7,r19
  802740:	0011883a 	mov	r8,zero
  802744:	0009883a 	mov	r4,zero
  802748:	81400017 	ldw	r5,0(r16)
  80274c:	38c00017 	ldw	r3,0(r7)
  802750:	84000104 	addi	r16,r16,4
  802754:	28bfffcc 	andi	r2,r5,65535
  802758:	2085883a 	add	r2,r4,r2
  80275c:	11bfffcc 	andi	r6,r2,65535
  802760:	193fffcc 	andi	r4,r3,65535
  802764:	1004d43a 	srli	r2,r2,16
  802768:	280ad43a 	srli	r5,r5,16
  80276c:	2189c83a 	sub	r4,r4,r6
  802770:	2209883a 	add	r4,r4,r8
  802774:	1806d43a 	srli	r3,r3,16
  802778:	288b883a 	add	r5,r5,r2
  80277c:	200dd43a 	srai	r6,r4,16
  802780:	28bfffcc 	andi	r2,r5,65535
  802784:	1887c83a 	sub	r3,r3,r2
  802788:	1987883a 	add	r3,r3,r6
  80278c:	3900000d 	sth	r4,0(r7)
  802790:	38c0008d 	sth	r3,2(r7)
  802794:	2808d43a 	srli	r4,r5,16
  802798:	39c00104 	addi	r7,r7,4
  80279c:	1811d43a 	srai	r8,r3,16
  8027a0:	943fe92e 	bgeu	r18,r16,802748 <quorem+0x98>
  8027a4:	8c45883a 	add	r2,r17,r17
  8027a8:	1085883a 	add	r2,r2,r2
  8027ac:	9885883a 	add	r2,r19,r2
  8027b0:	10c00017 	ldw	r3,0(r2)
  8027b4:	18000b1e 	bne	r3,zero,8027e4 <quorem+0x134>
  8027b8:	113fff04 	addi	r4,r2,-4
  8027bc:	9900082e 	bgeu	r19,r4,8027e0 <quorem+0x130>
  8027c0:	10bfff17 	ldw	r2,-4(r2)
  8027c4:	10000326 	beq	r2,zero,8027d4 <quorem+0x124>
  8027c8:	00000506 	br	8027e0 <quorem+0x130>
  8027cc:	20800017 	ldw	r2,0(r4)
  8027d0:	1000031e 	bne	r2,zero,8027e0 <quorem+0x130>
  8027d4:	213fff04 	addi	r4,r4,-4
  8027d8:	8c7fffc4 	addi	r17,r17,-1
  8027dc:	993ffb36 	bltu	r19,r4,8027cc <quorem+0x11c>
  8027e0:	bc400415 	stw	r17,16(r23)
  8027e4:	a005883a 	mov	r2,r20
  8027e8:	dfc00917 	ldw	ra,36(sp)
  8027ec:	df000817 	ldw	fp,32(sp)
  8027f0:	ddc00717 	ldw	r23,28(sp)
  8027f4:	dd800617 	ldw	r22,24(sp)
  8027f8:	dd400517 	ldw	r21,20(sp)
  8027fc:	dd000417 	ldw	r20,16(sp)
  802800:	dcc00317 	ldw	r19,12(sp)
  802804:	dc800217 	ldw	r18,8(sp)
  802808:	dc400117 	ldw	r17,4(sp)
  80280c:	dc000017 	ldw	r16,0(sp)
  802810:	dec00a04 	addi	sp,sp,40
  802814:	f800283a 	ret
  802818:	980f883a 	mov	r7,r19
  80281c:	8011883a 	mov	r8,r16
  802820:	0013883a 	mov	r9,zero
  802824:	000d883a 	mov	r6,zero
  802828:	40c00017 	ldw	r3,0(r8)
  80282c:	39000017 	ldw	r4,0(r7)
  802830:	42000104 	addi	r8,r8,4
  802834:	18bfffcc 	andi	r2,r3,65535
  802838:	a085383a 	mul	r2,r20,r2
  80283c:	1806d43a 	srli	r3,r3,16
  802840:	217fffcc 	andi	r5,r4,65535
  802844:	3085883a 	add	r2,r6,r2
  802848:	11bfffcc 	andi	r6,r2,65535
  80284c:	a0c7383a 	mul	r3,r20,r3
  802850:	1004d43a 	srli	r2,r2,16
  802854:	298bc83a 	sub	r5,r5,r6
  802858:	2a4b883a 	add	r5,r5,r9
  80285c:	2008d43a 	srli	r4,r4,16
  802860:	1887883a 	add	r3,r3,r2
  802864:	280dd43a 	srai	r6,r5,16
  802868:	18bfffcc 	andi	r2,r3,65535
  80286c:	2089c83a 	sub	r4,r4,r2
  802870:	2189883a 	add	r4,r4,r6
  802874:	3900008d 	sth	r4,2(r7)
  802878:	3940000d 	sth	r5,0(r7)
  80287c:	180cd43a 	srli	r6,r3,16
  802880:	39c00104 	addi	r7,r7,4
  802884:	2013d43a 	srai	r9,r4,16
  802888:	923fe72e 	bgeu	r18,r8,802828 <quorem+0x178>
  80288c:	e03fa61e 	bne	fp,zero,802728 <quorem+0x78>
  802890:	b0ffff04 	addi	r3,r22,-4
  802894:	98c0082e 	bgeu	r19,r3,8028b8 <quorem+0x208>
  802898:	b0bfff17 	ldw	r2,-4(r22)
  80289c:	10000326 	beq	r2,zero,8028ac <quorem+0x1fc>
  8028a0:	00000506 	br	8028b8 <quorem+0x208>
  8028a4:	18800017 	ldw	r2,0(r3)
  8028a8:	1000031e 	bne	r2,zero,8028b8 <quorem+0x208>
  8028ac:	18ffff04 	addi	r3,r3,-4
  8028b0:	8c7fffc4 	addi	r17,r17,-1
  8028b4:	98fffb36 	bltu	r19,r3,8028a4 <quorem+0x1f4>
  8028b8:	bc400415 	stw	r17,16(r23)
  8028bc:	003f9a06 	br	802728 <quorem+0x78>
  8028c0:	0005883a 	mov	r2,zero
  8028c4:	003fc806 	br	8027e8 <quorem+0x138>

008028c8 <_dtoa_r>:
  8028c8:	22001017 	ldw	r8,64(r4)
  8028cc:	deffda04 	addi	sp,sp,-152
  8028d0:	dd402115 	stw	r21,132(sp)
  8028d4:	dd002015 	stw	r20,128(sp)
  8028d8:	dc801e15 	stw	r18,120(sp)
  8028dc:	dc401d15 	stw	r17,116(sp)
  8028e0:	dfc02515 	stw	ra,148(sp)
  8028e4:	df002415 	stw	fp,144(sp)
  8028e8:	ddc02315 	stw	r23,140(sp)
  8028ec:	dd802215 	stw	r22,136(sp)
  8028f0:	dcc01f15 	stw	r19,124(sp)
  8028f4:	dc001c15 	stw	r16,112(sp)
  8028f8:	d9001615 	stw	r4,88(sp)
  8028fc:	3023883a 	mov	r17,r6
  802900:	2829883a 	mov	r20,r5
  802904:	d9c01715 	stw	r7,92(sp)
  802908:	dc802817 	ldw	r18,160(sp)
  80290c:	302b883a 	mov	r21,r6
  802910:	40000a26 	beq	r8,zero,80293c <_dtoa_r+0x74>
  802914:	20801117 	ldw	r2,68(r4)
  802918:	400b883a 	mov	r5,r8
  80291c:	40800115 	stw	r2,4(r8)
  802920:	20c01117 	ldw	r3,68(r4)
  802924:	00800044 	movi	r2,1
  802928:	10c4983a 	sll	r2,r2,r3
  80292c:	40800215 	stw	r2,8(r8)
  802930:	0805a5c0 	call	805a5c <_Bfree>
  802934:	d8c01617 	ldw	r3,88(sp)
  802938:	18001015 	stw	zero,64(r3)
  80293c:	8800a316 	blt	r17,zero,802bcc <_dtoa_r+0x304>
  802940:	90000015 	stw	zero,0(r18)
  802944:	a8dffc2c 	andhi	r3,r21,32752
  802948:	009ffc34 	movhi	r2,32752
  80294c:	18809126 	beq	r3,r2,802b94 <_dtoa_r+0x2cc>
  802950:	000d883a 	mov	r6,zero
  802954:	000f883a 	mov	r7,zero
  802958:	a009883a 	mov	r4,r20
  80295c:	a80b883a 	mov	r5,r21
  802960:	dd001215 	stw	r20,72(sp)
  802964:	dd401315 	stw	r21,76(sp)
  802968:	0808ef40 	call	808ef4 <__nedf2>
  80296c:	1000171e 	bne	r2,zero,8029cc <_dtoa_r+0x104>
  802970:	d9802717 	ldw	r6,156(sp)
  802974:	00800044 	movi	r2,1
  802978:	30800015 	stw	r2,0(r6)
  80297c:	d8802917 	ldw	r2,164(sp)
  802980:	10029b26 	beq	r2,zero,8033f0 <_dtoa_r+0xb28>
  802984:	d9002917 	ldw	r4,164(sp)
  802988:	00802074 	movhi	r2,129
  80298c:	10968844 	addi	r2,r2,23073
  802990:	10ffffc4 	addi	r3,r2,-1
  802994:	20800015 	stw	r2,0(r4)
  802998:	1805883a 	mov	r2,r3
  80299c:	dfc02517 	ldw	ra,148(sp)
  8029a0:	df002417 	ldw	fp,144(sp)
  8029a4:	ddc02317 	ldw	r23,140(sp)
  8029a8:	dd802217 	ldw	r22,136(sp)
  8029ac:	dd402117 	ldw	r21,132(sp)
  8029b0:	dd002017 	ldw	r20,128(sp)
  8029b4:	dcc01f17 	ldw	r19,124(sp)
  8029b8:	dc801e17 	ldw	r18,120(sp)
  8029bc:	dc401d17 	ldw	r17,116(sp)
  8029c0:	dc001c17 	ldw	r16,112(sp)
  8029c4:	dec02604 	addi	sp,sp,152
  8029c8:	f800283a 	ret
  8029cc:	d9001617 	ldw	r4,88(sp)
  8029d0:	d9401217 	ldw	r5,72(sp)
  8029d4:	d8800104 	addi	r2,sp,4
  8029d8:	a80d883a 	mov	r6,r21
  8029dc:	d9c00204 	addi	r7,sp,8
  8029e0:	d8800015 	stw	r2,0(sp)
  8029e4:	08060980 	call	806098 <__d2b>
  8029e8:	d8800715 	stw	r2,28(sp)
  8029ec:	a804d53a 	srli	r2,r21,20
  8029f0:	1101ffcc 	andi	r4,r2,2047
  8029f4:	20008626 	beq	r4,zero,802c10 <_dtoa_r+0x348>
  8029f8:	d8c01217 	ldw	r3,72(sp)
  8029fc:	00800434 	movhi	r2,16
  802a00:	10bfffc4 	addi	r2,r2,-1
  802a04:	ddc00117 	ldw	r23,4(sp)
  802a08:	a884703a 	and	r2,r21,r2
  802a0c:	1811883a 	mov	r8,r3
  802a10:	124ffc34 	orhi	r9,r2,16368
  802a14:	25bf0044 	addi	r22,r4,-1023
  802a18:	d8000815 	stw	zero,32(sp)
  802a1c:	0005883a 	mov	r2,zero
  802a20:	00cffe34 	movhi	r3,16376
  802a24:	480b883a 	mov	r5,r9
  802a28:	4009883a 	mov	r4,r8
  802a2c:	180f883a 	mov	r7,r3
  802a30:	100d883a 	mov	r6,r2
  802a34:	080875c0 	call	80875c <__subdf3>
  802a38:	0218dbf4 	movhi	r8,25455
  802a3c:	4210d844 	addi	r8,r8,17249
  802a40:	024ff4f4 	movhi	r9,16339
  802a44:	4a61e9c4 	addi	r9,r9,-30809
  802a48:	480f883a 	mov	r7,r9
  802a4c:	400d883a 	mov	r6,r8
  802a50:	180b883a 	mov	r5,r3
  802a54:	1009883a 	mov	r4,r2
  802a58:	08088500 	call	808850 <__muldf3>
  802a5c:	0222d874 	movhi	r8,35681
  802a60:	42322cc4 	addi	r8,r8,-14157
  802a64:	024ff1f4 	movhi	r9,16327
  802a68:	4a628a04 	addi	r9,r9,-30168
  802a6c:	480f883a 	mov	r7,r9
  802a70:	400d883a 	mov	r6,r8
  802a74:	180b883a 	mov	r5,r3
  802a78:	1009883a 	mov	r4,r2
  802a7c:	08087dc0 	call	8087dc <__adddf3>
  802a80:	b009883a 	mov	r4,r22
  802a84:	1021883a 	mov	r16,r2
  802a88:	1823883a 	mov	r17,r3
  802a8c:	08091140 	call	809114 <__floatsidf>
  802a90:	021427f4 	movhi	r8,20639
  802a94:	421e7ec4 	addi	r8,r8,31227
  802a98:	024ff4f4 	movhi	r9,16339
  802a9c:	4a5104c4 	addi	r9,r9,17427
  802aa0:	480f883a 	mov	r7,r9
  802aa4:	400d883a 	mov	r6,r8
  802aa8:	180b883a 	mov	r5,r3
  802aac:	1009883a 	mov	r4,r2
  802ab0:	08088500 	call	808850 <__muldf3>
  802ab4:	180f883a 	mov	r7,r3
  802ab8:	880b883a 	mov	r5,r17
  802abc:	100d883a 	mov	r6,r2
  802ac0:	8009883a 	mov	r4,r16
  802ac4:	08087dc0 	call	8087dc <__adddf3>
  802ac8:	1009883a 	mov	r4,r2
  802acc:	180b883a 	mov	r5,r3
  802ad0:	1021883a 	mov	r16,r2
  802ad4:	1823883a 	mov	r17,r3
  802ad8:	080920c0 	call	80920c <__fixdfsi>
  802adc:	000d883a 	mov	r6,zero
  802ae0:	000f883a 	mov	r7,zero
  802ae4:	8009883a 	mov	r4,r16
  802ae8:	880b883a 	mov	r5,r17
  802aec:	d8800d15 	stw	r2,52(sp)
  802af0:	080908c0 	call	80908c <__ltdf2>
  802af4:	10031716 	blt	r2,zero,803754 <_dtoa_r+0xe8c>
  802af8:	d8c00d17 	ldw	r3,52(sp)
  802afc:	00800584 	movi	r2,22
  802b00:	10c1482e 	bgeu	r2,r3,803024 <_dtoa_r+0x75c>
  802b04:	01000044 	movi	r4,1
  802b08:	d9000c15 	stw	r4,48(sp)
  802b0c:	bd85c83a 	sub	r2,r23,r22
  802b10:	11bfffc4 	addi	r6,r2,-1
  802b14:	30030b16 	blt	r6,zero,803744 <_dtoa_r+0xe7c>
  802b18:	d9800a15 	stw	r6,40(sp)
  802b1c:	d8001115 	stw	zero,68(sp)
  802b20:	d8c00d17 	ldw	r3,52(sp)
  802b24:	1802ff16 	blt	r3,zero,803724 <_dtoa_r+0xe5c>
  802b28:	d9000a17 	ldw	r4,40(sp)
  802b2c:	d8c00915 	stw	r3,36(sp)
  802b30:	d8001015 	stw	zero,64(sp)
  802b34:	20c9883a 	add	r4,r4,r3
  802b38:	d9000a15 	stw	r4,40(sp)
  802b3c:	d9001717 	ldw	r4,92(sp)
  802b40:	00800244 	movi	r2,9
  802b44:	11004636 	bltu	r2,r4,802c60 <_dtoa_r+0x398>
  802b48:	00800144 	movi	r2,5
  802b4c:	11020416 	blt	r2,r4,803360 <_dtoa_r+0xa98>
  802b50:	04400044 	movi	r17,1
  802b54:	d8c01717 	ldw	r3,92(sp)
  802b58:	00800144 	movi	r2,5
  802b5c:	10c1ed36 	bltu	r2,r3,803314 <_dtoa_r+0xa4c>
  802b60:	18c5883a 	add	r2,r3,r3
  802b64:	1085883a 	add	r2,r2,r2
  802b68:	00c02034 	movhi	r3,128
  802b6c:	18cadf04 	addi	r3,r3,11132
  802b70:	10c5883a 	add	r2,r2,r3
  802b74:	11000017 	ldw	r4,0(r2)
  802b78:	2000683a 	jmp	r4
  802b7c:	00802c68 	cmpgeui	r2,zero,177
  802b80:	00802c68 	cmpgeui	r2,zero,177
  802b84:	00803668 	cmpgeui	r2,zero,217
  802b88:	00803640 	call	80364 <OSCtxSw_SWITCH_PC+0x80324>
  802b8c:	00803684 	movi	r2,218
  802b90:	00803690 	cmplti	r2,zero,218
  802b94:	d9002717 	ldw	r4,156(sp)
  802b98:	0089c3c4 	movi	r2,9999
  802b9c:	20800015 	stw	r2,0(r4)
  802ba0:	a0001026 	beq	r20,zero,802be4 <_dtoa_r+0x31c>
  802ba4:	00c02074 	movhi	r3,129
  802ba8:	18d69404 	addi	r3,r3,23120
  802bac:	d9802917 	ldw	r6,164(sp)
  802bb0:	303f7926 	beq	r6,zero,802998 <_dtoa_r+0xd0>
  802bb4:	188000c7 	ldb	r2,3(r3)
  802bb8:	190000c4 	addi	r4,r3,3
  802bbc:	1000101e 	bne	r2,zero,802c00 <_dtoa_r+0x338>
  802bc0:	d8802917 	ldw	r2,164(sp)
  802bc4:	11000015 	stw	r4,0(r2)
  802bc8:	003f7306 	br	802998 <_dtoa_r+0xd0>
  802bcc:	00a00034 	movhi	r2,32768
  802bd0:	10bfffc4 	addi	r2,r2,-1
  802bd4:	00c00044 	movi	r3,1
  802bd8:	88aa703a 	and	r21,r17,r2
  802bdc:	90c00015 	stw	r3,0(r18)
  802be0:	003f5806 	br	802944 <_dtoa_r+0x7c>
  802be4:	00800434 	movhi	r2,16
  802be8:	10bfffc4 	addi	r2,r2,-1
  802bec:	a884703a 	and	r2,r21,r2
  802bf0:	103fec1e 	bne	r2,zero,802ba4 <_dtoa_r+0x2dc>
  802bf4:	00c02074 	movhi	r3,129
  802bf8:	18d69104 	addi	r3,r3,23108
  802bfc:	003feb06 	br	802bac <_dtoa_r+0x2e4>
  802c00:	d8802917 	ldw	r2,164(sp)
  802c04:	19000204 	addi	r4,r3,8
  802c08:	11000015 	stw	r4,0(r2)
  802c0c:	003f6206 	br	802998 <_dtoa_r+0xd0>
  802c10:	ddc00117 	ldw	r23,4(sp)
  802c14:	d8800217 	ldw	r2,8(sp)
  802c18:	01000804 	movi	r4,32
  802c1c:	b8c10c84 	addi	r3,r23,1074
  802c20:	18a3883a 	add	r17,r3,r2
  802c24:	2441b80e 	bge	r4,r17,803308 <_dtoa_r+0xa40>
  802c28:	00c01004 	movi	r3,64
  802c2c:	1c47c83a 	sub	r3,r3,r17
  802c30:	88bff804 	addi	r2,r17,-32
  802c34:	a8c6983a 	sll	r3,r21,r3
  802c38:	a084d83a 	srl	r2,r20,r2
  802c3c:	1888b03a 	or	r4,r3,r2
  802c40:	08092e40 	call	8092e4 <__floatunsidf>
  802c44:	1011883a 	mov	r8,r2
  802c48:	00bf8434 	movhi	r2,65040
  802c4c:	01000044 	movi	r4,1
  802c50:	10d3883a 	add	r9,r2,r3
  802c54:	8dbef344 	addi	r22,r17,-1075
  802c58:	d9000815 	stw	r4,32(sp)
  802c5c:	003f6f06 	br	802a1c <_dtoa_r+0x154>
  802c60:	d8001715 	stw	zero,92(sp)
  802c64:	04400044 	movi	r17,1
  802c68:	00bfffc4 	movi	r2,-1
  802c6c:	00c00044 	movi	r3,1
  802c70:	d8800e15 	stw	r2,56(sp)
  802c74:	d8002615 	stw	zero,152(sp)
  802c78:	d8800f15 	stw	r2,60(sp)
  802c7c:	d8c00b15 	stw	r3,44(sp)
  802c80:	1021883a 	mov	r16,r2
  802c84:	d8801617 	ldw	r2,88(sp)
  802c88:	10001115 	stw	zero,68(r2)
  802c8c:	d8801617 	ldw	r2,88(sp)
  802c90:	11401117 	ldw	r5,68(r2)
  802c94:	1009883a 	mov	r4,r2
  802c98:	0805fdc0 	call	805fdc <_Balloc>
  802c9c:	d8c01617 	ldw	r3,88(sp)
  802ca0:	d8800515 	stw	r2,20(sp)
  802ca4:	18801015 	stw	r2,64(r3)
  802ca8:	00800384 	movi	r2,14
  802cac:	14006836 	bltu	r2,r16,802e50 <_dtoa_r+0x588>
  802cb0:	8805003a 	cmpeq	r2,r17,zero
  802cb4:	1000661e 	bne	r2,zero,802e50 <_dtoa_r+0x588>
  802cb8:	d9000d17 	ldw	r4,52(sp)
  802cbc:	0102300e 	bge	zero,r4,803580 <_dtoa_r+0xcb8>
  802cc0:	208003cc 	andi	r2,r4,15
  802cc4:	100490fa 	slli	r2,r2,3
  802cc8:	2025d13a 	srai	r18,r4,4
  802ccc:	00c02074 	movhi	r3,129
  802cd0:	18d6a604 	addi	r3,r3,23192
  802cd4:	10c5883a 	add	r2,r2,r3
  802cd8:	90c0040c 	andi	r3,r18,16
  802cdc:	14000017 	ldw	r16,0(r2)
  802ce0:	14400117 	ldw	r17,4(r2)
  802ce4:	18036a1e 	bne	r3,zero,803a90 <_dtoa_r+0x11c8>
  802ce8:	05800084 	movi	r22,2
  802cec:	90001026 	beq	r18,zero,802d30 <_dtoa_r+0x468>
  802cf0:	04c02074 	movhi	r19,129
  802cf4:	9cd6d804 	addi	r19,r19,23392
  802cf8:	9080004c 	andi	r2,r18,1
  802cfc:	1005003a 	cmpeq	r2,r2,zero
  802d00:	1000081e 	bne	r2,zero,802d24 <_dtoa_r+0x45c>
  802d04:	99800017 	ldw	r6,0(r19)
  802d08:	99c00117 	ldw	r7,4(r19)
  802d0c:	880b883a 	mov	r5,r17
  802d10:	8009883a 	mov	r4,r16
  802d14:	08088500 	call	808850 <__muldf3>
  802d18:	1021883a 	mov	r16,r2
  802d1c:	b5800044 	addi	r22,r22,1
  802d20:	1823883a 	mov	r17,r3
  802d24:	9025d07a 	srai	r18,r18,1
  802d28:	9cc00204 	addi	r19,r19,8
  802d2c:	903ff21e 	bne	r18,zero,802cf8 <_dtoa_r+0x430>
  802d30:	a80b883a 	mov	r5,r21
  802d34:	a009883a 	mov	r4,r20
  802d38:	880f883a 	mov	r7,r17
  802d3c:	800d883a 	mov	r6,r16
  802d40:	0808c140 	call	808c14 <__divdf3>
  802d44:	1029883a 	mov	r20,r2
  802d48:	182b883a 	mov	r21,r3
  802d4c:	d8c00c17 	ldw	r3,48(sp)
  802d50:	1805003a 	cmpeq	r2,r3,zero
  802d54:	1000081e 	bne	r2,zero,802d78 <_dtoa_r+0x4b0>
  802d58:	0005883a 	mov	r2,zero
  802d5c:	00cffc34 	movhi	r3,16368
  802d60:	180f883a 	mov	r7,r3
  802d64:	a009883a 	mov	r4,r20
  802d68:	a80b883a 	mov	r5,r21
  802d6c:	100d883a 	mov	r6,r2
  802d70:	080908c0 	call	80908c <__ltdf2>
  802d74:	1003fe16 	blt	r2,zero,803d70 <_dtoa_r+0x14a8>
  802d78:	b009883a 	mov	r4,r22
  802d7c:	08091140 	call	809114 <__floatsidf>
  802d80:	180b883a 	mov	r5,r3
  802d84:	1009883a 	mov	r4,r2
  802d88:	a00d883a 	mov	r6,r20
  802d8c:	a80f883a 	mov	r7,r21
  802d90:	08088500 	call	808850 <__muldf3>
  802d94:	0011883a 	mov	r8,zero
  802d98:	02500734 	movhi	r9,16412
  802d9c:	1009883a 	mov	r4,r2
  802da0:	180b883a 	mov	r5,r3
  802da4:	480f883a 	mov	r7,r9
  802da8:	400d883a 	mov	r6,r8
  802dac:	08087dc0 	call	8087dc <__adddf3>
  802db0:	d9000f17 	ldw	r4,60(sp)
  802db4:	102d883a 	mov	r22,r2
  802db8:	00bf3034 	movhi	r2,64704
  802dbc:	18b9883a 	add	fp,r3,r2
  802dc0:	e02f883a 	mov	r23,fp
  802dc4:	20028f1e 	bne	r4,zero,803804 <_dtoa_r+0xf3c>
  802dc8:	0005883a 	mov	r2,zero
  802dcc:	00d00534 	movhi	r3,16404
  802dd0:	a009883a 	mov	r4,r20
  802dd4:	a80b883a 	mov	r5,r21
  802dd8:	180f883a 	mov	r7,r3
  802ddc:	100d883a 	mov	r6,r2
  802de0:	080875c0 	call	80875c <__subdf3>
  802de4:	1009883a 	mov	r4,r2
  802de8:	e00f883a 	mov	r7,fp
  802dec:	180b883a 	mov	r5,r3
  802df0:	b00d883a 	mov	r6,r22
  802df4:	1025883a 	mov	r18,r2
  802df8:	1827883a 	mov	r19,r3
  802dfc:	0808f7c0 	call	808f7c <__gtdf2>
  802e00:	00834f16 	blt	zero,r2,803b40 <_dtoa_r+0x1278>
  802e04:	e0e0003c 	xorhi	r3,fp,32768
  802e08:	9009883a 	mov	r4,r18
  802e0c:	980b883a 	mov	r5,r19
  802e10:	180f883a 	mov	r7,r3
  802e14:	b00d883a 	mov	r6,r22
  802e18:	080908c0 	call	80908c <__ltdf2>
  802e1c:	1000080e 	bge	r2,zero,802e40 <_dtoa_r+0x578>
  802e20:	0027883a 	mov	r19,zero
  802e24:	0025883a 	mov	r18,zero
  802e28:	d8802617 	ldw	r2,152(sp)
  802e2c:	df000517 	ldw	fp,20(sp)
  802e30:	d8000615 	stw	zero,24(sp)
  802e34:	0084303a 	nor	r2,zero,r2
  802e38:	d8800d15 	stw	r2,52(sp)
  802e3c:	00019b06 	br	8034ac <_dtoa_r+0xbe4>
  802e40:	d9801217 	ldw	r6,72(sp)
  802e44:	d8801317 	ldw	r2,76(sp)
  802e48:	3029883a 	mov	r20,r6
  802e4c:	102b883a 	mov	r21,r2
  802e50:	d8c00217 	ldw	r3,8(sp)
  802e54:	18008516 	blt	r3,zero,80306c <_dtoa_r+0x7a4>
  802e58:	d9000d17 	ldw	r4,52(sp)
  802e5c:	00800384 	movi	r2,14
  802e60:	11008216 	blt	r2,r4,80306c <_dtoa_r+0x7a4>
  802e64:	200490fa 	slli	r2,r4,3
  802e68:	d9802617 	ldw	r6,152(sp)
  802e6c:	00c02074 	movhi	r3,129
  802e70:	18d6a604 	addi	r3,r3,23192
  802e74:	10c5883a 	add	r2,r2,r3
  802e78:	14800017 	ldw	r18,0(r2)
  802e7c:	14c00117 	ldw	r19,4(r2)
  802e80:	30031e16 	blt	r6,zero,803afc <_dtoa_r+0x1234>
  802e84:	d9000517 	ldw	r4,20(sp)
  802e88:	d8c00f17 	ldw	r3,60(sp)
  802e8c:	a823883a 	mov	r17,r21
  802e90:	a021883a 	mov	r16,r20
  802e94:	192b883a 	add	r21,r3,r4
  802e98:	2039883a 	mov	fp,r4
  802e9c:	00000f06 	br	802edc <_dtoa_r+0x614>
  802ea0:	0005883a 	mov	r2,zero
  802ea4:	00d00934 	movhi	r3,16420
  802ea8:	5009883a 	mov	r4,r10
  802eac:	580b883a 	mov	r5,r11
  802eb0:	180f883a 	mov	r7,r3
  802eb4:	100d883a 	mov	r6,r2
  802eb8:	08088500 	call	808850 <__muldf3>
  802ebc:	180b883a 	mov	r5,r3
  802ec0:	000d883a 	mov	r6,zero
  802ec4:	000f883a 	mov	r7,zero
  802ec8:	1009883a 	mov	r4,r2
  802ecc:	1021883a 	mov	r16,r2
  802ed0:	1823883a 	mov	r17,r3
  802ed4:	0808ef40 	call	808ef4 <__nedf2>
  802ed8:	10004526 	beq	r2,zero,802ff0 <_dtoa_r+0x728>
  802edc:	900d883a 	mov	r6,r18
  802ee0:	980f883a 	mov	r7,r19
  802ee4:	8009883a 	mov	r4,r16
  802ee8:	880b883a 	mov	r5,r17
  802eec:	0808c140 	call	808c14 <__divdf3>
  802ef0:	180b883a 	mov	r5,r3
  802ef4:	1009883a 	mov	r4,r2
  802ef8:	080920c0 	call	80920c <__fixdfsi>
  802efc:	1009883a 	mov	r4,r2
  802f00:	1029883a 	mov	r20,r2
  802f04:	08091140 	call	809114 <__floatsidf>
  802f08:	180f883a 	mov	r7,r3
  802f0c:	9009883a 	mov	r4,r18
  802f10:	980b883a 	mov	r5,r19
  802f14:	100d883a 	mov	r6,r2
  802f18:	08088500 	call	808850 <__muldf3>
  802f1c:	180f883a 	mov	r7,r3
  802f20:	880b883a 	mov	r5,r17
  802f24:	8009883a 	mov	r4,r16
  802f28:	100d883a 	mov	r6,r2
  802f2c:	080875c0 	call	80875c <__subdf3>
  802f30:	1015883a 	mov	r10,r2
  802f34:	a0800c04 	addi	r2,r20,48
  802f38:	e0800005 	stb	r2,0(fp)
  802f3c:	e7000044 	addi	fp,fp,1
  802f40:	1817883a 	mov	r11,r3
  802f44:	e57fd61e 	bne	fp,r21,802ea0 <_dtoa_r+0x5d8>
  802f48:	500d883a 	mov	r6,r10
  802f4c:	180f883a 	mov	r7,r3
  802f50:	5009883a 	mov	r4,r10
  802f54:	180b883a 	mov	r5,r3
  802f58:	08087dc0 	call	8087dc <__adddf3>
  802f5c:	100d883a 	mov	r6,r2
  802f60:	9009883a 	mov	r4,r18
  802f64:	980b883a 	mov	r5,r19
  802f68:	180f883a 	mov	r7,r3
  802f6c:	1021883a 	mov	r16,r2
  802f70:	1823883a 	mov	r17,r3
  802f74:	080908c0 	call	80908c <__ltdf2>
  802f78:	10000816 	blt	r2,zero,802f9c <_dtoa_r+0x6d4>
  802f7c:	980b883a 	mov	r5,r19
  802f80:	800d883a 	mov	r6,r16
  802f84:	880f883a 	mov	r7,r17
  802f88:	9009883a 	mov	r4,r18
  802f8c:	0808e6c0 	call	808e6c <__eqdf2>
  802f90:	1000171e 	bne	r2,zero,802ff0 <_dtoa_r+0x728>
  802f94:	a080004c 	andi	r2,r20,1
  802f98:	10001526 	beq	r2,zero,802ff0 <_dtoa_r+0x728>
  802f9c:	d8800d17 	ldw	r2,52(sp)
  802fa0:	d8800415 	stw	r2,16(sp)
  802fa4:	e009883a 	mov	r4,fp
  802fa8:	213fffc4 	addi	r4,r4,-1
  802fac:	20c00007 	ldb	r3,0(r4)
  802fb0:	00800e44 	movi	r2,57
  802fb4:	1880081e 	bne	r3,r2,802fd8 <_dtoa_r+0x710>
  802fb8:	d8800517 	ldw	r2,20(sp)
  802fbc:	113ffa1e 	bne	r2,r4,802fa8 <_dtoa_r+0x6e0>
  802fc0:	d8c00417 	ldw	r3,16(sp)
  802fc4:	d9800517 	ldw	r6,20(sp)
  802fc8:	00800c04 	movi	r2,48
  802fcc:	18c00044 	addi	r3,r3,1
  802fd0:	d8c00415 	stw	r3,16(sp)
  802fd4:	30800005 	stb	r2,0(r6)
  802fd8:	20800003 	ldbu	r2,0(r4)
  802fdc:	d8c00417 	ldw	r3,16(sp)
  802fe0:	27000044 	addi	fp,r4,1
  802fe4:	10800044 	addi	r2,r2,1
  802fe8:	d8c00d15 	stw	r3,52(sp)
  802fec:	20800005 	stb	r2,0(r4)
  802ff0:	d9001617 	ldw	r4,88(sp)
  802ff4:	d9400717 	ldw	r5,28(sp)
  802ff8:	0805a5c0 	call	805a5c <_Bfree>
  802ffc:	e0000005 	stb	zero,0(fp)
  803000:	d9800d17 	ldw	r6,52(sp)
  803004:	d8c02717 	ldw	r3,156(sp)
  803008:	d9002917 	ldw	r4,164(sp)
  80300c:	30800044 	addi	r2,r6,1
  803010:	18800015 	stw	r2,0(r3)
  803014:	20029c26 	beq	r4,zero,803a88 <_dtoa_r+0x11c0>
  803018:	d8c00517 	ldw	r3,20(sp)
  80301c:	27000015 	stw	fp,0(r4)
  803020:	003e5d06 	br	802998 <_dtoa_r+0xd0>
  803024:	d9800d17 	ldw	r6,52(sp)
  803028:	00c02074 	movhi	r3,129
  80302c:	18d6a604 	addi	r3,r3,23192
  803030:	d9001217 	ldw	r4,72(sp)
  803034:	300490fa 	slli	r2,r6,3
  803038:	d9401317 	ldw	r5,76(sp)
  80303c:	10c5883a 	add	r2,r2,r3
  803040:	12000017 	ldw	r8,0(r2)
  803044:	12400117 	ldw	r9,4(r2)
  803048:	400d883a 	mov	r6,r8
  80304c:	480f883a 	mov	r7,r9
  803050:	080908c0 	call	80908c <__ltdf2>
  803054:	1000030e 	bge	r2,zero,803064 <_dtoa_r+0x79c>
  803058:	d8800d17 	ldw	r2,52(sp)
  80305c:	10bfffc4 	addi	r2,r2,-1
  803060:	d8800d15 	stw	r2,52(sp)
  803064:	d8000c15 	stw	zero,48(sp)
  803068:	003ea806 	br	802b0c <_dtoa_r+0x244>
  80306c:	d9000b17 	ldw	r4,44(sp)
  803070:	202cc03a 	cmpne	r22,r4,zero
  803074:	b000c71e 	bne	r22,zero,803394 <_dtoa_r+0xacc>
  803078:	dc001117 	ldw	r16,68(sp)
  80307c:	dc801017 	ldw	r18,64(sp)
  803080:	0027883a 	mov	r19,zero
  803084:	04000b0e 	bge	zero,r16,8030b4 <_dtoa_r+0x7ec>
  803088:	d8c00a17 	ldw	r3,40(sp)
  80308c:	00c0090e 	bge	zero,r3,8030b4 <_dtoa_r+0x7ec>
  803090:	8005883a 	mov	r2,r16
  803094:	1c011316 	blt	r3,r16,8034e4 <_dtoa_r+0xc1c>
  803098:	d9000a17 	ldw	r4,40(sp)
  80309c:	d9801117 	ldw	r6,68(sp)
  8030a0:	80a1c83a 	sub	r16,r16,r2
  8030a4:	2089c83a 	sub	r4,r4,r2
  8030a8:	308dc83a 	sub	r6,r6,r2
  8030ac:	d9000a15 	stw	r4,40(sp)
  8030b0:	d9801115 	stw	r6,68(sp)
  8030b4:	d8801017 	ldw	r2,64(sp)
  8030b8:	0080150e 	bge	zero,r2,803110 <_dtoa_r+0x848>
  8030bc:	d8c00b17 	ldw	r3,44(sp)
  8030c0:	1805003a 	cmpeq	r2,r3,zero
  8030c4:	1001c91e 	bne	r2,zero,8037ec <_dtoa_r+0xf24>
  8030c8:	04800e0e 	bge	zero,r18,803104 <_dtoa_r+0x83c>
  8030cc:	d9001617 	ldw	r4,88(sp)
  8030d0:	980b883a 	mov	r5,r19
  8030d4:	900d883a 	mov	r6,r18
  8030d8:	08068100 	call	806810 <__pow5mult>
  8030dc:	d9001617 	ldw	r4,88(sp)
  8030e0:	d9800717 	ldw	r6,28(sp)
  8030e4:	100b883a 	mov	r5,r2
  8030e8:	1027883a 	mov	r19,r2
  8030ec:	08064ec0 	call	8064ec <__multiply>
  8030f0:	d9001617 	ldw	r4,88(sp)
  8030f4:	d9400717 	ldw	r5,28(sp)
  8030f8:	1023883a 	mov	r17,r2
  8030fc:	0805a5c0 	call	805a5c <_Bfree>
  803100:	dc400715 	stw	r17,28(sp)
  803104:	d9001017 	ldw	r4,64(sp)
  803108:	248dc83a 	sub	r6,r4,r18
  80310c:	30010e1e 	bne	r6,zero,803548 <_dtoa_r+0xc80>
  803110:	d9001617 	ldw	r4,88(sp)
  803114:	04400044 	movi	r17,1
  803118:	880b883a 	mov	r5,r17
  80311c:	08066d40 	call	8066d4 <__i2b>
  803120:	d9800917 	ldw	r6,36(sp)
  803124:	1025883a 	mov	r18,r2
  803128:	0180040e 	bge	zero,r6,80313c <_dtoa_r+0x874>
  80312c:	d9001617 	ldw	r4,88(sp)
  803130:	100b883a 	mov	r5,r2
  803134:	08068100 	call	806810 <__pow5mult>
  803138:	1025883a 	mov	r18,r2
  80313c:	d8801717 	ldw	r2,92(sp)
  803140:	8880f30e 	bge	r17,r2,803510 <_dtoa_r+0xc48>
  803144:	0023883a 	mov	r17,zero
  803148:	d9800917 	ldw	r6,36(sp)
  80314c:	30019e1e 	bne	r6,zero,8037c8 <_dtoa_r+0xf00>
  803150:	00c00044 	movi	r3,1
  803154:	d9000a17 	ldw	r4,40(sp)
  803158:	20c5883a 	add	r2,r4,r3
  80315c:	10c007cc 	andi	r3,r2,31
  803160:	1800841e 	bne	r3,zero,803374 <_dtoa_r+0xaac>
  803164:	00800704 	movi	r2,28
  803168:	d9000a17 	ldw	r4,40(sp)
  80316c:	d9801117 	ldw	r6,68(sp)
  803170:	80a1883a 	add	r16,r16,r2
  803174:	2089883a 	add	r4,r4,r2
  803178:	308d883a 	add	r6,r6,r2
  80317c:	d9000a15 	stw	r4,40(sp)
  803180:	d9801115 	stw	r6,68(sp)
  803184:	d8801117 	ldw	r2,68(sp)
  803188:	0080050e 	bge	zero,r2,8031a0 <_dtoa_r+0x8d8>
  80318c:	d9400717 	ldw	r5,28(sp)
  803190:	d9001617 	ldw	r4,88(sp)
  803194:	100d883a 	mov	r6,r2
  803198:	08063a00 	call	8063a0 <__lshift>
  80319c:	d8800715 	stw	r2,28(sp)
  8031a0:	d8c00a17 	ldw	r3,40(sp)
  8031a4:	00c0050e 	bge	zero,r3,8031bc <_dtoa_r+0x8f4>
  8031a8:	d9001617 	ldw	r4,88(sp)
  8031ac:	900b883a 	mov	r5,r18
  8031b0:	180d883a 	mov	r6,r3
  8031b4:	08063a00 	call	8063a0 <__lshift>
  8031b8:	1025883a 	mov	r18,r2
  8031bc:	d9000c17 	ldw	r4,48(sp)
  8031c0:	2005003a 	cmpeq	r2,r4,zero
  8031c4:	10016f26 	beq	r2,zero,803784 <_dtoa_r+0xebc>
  8031c8:	d9000f17 	ldw	r4,60(sp)
  8031cc:	0102170e 	bge	zero,r4,803a2c <_dtoa_r+0x1164>
  8031d0:	d9800b17 	ldw	r6,44(sp)
  8031d4:	3005003a 	cmpeq	r2,r6,zero
  8031d8:	1000881e 	bne	r2,zero,8033fc <_dtoa_r+0xb34>
  8031dc:	0400050e 	bge	zero,r16,8031f4 <_dtoa_r+0x92c>
  8031e0:	d9001617 	ldw	r4,88(sp)
  8031e4:	980b883a 	mov	r5,r19
  8031e8:	800d883a 	mov	r6,r16
  8031ec:	08063a00 	call	8063a0 <__lshift>
  8031f0:	1027883a 	mov	r19,r2
  8031f4:	8804c03a 	cmpne	r2,r17,zero
  8031f8:	1002541e 	bne	r2,zero,803b4c <_dtoa_r+0x1284>
  8031fc:	980b883a 	mov	r5,r19
  803200:	dd800517 	ldw	r22,20(sp)
  803204:	dcc00615 	stw	r19,24(sp)
  803208:	a700004c 	andi	fp,r20,1
  80320c:	2827883a 	mov	r19,r5
  803210:	d9000717 	ldw	r4,28(sp)
  803214:	900b883a 	mov	r5,r18
  803218:	08026b00 	call	8026b0 <quorem>
  80321c:	d9000717 	ldw	r4,28(sp)
  803220:	d9400617 	ldw	r5,24(sp)
  803224:	1023883a 	mov	r17,r2
  803228:	8dc00c04 	addi	r23,r17,48
  80322c:	0805bb80 	call	805bb8 <__mcmp>
  803230:	d9001617 	ldw	r4,88(sp)
  803234:	900b883a 	mov	r5,r18
  803238:	980d883a 	mov	r6,r19
  80323c:	1029883a 	mov	r20,r2
  803240:	08062140 	call	806214 <__mdiff>
  803244:	102b883a 	mov	r21,r2
  803248:	10800317 	ldw	r2,12(r2)
  80324c:	1001281e 	bne	r2,zero,8036f0 <_dtoa_r+0xe28>
  803250:	d9000717 	ldw	r4,28(sp)
  803254:	a80b883a 	mov	r5,r21
  803258:	0805bb80 	call	805bb8 <__mcmp>
  80325c:	d9001617 	ldw	r4,88(sp)
  803260:	1021883a 	mov	r16,r2
  803264:	a80b883a 	mov	r5,r21
  803268:	0805a5c0 	call	805a5c <_Bfree>
  80326c:	8000041e 	bne	r16,zero,803280 <_dtoa_r+0x9b8>
  803270:	d8801717 	ldw	r2,92(sp)
  803274:	1000021e 	bne	r2,zero,803280 <_dtoa_r+0x9b8>
  803278:	e004c03a 	cmpne	r2,fp,zero
  80327c:	10011726 	beq	r2,zero,8036dc <_dtoa_r+0xe14>
  803280:	a0010616 	blt	r20,zero,80369c <_dtoa_r+0xdd4>
  803284:	a000041e 	bne	r20,zero,803298 <_dtoa_r+0x9d0>
  803288:	d8c01717 	ldw	r3,92(sp)
  80328c:	1800021e 	bne	r3,zero,803298 <_dtoa_r+0x9d0>
  803290:	e004c03a 	cmpne	r2,fp,zero
  803294:	10010126 	beq	r2,zero,80369c <_dtoa_r+0xdd4>
  803298:	04023d16 	blt	zero,r16,803b90 <_dtoa_r+0x12c8>
  80329c:	b5c00005 	stb	r23,0(r22)
  8032a0:	d9800517 	ldw	r6,20(sp)
  8032a4:	d9000f17 	ldw	r4,60(sp)
  8032a8:	b5800044 	addi	r22,r22,1
  8032ac:	3105883a 	add	r2,r6,r4
  8032b0:	b0806526 	beq	r22,r2,803448 <_dtoa_r+0xb80>
  8032b4:	d9400717 	ldw	r5,28(sp)
  8032b8:	d9001617 	ldw	r4,88(sp)
  8032bc:	01800284 	movi	r6,10
  8032c0:	000f883a 	mov	r7,zero
  8032c4:	08067100 	call	806710 <__multadd>
  8032c8:	d8800715 	stw	r2,28(sp)
  8032cc:	d8800617 	ldw	r2,24(sp)
  8032d0:	14c10c26 	beq	r2,r19,803704 <_dtoa_r+0xe3c>
  8032d4:	d9400617 	ldw	r5,24(sp)
  8032d8:	d9001617 	ldw	r4,88(sp)
  8032dc:	01800284 	movi	r6,10
  8032e0:	000f883a 	mov	r7,zero
  8032e4:	08067100 	call	806710 <__multadd>
  8032e8:	d9001617 	ldw	r4,88(sp)
  8032ec:	980b883a 	mov	r5,r19
  8032f0:	01800284 	movi	r6,10
  8032f4:	000f883a 	mov	r7,zero
  8032f8:	d8800615 	stw	r2,24(sp)
  8032fc:	08067100 	call	806710 <__multadd>
  803300:	1027883a 	mov	r19,r2
  803304:	003fc206 	br	803210 <_dtoa_r+0x948>
  803308:	2445c83a 	sub	r2,r4,r17
  80330c:	a088983a 	sll	r4,r20,r2
  803310:	003e4b06 	br	802c40 <_dtoa_r+0x378>
  803314:	01bfffc4 	movi	r6,-1
  803318:	00800044 	movi	r2,1
  80331c:	d9800e15 	stw	r6,56(sp)
  803320:	d9800f15 	stw	r6,60(sp)
  803324:	d8800b15 	stw	r2,44(sp)
  803328:	d8c01617 	ldw	r3,88(sp)
  80332c:	008005c4 	movi	r2,23
  803330:	18001115 	stw	zero,68(r3)
  803334:	1580082e 	bgeu	r2,r22,803358 <_dtoa_r+0xa90>
  803338:	00c00104 	movi	r3,4
  80333c:	0009883a 	mov	r4,zero
  803340:	18c7883a 	add	r3,r3,r3
  803344:	18800504 	addi	r2,r3,20
  803348:	21000044 	addi	r4,r4,1
  80334c:	b0bffc2e 	bgeu	r22,r2,803340 <_dtoa_r+0xa78>
  803350:	d9801617 	ldw	r6,88(sp)
  803354:	31001115 	stw	r4,68(r6)
  803358:	dc000f17 	ldw	r16,60(sp)
  80335c:	003e4b06 	br	802c8c <_dtoa_r+0x3c4>
  803360:	d9801717 	ldw	r6,92(sp)
  803364:	0023883a 	mov	r17,zero
  803368:	31bfff04 	addi	r6,r6,-4
  80336c:	d9801715 	stw	r6,92(sp)
  803370:	003df806 	br	802b54 <_dtoa_r+0x28c>
  803374:	00800804 	movi	r2,32
  803378:	10c9c83a 	sub	r4,r2,r3
  80337c:	00c00104 	movi	r3,4
  803380:	19005a16 	blt	r3,r4,8034ec <_dtoa_r+0xc24>
  803384:	008000c4 	movi	r2,3
  803388:	113f7e16 	blt	r2,r4,803184 <_dtoa_r+0x8bc>
  80338c:	20800704 	addi	r2,r4,28
  803390:	003f7506 	br	803168 <_dtoa_r+0x8a0>
  803394:	d9801717 	ldw	r6,92(sp)
  803398:	00800044 	movi	r2,1
  80339c:	1180a10e 	bge	r2,r6,803624 <_dtoa_r+0xd5c>
  8033a0:	d9800f17 	ldw	r6,60(sp)
  8033a4:	d8c01017 	ldw	r3,64(sp)
  8033a8:	30bfffc4 	addi	r2,r6,-1
  8033ac:	1881c616 	blt	r3,r2,803ac8 <_dtoa_r+0x1200>
  8033b0:	18a5c83a 	sub	r18,r3,r2
  8033b4:	d8800f17 	ldw	r2,60(sp)
  8033b8:	10026216 	blt	r2,zero,803d44 <_dtoa_r+0x147c>
  8033bc:	dc001117 	ldw	r16,68(sp)
  8033c0:	1007883a 	mov	r3,r2
  8033c4:	d9800a17 	ldw	r6,40(sp)
  8033c8:	d8801117 	ldw	r2,68(sp)
  8033cc:	d9001617 	ldw	r4,88(sp)
  8033d0:	30cd883a 	add	r6,r6,r3
  8033d4:	10c5883a 	add	r2,r2,r3
  8033d8:	01400044 	movi	r5,1
  8033dc:	d9800a15 	stw	r6,40(sp)
  8033e0:	d8801115 	stw	r2,68(sp)
  8033e4:	08066d40 	call	8066d4 <__i2b>
  8033e8:	1027883a 	mov	r19,r2
  8033ec:	003f2506 	br	803084 <_dtoa_r+0x7bc>
  8033f0:	00c02074 	movhi	r3,129
  8033f4:	18d68804 	addi	r3,r3,23072
  8033f8:	003d6706 	br	802998 <_dtoa_r+0xd0>
  8033fc:	dd800517 	ldw	r22,20(sp)
  803400:	04000044 	movi	r16,1
  803404:	00000706 	br	803424 <_dtoa_r+0xb5c>
  803408:	d9400717 	ldw	r5,28(sp)
  80340c:	d9001617 	ldw	r4,88(sp)
  803410:	01800284 	movi	r6,10
  803414:	000f883a 	mov	r7,zero
  803418:	08067100 	call	806710 <__multadd>
  80341c:	d8800715 	stw	r2,28(sp)
  803420:	84000044 	addi	r16,r16,1
  803424:	d9000717 	ldw	r4,28(sp)
  803428:	900b883a 	mov	r5,r18
  80342c:	08026b00 	call	8026b0 <quorem>
  803430:	15c00c04 	addi	r23,r2,48
  803434:	b5c00005 	stb	r23,0(r22)
  803438:	d8c00f17 	ldw	r3,60(sp)
  80343c:	b5800044 	addi	r22,r22,1
  803440:	80fff116 	blt	r16,r3,803408 <_dtoa_r+0xb40>
  803444:	d8000615 	stw	zero,24(sp)
  803448:	d9400717 	ldw	r5,28(sp)
  80344c:	d9001617 	ldw	r4,88(sp)
  803450:	01800044 	movi	r6,1
  803454:	08063a00 	call	8063a0 <__lshift>
  803458:	1009883a 	mov	r4,r2
  80345c:	900b883a 	mov	r5,r18
  803460:	d8800715 	stw	r2,28(sp)
  803464:	0805bb80 	call	805bb8 <__mcmp>
  803468:	00803c0e 	bge	zero,r2,80355c <_dtoa_r+0xc94>
  80346c:	b009883a 	mov	r4,r22
  803470:	213fffc4 	addi	r4,r4,-1
  803474:	21400003 	ldbu	r5,0(r4)
  803478:	00800e44 	movi	r2,57
  80347c:	28c03fcc 	andi	r3,r5,255
  803480:	18c0201c 	xori	r3,r3,128
  803484:	18ffe004 	addi	r3,r3,-128
  803488:	1881981e 	bne	r3,r2,803aec <_dtoa_r+0x1224>
  80348c:	d9800517 	ldw	r6,20(sp)
  803490:	21bff71e 	bne	r4,r6,803470 <_dtoa_r+0xba8>
  803494:	d8800d17 	ldw	r2,52(sp)
  803498:	37000044 	addi	fp,r6,1
  80349c:	10800044 	addi	r2,r2,1
  8034a0:	d8800d15 	stw	r2,52(sp)
  8034a4:	00800c44 	movi	r2,49
  8034a8:	30800005 	stb	r2,0(r6)
  8034ac:	d9001617 	ldw	r4,88(sp)
  8034b0:	900b883a 	mov	r5,r18
  8034b4:	0805a5c0 	call	805a5c <_Bfree>
  8034b8:	983ecd26 	beq	r19,zero,802ff0 <_dtoa_r+0x728>
  8034bc:	d8c00617 	ldw	r3,24(sp)
  8034c0:	18000426 	beq	r3,zero,8034d4 <_dtoa_r+0xc0c>
  8034c4:	1cc00326 	beq	r3,r19,8034d4 <_dtoa_r+0xc0c>
  8034c8:	d9001617 	ldw	r4,88(sp)
  8034cc:	180b883a 	mov	r5,r3
  8034d0:	0805a5c0 	call	805a5c <_Bfree>
  8034d4:	d9001617 	ldw	r4,88(sp)
  8034d8:	980b883a 	mov	r5,r19
  8034dc:	0805a5c0 	call	805a5c <_Bfree>
  8034e0:	003ec306 	br	802ff0 <_dtoa_r+0x728>
  8034e4:	1805883a 	mov	r2,r3
  8034e8:	003eeb06 	br	803098 <_dtoa_r+0x7d0>
  8034ec:	d9800a17 	ldw	r6,40(sp)
  8034f0:	d8c01117 	ldw	r3,68(sp)
  8034f4:	20bfff04 	addi	r2,r4,-4
  8034f8:	308d883a 	add	r6,r6,r2
  8034fc:	1887883a 	add	r3,r3,r2
  803500:	80a1883a 	add	r16,r16,r2
  803504:	d9800a15 	stw	r6,40(sp)
  803508:	d8c01115 	stw	r3,68(sp)
  80350c:	003f1d06 	br	803184 <_dtoa_r+0x8bc>
  803510:	a03f0c1e 	bne	r20,zero,803144 <_dtoa_r+0x87c>
  803514:	00800434 	movhi	r2,16
  803518:	10bfffc4 	addi	r2,r2,-1
  80351c:	a884703a 	and	r2,r21,r2
  803520:	103f081e 	bne	r2,zero,803144 <_dtoa_r+0x87c>
  803524:	a89ffc2c 	andhi	r2,r21,32752
  803528:	103f0626 	beq	r2,zero,803144 <_dtoa_r+0x87c>
  80352c:	d8c01117 	ldw	r3,68(sp)
  803530:	d9000a17 	ldw	r4,40(sp)
  803534:	18c00044 	addi	r3,r3,1
  803538:	21000044 	addi	r4,r4,1
  80353c:	d8c01115 	stw	r3,68(sp)
  803540:	d9000a15 	stw	r4,40(sp)
  803544:	003f0006 	br	803148 <_dtoa_r+0x880>
  803548:	d9400717 	ldw	r5,28(sp)
  80354c:	d9001617 	ldw	r4,88(sp)
  803550:	08068100 	call	806810 <__pow5mult>
  803554:	d8800715 	stw	r2,28(sp)
  803558:	003eed06 	br	803110 <_dtoa_r+0x848>
  80355c:	1000021e 	bne	r2,zero,803568 <_dtoa_r+0xca0>
  803560:	b880004c 	andi	r2,r23,1
  803564:	103fc11e 	bne	r2,zero,80346c <_dtoa_r+0xba4>
  803568:	b5bfffc4 	addi	r22,r22,-1
  80356c:	b0c00007 	ldb	r3,0(r22)
  803570:	00800c04 	movi	r2,48
  803574:	18bffc26 	beq	r3,r2,803568 <_dtoa_r+0xca0>
  803578:	b7000044 	addi	fp,r22,1
  80357c:	003fcb06 	br	8034ac <_dtoa_r+0xbe4>
  803580:	d9800d17 	ldw	r6,52(sp)
  803584:	018fc83a 	sub	r7,zero,r6
  803588:	3801f726 	beq	r7,zero,803d68 <_dtoa_r+0x14a0>
  80358c:	398003cc 	andi	r6,r7,15
  803590:	300c90fa 	slli	r6,r6,3
  803594:	01402074 	movhi	r5,129
  803598:	2956a604 	addi	r5,r5,23192
  80359c:	d9001217 	ldw	r4,72(sp)
  8035a0:	314d883a 	add	r6,r6,r5
  8035a4:	30c00117 	ldw	r3,4(r6)
  8035a8:	30800017 	ldw	r2,0(r6)
  8035ac:	d9401317 	ldw	r5,76(sp)
  8035b0:	3821d13a 	srai	r16,r7,4
  8035b4:	100d883a 	mov	r6,r2
  8035b8:	180f883a 	mov	r7,r3
  8035bc:	08088500 	call	808850 <__muldf3>
  8035c0:	1011883a 	mov	r8,r2
  8035c4:	1813883a 	mov	r9,r3
  8035c8:	1029883a 	mov	r20,r2
  8035cc:	182b883a 	mov	r21,r3
  8035d0:	8001e526 	beq	r16,zero,803d68 <_dtoa_r+0x14a0>
  8035d4:	05800084 	movi	r22,2
  8035d8:	04402074 	movhi	r17,129
  8035dc:	8c56d804 	addi	r17,r17,23392
  8035e0:	8080004c 	andi	r2,r16,1
  8035e4:	1005003a 	cmpeq	r2,r2,zero
  8035e8:	1000081e 	bne	r2,zero,80360c <_dtoa_r+0xd44>
  8035ec:	89800017 	ldw	r6,0(r17)
  8035f0:	89c00117 	ldw	r7,4(r17)
  8035f4:	480b883a 	mov	r5,r9
  8035f8:	4009883a 	mov	r4,r8
  8035fc:	08088500 	call	808850 <__muldf3>
  803600:	1011883a 	mov	r8,r2
  803604:	b5800044 	addi	r22,r22,1
  803608:	1813883a 	mov	r9,r3
  80360c:	8021d07a 	srai	r16,r16,1
  803610:	8c400204 	addi	r17,r17,8
  803614:	803ff21e 	bne	r16,zero,8035e0 <_dtoa_r+0xd18>
  803618:	4029883a 	mov	r20,r8
  80361c:	482b883a 	mov	r21,r9
  803620:	003dca06 	br	802d4c <_dtoa_r+0x484>
  803624:	d9000817 	ldw	r4,32(sp)
  803628:	2005003a 	cmpeq	r2,r4,zero
  80362c:	1001f61e 	bne	r2,zero,803e08 <_dtoa_r+0x1540>
  803630:	dc001117 	ldw	r16,68(sp)
  803634:	dc801017 	ldw	r18,64(sp)
  803638:	18c10cc4 	addi	r3,r3,1075
  80363c:	003f6106 	br	8033c4 <_dtoa_r+0xafc>
  803640:	d8000b15 	stw	zero,44(sp)
  803644:	d9802617 	ldw	r6,152(sp)
  803648:	d8c00d17 	ldw	r3,52(sp)
  80364c:	30800044 	addi	r2,r6,1
  803650:	18ad883a 	add	r22,r3,r2
  803654:	b13fffc4 	addi	r4,r22,-1
  803658:	d9000e15 	stw	r4,56(sp)
  80365c:	0581f60e 	bge	zero,r22,803e38 <_dtoa_r+0x1570>
  803660:	dd800f15 	stw	r22,60(sp)
  803664:	003f3006 	br	803328 <_dtoa_r+0xa60>
  803668:	d8000b15 	stw	zero,44(sp)
  80366c:	d9002617 	ldw	r4,152(sp)
  803670:	0101eb0e 	bge	zero,r4,803e20 <_dtoa_r+0x1558>
  803674:	202d883a 	mov	r22,r4
  803678:	d9000e15 	stw	r4,56(sp)
  80367c:	d9000f15 	stw	r4,60(sp)
  803680:	003f2906 	br	803328 <_dtoa_r+0xa60>
  803684:	01800044 	movi	r6,1
  803688:	d9800b15 	stw	r6,44(sp)
  80368c:	003ff706 	br	80366c <_dtoa_r+0xda4>
  803690:	01000044 	movi	r4,1
  803694:	d9000b15 	stw	r4,44(sp)
  803698:	003fea06 	br	803644 <_dtoa_r+0xd7c>
  80369c:	04000c0e 	bge	zero,r16,8036d0 <_dtoa_r+0xe08>
  8036a0:	d9400717 	ldw	r5,28(sp)
  8036a4:	d9001617 	ldw	r4,88(sp)
  8036a8:	01800044 	movi	r6,1
  8036ac:	08063a00 	call	8063a0 <__lshift>
  8036b0:	1009883a 	mov	r4,r2
  8036b4:	900b883a 	mov	r5,r18
  8036b8:	d8800715 	stw	r2,28(sp)
  8036bc:	0805bb80 	call	805bb8 <__mcmp>
  8036c0:	0081e00e 	bge	zero,r2,803e44 <_dtoa_r+0x157c>
  8036c4:	bdc00044 	addi	r23,r23,1
  8036c8:	00800e84 	movi	r2,58
  8036cc:	b881a226 	beq	r23,r2,803d58 <_dtoa_r+0x1490>
  8036d0:	b7000044 	addi	fp,r22,1
  8036d4:	b5c00005 	stb	r23,0(r22)
  8036d8:	003f7406 	br	8034ac <_dtoa_r+0xbe4>
  8036dc:	00800e44 	movi	r2,57
  8036e0:	b8819d26 	beq	r23,r2,803d58 <_dtoa_r+0x1490>
  8036e4:	053ffa0e 	bge	zero,r20,8036d0 <_dtoa_r+0xe08>
  8036e8:	8dc00c44 	addi	r23,r17,49
  8036ec:	003ff806 	br	8036d0 <_dtoa_r+0xe08>
  8036f0:	d9001617 	ldw	r4,88(sp)
  8036f4:	a80b883a 	mov	r5,r21
  8036f8:	04000044 	movi	r16,1
  8036fc:	0805a5c0 	call	805a5c <_Bfree>
  803700:	003edf06 	br	803280 <_dtoa_r+0x9b8>
  803704:	d9001617 	ldw	r4,88(sp)
  803708:	980b883a 	mov	r5,r19
  80370c:	01800284 	movi	r6,10
  803710:	000f883a 	mov	r7,zero
  803714:	08067100 	call	806710 <__multadd>
  803718:	1027883a 	mov	r19,r2
  80371c:	d8800615 	stw	r2,24(sp)
  803720:	003ebb06 	br	803210 <_dtoa_r+0x948>
  803724:	d9801117 	ldw	r6,68(sp)
  803728:	d8800d17 	ldw	r2,52(sp)
  80372c:	d8000915 	stw	zero,36(sp)
  803730:	308dc83a 	sub	r6,r6,r2
  803734:	0087c83a 	sub	r3,zero,r2
  803738:	d9801115 	stw	r6,68(sp)
  80373c:	d8c01015 	stw	r3,64(sp)
  803740:	003cfe06 	br	802b3c <_dtoa_r+0x274>
  803744:	018dc83a 	sub	r6,zero,r6
  803748:	d9801115 	stw	r6,68(sp)
  80374c:	d8000a15 	stw	zero,40(sp)
  803750:	003cf306 	br	802b20 <_dtoa_r+0x258>
  803754:	d9000d17 	ldw	r4,52(sp)
  803758:	08091140 	call	809114 <__floatsidf>
  80375c:	880b883a 	mov	r5,r17
  803760:	8009883a 	mov	r4,r16
  803764:	180f883a 	mov	r7,r3
  803768:	100d883a 	mov	r6,r2
  80376c:	0808ef40 	call	808ef4 <__nedf2>
  803770:	103ce126 	beq	r2,zero,802af8 <_dtoa_r+0x230>
  803774:	d9800d17 	ldw	r6,52(sp)
  803778:	31bfffc4 	addi	r6,r6,-1
  80377c:	d9800d15 	stw	r6,52(sp)
  803780:	003cdd06 	br	802af8 <_dtoa_r+0x230>
  803784:	d9000717 	ldw	r4,28(sp)
  803788:	900b883a 	mov	r5,r18
  80378c:	0805bb80 	call	805bb8 <__mcmp>
  803790:	103e8d0e 	bge	r2,zero,8031c8 <_dtoa_r+0x900>
  803794:	d9400717 	ldw	r5,28(sp)
  803798:	d9001617 	ldw	r4,88(sp)
  80379c:	01800284 	movi	r6,10
  8037a0:	000f883a 	mov	r7,zero
  8037a4:	08067100 	call	806710 <__multadd>
  8037a8:	d9800d17 	ldw	r6,52(sp)
  8037ac:	d8800715 	stw	r2,28(sp)
  8037b0:	31bfffc4 	addi	r6,r6,-1
  8037b4:	d9800d15 	stw	r6,52(sp)
  8037b8:	b001a71e 	bne	r22,zero,803e58 <_dtoa_r+0x1590>
  8037bc:	d8800e17 	ldw	r2,56(sp)
  8037c0:	d8800f15 	stw	r2,60(sp)
  8037c4:	003e8006 	br	8031c8 <_dtoa_r+0x900>
  8037c8:	90800417 	ldw	r2,16(r18)
  8037cc:	1085883a 	add	r2,r2,r2
  8037d0:	1085883a 	add	r2,r2,r2
  8037d4:	1485883a 	add	r2,r2,r18
  8037d8:	11000417 	ldw	r4,16(r2)
  8037dc:	0805a840 	call	805a84 <__hi0bits>
  8037e0:	00c00804 	movi	r3,32
  8037e4:	1887c83a 	sub	r3,r3,r2
  8037e8:	003e5a06 	br	803154 <_dtoa_r+0x88c>
  8037ec:	d9400717 	ldw	r5,28(sp)
  8037f0:	d9801017 	ldw	r6,64(sp)
  8037f4:	d9001617 	ldw	r4,88(sp)
  8037f8:	08068100 	call	806810 <__pow5mult>
  8037fc:	d8800715 	stw	r2,28(sp)
  803800:	003e4306 	br	803110 <_dtoa_r+0x848>
  803804:	d9800f17 	ldw	r6,60(sp)
  803808:	d8800d17 	ldw	r2,52(sp)
  80380c:	d9800315 	stw	r6,12(sp)
  803810:	d8800415 	stw	r2,16(sp)
  803814:	d8c00b17 	ldw	r3,44(sp)
  803818:	1805003a 	cmpeq	r2,r3,zero
  80381c:	1000e21e 	bne	r2,zero,803ba8 <_dtoa_r+0x12e0>
  803820:	d9000317 	ldw	r4,12(sp)
  803824:	0005883a 	mov	r2,zero
  803828:	00cff834 	movhi	r3,16352
  80382c:	200c90fa 	slli	r6,r4,3
  803830:	01002074 	movhi	r4,129
  803834:	2116a604 	addi	r4,r4,23192
  803838:	180b883a 	mov	r5,r3
  80383c:	310d883a 	add	r6,r6,r4
  803840:	327fff17 	ldw	r9,-4(r6)
  803844:	323ffe17 	ldw	r8,-8(r6)
  803848:	1009883a 	mov	r4,r2
  80384c:	480f883a 	mov	r7,r9
  803850:	400d883a 	mov	r6,r8
  803854:	0808c140 	call	808c14 <__divdf3>
  803858:	180b883a 	mov	r5,r3
  80385c:	b00d883a 	mov	r6,r22
  803860:	b80f883a 	mov	r7,r23
  803864:	1009883a 	mov	r4,r2
  803868:	080875c0 	call	80875c <__subdf3>
  80386c:	a80b883a 	mov	r5,r21
  803870:	a009883a 	mov	r4,r20
  803874:	d8c01915 	stw	r3,100(sp)
  803878:	d8801815 	stw	r2,96(sp)
  80387c:	080920c0 	call	80920c <__fixdfsi>
  803880:	1009883a 	mov	r4,r2
  803884:	1027883a 	mov	r19,r2
  803888:	08091140 	call	809114 <__floatsidf>
  80388c:	a80b883a 	mov	r5,r21
  803890:	a009883a 	mov	r4,r20
  803894:	180f883a 	mov	r7,r3
  803898:	100d883a 	mov	r6,r2
  80389c:	080875c0 	call	80875c <__subdf3>
  8038a0:	d9801817 	ldw	r6,96(sp)
  8038a4:	1823883a 	mov	r17,r3
  8038a8:	d8801415 	stw	r2,80(sp)
  8038ac:	302d883a 	mov	r22,r6
  8038b0:	d9800517 	ldw	r6,20(sp)
  8038b4:	9cc00c04 	addi	r19,r19,48
  8038b8:	dc401515 	stw	r17,84(sp)
  8038bc:	d8c01917 	ldw	r3,100(sp)
  8038c0:	34c00005 	stb	r19,0(r6)
  8038c4:	d8800517 	ldw	r2,20(sp)
  8038c8:	d9401917 	ldw	r5,100(sp)
  8038cc:	d9801417 	ldw	r6,80(sp)
  8038d0:	b009883a 	mov	r4,r22
  8038d4:	880f883a 	mov	r7,r17
  8038d8:	182f883a 	mov	r23,r3
  8038dc:	17000044 	addi	fp,r2,1
  8038e0:	0808f7c0 	call	808f7c <__gtdf2>
  8038e4:	00804e16 	blt	zero,r2,803a20 <_dtoa_r+0x1158>
  8038e8:	d9801417 	ldw	r6,80(sp)
  8038ec:	0005883a 	mov	r2,zero
  8038f0:	00cffc34 	movhi	r3,16368
  8038f4:	180b883a 	mov	r5,r3
  8038f8:	880f883a 	mov	r7,r17
  8038fc:	1009883a 	mov	r4,r2
  803900:	080875c0 	call	80875c <__subdf3>
  803904:	d9401917 	ldw	r5,100(sp)
  803908:	180f883a 	mov	r7,r3
  80390c:	b009883a 	mov	r4,r22
  803910:	100d883a 	mov	r6,r2
  803914:	0808f7c0 	call	808f7c <__gtdf2>
  803918:	00bda216 	blt	zero,r2,802fa4 <_dtoa_r+0x6dc>
  80391c:	d8c00317 	ldw	r3,12(sp)
  803920:	00800044 	movi	r2,1
  803924:	10c01216 	blt	r2,r3,803970 <_dtoa_r+0x10a8>
  803928:	003d4506 	br	802e40 <_dtoa_r+0x578>
  80392c:	d9801417 	ldw	r6,80(sp)
  803930:	0005883a 	mov	r2,zero
  803934:	00cffc34 	movhi	r3,16368
  803938:	180b883a 	mov	r5,r3
  80393c:	880f883a 	mov	r7,r17
  803940:	1009883a 	mov	r4,r2
  803944:	080875c0 	call	80875c <__subdf3>
  803948:	d9c01b17 	ldw	r7,108(sp)
  80394c:	180b883a 	mov	r5,r3
  803950:	1009883a 	mov	r4,r2
  803954:	b00d883a 	mov	r6,r22
  803958:	080908c0 	call	80908c <__ltdf2>
  80395c:	103d9116 	blt	r2,zero,802fa4 <_dtoa_r+0x6dc>
  803960:	d9800517 	ldw	r6,20(sp)
  803964:	d9000317 	ldw	r4,12(sp)
  803968:	3105883a 	add	r2,r6,r4
  80396c:	e0bd3426 	beq	fp,r2,802e40 <_dtoa_r+0x578>
  803970:	04500934 	movhi	r17,16420
  803974:	0021883a 	mov	r16,zero
  803978:	b80b883a 	mov	r5,r23
  80397c:	b009883a 	mov	r4,r22
  803980:	800d883a 	mov	r6,r16
  803984:	880f883a 	mov	r7,r17
  803988:	08088500 	call	808850 <__muldf3>
  80398c:	d9401517 	ldw	r5,84(sp)
  803990:	d9001417 	ldw	r4,80(sp)
  803994:	880f883a 	mov	r7,r17
  803998:	000d883a 	mov	r6,zero
  80399c:	d8801a15 	stw	r2,104(sp)
  8039a0:	d8c01b15 	stw	r3,108(sp)
  8039a4:	08088500 	call	808850 <__muldf3>
  8039a8:	180b883a 	mov	r5,r3
  8039ac:	1009883a 	mov	r4,r2
  8039b0:	1823883a 	mov	r17,r3
  8039b4:	1021883a 	mov	r16,r2
  8039b8:	080920c0 	call	80920c <__fixdfsi>
  8039bc:	1009883a 	mov	r4,r2
  8039c0:	102b883a 	mov	r21,r2
  8039c4:	08091140 	call	809114 <__floatsidf>
  8039c8:	880b883a 	mov	r5,r17
  8039cc:	8009883a 	mov	r4,r16
  8039d0:	180f883a 	mov	r7,r3
  8039d4:	100d883a 	mov	r6,r2
  8039d8:	080875c0 	call	80875c <__subdf3>
  8039dc:	1021883a 	mov	r16,r2
  8039e0:	d9001b17 	ldw	r4,108(sp)
  8039e4:	1823883a 	mov	r17,r3
  8039e8:	dc001415 	stw	r16,80(sp)
  8039ec:	ad400c04 	addi	r21,r21,48
  8039f0:	dc401515 	stw	r17,84(sp)
  8039f4:	d8801a17 	ldw	r2,104(sp)
  8039f8:	e5400005 	stb	r21,0(fp)
  8039fc:	202f883a 	mov	r23,r4
  803a00:	d9c01b17 	ldw	r7,108(sp)
  803a04:	d9001417 	ldw	r4,80(sp)
  803a08:	880b883a 	mov	r5,r17
  803a0c:	100d883a 	mov	r6,r2
  803a10:	102d883a 	mov	r22,r2
  803a14:	e7000044 	addi	fp,fp,1
  803a18:	080908c0 	call	80908c <__ltdf2>
  803a1c:	103fc30e 	bge	r2,zero,80392c <_dtoa_r+0x1064>
  803a20:	d9000417 	ldw	r4,16(sp)
  803a24:	d9000d15 	stw	r4,52(sp)
  803a28:	003d7106 	br	802ff0 <_dtoa_r+0x728>
  803a2c:	d9801717 	ldw	r6,92(sp)
  803a30:	00800084 	movi	r2,2
  803a34:	11bde60e 	bge	r2,r6,8031d0 <_dtoa_r+0x908>
  803a38:	203cfb1e 	bne	r4,zero,802e28 <_dtoa_r+0x560>
  803a3c:	d9001617 	ldw	r4,88(sp)
  803a40:	900b883a 	mov	r5,r18
  803a44:	01800144 	movi	r6,5
  803a48:	000f883a 	mov	r7,zero
  803a4c:	08067100 	call	806710 <__multadd>
  803a50:	d9000717 	ldw	r4,28(sp)
  803a54:	100b883a 	mov	r5,r2
  803a58:	1025883a 	mov	r18,r2
  803a5c:	0805bb80 	call	805bb8 <__mcmp>
  803a60:	00bcf10e 	bge	zero,r2,802e28 <_dtoa_r+0x560>
  803a64:	d8c00d17 	ldw	r3,52(sp)
  803a68:	d9000517 	ldw	r4,20(sp)
  803a6c:	d8000615 	stw	zero,24(sp)
  803a70:	18c00044 	addi	r3,r3,1
  803a74:	d8c00d15 	stw	r3,52(sp)
  803a78:	00800c44 	movi	r2,49
  803a7c:	27000044 	addi	fp,r4,1
  803a80:	20800005 	stb	r2,0(r4)
  803a84:	003e8906 	br	8034ac <_dtoa_r+0xbe4>
  803a88:	d8c00517 	ldw	r3,20(sp)
  803a8c:	003bc206 	br	802998 <_dtoa_r+0xd0>
  803a90:	01802074 	movhi	r6,129
  803a94:	3196d804 	addi	r6,r6,23392
  803a98:	30c00917 	ldw	r3,36(r6)
  803a9c:	30800817 	ldw	r2,32(r6)
  803aa0:	d9001217 	ldw	r4,72(sp)
  803aa4:	d9401317 	ldw	r5,76(sp)
  803aa8:	180f883a 	mov	r7,r3
  803aac:	100d883a 	mov	r6,r2
  803ab0:	0808c140 	call	808c14 <__divdf3>
  803ab4:	948003cc 	andi	r18,r18,15
  803ab8:	058000c4 	movi	r22,3
  803abc:	1029883a 	mov	r20,r2
  803ac0:	182b883a 	mov	r21,r3
  803ac4:	003c8906 	br	802cec <_dtoa_r+0x424>
  803ac8:	d9001017 	ldw	r4,64(sp)
  803acc:	d9800917 	ldw	r6,36(sp)
  803ad0:	0025883a 	mov	r18,zero
  803ad4:	1105c83a 	sub	r2,r2,r4
  803ad8:	2089883a 	add	r4,r4,r2
  803adc:	308d883a 	add	r6,r6,r2
  803ae0:	d9001015 	stw	r4,64(sp)
  803ae4:	d9800915 	stw	r6,36(sp)
  803ae8:	003e3206 	br	8033b4 <_dtoa_r+0xaec>
  803aec:	28800044 	addi	r2,r5,1
  803af0:	27000044 	addi	fp,r4,1
  803af4:	20800005 	stb	r2,0(r4)
  803af8:	003e6c06 	br	8034ac <_dtoa_r+0xbe4>
  803afc:	d8800f17 	ldw	r2,60(sp)
  803b00:	00bce016 	blt	zero,r2,802e84 <_dtoa_r+0x5bc>
  803b04:	d9800f17 	ldw	r6,60(sp)
  803b08:	303cc51e 	bne	r6,zero,802e20 <_dtoa_r+0x558>
  803b0c:	0005883a 	mov	r2,zero
  803b10:	00d00534 	movhi	r3,16404
  803b14:	980b883a 	mov	r5,r19
  803b18:	180f883a 	mov	r7,r3
  803b1c:	9009883a 	mov	r4,r18
  803b20:	100d883a 	mov	r6,r2
  803b24:	08088500 	call	808850 <__muldf3>
  803b28:	180b883a 	mov	r5,r3
  803b2c:	a80f883a 	mov	r7,r21
  803b30:	1009883a 	mov	r4,r2
  803b34:	a00d883a 	mov	r6,r20
  803b38:	08090040 	call	809004 <__gedf2>
  803b3c:	103cb80e 	bge	r2,zero,802e20 <_dtoa_r+0x558>
  803b40:	0027883a 	mov	r19,zero
  803b44:	0025883a 	mov	r18,zero
  803b48:	003fc606 	br	803a64 <_dtoa_r+0x119c>
  803b4c:	99400117 	ldw	r5,4(r19)
  803b50:	d9001617 	ldw	r4,88(sp)
  803b54:	0805fdc0 	call	805fdc <_Balloc>
  803b58:	99800417 	ldw	r6,16(r19)
  803b5c:	11000304 	addi	r4,r2,12
  803b60:	99400304 	addi	r5,r19,12
  803b64:	318d883a 	add	r6,r6,r6
  803b68:	318d883a 	add	r6,r6,r6
  803b6c:	31800204 	addi	r6,r6,8
  803b70:	1023883a 	mov	r17,r2
  803b74:	08058440 	call	805844 <memcpy>
  803b78:	d9001617 	ldw	r4,88(sp)
  803b7c:	880b883a 	mov	r5,r17
  803b80:	01800044 	movi	r6,1
  803b84:	08063a00 	call	8063a0 <__lshift>
  803b88:	100b883a 	mov	r5,r2
  803b8c:	003d9c06 	br	803200 <_dtoa_r+0x938>
  803b90:	00800e44 	movi	r2,57
  803b94:	b8807026 	beq	r23,r2,803d58 <_dtoa_r+0x1490>
  803b98:	b8800044 	addi	r2,r23,1
  803b9c:	b7000044 	addi	fp,r22,1
  803ba0:	b0800005 	stb	r2,0(r22)
  803ba4:	003e4106 	br	8034ac <_dtoa_r+0xbe4>
  803ba8:	d8800317 	ldw	r2,12(sp)
  803bac:	01802074 	movhi	r6,129
  803bb0:	3196a604 	addi	r6,r6,23192
  803bb4:	b009883a 	mov	r4,r22
  803bb8:	100e90fa 	slli	r7,r2,3
  803bbc:	b80b883a 	mov	r5,r23
  803bc0:	398f883a 	add	r7,r7,r6
  803bc4:	38bffe17 	ldw	r2,-8(r7)
  803bc8:	d9800517 	ldw	r6,20(sp)
  803bcc:	38ffff17 	ldw	r3,-4(r7)
  803bd0:	37000044 	addi	fp,r6,1
  803bd4:	180f883a 	mov	r7,r3
  803bd8:	100d883a 	mov	r6,r2
  803bdc:	08088500 	call	808850 <__muldf3>
  803be0:	a80b883a 	mov	r5,r21
  803be4:	a009883a 	mov	r4,r20
  803be8:	182f883a 	mov	r23,r3
  803bec:	102d883a 	mov	r22,r2
  803bf0:	080920c0 	call	80920c <__fixdfsi>
  803bf4:	1009883a 	mov	r4,r2
  803bf8:	1027883a 	mov	r19,r2
  803bfc:	08091140 	call	809114 <__floatsidf>
  803c00:	a80b883a 	mov	r5,r21
  803c04:	a009883a 	mov	r4,r20
  803c08:	180f883a 	mov	r7,r3
  803c0c:	100d883a 	mov	r6,r2
  803c10:	080875c0 	call	80875c <__subdf3>
  803c14:	180b883a 	mov	r5,r3
  803c18:	d8c00517 	ldw	r3,20(sp)
  803c1c:	9cc00c04 	addi	r19,r19,48
  803c20:	1009883a 	mov	r4,r2
  803c24:	1cc00005 	stb	r19,0(r3)
  803c28:	2021883a 	mov	r16,r4
  803c2c:	d9000317 	ldw	r4,12(sp)
  803c30:	00800044 	movi	r2,1
  803c34:	2823883a 	mov	r17,r5
  803c38:	20802226 	beq	r4,r2,803cc4 <_dtoa_r+0x13fc>
  803c3c:	1029883a 	mov	r20,r2
  803c40:	0005883a 	mov	r2,zero
  803c44:	00d00934 	movhi	r3,16420
  803c48:	180f883a 	mov	r7,r3
  803c4c:	100d883a 	mov	r6,r2
  803c50:	880b883a 	mov	r5,r17
  803c54:	8009883a 	mov	r4,r16
  803c58:	08088500 	call	808850 <__muldf3>
  803c5c:	180b883a 	mov	r5,r3
  803c60:	1009883a 	mov	r4,r2
  803c64:	1823883a 	mov	r17,r3
  803c68:	1021883a 	mov	r16,r2
  803c6c:	080920c0 	call	80920c <__fixdfsi>
  803c70:	1009883a 	mov	r4,r2
  803c74:	102b883a 	mov	r21,r2
  803c78:	08091140 	call	809114 <__floatsidf>
  803c7c:	880b883a 	mov	r5,r17
  803c80:	8009883a 	mov	r4,r16
  803c84:	180f883a 	mov	r7,r3
  803c88:	100d883a 	mov	r6,r2
  803c8c:	080875c0 	call	80875c <__subdf3>
  803c90:	180b883a 	mov	r5,r3
  803c94:	d8c00517 	ldw	r3,20(sp)
  803c98:	1009883a 	mov	r4,r2
  803c9c:	ad400c04 	addi	r21,r21,48
  803ca0:	1d05883a 	add	r2,r3,r20
  803ca4:	15400005 	stb	r21,0(r2)
  803ca8:	2021883a 	mov	r16,r4
  803cac:	d9000317 	ldw	r4,12(sp)
  803cb0:	a5000044 	addi	r20,r20,1
  803cb4:	2823883a 	mov	r17,r5
  803cb8:	a13fe11e 	bne	r20,r4,803c40 <_dtoa_r+0x1378>
  803cbc:	e505883a 	add	r2,fp,r20
  803cc0:	173fffc4 	addi	fp,r2,-1
  803cc4:	0025883a 	mov	r18,zero
  803cc8:	04cff834 	movhi	r19,16352
  803ccc:	b009883a 	mov	r4,r22
  803cd0:	b80b883a 	mov	r5,r23
  803cd4:	900d883a 	mov	r6,r18
  803cd8:	980f883a 	mov	r7,r19
  803cdc:	08087dc0 	call	8087dc <__adddf3>
  803ce0:	180b883a 	mov	r5,r3
  803ce4:	1009883a 	mov	r4,r2
  803ce8:	800d883a 	mov	r6,r16
  803cec:	880f883a 	mov	r7,r17
  803cf0:	080908c0 	call	80908c <__ltdf2>
  803cf4:	103cab16 	blt	r2,zero,802fa4 <_dtoa_r+0x6dc>
  803cf8:	0009883a 	mov	r4,zero
  803cfc:	980b883a 	mov	r5,r19
  803d00:	b80f883a 	mov	r7,r23
  803d04:	b00d883a 	mov	r6,r22
  803d08:	080875c0 	call	80875c <__subdf3>
  803d0c:	180b883a 	mov	r5,r3
  803d10:	880f883a 	mov	r7,r17
  803d14:	1009883a 	mov	r4,r2
  803d18:	800d883a 	mov	r6,r16
  803d1c:	0808f7c0 	call	808f7c <__gtdf2>
  803d20:	00bc470e 	bge	zero,r2,802e40 <_dtoa_r+0x578>
  803d24:	00c00c04 	movi	r3,48
  803d28:	e73fffc4 	addi	fp,fp,-1
  803d2c:	e0800007 	ldb	r2,0(fp)
  803d30:	10fffd26 	beq	r2,r3,803d28 <_dtoa_r+0x1460>
  803d34:	d9800417 	ldw	r6,16(sp)
  803d38:	e7000044 	addi	fp,fp,1
  803d3c:	d9800d15 	stw	r6,52(sp)
  803d40:	003cab06 	br	802ff0 <_dtoa_r+0x728>
  803d44:	d8c00f17 	ldw	r3,60(sp)
  803d48:	d9001117 	ldw	r4,68(sp)
  803d4c:	20e1c83a 	sub	r16,r4,r3
  803d50:	0007883a 	mov	r3,zero
  803d54:	003d9b06 	br	8033c4 <_dtoa_r+0xafc>
  803d58:	00800e44 	movi	r2,57
  803d5c:	b0800005 	stb	r2,0(r22)
  803d60:	b5800044 	addi	r22,r22,1
  803d64:	003dc106 	br	80346c <_dtoa_r+0xba4>
  803d68:	05800084 	movi	r22,2
  803d6c:	003bf706 	br	802d4c <_dtoa_r+0x484>
  803d70:	d9000f17 	ldw	r4,60(sp)
  803d74:	013c000e 	bge	zero,r4,802d78 <_dtoa_r+0x4b0>
  803d78:	d9800e17 	ldw	r6,56(sp)
  803d7c:	01bc300e 	bge	zero,r6,802e40 <_dtoa_r+0x578>
  803d80:	0005883a 	mov	r2,zero
  803d84:	00d00934 	movhi	r3,16420
  803d88:	a80b883a 	mov	r5,r21
  803d8c:	180f883a 	mov	r7,r3
  803d90:	a009883a 	mov	r4,r20
  803d94:	100d883a 	mov	r6,r2
  803d98:	08088500 	call	808850 <__muldf3>
  803d9c:	b1000044 	addi	r4,r22,1
  803da0:	1021883a 	mov	r16,r2
  803da4:	1823883a 	mov	r17,r3
  803da8:	08091140 	call	809114 <__floatsidf>
  803dac:	880b883a 	mov	r5,r17
  803db0:	8009883a 	mov	r4,r16
  803db4:	180f883a 	mov	r7,r3
  803db8:	100d883a 	mov	r6,r2
  803dbc:	08088500 	call	808850 <__muldf3>
  803dc0:	0011883a 	mov	r8,zero
  803dc4:	02500734 	movhi	r9,16412
  803dc8:	180b883a 	mov	r5,r3
  803dcc:	480f883a 	mov	r7,r9
  803dd0:	1009883a 	mov	r4,r2
  803dd4:	400d883a 	mov	r6,r8
  803dd8:	08087dc0 	call	8087dc <__adddf3>
  803ddc:	102d883a 	mov	r22,r2
  803de0:	00bf3034 	movhi	r2,64704
  803de4:	10ef883a 	add	r23,r2,r3
  803de8:	d8800d17 	ldw	r2,52(sp)
  803dec:	d8c00e17 	ldw	r3,56(sp)
  803df0:	8029883a 	mov	r20,r16
  803df4:	10bfffc4 	addi	r2,r2,-1
  803df8:	882b883a 	mov	r21,r17
  803dfc:	d8800415 	stw	r2,16(sp)
  803e00:	d8c00315 	stw	r3,12(sp)
  803e04:	003e8306 	br	803814 <_dtoa_r+0xf4c>
  803e08:	d8800117 	ldw	r2,4(sp)
  803e0c:	dc001117 	ldw	r16,68(sp)
  803e10:	dc801017 	ldw	r18,64(sp)
  803e14:	00c00d84 	movi	r3,54
  803e18:	1887c83a 	sub	r3,r3,r2
  803e1c:	003d6906 	br	8033c4 <_dtoa_r+0xafc>
  803e20:	01800044 	movi	r6,1
  803e24:	3021883a 	mov	r16,r6
  803e28:	d9800f15 	stw	r6,60(sp)
  803e2c:	d9802615 	stw	r6,152(sp)
  803e30:	d9800e15 	stw	r6,56(sp)
  803e34:	003b9306 	br	802c84 <_dtoa_r+0x3bc>
  803e38:	b021883a 	mov	r16,r22
  803e3c:	dd800f15 	stw	r22,60(sp)
  803e40:	003b9006 	br	802c84 <_dtoa_r+0x3bc>
  803e44:	103e221e 	bne	r2,zero,8036d0 <_dtoa_r+0xe08>
  803e48:	b880004c 	andi	r2,r23,1
  803e4c:	1005003a 	cmpeq	r2,r2,zero
  803e50:	103e1f1e 	bne	r2,zero,8036d0 <_dtoa_r+0xe08>
  803e54:	003e1b06 	br	8036c4 <_dtoa_r+0xdfc>
  803e58:	d9001617 	ldw	r4,88(sp)
  803e5c:	980b883a 	mov	r5,r19
  803e60:	01800284 	movi	r6,10
  803e64:	000f883a 	mov	r7,zero
  803e68:	08067100 	call	806710 <__multadd>
  803e6c:	d8c00e17 	ldw	r3,56(sp)
  803e70:	1027883a 	mov	r19,r2
  803e74:	d8c00f15 	stw	r3,60(sp)
  803e78:	003cd306 	br	8031c8 <_dtoa_r+0x900>

00803e7c <_fflush_r>:
  803e7c:	defffb04 	addi	sp,sp,-20
  803e80:	dcc00315 	stw	r19,12(sp)
  803e84:	dc800215 	stw	r18,8(sp)
  803e88:	dfc00415 	stw	ra,16(sp)
  803e8c:	dc400115 	stw	r17,4(sp)
  803e90:	dc000015 	stw	r16,0(sp)
  803e94:	2027883a 	mov	r19,r4
  803e98:	2825883a 	mov	r18,r5
  803e9c:	20000226 	beq	r4,zero,803ea8 <_fflush_r+0x2c>
  803ea0:	20800e17 	ldw	r2,56(r4)
  803ea4:	10005626 	beq	r2,zero,804000 <_fflush_r+0x184>
  803ea8:	9100030b 	ldhu	r4,12(r18)
  803eac:	20ffffcc 	andi	r3,r4,65535
  803eb0:	18e0001c 	xori	r3,r3,32768
  803eb4:	18e00004 	addi	r3,r3,-32768
  803eb8:	1880020c 	andi	r2,r3,8
  803ebc:	1000261e 	bne	r2,zero,803f58 <_fflush_r+0xdc>
  803ec0:	90c00117 	ldw	r3,4(r18)
  803ec4:	20820014 	ori	r2,r4,2048
  803ec8:	9080030d 	sth	r2,12(r18)
  803ecc:	1009883a 	mov	r4,r2
  803ed0:	00c0400e 	bge	zero,r3,803fd4 <_fflush_r+0x158>
  803ed4:	92000a17 	ldw	r8,40(r18)
  803ed8:	40004026 	beq	r8,zero,803fdc <_fflush_r+0x160>
  803edc:	2084000c 	andi	r2,r4,4096
  803ee0:	10005326 	beq	r2,zero,804030 <_fflush_r+0x1b4>
  803ee4:	94001417 	ldw	r16,80(r18)
  803ee8:	9080030b 	ldhu	r2,12(r18)
  803eec:	1080010c 	andi	r2,r2,4
  803ef0:	1000481e 	bne	r2,zero,804014 <_fflush_r+0x198>
  803ef4:	91400717 	ldw	r5,28(r18)
  803ef8:	9809883a 	mov	r4,r19
  803efc:	800d883a 	mov	r6,r16
  803f00:	000f883a 	mov	r7,zero
  803f04:	403ee83a 	callr	r8
  803f08:	8080261e 	bne	r16,r2,803fa4 <_fflush_r+0x128>
  803f0c:	9080030b 	ldhu	r2,12(r18)
  803f10:	91000417 	ldw	r4,16(r18)
  803f14:	90000115 	stw	zero,4(r18)
  803f18:	10bdffcc 	andi	r2,r2,63487
  803f1c:	10ffffcc 	andi	r3,r2,65535
  803f20:	18c4000c 	andi	r3,r3,4096
  803f24:	9080030d 	sth	r2,12(r18)
  803f28:	91000015 	stw	r4,0(r18)
  803f2c:	18002b26 	beq	r3,zero,803fdc <_fflush_r+0x160>
  803f30:	0007883a 	mov	r3,zero
  803f34:	1805883a 	mov	r2,r3
  803f38:	94001415 	stw	r16,80(r18)
  803f3c:	dfc00417 	ldw	ra,16(sp)
  803f40:	dcc00317 	ldw	r19,12(sp)
  803f44:	dc800217 	ldw	r18,8(sp)
  803f48:	dc400117 	ldw	r17,4(sp)
  803f4c:	dc000017 	ldw	r16,0(sp)
  803f50:	dec00504 	addi	sp,sp,20
  803f54:	f800283a 	ret
  803f58:	94400417 	ldw	r17,16(r18)
  803f5c:	88001f26 	beq	r17,zero,803fdc <_fflush_r+0x160>
  803f60:	90800017 	ldw	r2,0(r18)
  803f64:	18c000cc 	andi	r3,r3,3
  803f68:	94400015 	stw	r17,0(r18)
  803f6c:	1461c83a 	sub	r16,r2,r17
  803f70:	18002526 	beq	r3,zero,804008 <_fflush_r+0x18c>
  803f74:	0005883a 	mov	r2,zero
  803f78:	90800215 	stw	r2,8(r18)
  803f7c:	0400170e 	bge	zero,r16,803fdc <_fflush_r+0x160>
  803f80:	90c00917 	ldw	r3,36(r18)
  803f84:	91400717 	ldw	r5,28(r18)
  803f88:	880d883a 	mov	r6,r17
  803f8c:	800f883a 	mov	r7,r16
  803f90:	9809883a 	mov	r4,r19
  803f94:	183ee83a 	callr	r3
  803f98:	88a3883a 	add	r17,r17,r2
  803f9c:	80a1c83a 	sub	r16,r16,r2
  803fa0:	00bff616 	blt	zero,r2,803f7c <_fflush_r+0x100>
  803fa4:	9080030b 	ldhu	r2,12(r18)
  803fa8:	00ffffc4 	movi	r3,-1
  803fac:	10801014 	ori	r2,r2,64
  803fb0:	9080030d 	sth	r2,12(r18)
  803fb4:	1805883a 	mov	r2,r3
  803fb8:	dfc00417 	ldw	ra,16(sp)
  803fbc:	dcc00317 	ldw	r19,12(sp)
  803fc0:	dc800217 	ldw	r18,8(sp)
  803fc4:	dc400117 	ldw	r17,4(sp)
  803fc8:	dc000017 	ldw	r16,0(sp)
  803fcc:	dec00504 	addi	sp,sp,20
  803fd0:	f800283a 	ret
  803fd4:	90800f17 	ldw	r2,60(r18)
  803fd8:	00bfbe16 	blt	zero,r2,803ed4 <_fflush_r+0x58>
  803fdc:	0007883a 	mov	r3,zero
  803fe0:	1805883a 	mov	r2,r3
  803fe4:	dfc00417 	ldw	ra,16(sp)
  803fe8:	dcc00317 	ldw	r19,12(sp)
  803fec:	dc800217 	ldw	r18,8(sp)
  803ff0:	dc400117 	ldw	r17,4(sp)
  803ff4:	dc000017 	ldw	r16,0(sp)
  803ff8:	dec00504 	addi	sp,sp,20
  803ffc:	f800283a 	ret
  804000:	08041140 	call	804114 <__sinit>
  804004:	003fa806 	br	803ea8 <_fflush_r+0x2c>
  804008:	90800517 	ldw	r2,20(r18)
  80400c:	90800215 	stw	r2,8(r18)
  804010:	003fda06 	br	803f7c <_fflush_r+0x100>
  804014:	90800117 	ldw	r2,4(r18)
  804018:	90c00c17 	ldw	r3,48(r18)
  80401c:	80a1c83a 	sub	r16,r16,r2
  804020:	183fb426 	beq	r3,zero,803ef4 <_fflush_r+0x78>
  804024:	90800f17 	ldw	r2,60(r18)
  804028:	80a1c83a 	sub	r16,r16,r2
  80402c:	003fb106 	br	803ef4 <_fflush_r+0x78>
  804030:	91400717 	ldw	r5,28(r18)
  804034:	9809883a 	mov	r4,r19
  804038:	000d883a 	mov	r6,zero
  80403c:	01c00044 	movi	r7,1
  804040:	403ee83a 	callr	r8
  804044:	1021883a 	mov	r16,r2
  804048:	00bfffc4 	movi	r2,-1
  80404c:	80800226 	beq	r16,r2,804058 <_fflush_r+0x1dc>
  804050:	92000a17 	ldw	r8,40(r18)
  804054:	003fa406 	br	803ee8 <_fflush_r+0x6c>
  804058:	98c00017 	ldw	r3,0(r19)
  80405c:	00800744 	movi	r2,29
  804060:	18bfde26 	beq	r3,r2,803fdc <_fflush_r+0x160>
  804064:	9080030b 	ldhu	r2,12(r18)
  804068:	8007883a 	mov	r3,r16
  80406c:	10801014 	ori	r2,r2,64
  804070:	9080030d 	sth	r2,12(r18)
  804074:	003fcf06 	br	803fb4 <_fflush_r+0x138>

00804078 <fflush>:
  804078:	01402034 	movhi	r5,128
  80407c:	294f9f04 	addi	r5,r5,15996
  804080:	2007883a 	mov	r3,r4
  804084:	20000526 	beq	r4,zero,80409c <fflush+0x24>
  804088:	00802074 	movhi	r2,129
  80408c:	109e2504 	addi	r2,r2,30868
  804090:	11000017 	ldw	r4,0(r2)
  804094:	180b883a 	mov	r5,r3
  804098:	0803e7c1 	jmpi	803e7c <_fflush_r>
  80409c:	00802074 	movhi	r2,129
  8040a0:	109e2604 	addi	r2,r2,30872
  8040a4:	11000017 	ldw	r4,0(r2)
  8040a8:	0804c481 	jmpi	804c48 <_fwalk_reent>

008040ac <std>:
  8040ac:	00802034 	movhi	r2,128
  8040b0:	109c4904 	addi	r2,r2,28964
  8040b4:	20800b15 	stw	r2,44(r4)
  8040b8:	00802034 	movhi	r2,128
  8040bc:	109c8404 	addi	r2,r2,29200
  8040c0:	20800815 	stw	r2,32(r4)
  8040c4:	00c02034 	movhi	r3,128
  8040c8:	18dc6504 	addi	r3,r3,29076
  8040cc:	00802034 	movhi	r2,128
  8040d0:	109c4b04 	addi	r2,r2,28972
  8040d4:	2140030d 	sth	r5,12(r4)
  8040d8:	2180038d 	sth	r6,14(r4)
  8040dc:	20c00915 	stw	r3,36(r4)
  8040e0:	20800a15 	stw	r2,40(r4)
  8040e4:	20000015 	stw	zero,0(r4)
  8040e8:	20000115 	stw	zero,4(r4)
  8040ec:	20000215 	stw	zero,8(r4)
  8040f0:	20000415 	stw	zero,16(r4)
  8040f4:	20000515 	stw	zero,20(r4)
  8040f8:	20000615 	stw	zero,24(r4)
  8040fc:	21000715 	stw	r4,28(r4)
  804100:	f800283a 	ret

00804104 <__sfp_lock_acquire>:
  804104:	f800283a 	ret

00804108 <__sfp_lock_release>:
  804108:	f800283a 	ret

0080410c <__sinit_lock_acquire>:
  80410c:	f800283a 	ret

00804110 <__sinit_lock_release>:
  804110:	f800283a 	ret

00804114 <__sinit>:
  804114:	20800e17 	ldw	r2,56(r4)
  804118:	defffd04 	addi	sp,sp,-12
  80411c:	dc400115 	stw	r17,4(sp)
  804120:	dc000015 	stw	r16,0(sp)
  804124:	dfc00215 	stw	ra,8(sp)
  804128:	04400044 	movi	r17,1
  80412c:	01400104 	movi	r5,4
  804130:	000d883a 	mov	r6,zero
  804134:	2021883a 	mov	r16,r4
  804138:	2200bb04 	addi	r8,r4,748
  80413c:	200f883a 	mov	r7,r4
  804140:	10000526 	beq	r2,zero,804158 <__sinit+0x44>
  804144:	dfc00217 	ldw	ra,8(sp)
  804148:	dc400117 	ldw	r17,4(sp)
  80414c:	dc000017 	ldw	r16,0(sp)
  804150:	dec00304 	addi	sp,sp,12
  804154:	f800283a 	ret
  804158:	21000117 	ldw	r4,4(r4)
  80415c:	00802034 	movhi	r2,128
  804160:	10907e04 	addi	r2,r2,16888
  804164:	00c000c4 	movi	r3,3
  804168:	80800f15 	stw	r2,60(r16)
  80416c:	80c0b915 	stw	r3,740(r16)
  804170:	8200ba15 	stw	r8,744(r16)
  804174:	84400e15 	stw	r17,56(r16)
  804178:	8000b815 	stw	zero,736(r16)
  80417c:	08040ac0 	call	8040ac <std>
  804180:	81000217 	ldw	r4,8(r16)
  804184:	880d883a 	mov	r6,r17
  804188:	800f883a 	mov	r7,r16
  80418c:	01400284 	movi	r5,10
  804190:	08040ac0 	call	8040ac <std>
  804194:	81000317 	ldw	r4,12(r16)
  804198:	800f883a 	mov	r7,r16
  80419c:	01400484 	movi	r5,18
  8041a0:	01800084 	movi	r6,2
  8041a4:	dfc00217 	ldw	ra,8(sp)
  8041a8:	dc400117 	ldw	r17,4(sp)
  8041ac:	dc000017 	ldw	r16,0(sp)
  8041b0:	dec00304 	addi	sp,sp,12
  8041b4:	08040ac1 	jmpi	8040ac <std>

008041b8 <__fp_lock>:
  8041b8:	0005883a 	mov	r2,zero
  8041bc:	f800283a 	ret

008041c0 <__fp_unlock>:
  8041c0:	0005883a 	mov	r2,zero
  8041c4:	f800283a 	ret

008041c8 <__fp_unlock_all>:
  8041c8:	00802074 	movhi	r2,129
  8041cc:	109e2504 	addi	r2,r2,30868
  8041d0:	11000017 	ldw	r4,0(r2)
  8041d4:	01402034 	movhi	r5,128
  8041d8:	29507004 	addi	r5,r5,16832
  8041dc:	0804d101 	jmpi	804d10 <_fwalk>

008041e0 <__fp_lock_all>:
  8041e0:	00802074 	movhi	r2,129
  8041e4:	109e2504 	addi	r2,r2,30868
  8041e8:	11000017 	ldw	r4,0(r2)
  8041ec:	01402034 	movhi	r5,128
  8041f0:	29506e04 	addi	r5,r5,16824
  8041f4:	0804d101 	jmpi	804d10 <_fwalk>

008041f8 <_cleanup_r>:
  8041f8:	01402034 	movhi	r5,128
  8041fc:	295d7604 	addi	r5,r5,30168
  804200:	0804d101 	jmpi	804d10 <_fwalk>

00804204 <_cleanup>:
  804204:	00802074 	movhi	r2,129
  804208:	109e2604 	addi	r2,r2,30872
  80420c:	11000017 	ldw	r4,0(r2)
  804210:	08041f81 	jmpi	8041f8 <_cleanup_r>

00804214 <__sfmoreglue>:
  804214:	defffc04 	addi	sp,sp,-16
  804218:	dc400115 	stw	r17,4(sp)
  80421c:	2c401724 	muli	r17,r5,92
  804220:	dc800215 	stw	r18,8(sp)
  804224:	2825883a 	mov	r18,r5
  804228:	89400304 	addi	r5,r17,12
  80422c:	dc000015 	stw	r16,0(sp)
  804230:	dfc00315 	stw	ra,12(sp)
  804234:	08050200 	call	805020 <_malloc_r>
  804238:	0021883a 	mov	r16,zero
  80423c:	880d883a 	mov	r6,r17
  804240:	000b883a 	mov	r5,zero
  804244:	10000626 	beq	r2,zero,804260 <__sfmoreglue+0x4c>
  804248:	11000304 	addi	r4,r2,12
  80424c:	14800115 	stw	r18,4(r2)
  804250:	10000015 	stw	zero,0(r2)
  804254:	11000215 	stw	r4,8(r2)
  804258:	1021883a 	mov	r16,r2
  80425c:	08059c40 	call	8059c4 <memset>
  804260:	8005883a 	mov	r2,r16
  804264:	dfc00317 	ldw	ra,12(sp)
  804268:	dc800217 	ldw	r18,8(sp)
  80426c:	dc400117 	ldw	r17,4(sp)
  804270:	dc000017 	ldw	r16,0(sp)
  804274:	dec00404 	addi	sp,sp,16
  804278:	f800283a 	ret

0080427c <__sfp>:
  80427c:	defffd04 	addi	sp,sp,-12
  804280:	00802074 	movhi	r2,129
  804284:	109e2604 	addi	r2,r2,30872
  804288:	dc000015 	stw	r16,0(sp)
  80428c:	14000017 	ldw	r16,0(r2)
  804290:	dc400115 	stw	r17,4(sp)
  804294:	dfc00215 	stw	ra,8(sp)
  804298:	80800e17 	ldw	r2,56(r16)
  80429c:	2023883a 	mov	r17,r4
  8042a0:	10002626 	beq	r2,zero,80433c <__sfp+0xc0>
  8042a4:	8400b804 	addi	r16,r16,736
  8042a8:	80800117 	ldw	r2,4(r16)
  8042ac:	81000217 	ldw	r4,8(r16)
  8042b0:	10ffffc4 	addi	r3,r2,-1
  8042b4:	18000916 	blt	r3,zero,8042dc <__sfp+0x60>
  8042b8:	2080030f 	ldh	r2,12(r4)
  8042bc:	10000b26 	beq	r2,zero,8042ec <__sfp+0x70>
  8042c0:	017fffc4 	movi	r5,-1
  8042c4:	00000206 	br	8042d0 <__sfp+0x54>
  8042c8:	2080030f 	ldh	r2,12(r4)
  8042cc:	10000726 	beq	r2,zero,8042ec <__sfp+0x70>
  8042d0:	18ffffc4 	addi	r3,r3,-1
  8042d4:	21001704 	addi	r4,r4,92
  8042d8:	197ffb1e 	bne	r3,r5,8042c8 <__sfp+0x4c>
  8042dc:	80800017 	ldw	r2,0(r16)
  8042e0:	10001926 	beq	r2,zero,804348 <__sfp+0xcc>
  8042e4:	1021883a 	mov	r16,r2
  8042e8:	003fef06 	br	8042a8 <__sfp+0x2c>
  8042ec:	00bfffc4 	movi	r2,-1
  8042f0:	00c00044 	movi	r3,1
  8042f4:	2080038d 	sth	r2,14(r4)
  8042f8:	20c0030d 	sth	r3,12(r4)
  8042fc:	20000015 	stw	zero,0(r4)
  804300:	20000215 	stw	zero,8(r4)
  804304:	20000115 	stw	zero,4(r4)
  804308:	20000415 	stw	zero,16(r4)
  80430c:	20000515 	stw	zero,20(r4)
  804310:	20000615 	stw	zero,24(r4)
  804314:	20000c15 	stw	zero,48(r4)
  804318:	20000d15 	stw	zero,52(r4)
  80431c:	20001115 	stw	zero,68(r4)
  804320:	20001215 	stw	zero,72(r4)
  804324:	2005883a 	mov	r2,r4
  804328:	dfc00217 	ldw	ra,8(sp)
  80432c:	dc400117 	ldw	r17,4(sp)
  804330:	dc000017 	ldw	r16,0(sp)
  804334:	dec00304 	addi	sp,sp,12
  804338:	f800283a 	ret
  80433c:	8009883a 	mov	r4,r16
  804340:	08041140 	call	804114 <__sinit>
  804344:	003fd706 	br	8042a4 <__sfp+0x28>
  804348:	8809883a 	mov	r4,r17
  80434c:	01400104 	movi	r5,4
  804350:	08042140 	call	804214 <__sfmoreglue>
  804354:	80800015 	stw	r2,0(r16)
  804358:	103fe21e 	bne	r2,zero,8042e4 <__sfp+0x68>
  80435c:	00800304 	movi	r2,12
  804360:	0009883a 	mov	r4,zero
  804364:	88800015 	stw	r2,0(r17)
  804368:	003fee06 	br	804324 <__sfp+0xa8>

0080436c <_malloc_trim_r>:
  80436c:	defffb04 	addi	sp,sp,-20
  804370:	dcc00315 	stw	r19,12(sp)
  804374:	04c02074 	movhi	r19,129
  804378:	9cd89304 	addi	r19,r19,25164
  80437c:	dc800215 	stw	r18,8(sp)
  804380:	dc400115 	stw	r17,4(sp)
  804384:	dc000015 	stw	r16,0(sp)
  804388:	2823883a 	mov	r17,r5
  80438c:	2025883a 	mov	r18,r4
  804390:	dfc00415 	stw	ra,16(sp)
  804394:	080a7f40 	call	80a7f4 <__malloc_lock>
  804398:	98800217 	ldw	r2,8(r19)
  80439c:	9009883a 	mov	r4,r18
  8043a0:	000b883a 	mov	r5,zero
  8043a4:	10c00117 	ldw	r3,4(r2)
  8043a8:	00bfff04 	movi	r2,-4
  8043ac:	18a0703a 	and	r16,r3,r2
  8043b0:	8463c83a 	sub	r17,r16,r17
  8043b4:	8c43fbc4 	addi	r17,r17,4079
  8043b8:	8822d33a 	srli	r17,r17,12
  8043bc:	0083ffc4 	movi	r2,4095
  8043c0:	8c7fffc4 	addi	r17,r17,-1
  8043c4:	8822933a 	slli	r17,r17,12
  8043c8:	1440060e 	bge	r2,r17,8043e4 <_malloc_trim_r+0x78>
  8043cc:	08070b40 	call	8070b4 <_sbrk_r>
  8043d0:	98c00217 	ldw	r3,8(r19)
  8043d4:	9009883a 	mov	r4,r18
  8043d8:	044bc83a 	sub	r5,zero,r17
  8043dc:	80c7883a 	add	r3,r16,r3
  8043e0:	10c00926 	beq	r2,r3,804408 <_malloc_trim_r+0x9c>
  8043e4:	080a8fc0 	call	80a8fc <__malloc_unlock>
  8043e8:	0005883a 	mov	r2,zero
  8043ec:	dfc00417 	ldw	ra,16(sp)
  8043f0:	dcc00317 	ldw	r19,12(sp)
  8043f4:	dc800217 	ldw	r18,8(sp)
  8043f8:	dc400117 	ldw	r17,4(sp)
  8043fc:	dc000017 	ldw	r16,0(sp)
  804400:	dec00504 	addi	sp,sp,20
  804404:	f800283a 	ret
  804408:	9009883a 	mov	r4,r18
  80440c:	08070b40 	call	8070b4 <_sbrk_r>
  804410:	844dc83a 	sub	r6,r16,r17
  804414:	00ffffc4 	movi	r3,-1
  804418:	9009883a 	mov	r4,r18
  80441c:	000b883a 	mov	r5,zero
  804420:	01c020b4 	movhi	r7,130
  804424:	39e53f04 	addi	r7,r7,-27396
  804428:	31800054 	ori	r6,r6,1
  80442c:	10c00926 	beq	r2,r3,804454 <_malloc_trim_r+0xe8>
  804430:	38800017 	ldw	r2,0(r7)
  804434:	98c00217 	ldw	r3,8(r19)
  804438:	9009883a 	mov	r4,r18
  80443c:	1445c83a 	sub	r2,r2,r17
  804440:	38800015 	stw	r2,0(r7)
  804444:	19800115 	stw	r6,4(r3)
  804448:	080a8fc0 	call	80a8fc <__malloc_unlock>
  80444c:	00800044 	movi	r2,1
  804450:	003fe606 	br	8043ec <_malloc_trim_r+0x80>
  804454:	08070b40 	call	8070b4 <_sbrk_r>
  804458:	99800217 	ldw	r6,8(r19)
  80445c:	100f883a 	mov	r7,r2
  804460:	9009883a 	mov	r4,r18
  804464:	1187c83a 	sub	r3,r2,r6
  804468:	008003c4 	movi	r2,15
  80446c:	19400054 	ori	r5,r3,1
  804470:	10ffdc0e 	bge	r2,r3,8043e4 <_malloc_trim_r+0x78>
  804474:	00802074 	movhi	r2,129
  804478:	109e2a04 	addi	r2,r2,30888
  80447c:	10c00017 	ldw	r3,0(r2)
  804480:	008020b4 	movhi	r2,130
  804484:	10a53f04 	addi	r2,r2,-27396
  804488:	31400115 	stw	r5,4(r6)
  80448c:	38c7c83a 	sub	r3,r7,r3
  804490:	10c00015 	stw	r3,0(r2)
  804494:	003fd306 	br	8043e4 <_malloc_trim_r+0x78>

00804498 <_free_r>:
  804498:	defffd04 	addi	sp,sp,-12
  80449c:	dc400115 	stw	r17,4(sp)
  8044a0:	dc000015 	stw	r16,0(sp)
  8044a4:	dfc00215 	stw	ra,8(sp)
  8044a8:	2821883a 	mov	r16,r5
  8044ac:	2023883a 	mov	r17,r4
  8044b0:	28005a26 	beq	r5,zero,80461c <_free_r+0x184>
  8044b4:	080a7f40 	call	80a7f4 <__malloc_lock>
  8044b8:	823ffe04 	addi	r8,r16,-8
  8044bc:	41400117 	ldw	r5,4(r8)
  8044c0:	00bfff84 	movi	r2,-2
  8044c4:	02802074 	movhi	r10,129
  8044c8:	52989304 	addi	r10,r10,25164
  8044cc:	288e703a 	and	r7,r5,r2
  8044d0:	41cd883a 	add	r6,r8,r7
  8044d4:	30c00117 	ldw	r3,4(r6)
  8044d8:	51000217 	ldw	r4,8(r10)
  8044dc:	00bfff04 	movi	r2,-4
  8044e0:	1892703a 	and	r9,r3,r2
  8044e4:	5017883a 	mov	r11,r10
  8044e8:	31006726 	beq	r6,r4,804688 <_free_r+0x1f0>
  8044ec:	2880004c 	andi	r2,r5,1
  8044f0:	1005003a 	cmpeq	r2,r2,zero
  8044f4:	32400115 	stw	r9,4(r6)
  8044f8:	10001a1e 	bne	r2,zero,804564 <_free_r+0xcc>
  8044fc:	000b883a 	mov	r5,zero
  804500:	3247883a 	add	r3,r6,r9
  804504:	18800117 	ldw	r2,4(r3)
  804508:	1080004c 	andi	r2,r2,1
  80450c:	1000231e 	bne	r2,zero,80459c <_free_r+0x104>
  804510:	280ac03a 	cmpne	r5,r5,zero
  804514:	3a4f883a 	add	r7,r7,r9
  804518:	2800451e 	bne	r5,zero,804630 <_free_r+0x198>
  80451c:	31000217 	ldw	r4,8(r6)
  804520:	00802074 	movhi	r2,129
  804524:	10989504 	addi	r2,r2,25172
  804528:	20807b26 	beq	r4,r2,804718 <_free_r+0x280>
  80452c:	30800317 	ldw	r2,12(r6)
  804530:	3a07883a 	add	r3,r7,r8
  804534:	19c00015 	stw	r7,0(r3)
  804538:	11000215 	stw	r4,8(r2)
  80453c:	20800315 	stw	r2,12(r4)
  804540:	38800054 	ori	r2,r7,1
  804544:	40800115 	stw	r2,4(r8)
  804548:	28001a26 	beq	r5,zero,8045b4 <_free_r+0x11c>
  80454c:	8809883a 	mov	r4,r17
  804550:	dfc00217 	ldw	ra,8(sp)
  804554:	dc400117 	ldw	r17,4(sp)
  804558:	dc000017 	ldw	r16,0(sp)
  80455c:	dec00304 	addi	sp,sp,12
  804560:	080a8fc1 	jmpi	80a8fc <__malloc_unlock>
  804564:	80bffe17 	ldw	r2,-8(r16)
  804568:	50c00204 	addi	r3,r10,8
  80456c:	4091c83a 	sub	r8,r8,r2
  804570:	41000217 	ldw	r4,8(r8)
  804574:	388f883a 	add	r7,r7,r2
  804578:	20c06126 	beq	r4,r3,804700 <_free_r+0x268>
  80457c:	40800317 	ldw	r2,12(r8)
  804580:	3247883a 	add	r3,r6,r9
  804584:	000b883a 	mov	r5,zero
  804588:	11000215 	stw	r4,8(r2)
  80458c:	20800315 	stw	r2,12(r4)
  804590:	18800117 	ldw	r2,4(r3)
  804594:	1080004c 	andi	r2,r2,1
  804598:	103fdd26 	beq	r2,zero,804510 <_free_r+0x78>
  80459c:	38800054 	ori	r2,r7,1
  8045a0:	3a07883a 	add	r3,r7,r8
  8045a4:	280ac03a 	cmpne	r5,r5,zero
  8045a8:	40800115 	stw	r2,4(r8)
  8045ac:	19c00015 	stw	r7,0(r3)
  8045b0:	283fe61e 	bne	r5,zero,80454c <_free_r+0xb4>
  8045b4:	00807fc4 	movi	r2,511
  8045b8:	11c01f2e 	bgeu	r2,r7,804638 <_free_r+0x1a0>
  8045bc:	3806d27a 	srli	r3,r7,9
  8045c0:	1800481e 	bne	r3,zero,8046e4 <_free_r+0x24c>
  8045c4:	3804d0fa 	srli	r2,r7,3
  8045c8:	100690fa 	slli	r3,r2,3
  8045cc:	1acd883a 	add	r6,r3,r11
  8045d0:	31400217 	ldw	r5,8(r6)
  8045d4:	31405926 	beq	r6,r5,80473c <_free_r+0x2a4>
  8045d8:	28800117 	ldw	r2,4(r5)
  8045dc:	00ffff04 	movi	r3,-4
  8045e0:	10c4703a 	and	r2,r2,r3
  8045e4:	3880022e 	bgeu	r7,r2,8045f0 <_free_r+0x158>
  8045e8:	29400217 	ldw	r5,8(r5)
  8045ec:	317ffa1e 	bne	r6,r5,8045d8 <_free_r+0x140>
  8045f0:	29800317 	ldw	r6,12(r5)
  8045f4:	41800315 	stw	r6,12(r8)
  8045f8:	41400215 	stw	r5,8(r8)
  8045fc:	8809883a 	mov	r4,r17
  804600:	2a000315 	stw	r8,12(r5)
  804604:	32000215 	stw	r8,8(r6)
  804608:	dfc00217 	ldw	ra,8(sp)
  80460c:	dc400117 	ldw	r17,4(sp)
  804610:	dc000017 	ldw	r16,0(sp)
  804614:	dec00304 	addi	sp,sp,12
  804618:	080a8fc1 	jmpi	80a8fc <__malloc_unlock>
  80461c:	dfc00217 	ldw	ra,8(sp)
  804620:	dc400117 	ldw	r17,4(sp)
  804624:	dc000017 	ldw	r16,0(sp)
  804628:	dec00304 	addi	sp,sp,12
  80462c:	f800283a 	ret
  804630:	31000217 	ldw	r4,8(r6)
  804634:	003fbd06 	br	80452c <_free_r+0x94>
  804638:	3806d0fa 	srli	r3,r7,3
  80463c:	00800044 	movi	r2,1
  804640:	51400117 	ldw	r5,4(r10)
  804644:	180890fa 	slli	r4,r3,3
  804648:	1807d0ba 	srai	r3,r3,2
  80464c:	22c9883a 	add	r4,r4,r11
  804650:	21800217 	ldw	r6,8(r4)
  804654:	10c4983a 	sll	r2,r2,r3
  804658:	41000315 	stw	r4,12(r8)
  80465c:	41800215 	stw	r6,8(r8)
  804660:	288ab03a 	or	r5,r5,r2
  804664:	22000215 	stw	r8,8(r4)
  804668:	8809883a 	mov	r4,r17
  80466c:	51400115 	stw	r5,4(r10)
  804670:	32000315 	stw	r8,12(r6)
  804674:	dfc00217 	ldw	ra,8(sp)
  804678:	dc400117 	ldw	r17,4(sp)
  80467c:	dc000017 	ldw	r16,0(sp)
  804680:	dec00304 	addi	sp,sp,12
  804684:	080a8fc1 	jmpi	80a8fc <__malloc_unlock>
  804688:	2880004c 	andi	r2,r5,1
  80468c:	3a4d883a 	add	r6,r7,r9
  804690:	1000071e 	bne	r2,zero,8046b0 <_free_r+0x218>
  804694:	80bffe17 	ldw	r2,-8(r16)
  804698:	4091c83a 	sub	r8,r8,r2
  80469c:	41000317 	ldw	r4,12(r8)
  8046a0:	40c00217 	ldw	r3,8(r8)
  8046a4:	308d883a 	add	r6,r6,r2
  8046a8:	20c00215 	stw	r3,8(r4)
  8046ac:	19000315 	stw	r4,12(r3)
  8046b0:	00802074 	movhi	r2,129
  8046b4:	109e2904 	addi	r2,r2,30884
  8046b8:	11000017 	ldw	r4,0(r2)
  8046bc:	30c00054 	ori	r3,r6,1
  8046c0:	52000215 	stw	r8,8(r10)
  8046c4:	40c00115 	stw	r3,4(r8)
  8046c8:	313fa036 	bltu	r6,r4,80454c <_free_r+0xb4>
  8046cc:	008020b4 	movhi	r2,130
  8046d0:	10a51c04 	addi	r2,r2,-27536
  8046d4:	11400017 	ldw	r5,0(r2)
  8046d8:	8809883a 	mov	r4,r17
  8046dc:	080436c0 	call	80436c <_malloc_trim_r>
  8046e0:	003f9a06 	br	80454c <_free_r+0xb4>
  8046e4:	00800104 	movi	r2,4
  8046e8:	10c0072e 	bgeu	r2,r3,804708 <_free_r+0x270>
  8046ec:	00800504 	movi	r2,20
  8046f0:	10c01936 	bltu	r2,r3,804758 <_free_r+0x2c0>
  8046f4:	188016c4 	addi	r2,r3,91
  8046f8:	100690fa 	slli	r3,r2,3
  8046fc:	003fb306 	br	8045cc <_free_r+0x134>
  804700:	01400044 	movi	r5,1
  804704:	003f7e06 	br	804500 <_free_r+0x68>
  804708:	3804d1ba 	srli	r2,r7,6
  80470c:	10800e04 	addi	r2,r2,56
  804710:	100690fa 	slli	r3,r2,3
  804714:	003fad06 	br	8045cc <_free_r+0x134>
  804718:	22000315 	stw	r8,12(r4)
  80471c:	22000215 	stw	r8,8(r4)
  804720:	3a05883a 	add	r2,r7,r8
  804724:	38c00054 	ori	r3,r7,1
  804728:	11c00015 	stw	r7,0(r2)
  80472c:	41000215 	stw	r4,8(r8)
  804730:	40c00115 	stw	r3,4(r8)
  804734:	41000315 	stw	r4,12(r8)
  804738:	003f8406 	br	80454c <_free_r+0xb4>
  80473c:	1005d0ba 	srai	r2,r2,2
  804740:	00c00044 	movi	r3,1
  804744:	51000117 	ldw	r4,4(r10)
  804748:	1886983a 	sll	r3,r3,r2
  80474c:	20c8b03a 	or	r4,r4,r3
  804750:	51000115 	stw	r4,4(r10)
  804754:	003fa706 	br	8045f4 <_free_r+0x15c>
  804758:	00801504 	movi	r2,84
  80475c:	10c00436 	bltu	r2,r3,804770 <_free_r+0x2d8>
  804760:	3804d33a 	srli	r2,r7,12
  804764:	10801b84 	addi	r2,r2,110
  804768:	100690fa 	slli	r3,r2,3
  80476c:	003f9706 	br	8045cc <_free_r+0x134>
  804770:	00805504 	movi	r2,340
  804774:	10c00436 	bltu	r2,r3,804788 <_free_r+0x2f0>
  804778:	3804d3fa 	srli	r2,r7,15
  80477c:	10801dc4 	addi	r2,r2,119
  804780:	100690fa 	slli	r3,r2,3
  804784:	003f9106 	br	8045cc <_free_r+0x134>
  804788:	00815504 	movi	r2,1364
  80478c:	10c0032e 	bgeu	r2,r3,80479c <_free_r+0x304>
  804790:	00801f84 	movi	r2,126
  804794:	00c0fc04 	movi	r3,1008
  804798:	003f8c06 	br	8045cc <_free_r+0x134>
  80479c:	3804d4ba 	srli	r2,r7,18
  8047a0:	10801f04 	addi	r2,r2,124
  8047a4:	100690fa 	slli	r3,r2,3
  8047a8:	003f8806 	br	8045cc <_free_r+0x134>

008047ac <__sfvwrite_r>:
  8047ac:	30800217 	ldw	r2,8(r6)
  8047b0:	defff504 	addi	sp,sp,-44
  8047b4:	df000915 	stw	fp,36(sp)
  8047b8:	dd800715 	stw	r22,28(sp)
  8047bc:	dc800315 	stw	r18,12(sp)
  8047c0:	dfc00a15 	stw	ra,40(sp)
  8047c4:	ddc00815 	stw	r23,32(sp)
  8047c8:	dd400615 	stw	r21,24(sp)
  8047cc:	dd000515 	stw	r20,20(sp)
  8047d0:	dcc00415 	stw	r19,16(sp)
  8047d4:	dc400215 	stw	r17,8(sp)
  8047d8:	dc000115 	stw	r16,4(sp)
  8047dc:	302d883a 	mov	r22,r6
  8047e0:	2039883a 	mov	fp,r4
  8047e4:	2825883a 	mov	r18,r5
  8047e8:	10001c26 	beq	r2,zero,80485c <__sfvwrite_r+0xb0>
  8047ec:	29c0030b 	ldhu	r7,12(r5)
  8047f0:	3880020c 	andi	r2,r7,8
  8047f4:	10002726 	beq	r2,zero,804894 <__sfvwrite_r+0xe8>
  8047f8:	28800417 	ldw	r2,16(r5)
  8047fc:	10002526 	beq	r2,zero,804894 <__sfvwrite_r+0xe8>
  804800:	3880008c 	andi	r2,r7,2
  804804:	b5400017 	ldw	r21,0(r22)
  804808:	10002826 	beq	r2,zero,8048ac <__sfvwrite_r+0x100>
  80480c:	0021883a 	mov	r16,zero
  804810:	0023883a 	mov	r17,zero
  804814:	880d883a 	mov	r6,r17
  804818:	e009883a 	mov	r4,fp
  80481c:	00810004 	movi	r2,1024
  804820:	80006e26 	beq	r16,zero,8049dc <__sfvwrite_r+0x230>
  804824:	800f883a 	mov	r7,r16
  804828:	91400717 	ldw	r5,28(r18)
  80482c:	1400012e 	bgeu	r2,r16,804834 <__sfvwrite_r+0x88>
  804830:	100f883a 	mov	r7,r2
  804834:	90c00917 	ldw	r3,36(r18)
  804838:	183ee83a 	callr	r3
  80483c:	1007883a 	mov	r3,r2
  804840:	80a1c83a 	sub	r16,r16,r2
  804844:	88a3883a 	add	r17,r17,r2
  804848:	00806d0e 	bge	zero,r2,804a00 <__sfvwrite_r+0x254>
  80484c:	b0800217 	ldw	r2,8(r22)
  804850:	10c5c83a 	sub	r2,r2,r3
  804854:	b0800215 	stw	r2,8(r22)
  804858:	103fee1e 	bne	r2,zero,804814 <__sfvwrite_r+0x68>
  80485c:	0009883a 	mov	r4,zero
  804860:	2005883a 	mov	r2,r4
  804864:	dfc00a17 	ldw	ra,40(sp)
  804868:	df000917 	ldw	fp,36(sp)
  80486c:	ddc00817 	ldw	r23,32(sp)
  804870:	dd800717 	ldw	r22,28(sp)
  804874:	dd400617 	ldw	r21,24(sp)
  804878:	dd000517 	ldw	r20,20(sp)
  80487c:	dcc00417 	ldw	r19,16(sp)
  804880:	dc800317 	ldw	r18,12(sp)
  804884:	dc400217 	ldw	r17,8(sp)
  804888:	dc000117 	ldw	r16,4(sp)
  80488c:	dec00b04 	addi	sp,sp,44
  804890:	f800283a 	ret
  804894:	08025740 	call	802574 <__swsetup_r>
  804898:	1000e41e 	bne	r2,zero,804c2c <__sfvwrite_r+0x480>
  80489c:	91c0030b 	ldhu	r7,12(r18)
  8048a0:	b5400017 	ldw	r21,0(r22)
  8048a4:	3880008c 	andi	r2,r7,2
  8048a8:	103fd81e 	bne	r2,zero,80480c <__sfvwrite_r+0x60>
  8048ac:	3880004c 	andi	r2,r7,1
  8048b0:	1005003a 	cmpeq	r2,r2,zero
  8048b4:	10005726 	beq	r2,zero,804a14 <__sfvwrite_r+0x268>
  8048b8:	0029883a 	mov	r20,zero
  8048bc:	002f883a 	mov	r23,zero
  8048c0:	a0004226 	beq	r20,zero,8049cc <__sfvwrite_r+0x220>
  8048c4:	3880800c 	andi	r2,r7,512
  8048c8:	94000217 	ldw	r16,8(r18)
  8048cc:	10008b26 	beq	r2,zero,804afc <__sfvwrite_r+0x350>
  8048d0:	800d883a 	mov	r6,r16
  8048d4:	a400a536 	bltu	r20,r16,804b6c <__sfvwrite_r+0x3c0>
  8048d8:	3881200c 	andi	r2,r7,1152
  8048dc:	10002726 	beq	r2,zero,80497c <__sfvwrite_r+0x1d0>
  8048e0:	90800517 	ldw	r2,20(r18)
  8048e4:	92000417 	ldw	r8,16(r18)
  8048e8:	91400017 	ldw	r5,0(r18)
  8048ec:	1087883a 	add	r3,r2,r2
  8048f0:	1887883a 	add	r3,r3,r2
  8048f4:	1808d7fa 	srli	r4,r3,31
  8048f8:	2a21c83a 	sub	r16,r5,r8
  8048fc:	80800044 	addi	r2,r16,1
  804900:	20c9883a 	add	r4,r4,r3
  804904:	2027d07a 	srai	r19,r4,1
  804908:	a085883a 	add	r2,r20,r2
  80490c:	980d883a 	mov	r6,r19
  804910:	9880022e 	bgeu	r19,r2,80491c <__sfvwrite_r+0x170>
  804914:	1027883a 	mov	r19,r2
  804918:	100d883a 	mov	r6,r2
  80491c:	3881000c 	andi	r2,r7,1024
  804920:	1000b826 	beq	r2,zero,804c04 <__sfvwrite_r+0x458>
  804924:	300b883a 	mov	r5,r6
  804928:	e009883a 	mov	r4,fp
  80492c:	08050200 	call	805020 <_malloc_r>
  804930:	10003126 	beq	r2,zero,8049f8 <__sfvwrite_r+0x24c>
  804934:	91400417 	ldw	r5,16(r18)
  804938:	1009883a 	mov	r4,r2
  80493c:	800d883a 	mov	r6,r16
  804940:	1023883a 	mov	r17,r2
  804944:	08058440 	call	805844 <memcpy>
  804948:	90c0030b 	ldhu	r3,12(r18)
  80494c:	00beffc4 	movi	r2,-1025
  804950:	1886703a 	and	r3,r3,r2
  804954:	18c02014 	ori	r3,r3,128
  804958:	90c0030d 	sth	r3,12(r18)
  80495c:	9c07c83a 	sub	r3,r19,r16
  804960:	8c05883a 	add	r2,r17,r16
  804964:	a00d883a 	mov	r6,r20
  804968:	a021883a 	mov	r16,r20
  80496c:	90800015 	stw	r2,0(r18)
  804970:	90c00215 	stw	r3,8(r18)
  804974:	94400415 	stw	r17,16(r18)
  804978:	94c00515 	stw	r19,20(r18)
  80497c:	91000017 	ldw	r4,0(r18)
  804980:	b80b883a 	mov	r5,r23
  804984:	a023883a 	mov	r17,r20
  804988:	08058e40 	call	8058e4 <memmove>
  80498c:	90c00217 	ldw	r3,8(r18)
  804990:	90800017 	ldw	r2,0(r18)
  804994:	a027883a 	mov	r19,r20
  804998:	1c07c83a 	sub	r3,r3,r16
  80499c:	1405883a 	add	r2,r2,r16
  8049a0:	90c00215 	stw	r3,8(r18)
  8049a4:	a021883a 	mov	r16,r20
  8049a8:	90800015 	stw	r2,0(r18)
  8049ac:	b0800217 	ldw	r2,8(r22)
  8049b0:	1405c83a 	sub	r2,r2,r16
  8049b4:	b0800215 	stw	r2,8(r22)
  8049b8:	103fa826 	beq	r2,zero,80485c <__sfvwrite_r+0xb0>
  8049bc:	a469c83a 	sub	r20,r20,r17
  8049c0:	91c0030b 	ldhu	r7,12(r18)
  8049c4:	bcef883a 	add	r23,r23,r19
  8049c8:	a03fbe1e 	bne	r20,zero,8048c4 <__sfvwrite_r+0x118>
  8049cc:	adc00017 	ldw	r23,0(r21)
  8049d0:	ad000117 	ldw	r20,4(r21)
  8049d4:	ad400204 	addi	r21,r21,8
  8049d8:	003fb906 	br	8048c0 <__sfvwrite_r+0x114>
  8049dc:	ac400017 	ldw	r17,0(r21)
  8049e0:	ac000117 	ldw	r16,4(r21)
  8049e4:	ad400204 	addi	r21,r21,8
  8049e8:	003f8a06 	br	804814 <__sfvwrite_r+0x68>
  8049ec:	91400417 	ldw	r5,16(r18)
  8049f0:	e009883a 	mov	r4,fp
  8049f4:	08044980 	call	804498 <_free_r>
  8049f8:	00800304 	movi	r2,12
  8049fc:	e0800015 	stw	r2,0(fp)
  804a00:	9080030b 	ldhu	r2,12(r18)
  804a04:	013fffc4 	movi	r4,-1
  804a08:	10801014 	ori	r2,r2,64
  804a0c:	9080030d 	sth	r2,12(r18)
  804a10:	003f9306 	br	804860 <__sfvwrite_r+0xb4>
  804a14:	0027883a 	mov	r19,zero
  804a18:	002f883a 	mov	r23,zero
  804a1c:	d8000015 	stw	zero,0(sp)
  804a20:	0029883a 	mov	r20,zero
  804a24:	98001e26 	beq	r19,zero,804aa0 <__sfvwrite_r+0x2f4>
  804a28:	d8c00017 	ldw	r3,0(sp)
  804a2c:	1804c03a 	cmpne	r2,r3,zero
  804a30:	10005e26 	beq	r2,zero,804bac <__sfvwrite_r+0x400>
  804a34:	9821883a 	mov	r16,r19
  804a38:	a4c0012e 	bgeu	r20,r19,804a40 <__sfvwrite_r+0x294>
  804a3c:	a021883a 	mov	r16,r20
  804a40:	91000017 	ldw	r4,0(r18)
  804a44:	90800417 	ldw	r2,16(r18)
  804a48:	91800217 	ldw	r6,8(r18)
  804a4c:	91c00517 	ldw	r7,20(r18)
  804a50:	1100022e 	bgeu	r2,r4,804a5c <__sfvwrite_r+0x2b0>
  804a54:	31e3883a 	add	r17,r6,r7
  804a58:	8c001616 	blt	r17,r16,804ab4 <__sfvwrite_r+0x308>
  804a5c:	81c03816 	blt	r16,r7,804b40 <__sfvwrite_r+0x394>
  804a60:	90c00917 	ldw	r3,36(r18)
  804a64:	91400717 	ldw	r5,28(r18)
  804a68:	e009883a 	mov	r4,fp
  804a6c:	b80d883a 	mov	r6,r23
  804a70:	183ee83a 	callr	r3
  804a74:	1023883a 	mov	r17,r2
  804a78:	00bfe10e 	bge	zero,r2,804a00 <__sfvwrite_r+0x254>
  804a7c:	a469c83a 	sub	r20,r20,r17
  804a80:	a0001826 	beq	r20,zero,804ae4 <__sfvwrite_r+0x338>
  804a84:	b0800217 	ldw	r2,8(r22)
  804a88:	1445c83a 	sub	r2,r2,r17
  804a8c:	b0800215 	stw	r2,8(r22)
  804a90:	103f7226 	beq	r2,zero,80485c <__sfvwrite_r+0xb0>
  804a94:	9c67c83a 	sub	r19,r19,r17
  804a98:	bc6f883a 	add	r23,r23,r17
  804a9c:	983fe21e 	bne	r19,zero,804a28 <__sfvwrite_r+0x27c>
  804aa0:	adc00017 	ldw	r23,0(r21)
  804aa4:	acc00117 	ldw	r19,4(r21)
  804aa8:	ad400204 	addi	r21,r21,8
  804aac:	d8000015 	stw	zero,0(sp)
  804ab0:	003fdc06 	br	804a24 <__sfvwrite_r+0x278>
  804ab4:	b80b883a 	mov	r5,r23
  804ab8:	880d883a 	mov	r6,r17
  804abc:	08058e40 	call	8058e4 <memmove>
  804ac0:	90c00017 	ldw	r3,0(r18)
  804ac4:	e009883a 	mov	r4,fp
  804ac8:	900b883a 	mov	r5,r18
  804acc:	1c47883a 	add	r3,r3,r17
  804ad0:	90c00015 	stw	r3,0(r18)
  804ad4:	0803e7c0 	call	803e7c <_fflush_r>
  804ad8:	103fc91e 	bne	r2,zero,804a00 <__sfvwrite_r+0x254>
  804adc:	a469c83a 	sub	r20,r20,r17
  804ae0:	a03fe81e 	bne	r20,zero,804a84 <__sfvwrite_r+0x2d8>
  804ae4:	e009883a 	mov	r4,fp
  804ae8:	900b883a 	mov	r5,r18
  804aec:	0803e7c0 	call	803e7c <_fflush_r>
  804af0:	103fc31e 	bne	r2,zero,804a00 <__sfvwrite_r+0x254>
  804af4:	d8000015 	stw	zero,0(sp)
  804af8:	003fe206 	br	804a84 <__sfvwrite_r+0x2d8>
  804afc:	91000017 	ldw	r4,0(r18)
  804b00:	90800417 	ldw	r2,16(r18)
  804b04:	1100022e 	bgeu	r2,r4,804b10 <__sfvwrite_r+0x364>
  804b08:	8023883a 	mov	r17,r16
  804b0c:	85003136 	bltu	r16,r20,804bd4 <__sfvwrite_r+0x428>
  804b10:	91c00517 	ldw	r7,20(r18)
  804b14:	a1c01836 	bltu	r20,r7,804b78 <__sfvwrite_r+0x3cc>
  804b18:	90c00917 	ldw	r3,36(r18)
  804b1c:	91400717 	ldw	r5,28(r18)
  804b20:	e009883a 	mov	r4,fp
  804b24:	b80d883a 	mov	r6,r23
  804b28:	183ee83a 	callr	r3
  804b2c:	1021883a 	mov	r16,r2
  804b30:	00bfb30e 	bge	zero,r2,804a00 <__sfvwrite_r+0x254>
  804b34:	1023883a 	mov	r17,r2
  804b38:	1027883a 	mov	r19,r2
  804b3c:	003f9b06 	br	8049ac <__sfvwrite_r+0x200>
  804b40:	b80b883a 	mov	r5,r23
  804b44:	800d883a 	mov	r6,r16
  804b48:	08058e40 	call	8058e4 <memmove>
  804b4c:	90c00217 	ldw	r3,8(r18)
  804b50:	90800017 	ldw	r2,0(r18)
  804b54:	8023883a 	mov	r17,r16
  804b58:	1c07c83a 	sub	r3,r3,r16
  804b5c:	1405883a 	add	r2,r2,r16
  804b60:	90c00215 	stw	r3,8(r18)
  804b64:	90800015 	stw	r2,0(r18)
  804b68:	003fc406 	br	804a7c <__sfvwrite_r+0x2d0>
  804b6c:	a00d883a 	mov	r6,r20
  804b70:	a021883a 	mov	r16,r20
  804b74:	003f8106 	br	80497c <__sfvwrite_r+0x1d0>
  804b78:	b80b883a 	mov	r5,r23
  804b7c:	a00d883a 	mov	r6,r20
  804b80:	08058e40 	call	8058e4 <memmove>
  804b84:	90c00217 	ldw	r3,8(r18)
  804b88:	90800017 	ldw	r2,0(r18)
  804b8c:	a021883a 	mov	r16,r20
  804b90:	1d07c83a 	sub	r3,r3,r20
  804b94:	1505883a 	add	r2,r2,r20
  804b98:	a023883a 	mov	r17,r20
  804b9c:	a027883a 	mov	r19,r20
  804ba0:	90c00215 	stw	r3,8(r18)
  804ba4:	90800015 	stw	r2,0(r18)
  804ba8:	003f8006 	br	8049ac <__sfvwrite_r+0x200>
  804bac:	b809883a 	mov	r4,r23
  804bb0:	01400284 	movi	r5,10
  804bb4:	980d883a 	mov	r6,r19
  804bb8:	08057600 	call	805760 <memchr>
  804bbc:	10001726 	beq	r2,zero,804c1c <__sfvwrite_r+0x470>
  804bc0:	15c5c83a 	sub	r2,r2,r23
  804bc4:	15000044 	addi	r20,r2,1
  804bc8:	00800044 	movi	r2,1
  804bcc:	d8800015 	stw	r2,0(sp)
  804bd0:	003f9806 	br	804a34 <__sfvwrite_r+0x288>
  804bd4:	b80b883a 	mov	r5,r23
  804bd8:	800d883a 	mov	r6,r16
  804bdc:	08058e40 	call	8058e4 <memmove>
  804be0:	90c00017 	ldw	r3,0(r18)
  804be4:	e009883a 	mov	r4,fp
  804be8:	900b883a 	mov	r5,r18
  804bec:	1c07883a 	add	r3,r3,r16
  804bf0:	90c00015 	stw	r3,0(r18)
  804bf4:	8027883a 	mov	r19,r16
  804bf8:	0803e7c0 	call	803e7c <_fflush_r>
  804bfc:	103f6b26 	beq	r2,zero,8049ac <__sfvwrite_r+0x200>
  804c00:	003f7f06 	br	804a00 <__sfvwrite_r+0x254>
  804c04:	400b883a 	mov	r5,r8
  804c08:	e009883a 	mov	r4,fp
  804c0c:	0806a500 	call	806a50 <_realloc_r>
  804c10:	103f7626 	beq	r2,zero,8049ec <__sfvwrite_r+0x240>
  804c14:	1023883a 	mov	r17,r2
  804c18:	003f5006 	br	80495c <__sfvwrite_r+0x1b0>
  804c1c:	00c00044 	movi	r3,1
  804c20:	9d000044 	addi	r20,r19,1
  804c24:	d8c00015 	stw	r3,0(sp)
  804c28:	003f8206 	br	804a34 <__sfvwrite_r+0x288>
  804c2c:	9080030b 	ldhu	r2,12(r18)
  804c30:	00c00244 	movi	r3,9
  804c34:	013fffc4 	movi	r4,-1
  804c38:	10801014 	ori	r2,r2,64
  804c3c:	9080030d 	sth	r2,12(r18)
  804c40:	e0c00015 	stw	r3,0(fp)
  804c44:	003f0606 	br	804860 <__sfvwrite_r+0xb4>

00804c48 <_fwalk_reent>:
  804c48:	defff704 	addi	sp,sp,-36
  804c4c:	dcc00315 	stw	r19,12(sp)
  804c50:	24c0b804 	addi	r19,r4,736
  804c54:	dd800615 	stw	r22,24(sp)
  804c58:	dd400515 	stw	r21,20(sp)
  804c5c:	dfc00815 	stw	ra,32(sp)
  804c60:	ddc00715 	stw	r23,28(sp)
  804c64:	dd000415 	stw	r20,16(sp)
  804c68:	dc800215 	stw	r18,8(sp)
  804c6c:	dc400115 	stw	r17,4(sp)
  804c70:	dc000015 	stw	r16,0(sp)
  804c74:	202b883a 	mov	r21,r4
  804c78:	282d883a 	mov	r22,r5
  804c7c:	08041040 	call	804104 <__sfp_lock_acquire>
  804c80:	98002126 	beq	r19,zero,804d08 <_fwalk_reent+0xc0>
  804c84:	002f883a 	mov	r23,zero
  804c88:	9c800117 	ldw	r18,4(r19)
  804c8c:	9c000217 	ldw	r16,8(r19)
  804c90:	90bfffc4 	addi	r2,r18,-1
  804c94:	10000d16 	blt	r2,zero,804ccc <_fwalk_reent+0x84>
  804c98:	0023883a 	mov	r17,zero
  804c9c:	053fffc4 	movi	r20,-1
  804ca0:	8080030f 	ldh	r2,12(r16)
  804ca4:	8c400044 	addi	r17,r17,1
  804ca8:	10000626 	beq	r2,zero,804cc4 <_fwalk_reent+0x7c>
  804cac:	8080038f 	ldh	r2,14(r16)
  804cb0:	800b883a 	mov	r5,r16
  804cb4:	a809883a 	mov	r4,r21
  804cb8:	15000226 	beq	r2,r20,804cc4 <_fwalk_reent+0x7c>
  804cbc:	b03ee83a 	callr	r22
  804cc0:	b8aeb03a 	or	r23,r23,r2
  804cc4:	84001704 	addi	r16,r16,92
  804cc8:	947ff51e 	bne	r18,r17,804ca0 <_fwalk_reent+0x58>
  804ccc:	9cc00017 	ldw	r19,0(r19)
  804cd0:	983fed1e 	bne	r19,zero,804c88 <_fwalk_reent+0x40>
  804cd4:	08041080 	call	804108 <__sfp_lock_release>
  804cd8:	b805883a 	mov	r2,r23
  804cdc:	dfc00817 	ldw	ra,32(sp)
  804ce0:	ddc00717 	ldw	r23,28(sp)
  804ce4:	dd800617 	ldw	r22,24(sp)
  804ce8:	dd400517 	ldw	r21,20(sp)
  804cec:	dd000417 	ldw	r20,16(sp)
  804cf0:	dcc00317 	ldw	r19,12(sp)
  804cf4:	dc800217 	ldw	r18,8(sp)
  804cf8:	dc400117 	ldw	r17,4(sp)
  804cfc:	dc000017 	ldw	r16,0(sp)
  804d00:	dec00904 	addi	sp,sp,36
  804d04:	f800283a 	ret
  804d08:	002f883a 	mov	r23,zero
  804d0c:	003ff106 	br	804cd4 <_fwalk_reent+0x8c>

00804d10 <_fwalk>:
  804d10:	defff804 	addi	sp,sp,-32
  804d14:	dcc00315 	stw	r19,12(sp)
  804d18:	24c0b804 	addi	r19,r4,736
  804d1c:	dd400515 	stw	r21,20(sp)
  804d20:	dfc00715 	stw	ra,28(sp)
  804d24:	dd800615 	stw	r22,24(sp)
  804d28:	dd000415 	stw	r20,16(sp)
  804d2c:	dc800215 	stw	r18,8(sp)
  804d30:	dc400115 	stw	r17,4(sp)
  804d34:	dc000015 	stw	r16,0(sp)
  804d38:	282b883a 	mov	r21,r5
  804d3c:	08041040 	call	804104 <__sfp_lock_acquire>
  804d40:	98001f26 	beq	r19,zero,804dc0 <_fwalk+0xb0>
  804d44:	002d883a 	mov	r22,zero
  804d48:	9c800117 	ldw	r18,4(r19)
  804d4c:	9c000217 	ldw	r16,8(r19)
  804d50:	90bfffc4 	addi	r2,r18,-1
  804d54:	10000c16 	blt	r2,zero,804d88 <_fwalk+0x78>
  804d58:	0023883a 	mov	r17,zero
  804d5c:	053fffc4 	movi	r20,-1
  804d60:	8080030f 	ldh	r2,12(r16)
  804d64:	8c400044 	addi	r17,r17,1
  804d68:	10000526 	beq	r2,zero,804d80 <_fwalk+0x70>
  804d6c:	8080038f 	ldh	r2,14(r16)
  804d70:	8009883a 	mov	r4,r16
  804d74:	15000226 	beq	r2,r20,804d80 <_fwalk+0x70>
  804d78:	a83ee83a 	callr	r21
  804d7c:	b0acb03a 	or	r22,r22,r2
  804d80:	84001704 	addi	r16,r16,92
  804d84:	947ff61e 	bne	r18,r17,804d60 <_fwalk+0x50>
  804d88:	9cc00017 	ldw	r19,0(r19)
  804d8c:	983fee1e 	bne	r19,zero,804d48 <_fwalk+0x38>
  804d90:	08041080 	call	804108 <__sfp_lock_release>
  804d94:	b005883a 	mov	r2,r22
  804d98:	dfc00717 	ldw	ra,28(sp)
  804d9c:	dd800617 	ldw	r22,24(sp)
  804da0:	dd400517 	ldw	r21,20(sp)
  804da4:	dd000417 	ldw	r20,16(sp)
  804da8:	dcc00317 	ldw	r19,12(sp)
  804dac:	dc800217 	ldw	r18,8(sp)
  804db0:	dc400117 	ldw	r17,4(sp)
  804db4:	dc000017 	ldw	r16,0(sp)
  804db8:	dec00804 	addi	sp,sp,32
  804dbc:	f800283a 	ret
  804dc0:	002d883a 	mov	r22,zero
  804dc4:	003ff206 	br	804d90 <_fwalk+0x80>

00804dc8 <__locale_charset>:
  804dc8:	d0a00317 	ldw	r2,-32756(gp)
  804dcc:	f800283a 	ret

00804dd0 <_localeconv_r>:
  804dd0:	00802074 	movhi	r2,129
  804dd4:	10969a04 	addi	r2,r2,23144
  804dd8:	f800283a 	ret

00804ddc <localeconv>:
  804ddc:	00802074 	movhi	r2,129
  804de0:	109e2504 	addi	r2,r2,30868
  804de4:	11000017 	ldw	r4,0(r2)
  804de8:	0804dd01 	jmpi	804dd0 <_localeconv_r>

00804dec <_setlocale_r>:
  804dec:	defffc04 	addi	sp,sp,-16
  804df0:	00c02074 	movhi	r3,129
  804df4:	18d69504 	addi	r3,r3,23124
  804df8:	dc800215 	stw	r18,8(sp)
  804dfc:	dc400115 	stw	r17,4(sp)
  804e00:	dc000015 	stw	r16,0(sp)
  804e04:	2023883a 	mov	r17,r4
  804e08:	2825883a 	mov	r18,r5
  804e0c:	dfc00315 	stw	ra,12(sp)
  804e10:	3021883a 	mov	r16,r6
  804e14:	3009883a 	mov	r4,r6
  804e18:	180b883a 	mov	r5,r3
  804e1c:	30000926 	beq	r6,zero,804e44 <_setlocale_r+0x58>
  804e20:	08072700 	call	807270 <strcmp>
  804e24:	8009883a 	mov	r4,r16
  804e28:	01402074 	movhi	r5,129
  804e2c:	29568004 	addi	r5,r5,23040
  804e30:	10000b1e 	bne	r2,zero,804e60 <_setlocale_r+0x74>
  804e34:	8c000d15 	stw	r16,52(r17)
  804e38:	8c800c15 	stw	r18,48(r17)
  804e3c:	00c02074 	movhi	r3,129
  804e40:	18d69504 	addi	r3,r3,23124
  804e44:	1805883a 	mov	r2,r3
  804e48:	dfc00317 	ldw	ra,12(sp)
  804e4c:	dc800217 	ldw	r18,8(sp)
  804e50:	dc400117 	ldw	r17,4(sp)
  804e54:	dc000017 	ldw	r16,0(sp)
  804e58:	dec00404 	addi	sp,sp,16
  804e5c:	f800283a 	ret
  804e60:	08072700 	call	807270 <strcmp>
  804e64:	0007883a 	mov	r3,zero
  804e68:	103ff226 	beq	r2,zero,804e34 <_setlocale_r+0x48>
  804e6c:	003ff506 	br	804e44 <_setlocale_r+0x58>

00804e70 <setlocale>:
  804e70:	01802074 	movhi	r6,129
  804e74:	319e2504 	addi	r6,r6,30868
  804e78:	2007883a 	mov	r3,r4
  804e7c:	31000017 	ldw	r4,0(r6)
  804e80:	280d883a 	mov	r6,r5
  804e84:	180b883a 	mov	r5,r3
  804e88:	0804dec1 	jmpi	804dec <_setlocale_r>

00804e8c <__smakebuf_r>:
  804e8c:	2880030b 	ldhu	r2,12(r5)
  804e90:	deffed04 	addi	sp,sp,-76
  804e94:	dc401015 	stw	r17,64(sp)
  804e98:	1080008c 	andi	r2,r2,2
  804e9c:	dc000f15 	stw	r16,60(sp)
  804ea0:	dfc01215 	stw	ra,72(sp)
  804ea4:	dc801115 	stw	r18,68(sp)
  804ea8:	2821883a 	mov	r16,r5
  804eac:	2023883a 	mov	r17,r4
  804eb0:	10000b26 	beq	r2,zero,804ee0 <__smakebuf_r+0x54>
  804eb4:	28c010c4 	addi	r3,r5,67
  804eb8:	00800044 	movi	r2,1
  804ebc:	28800515 	stw	r2,20(r5)
  804ec0:	28c00415 	stw	r3,16(r5)
  804ec4:	28c00015 	stw	r3,0(r5)
  804ec8:	dfc01217 	ldw	ra,72(sp)
  804ecc:	dc801117 	ldw	r18,68(sp)
  804ed0:	dc401017 	ldw	r17,64(sp)
  804ed4:	dc000f17 	ldw	r16,60(sp)
  804ed8:	dec01304 	addi	sp,sp,76
  804edc:	f800283a 	ret
  804ee0:	2940038f 	ldh	r5,14(r5)
  804ee4:	28002116 	blt	r5,zero,804f6c <__smakebuf_r+0xe0>
  804ee8:	d80d883a 	mov	r6,sp
  804eec:	08075ec0 	call	8075ec <_fstat_r>
  804ef0:	10001e16 	blt	r2,zero,804f6c <__smakebuf_r+0xe0>
  804ef4:	d8800117 	ldw	r2,4(sp)
  804ef8:	00e00014 	movui	r3,32768
  804efc:	113c000c 	andi	r4,r2,61440
  804f00:	20c03126 	beq	r4,r3,804fc8 <__smakebuf_r+0x13c>
  804f04:	8080030b 	ldhu	r2,12(r16)
  804f08:	00c80004 	movi	r3,8192
  804f0c:	10820014 	ori	r2,r2,2048
  804f10:	8080030d 	sth	r2,12(r16)
  804f14:	20c01e26 	beq	r4,r3,804f90 <__smakebuf_r+0x104>
  804f18:	04810004 	movi	r18,1024
  804f1c:	8809883a 	mov	r4,r17
  804f20:	900b883a 	mov	r5,r18
  804f24:	08050200 	call	805020 <_malloc_r>
  804f28:	1009883a 	mov	r4,r2
  804f2c:	10003126 	beq	r2,zero,804ff4 <__smakebuf_r+0x168>
  804f30:	80c0030b 	ldhu	r3,12(r16)
  804f34:	00802034 	movhi	r2,128
  804f38:	10907e04 	addi	r2,r2,16888
  804f3c:	88800f15 	stw	r2,60(r17)
  804f40:	18c02014 	ori	r3,r3,128
  804f44:	84800515 	stw	r18,20(r16)
  804f48:	80c0030d 	sth	r3,12(r16)
  804f4c:	81000415 	stw	r4,16(r16)
  804f50:	81000015 	stw	r4,0(r16)
  804f54:	dfc01217 	ldw	ra,72(sp)
  804f58:	dc801117 	ldw	r18,68(sp)
  804f5c:	dc401017 	ldw	r17,64(sp)
  804f60:	dc000f17 	ldw	r16,60(sp)
  804f64:	dec01304 	addi	sp,sp,76
  804f68:	f800283a 	ret
  804f6c:	80c0030b 	ldhu	r3,12(r16)
  804f70:	1880200c 	andi	r2,r3,128
  804f74:	10000426 	beq	r2,zero,804f88 <__smakebuf_r+0xfc>
  804f78:	04801004 	movi	r18,64
  804f7c:	18820014 	ori	r2,r3,2048
  804f80:	8080030d 	sth	r2,12(r16)
  804f84:	003fe506 	br	804f1c <__smakebuf_r+0x90>
  804f88:	04810004 	movi	r18,1024
  804f8c:	003ffb06 	br	804f7c <__smakebuf_r+0xf0>
  804f90:	8140038f 	ldh	r5,14(r16)
  804f94:	8809883a 	mov	r4,r17
  804f98:	08076600 	call	807660 <_isatty_r>
  804f9c:	103fde26 	beq	r2,zero,804f18 <__smakebuf_r+0x8c>
  804fa0:	8080030b 	ldhu	r2,12(r16)
  804fa4:	80c010c4 	addi	r3,r16,67
  804fa8:	04810004 	movi	r18,1024
  804fac:	10800054 	ori	r2,r2,1
  804fb0:	8080030d 	sth	r2,12(r16)
  804fb4:	00800044 	movi	r2,1
  804fb8:	80c00415 	stw	r3,16(r16)
  804fbc:	80800515 	stw	r2,20(r16)
  804fc0:	80c00015 	stw	r3,0(r16)
  804fc4:	003fd506 	br	804f1c <__smakebuf_r+0x90>
  804fc8:	80c00a17 	ldw	r3,40(r16)
  804fcc:	00802034 	movhi	r2,128
  804fd0:	109c4b04 	addi	r2,r2,28972
  804fd4:	18bfcb1e 	bne	r3,r2,804f04 <__smakebuf_r+0x78>
  804fd8:	8080030b 	ldhu	r2,12(r16)
  804fdc:	00c10004 	movi	r3,1024
  804fe0:	1825883a 	mov	r18,r3
  804fe4:	10c4b03a 	or	r2,r2,r3
  804fe8:	8080030d 	sth	r2,12(r16)
  804fec:	80c01315 	stw	r3,76(r16)
  804ff0:	003fca06 	br	804f1c <__smakebuf_r+0x90>
  804ff4:	8100030b 	ldhu	r4,12(r16)
  804ff8:	2080800c 	andi	r2,r4,512
  804ffc:	103fb21e 	bne	r2,zero,804ec8 <__smakebuf_r+0x3c>
  805000:	80c010c4 	addi	r3,r16,67
  805004:	21000094 	ori	r4,r4,2
  805008:	00800044 	movi	r2,1
  80500c:	80800515 	stw	r2,20(r16)
  805010:	8100030d 	sth	r4,12(r16)
  805014:	80c00415 	stw	r3,16(r16)
  805018:	80c00015 	stw	r3,0(r16)
  80501c:	003faa06 	br	804ec8 <__smakebuf_r+0x3c>

00805020 <_malloc_r>:
  805020:	defff604 	addi	sp,sp,-40
  805024:	28c002c4 	addi	r3,r5,11
  805028:	00800584 	movi	r2,22
  80502c:	dc800215 	stw	r18,8(sp)
  805030:	dfc00915 	stw	ra,36(sp)
  805034:	df000815 	stw	fp,32(sp)
  805038:	ddc00715 	stw	r23,28(sp)
  80503c:	dd800615 	stw	r22,24(sp)
  805040:	dd400515 	stw	r21,20(sp)
  805044:	dd000415 	stw	r20,16(sp)
  805048:	dcc00315 	stw	r19,12(sp)
  80504c:	dc400115 	stw	r17,4(sp)
  805050:	dc000015 	stw	r16,0(sp)
  805054:	2025883a 	mov	r18,r4
  805058:	10c01236 	bltu	r2,r3,8050a4 <_malloc_r+0x84>
  80505c:	04400404 	movi	r17,16
  805060:	8940142e 	bgeu	r17,r5,8050b4 <_malloc_r+0x94>
  805064:	00800304 	movi	r2,12
  805068:	0007883a 	mov	r3,zero
  80506c:	90800015 	stw	r2,0(r18)
  805070:	1805883a 	mov	r2,r3
  805074:	dfc00917 	ldw	ra,36(sp)
  805078:	df000817 	ldw	fp,32(sp)
  80507c:	ddc00717 	ldw	r23,28(sp)
  805080:	dd800617 	ldw	r22,24(sp)
  805084:	dd400517 	ldw	r21,20(sp)
  805088:	dd000417 	ldw	r20,16(sp)
  80508c:	dcc00317 	ldw	r19,12(sp)
  805090:	dc800217 	ldw	r18,8(sp)
  805094:	dc400117 	ldw	r17,4(sp)
  805098:	dc000017 	ldw	r16,0(sp)
  80509c:	dec00a04 	addi	sp,sp,40
  8050a0:	f800283a 	ret
  8050a4:	00bffe04 	movi	r2,-8
  8050a8:	18a2703a 	and	r17,r3,r2
  8050ac:	883fed16 	blt	r17,zero,805064 <_malloc_r+0x44>
  8050b0:	897fec36 	bltu	r17,r5,805064 <_malloc_r+0x44>
  8050b4:	9009883a 	mov	r4,r18
  8050b8:	080a7f40 	call	80a7f4 <__malloc_lock>
  8050bc:	00807dc4 	movi	r2,503
  8050c0:	14402b2e 	bgeu	r2,r17,805170 <_malloc_r+0x150>
  8050c4:	8806d27a 	srli	r3,r17,9
  8050c8:	18003f1e 	bne	r3,zero,8051c8 <_malloc_r+0x1a8>
  8050cc:	880cd0fa 	srli	r6,r17,3
  8050d0:	300490fa 	slli	r2,r6,3
  8050d4:	02c02074 	movhi	r11,129
  8050d8:	5ad89304 	addi	r11,r11,25164
  8050dc:	12cb883a 	add	r5,r2,r11
  8050e0:	2c000317 	ldw	r16,12(r5)
  8050e4:	580f883a 	mov	r7,r11
  8050e8:	2c00041e 	bne	r5,r16,8050fc <_malloc_r+0xdc>
  8050ec:	00000a06 	br	805118 <_malloc_r+0xf8>
  8050f0:	1800860e 	bge	r3,zero,80530c <_malloc_r+0x2ec>
  8050f4:	84000317 	ldw	r16,12(r16)
  8050f8:	2c000726 	beq	r5,r16,805118 <_malloc_r+0xf8>
  8050fc:	80800117 	ldw	r2,4(r16)
  805100:	00ffff04 	movi	r3,-4
  805104:	10c8703a 	and	r4,r2,r3
  805108:	2447c83a 	sub	r3,r4,r17
  80510c:	008003c4 	movi	r2,15
  805110:	10fff70e 	bge	r2,r3,8050f0 <_malloc_r+0xd0>
  805114:	31bfffc4 	addi	r6,r6,-1
  805118:	32400044 	addi	r9,r6,1
  80511c:	02802074 	movhi	r10,129
  805120:	52989504 	addi	r10,r10,25172
  805124:	54000217 	ldw	r16,8(r10)
  805128:	8280a026 	beq	r16,r10,8053ac <_malloc_r+0x38c>
  80512c:	80800117 	ldw	r2,4(r16)
  805130:	00ffff04 	movi	r3,-4
  805134:	10ca703a 	and	r5,r2,r3
  805138:	2c4dc83a 	sub	r6,r5,r17
  80513c:	008003c4 	movi	r2,15
  805140:	11808316 	blt	r2,r6,805350 <_malloc_r+0x330>
  805144:	52800315 	stw	r10,12(r10)
  805148:	52800215 	stw	r10,8(r10)
  80514c:	30002916 	blt	r6,zero,8051f4 <_malloc_r+0x1d4>
  805150:	8147883a 	add	r3,r16,r5
  805154:	18800117 	ldw	r2,4(r3)
  805158:	9009883a 	mov	r4,r18
  80515c:	10800054 	ori	r2,r2,1
  805160:	18800115 	stw	r2,4(r3)
  805164:	080a8fc0 	call	80a8fc <__malloc_unlock>
  805168:	80c00204 	addi	r3,r16,8
  80516c:	003fc006 	br	805070 <_malloc_r+0x50>
  805170:	02c02074 	movhi	r11,129
  805174:	5ad89304 	addi	r11,r11,25164
  805178:	8ac5883a 	add	r2,r17,r11
  80517c:	14000317 	ldw	r16,12(r2)
  805180:	580f883a 	mov	r7,r11
  805184:	8806d0fa 	srli	r3,r17,3
  805188:	14006c26 	beq	r2,r16,80533c <_malloc_r+0x31c>
  80518c:	80c00117 	ldw	r3,4(r16)
  805190:	00bfff04 	movi	r2,-4
  805194:	81800317 	ldw	r6,12(r16)
  805198:	1886703a 	and	r3,r3,r2
  80519c:	80c7883a 	add	r3,r16,r3
  8051a0:	18800117 	ldw	r2,4(r3)
  8051a4:	81400217 	ldw	r5,8(r16)
  8051a8:	9009883a 	mov	r4,r18
  8051ac:	10800054 	ori	r2,r2,1
  8051b0:	18800115 	stw	r2,4(r3)
  8051b4:	31400215 	stw	r5,8(r6)
  8051b8:	29800315 	stw	r6,12(r5)
  8051bc:	080a8fc0 	call	80a8fc <__malloc_unlock>
  8051c0:	80c00204 	addi	r3,r16,8
  8051c4:	003faa06 	br	805070 <_malloc_r+0x50>
  8051c8:	00800104 	movi	r2,4
  8051cc:	10c0052e 	bgeu	r2,r3,8051e4 <_malloc_r+0x1c4>
  8051d0:	00800504 	movi	r2,20
  8051d4:	10c07836 	bltu	r2,r3,8053b8 <_malloc_r+0x398>
  8051d8:	198016c4 	addi	r6,r3,91
  8051dc:	300490fa 	slli	r2,r6,3
  8051e0:	003fbc06 	br	8050d4 <_malloc_r+0xb4>
  8051e4:	8804d1ba 	srli	r2,r17,6
  8051e8:	11800e04 	addi	r6,r2,56
  8051ec:	300490fa 	slli	r2,r6,3
  8051f0:	003fb806 	br	8050d4 <_malloc_r+0xb4>
  8051f4:	00807fc4 	movi	r2,511
  8051f8:	1140bb36 	bltu	r2,r5,8054e8 <_malloc_r+0x4c8>
  8051fc:	2806d0fa 	srli	r3,r5,3
  805200:	573ffe04 	addi	fp,r10,-8
  805204:	00800044 	movi	r2,1
  805208:	180890fa 	slli	r4,r3,3
  80520c:	1807d0ba 	srai	r3,r3,2
  805210:	e1c00117 	ldw	r7,4(fp)
  805214:	5909883a 	add	r4,r11,r4
  805218:	21400217 	ldw	r5,8(r4)
  80521c:	10c4983a 	sll	r2,r2,r3
  805220:	81000315 	stw	r4,12(r16)
  805224:	81400215 	stw	r5,8(r16)
  805228:	388eb03a 	or	r7,r7,r2
  80522c:	2c000315 	stw	r16,12(r5)
  805230:	24000215 	stw	r16,8(r4)
  805234:	e1c00115 	stw	r7,4(fp)
  805238:	4807883a 	mov	r3,r9
  80523c:	4800cd16 	blt	r9,zero,805574 <_malloc_r+0x554>
  805240:	1807d0ba 	srai	r3,r3,2
  805244:	00800044 	movi	r2,1
  805248:	10c8983a 	sll	r4,r2,r3
  80524c:	39004436 	bltu	r7,r4,805360 <_malloc_r+0x340>
  805250:	21c4703a 	and	r2,r4,r7
  805254:	10000a1e 	bne	r2,zero,805280 <_malloc_r+0x260>
  805258:	2109883a 	add	r4,r4,r4
  80525c:	00bfff04 	movi	r2,-4
  805260:	4884703a 	and	r2,r9,r2
  805264:	3906703a 	and	r3,r7,r4
  805268:	12400104 	addi	r9,r2,4
  80526c:	1800041e 	bne	r3,zero,805280 <_malloc_r+0x260>
  805270:	2109883a 	add	r4,r4,r4
  805274:	3904703a 	and	r2,r7,r4
  805278:	4a400104 	addi	r9,r9,4
  80527c:	103ffc26 	beq	r2,zero,805270 <_malloc_r+0x250>
  805280:	480490fa 	slli	r2,r9,3
  805284:	4819883a 	mov	r12,r9
  805288:	023fff04 	movi	r8,-4
  80528c:	589b883a 	add	r13,r11,r2
  805290:	6807883a 	mov	r3,r13
  805294:	014003c4 	movi	r5,15
  805298:	1c000317 	ldw	r16,12(r3)
  80529c:	1c00041e 	bne	r3,r16,8052b0 <_malloc_r+0x290>
  8052a0:	0000a706 	br	805540 <_malloc_r+0x520>
  8052a4:	3000ab0e 	bge	r6,zero,805554 <_malloc_r+0x534>
  8052a8:	84000317 	ldw	r16,12(r16)
  8052ac:	1c00a426 	beq	r3,r16,805540 <_malloc_r+0x520>
  8052b0:	80800117 	ldw	r2,4(r16)
  8052b4:	1204703a 	and	r2,r2,r8
  8052b8:	144dc83a 	sub	r6,r2,r17
  8052bc:	29bff90e 	bge	r5,r6,8052a4 <_malloc_r+0x284>
  8052c0:	81000317 	ldw	r4,12(r16)
  8052c4:	80c00217 	ldw	r3,8(r16)
  8052c8:	89400054 	ori	r5,r17,1
  8052cc:	8445883a 	add	r2,r16,r17
  8052d0:	20c00215 	stw	r3,8(r4)
  8052d4:	19000315 	stw	r4,12(r3)
  8052d8:	81400115 	stw	r5,4(r16)
  8052dc:	1187883a 	add	r3,r2,r6
  8052e0:	31000054 	ori	r4,r6,1
  8052e4:	50800315 	stw	r2,12(r10)
  8052e8:	50800215 	stw	r2,8(r10)
  8052ec:	19800015 	stw	r6,0(r3)
  8052f0:	11000115 	stw	r4,4(r2)
  8052f4:	12800215 	stw	r10,8(r2)
  8052f8:	12800315 	stw	r10,12(r2)
  8052fc:	9009883a 	mov	r4,r18
  805300:	080a8fc0 	call	80a8fc <__malloc_unlock>
  805304:	80c00204 	addi	r3,r16,8
  805308:	003f5906 	br	805070 <_malloc_r+0x50>
  80530c:	8109883a 	add	r4,r16,r4
  805310:	20800117 	ldw	r2,4(r4)
  805314:	80c00217 	ldw	r3,8(r16)
  805318:	81400317 	ldw	r5,12(r16)
  80531c:	10800054 	ori	r2,r2,1
  805320:	20800115 	stw	r2,4(r4)
  805324:	28c00215 	stw	r3,8(r5)
  805328:	19400315 	stw	r5,12(r3)
  80532c:	9009883a 	mov	r4,r18
  805330:	080a8fc0 	call	80a8fc <__malloc_unlock>
  805334:	80c00204 	addi	r3,r16,8
  805338:	003f4d06 	br	805070 <_malloc_r+0x50>
  80533c:	80800204 	addi	r2,r16,8
  805340:	14000317 	ldw	r16,12(r2)
  805344:	143f911e 	bne	r2,r16,80518c <_malloc_r+0x16c>
  805348:	1a400084 	addi	r9,r3,2
  80534c:	003f7306 	br	80511c <_malloc_r+0xfc>
  805350:	88c00054 	ori	r3,r17,1
  805354:	8445883a 	add	r2,r16,r17
  805358:	80c00115 	stw	r3,4(r16)
  80535c:	003fdf06 	br	8052dc <_malloc_r+0x2bc>
  805360:	e4000217 	ldw	r16,8(fp)
  805364:	00bfff04 	movi	r2,-4
  805368:	80c00117 	ldw	r3,4(r16)
  80536c:	802d883a 	mov	r22,r16
  805370:	18aa703a 	and	r21,r3,r2
  805374:	ac401636 	bltu	r21,r17,8053d0 <_malloc_r+0x3b0>
  805378:	ac49c83a 	sub	r4,r21,r17
  80537c:	008003c4 	movi	r2,15
  805380:	1100130e 	bge	r2,r4,8053d0 <_malloc_r+0x3b0>
  805384:	88800054 	ori	r2,r17,1
  805388:	8447883a 	add	r3,r16,r17
  80538c:	80800115 	stw	r2,4(r16)
  805390:	20800054 	ori	r2,r4,1
  805394:	18800115 	stw	r2,4(r3)
  805398:	e0c00215 	stw	r3,8(fp)
  80539c:	9009883a 	mov	r4,r18
  8053a0:	080a8fc0 	call	80a8fc <__malloc_unlock>
  8053a4:	80c00204 	addi	r3,r16,8
  8053a8:	003f3106 	br	805070 <_malloc_r+0x50>
  8053ac:	39c00117 	ldw	r7,4(r7)
  8053b0:	573ffe04 	addi	fp,r10,-8
  8053b4:	003fa006 	br	805238 <_malloc_r+0x218>
  8053b8:	00801504 	movi	r2,84
  8053bc:	10c06736 	bltu	r2,r3,80555c <_malloc_r+0x53c>
  8053c0:	8804d33a 	srli	r2,r17,12
  8053c4:	11801b84 	addi	r6,r2,110
  8053c8:	300490fa 	slli	r2,r6,3
  8053cc:	003f4106 	br	8050d4 <_malloc_r+0xb4>
  8053d0:	d0a6f717 	ldw	r2,-25636(gp)
  8053d4:	d0e00517 	ldw	r3,-32748(gp)
  8053d8:	053fffc4 	movi	r20,-1
  8053dc:	10800404 	addi	r2,r2,16
  8053e0:	88a7883a 	add	r19,r17,r2
  8053e4:	1d000326 	beq	r3,r20,8053f4 <_malloc_r+0x3d4>
  8053e8:	98c3ffc4 	addi	r3,r19,4095
  8053ec:	00bc0004 	movi	r2,-4096
  8053f0:	18a6703a 	and	r19,r3,r2
  8053f4:	9009883a 	mov	r4,r18
  8053f8:	980b883a 	mov	r5,r19
  8053fc:	08070b40 	call	8070b4 <_sbrk_r>
  805400:	1009883a 	mov	r4,r2
  805404:	15000426 	beq	r2,r20,805418 <_malloc_r+0x3f8>
  805408:	854b883a 	add	r5,r16,r21
  80540c:	1029883a 	mov	r20,r2
  805410:	11405a2e 	bgeu	r2,r5,80557c <_malloc_r+0x55c>
  805414:	87000c26 	beq	r16,fp,805448 <_malloc_r+0x428>
  805418:	e4000217 	ldw	r16,8(fp)
  80541c:	80c00117 	ldw	r3,4(r16)
  805420:	00bfff04 	movi	r2,-4
  805424:	1884703a 	and	r2,r3,r2
  805428:	14400336 	bltu	r2,r17,805438 <_malloc_r+0x418>
  80542c:	1449c83a 	sub	r4,r2,r17
  805430:	008003c4 	movi	r2,15
  805434:	113fd316 	blt	r2,r4,805384 <_malloc_r+0x364>
  805438:	9009883a 	mov	r4,r18
  80543c:	080a8fc0 	call	80a8fc <__malloc_unlock>
  805440:	0007883a 	mov	r3,zero
  805444:	003f0a06 	br	805070 <_malloc_r+0x50>
  805448:	05c020b4 	movhi	r23,130
  80544c:	bde53f04 	addi	r23,r23,-27396
  805450:	b8800017 	ldw	r2,0(r23)
  805454:	988d883a 	add	r6,r19,r2
  805458:	b9800015 	stw	r6,0(r23)
  80545c:	d0e00517 	ldw	r3,-32748(gp)
  805460:	00bfffc4 	movi	r2,-1
  805464:	18808e26 	beq	r3,r2,8056a0 <_malloc_r+0x680>
  805468:	2145c83a 	sub	r2,r4,r5
  80546c:	3085883a 	add	r2,r6,r2
  805470:	b8800015 	stw	r2,0(r23)
  805474:	20c001cc 	andi	r3,r4,7
  805478:	18005f1e 	bne	r3,zero,8055f8 <_malloc_r+0x5d8>
  80547c:	000b883a 	mov	r5,zero
  805480:	a4c5883a 	add	r2,r20,r19
  805484:	1083ffcc 	andi	r2,r2,4095
  805488:	00c40004 	movi	r3,4096
  80548c:	1887c83a 	sub	r3,r3,r2
  805490:	28e7883a 	add	r19,r5,r3
  805494:	9009883a 	mov	r4,r18
  805498:	980b883a 	mov	r5,r19
  80549c:	08070b40 	call	8070b4 <_sbrk_r>
  8054a0:	1007883a 	mov	r3,r2
  8054a4:	00bfffc4 	movi	r2,-1
  8054a8:	18807a26 	beq	r3,r2,805694 <_malloc_r+0x674>
  8054ac:	1d05c83a 	sub	r2,r3,r20
  8054b0:	9885883a 	add	r2,r19,r2
  8054b4:	10c00054 	ori	r3,r2,1
  8054b8:	b8800017 	ldw	r2,0(r23)
  8054bc:	a021883a 	mov	r16,r20
  8054c0:	a0c00115 	stw	r3,4(r20)
  8054c4:	9885883a 	add	r2,r19,r2
  8054c8:	b8800015 	stw	r2,0(r23)
  8054cc:	e5000215 	stw	r20,8(fp)
  8054d0:	b7003626 	beq	r22,fp,8055ac <_malloc_r+0x58c>
  8054d4:	018003c4 	movi	r6,15
  8054d8:	35404b36 	bltu	r6,r21,805608 <_malloc_r+0x5e8>
  8054dc:	00800044 	movi	r2,1
  8054e0:	a0800115 	stw	r2,4(r20)
  8054e4:	003fcd06 	br	80541c <_malloc_r+0x3fc>
  8054e8:	2808d27a 	srli	r4,r5,9
  8054ec:	2000371e 	bne	r4,zero,8055cc <_malloc_r+0x5ac>
  8054f0:	2808d0fa 	srli	r4,r5,3
  8054f4:	200690fa 	slli	r3,r4,3
  8054f8:	1ad1883a 	add	r8,r3,r11
  8054fc:	41800217 	ldw	r6,8(r8)
  805500:	41805b26 	beq	r8,r6,805670 <_malloc_r+0x650>
  805504:	30800117 	ldw	r2,4(r6)
  805508:	00ffff04 	movi	r3,-4
  80550c:	10c4703a 	and	r2,r2,r3
  805510:	2880022e 	bgeu	r5,r2,80551c <_malloc_r+0x4fc>
  805514:	31800217 	ldw	r6,8(r6)
  805518:	41bffa1e 	bne	r8,r6,805504 <_malloc_r+0x4e4>
  80551c:	32000317 	ldw	r8,12(r6)
  805520:	39c00117 	ldw	r7,4(r7)
  805524:	82000315 	stw	r8,12(r16)
  805528:	81800215 	stw	r6,8(r16)
  80552c:	07002074 	movhi	fp,129
  805530:	e7189304 	addi	fp,fp,25164
  805534:	34000315 	stw	r16,12(r6)
  805538:	44000215 	stw	r16,8(r8)
  80553c:	003f3e06 	br	805238 <_malloc_r+0x218>
  805540:	63000044 	addi	r12,r12,1
  805544:	608000cc 	andi	r2,r12,3
  805548:	10005d26 	beq	r2,zero,8056c0 <_malloc_r+0x6a0>
  80554c:	18c00204 	addi	r3,r3,8
  805550:	003f5106 	br	805298 <_malloc_r+0x278>
  805554:	8089883a 	add	r4,r16,r2
  805558:	003f6d06 	br	805310 <_malloc_r+0x2f0>
  80555c:	00805504 	movi	r2,340
  805560:	10c02036 	bltu	r2,r3,8055e4 <_malloc_r+0x5c4>
  805564:	8804d3fa 	srli	r2,r17,15
  805568:	11801dc4 	addi	r6,r2,119
  80556c:	300490fa 	slli	r2,r6,3
  805570:	003ed806 	br	8050d4 <_malloc_r+0xb4>
  805574:	48c000c4 	addi	r3,r9,3
  805578:	003f3106 	br	805240 <_malloc_r+0x220>
  80557c:	05c020b4 	movhi	r23,130
  805580:	bde53f04 	addi	r23,r23,-27396
  805584:	b8800017 	ldw	r2,0(r23)
  805588:	988d883a 	add	r6,r19,r2
  80558c:	b9800015 	stw	r6,0(r23)
  805590:	293fb21e 	bne	r5,r4,80545c <_malloc_r+0x43c>
  805594:	2083ffcc 	andi	r2,r4,4095
  805598:	103fb01e 	bne	r2,zero,80545c <_malloc_r+0x43c>
  80559c:	e4000217 	ldw	r16,8(fp)
  8055a0:	9d45883a 	add	r2,r19,r21
  8055a4:	10800054 	ori	r2,r2,1
  8055a8:	80800115 	stw	r2,4(r16)
  8055ac:	b8c00017 	ldw	r3,0(r23)
  8055b0:	d0a6f817 	ldw	r2,-25632(gp)
  8055b4:	10c0012e 	bgeu	r2,r3,8055bc <_malloc_r+0x59c>
  8055b8:	d0e6f815 	stw	r3,-25632(gp)
  8055bc:	d0a6f917 	ldw	r2,-25628(gp)
  8055c0:	10ff962e 	bgeu	r2,r3,80541c <_malloc_r+0x3fc>
  8055c4:	d0e6f915 	stw	r3,-25628(gp)
  8055c8:	003f9406 	br	80541c <_malloc_r+0x3fc>
  8055cc:	00800104 	movi	r2,4
  8055d0:	11001e36 	bltu	r2,r4,80564c <_malloc_r+0x62c>
  8055d4:	2804d1ba 	srli	r2,r5,6
  8055d8:	11000e04 	addi	r4,r2,56
  8055dc:	200690fa 	slli	r3,r4,3
  8055e0:	003fc506 	br	8054f8 <_malloc_r+0x4d8>
  8055e4:	00815504 	movi	r2,1364
  8055e8:	10c01d2e 	bgeu	r2,r3,805660 <_malloc_r+0x640>
  8055ec:	01801f84 	movi	r6,126
  8055f0:	0080fc04 	movi	r2,1008
  8055f4:	003eb706 	br	8050d4 <_malloc_r+0xb4>
  8055f8:	00800204 	movi	r2,8
  8055fc:	10cbc83a 	sub	r5,r2,r3
  805600:	2169883a 	add	r20,r4,r5
  805604:	003f9e06 	br	805480 <_malloc_r+0x460>
  805608:	00bffe04 	movi	r2,-8
  80560c:	a93ffd04 	addi	r4,r21,-12
  805610:	2088703a 	and	r4,r4,r2
  805614:	b10b883a 	add	r5,r22,r4
  805618:	00c00144 	movi	r3,5
  80561c:	28c00215 	stw	r3,8(r5)
  805620:	28c00115 	stw	r3,4(r5)
  805624:	b0800117 	ldw	r2,4(r22)
  805628:	1080004c 	andi	r2,r2,1
  80562c:	2084b03a 	or	r2,r4,r2
  805630:	b0800115 	stw	r2,4(r22)
  805634:	313fdd2e 	bgeu	r6,r4,8055ac <_malloc_r+0x58c>
  805638:	b1400204 	addi	r5,r22,8
  80563c:	9009883a 	mov	r4,r18
  805640:	08044980 	call	804498 <_free_r>
  805644:	e4000217 	ldw	r16,8(fp)
  805648:	003fd806 	br	8055ac <_malloc_r+0x58c>
  80564c:	00800504 	movi	r2,20
  805650:	11001536 	bltu	r2,r4,8056a8 <_malloc_r+0x688>
  805654:	210016c4 	addi	r4,r4,91
  805658:	200690fa 	slli	r3,r4,3
  80565c:	003fa606 	br	8054f8 <_malloc_r+0x4d8>
  805660:	8804d4ba 	srli	r2,r17,18
  805664:	11801f04 	addi	r6,r2,124
  805668:	300490fa 	slli	r2,r6,3
  80566c:	003e9906 	br	8050d4 <_malloc_r+0xb4>
  805670:	2009d0ba 	srai	r4,r4,2
  805674:	01402074 	movhi	r5,129
  805678:	29589304 	addi	r5,r5,25164
  80567c:	00c00044 	movi	r3,1
  805680:	28800117 	ldw	r2,4(r5)
  805684:	1906983a 	sll	r3,r3,r4
  805688:	10c4b03a 	or	r2,r2,r3
  80568c:	28800115 	stw	r2,4(r5)
  805690:	003fa306 	br	805520 <_malloc_r+0x500>
  805694:	0027883a 	mov	r19,zero
  805698:	00c00044 	movi	r3,1
  80569c:	003f8606 	br	8054b8 <_malloc_r+0x498>
  8056a0:	d1200515 	stw	r4,-32748(gp)
  8056a4:	003f7306 	br	805474 <_malloc_r+0x454>
  8056a8:	00801504 	movi	r2,84
  8056ac:	11001936 	bltu	r2,r4,805714 <_malloc_r+0x6f4>
  8056b0:	2804d33a 	srli	r2,r5,12
  8056b4:	11001b84 	addi	r4,r2,110
  8056b8:	200690fa 	slli	r3,r4,3
  8056bc:	003f8e06 	br	8054f8 <_malloc_r+0x4d8>
  8056c0:	480b883a 	mov	r5,r9
  8056c4:	6807883a 	mov	r3,r13
  8056c8:	288000cc 	andi	r2,r5,3
  8056cc:	18fffe04 	addi	r3,r3,-8
  8056d0:	297fffc4 	addi	r5,r5,-1
  8056d4:	10001526 	beq	r2,zero,80572c <_malloc_r+0x70c>
  8056d8:	18800217 	ldw	r2,8(r3)
  8056dc:	10fffa26 	beq	r2,r3,8056c8 <_malloc_r+0x6a8>
  8056e0:	2109883a 	add	r4,r4,r4
  8056e4:	393f1e36 	bltu	r7,r4,805360 <_malloc_r+0x340>
  8056e8:	203f1d26 	beq	r4,zero,805360 <_malloc_r+0x340>
  8056ec:	21c4703a 	and	r2,r4,r7
  8056f0:	10000226 	beq	r2,zero,8056fc <_malloc_r+0x6dc>
  8056f4:	6013883a 	mov	r9,r12
  8056f8:	003ee106 	br	805280 <_malloc_r+0x260>
  8056fc:	2109883a 	add	r4,r4,r4
  805700:	3904703a 	and	r2,r7,r4
  805704:	63000104 	addi	r12,r12,4
  805708:	103ffc26 	beq	r2,zero,8056fc <_malloc_r+0x6dc>
  80570c:	6013883a 	mov	r9,r12
  805710:	003edb06 	br	805280 <_malloc_r+0x260>
  805714:	00805504 	movi	r2,340
  805718:	11000836 	bltu	r2,r4,80573c <_malloc_r+0x71c>
  80571c:	2804d3fa 	srli	r2,r5,15
  805720:	11001dc4 	addi	r4,r2,119
  805724:	200690fa 	slli	r3,r4,3
  805728:	003f7306 	br	8054f8 <_malloc_r+0x4d8>
  80572c:	0104303a 	nor	r2,zero,r4
  805730:	388e703a 	and	r7,r7,r2
  805734:	e1c00115 	stw	r7,4(fp)
  805738:	003fe906 	br	8056e0 <_malloc_r+0x6c0>
  80573c:	00815504 	movi	r2,1364
  805740:	1100032e 	bgeu	r2,r4,805750 <_malloc_r+0x730>
  805744:	01001f84 	movi	r4,126
  805748:	00c0fc04 	movi	r3,1008
  80574c:	003f6a06 	br	8054f8 <_malloc_r+0x4d8>
  805750:	2804d4ba 	srli	r2,r5,18
  805754:	11001f04 	addi	r4,r2,124
  805758:	200690fa 	slli	r3,r4,3
  80575c:	003f6606 	br	8054f8 <_malloc_r+0x4d8>

00805760 <memchr>:
  805760:	008000c4 	movi	r2,3
  805764:	29403fcc 	andi	r5,r5,255
  805768:	2007883a 	mov	r3,r4
  80576c:	1180022e 	bgeu	r2,r6,805778 <memchr+0x18>
  805770:	2084703a 	and	r2,r4,r2
  805774:	10000b26 	beq	r2,zero,8057a4 <memchr+0x44>
  805778:	313fffc4 	addi	r4,r6,-1
  80577c:	3000051e 	bne	r6,zero,805794 <memchr+0x34>
  805780:	00002c06 	br	805834 <memchr+0xd4>
  805784:	213fffc4 	addi	r4,r4,-1
  805788:	00bfffc4 	movi	r2,-1
  80578c:	18c00044 	addi	r3,r3,1
  805790:	20802826 	beq	r4,r2,805834 <memchr+0xd4>
  805794:	18800003 	ldbu	r2,0(r3)
  805798:	28bffa1e 	bne	r5,r2,805784 <memchr+0x24>
  80579c:	1805883a 	mov	r2,r3
  8057a0:	f800283a 	ret
  8057a4:	0011883a 	mov	r8,zero
  8057a8:	0007883a 	mov	r3,zero
  8057ac:	01c00104 	movi	r7,4
  8057b0:	4004923a 	slli	r2,r8,8
  8057b4:	18c00044 	addi	r3,r3,1
  8057b8:	1151883a 	add	r8,r2,r5
  8057bc:	19fffc1e 	bne	r3,r7,8057b0 <memchr+0x50>
  8057c0:	02bfbff4 	movhi	r10,65279
  8057c4:	52bfbfc4 	addi	r10,r10,-257
  8057c8:	02602074 	movhi	r9,32897
  8057cc:	4a602004 	addi	r9,r9,-32640
  8057d0:	02c000c4 	movi	r11,3
  8057d4:	20800017 	ldw	r2,0(r4)
  8057d8:	31bfff04 	addi	r6,r6,-4
  8057dc:	200f883a 	mov	r7,r4
  8057e0:	1204f03a 	xor	r2,r2,r8
  8057e4:	1287883a 	add	r3,r2,r10
  8057e8:	1a46703a 	and	r3,r3,r9
  8057ec:	0084303a 	nor	r2,zero,r2
  8057f0:	10c4703a 	and	r2,r2,r3
  8057f4:	10000b26 	beq	r2,zero,805824 <memchr+0xc4>
  8057f8:	20800003 	ldbu	r2,0(r4)
  8057fc:	28800f26 	beq	r5,r2,80583c <memchr+0xdc>
  805800:	20800043 	ldbu	r2,1(r4)
  805804:	21c00044 	addi	r7,r4,1
  805808:	28800c26 	beq	r5,r2,80583c <memchr+0xdc>
  80580c:	20800083 	ldbu	r2,2(r4)
  805810:	21c00084 	addi	r7,r4,2
  805814:	28800926 	beq	r5,r2,80583c <memchr+0xdc>
  805818:	208000c3 	ldbu	r2,3(r4)
  80581c:	21c000c4 	addi	r7,r4,3
  805820:	28800626 	beq	r5,r2,80583c <memchr+0xdc>
  805824:	21000104 	addi	r4,r4,4
  805828:	59bfea36 	bltu	r11,r6,8057d4 <memchr+0x74>
  80582c:	2007883a 	mov	r3,r4
  805830:	003fd106 	br	805778 <memchr+0x18>
  805834:	0005883a 	mov	r2,zero
  805838:	f800283a 	ret
  80583c:	3805883a 	mov	r2,r7
  805840:	f800283a 	ret

00805844 <memcpy>:
  805844:	01c003c4 	movi	r7,15
  805848:	2007883a 	mov	r3,r4
  80584c:	3980032e 	bgeu	r7,r6,80585c <memcpy+0x18>
  805850:	2904b03a 	or	r2,r5,r4
  805854:	108000cc 	andi	r2,r2,3
  805858:	10000926 	beq	r2,zero,805880 <memcpy+0x3c>
  80585c:	30000626 	beq	r6,zero,805878 <memcpy+0x34>
  805860:	30cd883a 	add	r6,r6,r3
  805864:	28800003 	ldbu	r2,0(r5)
  805868:	29400044 	addi	r5,r5,1
  80586c:	18800005 	stb	r2,0(r3)
  805870:	18c00044 	addi	r3,r3,1
  805874:	30fffb1e 	bne	r6,r3,805864 <memcpy+0x20>
  805878:	2005883a 	mov	r2,r4
  80587c:	f800283a 	ret
  805880:	3811883a 	mov	r8,r7
  805884:	200f883a 	mov	r7,r4
  805888:	28c00017 	ldw	r3,0(r5)
  80588c:	31bffc04 	addi	r6,r6,-16
  805890:	38c00015 	stw	r3,0(r7)
  805894:	28800117 	ldw	r2,4(r5)
  805898:	38800115 	stw	r2,4(r7)
  80589c:	28c00217 	ldw	r3,8(r5)
  8058a0:	38c00215 	stw	r3,8(r7)
  8058a4:	28800317 	ldw	r2,12(r5)
  8058a8:	29400404 	addi	r5,r5,16
  8058ac:	38800315 	stw	r2,12(r7)
  8058b0:	39c00404 	addi	r7,r7,16
  8058b4:	41bff436 	bltu	r8,r6,805888 <memcpy+0x44>
  8058b8:	008000c4 	movi	r2,3
  8058bc:	1180072e 	bgeu	r2,r6,8058dc <memcpy+0x98>
  8058c0:	1007883a 	mov	r3,r2
  8058c4:	28800017 	ldw	r2,0(r5)
  8058c8:	31bfff04 	addi	r6,r6,-4
  8058cc:	29400104 	addi	r5,r5,4
  8058d0:	38800015 	stw	r2,0(r7)
  8058d4:	39c00104 	addi	r7,r7,4
  8058d8:	19bffa36 	bltu	r3,r6,8058c4 <memcpy+0x80>
  8058dc:	3807883a 	mov	r3,r7
  8058e0:	003fde06 	br	80585c <memcpy+0x18>

008058e4 <memmove>:
  8058e4:	2807883a 	mov	r3,r5
  8058e8:	2011883a 	mov	r8,r4
  8058ec:	29000c2e 	bgeu	r5,r4,805920 <memmove+0x3c>
  8058f0:	298f883a 	add	r7,r5,r6
  8058f4:	21c00a2e 	bgeu	r4,r7,805920 <memmove+0x3c>
  8058f8:	30000726 	beq	r6,zero,805918 <memmove+0x34>
  8058fc:	2187883a 	add	r3,r4,r6
  805900:	198dc83a 	sub	r6,r3,r6
  805904:	39ffffc4 	addi	r7,r7,-1
  805908:	38800003 	ldbu	r2,0(r7)
  80590c:	18ffffc4 	addi	r3,r3,-1
  805910:	18800005 	stb	r2,0(r3)
  805914:	19bffb1e 	bne	r3,r6,805904 <memmove+0x20>
  805918:	2005883a 	mov	r2,r4
  80591c:	f800283a 	ret
  805920:	01c003c4 	movi	r7,15
  805924:	39800a36 	bltu	r7,r6,805950 <memmove+0x6c>
  805928:	303ffb26 	beq	r6,zero,805918 <memmove+0x34>
  80592c:	400f883a 	mov	r7,r8
  805930:	320d883a 	add	r6,r6,r8
  805934:	28800003 	ldbu	r2,0(r5)
  805938:	29400044 	addi	r5,r5,1
  80593c:	38800005 	stb	r2,0(r7)
  805940:	39c00044 	addi	r7,r7,1
  805944:	39bffb1e 	bne	r7,r6,805934 <memmove+0x50>
  805948:	2005883a 	mov	r2,r4
  80594c:	f800283a 	ret
  805950:	1904b03a 	or	r2,r3,r4
  805954:	108000cc 	andi	r2,r2,3
  805958:	103ff31e 	bne	r2,zero,805928 <memmove+0x44>
  80595c:	3811883a 	mov	r8,r7
  805960:	180b883a 	mov	r5,r3
  805964:	200f883a 	mov	r7,r4
  805968:	28c00017 	ldw	r3,0(r5)
  80596c:	31bffc04 	addi	r6,r6,-16
  805970:	38c00015 	stw	r3,0(r7)
  805974:	28800117 	ldw	r2,4(r5)
  805978:	38800115 	stw	r2,4(r7)
  80597c:	28c00217 	ldw	r3,8(r5)
  805980:	38c00215 	stw	r3,8(r7)
  805984:	28800317 	ldw	r2,12(r5)
  805988:	29400404 	addi	r5,r5,16
  80598c:	38800315 	stw	r2,12(r7)
  805990:	39c00404 	addi	r7,r7,16
  805994:	41bff436 	bltu	r8,r6,805968 <memmove+0x84>
  805998:	008000c4 	movi	r2,3
  80599c:	1180072e 	bgeu	r2,r6,8059bc <memmove+0xd8>
  8059a0:	1007883a 	mov	r3,r2
  8059a4:	28800017 	ldw	r2,0(r5)
  8059a8:	31bfff04 	addi	r6,r6,-4
  8059ac:	29400104 	addi	r5,r5,4
  8059b0:	38800015 	stw	r2,0(r7)
  8059b4:	39c00104 	addi	r7,r7,4
  8059b8:	19bffa36 	bltu	r3,r6,8059a4 <memmove+0xc0>
  8059bc:	3811883a 	mov	r8,r7
  8059c0:	003fd906 	br	805928 <memmove+0x44>

008059c4 <memset>:
  8059c4:	008000c4 	movi	r2,3
  8059c8:	29403fcc 	andi	r5,r5,255
  8059cc:	2007883a 	mov	r3,r4
  8059d0:	1180022e 	bgeu	r2,r6,8059dc <memset+0x18>
  8059d4:	2084703a 	and	r2,r4,r2
  8059d8:	10000826 	beq	r2,zero,8059fc <memset+0x38>
  8059dc:	30000526 	beq	r6,zero,8059f4 <memset+0x30>
  8059e0:	2805883a 	mov	r2,r5
  8059e4:	30cd883a 	add	r6,r6,r3
  8059e8:	18800005 	stb	r2,0(r3)
  8059ec:	18c00044 	addi	r3,r3,1
  8059f0:	19bffd1e 	bne	r3,r6,8059e8 <memset+0x24>
  8059f4:	2005883a 	mov	r2,r4
  8059f8:	f800283a 	ret
  8059fc:	2804923a 	slli	r2,r5,8
  805a00:	020003c4 	movi	r8,15
  805a04:	200f883a 	mov	r7,r4
  805a08:	2884b03a 	or	r2,r5,r2
  805a0c:	1006943a 	slli	r3,r2,16
  805a10:	10c6b03a 	or	r3,r2,r3
  805a14:	41800a2e 	bgeu	r8,r6,805a40 <memset+0x7c>
  805a18:	4005883a 	mov	r2,r8
  805a1c:	31bffc04 	addi	r6,r6,-16
  805a20:	38c00015 	stw	r3,0(r7)
  805a24:	38c00115 	stw	r3,4(r7)
  805a28:	38c00215 	stw	r3,8(r7)
  805a2c:	38c00315 	stw	r3,12(r7)
  805a30:	39c00404 	addi	r7,r7,16
  805a34:	11bff936 	bltu	r2,r6,805a1c <memset+0x58>
  805a38:	008000c4 	movi	r2,3
  805a3c:	1180052e 	bgeu	r2,r6,805a54 <memset+0x90>
  805a40:	31bfff04 	addi	r6,r6,-4
  805a44:	008000c4 	movi	r2,3
  805a48:	38c00015 	stw	r3,0(r7)
  805a4c:	39c00104 	addi	r7,r7,4
  805a50:	11bffb36 	bltu	r2,r6,805a40 <memset+0x7c>
  805a54:	3807883a 	mov	r3,r7
  805a58:	003fe006 	br	8059dc <memset+0x18>

00805a5c <_Bfree>:
  805a5c:	28000826 	beq	r5,zero,805a80 <_Bfree+0x24>
  805a60:	28800117 	ldw	r2,4(r5)
  805a64:	21001317 	ldw	r4,76(r4)
  805a68:	1085883a 	add	r2,r2,r2
  805a6c:	1085883a 	add	r2,r2,r2
  805a70:	1105883a 	add	r2,r2,r4
  805a74:	10c00017 	ldw	r3,0(r2)
  805a78:	28c00015 	stw	r3,0(r5)
  805a7c:	11400015 	stw	r5,0(r2)
  805a80:	f800283a 	ret

00805a84 <__hi0bits>:
  805a84:	20bfffec 	andhi	r2,r4,65535
  805a88:	10001426 	beq	r2,zero,805adc <__hi0bits+0x58>
  805a8c:	0007883a 	mov	r3,zero
  805a90:	20bfc02c 	andhi	r2,r4,65280
  805a94:	1000021e 	bne	r2,zero,805aa0 <__hi0bits+0x1c>
  805a98:	2008923a 	slli	r4,r4,8
  805a9c:	18c00204 	addi	r3,r3,8
  805aa0:	20bc002c 	andhi	r2,r4,61440
  805aa4:	1000021e 	bne	r2,zero,805ab0 <__hi0bits+0x2c>
  805aa8:	2008913a 	slli	r4,r4,4
  805aac:	18c00104 	addi	r3,r3,4
  805ab0:	20b0002c 	andhi	r2,r4,49152
  805ab4:	1000031e 	bne	r2,zero,805ac4 <__hi0bits+0x40>
  805ab8:	2105883a 	add	r2,r4,r4
  805abc:	18c00084 	addi	r3,r3,2
  805ac0:	1089883a 	add	r4,r2,r2
  805ac4:	20000316 	blt	r4,zero,805ad4 <__hi0bits+0x50>
  805ac8:	2090002c 	andhi	r2,r4,16384
  805acc:	10000626 	beq	r2,zero,805ae8 <__hi0bits+0x64>
  805ad0:	18c00044 	addi	r3,r3,1
  805ad4:	1805883a 	mov	r2,r3
  805ad8:	f800283a 	ret
  805adc:	2008943a 	slli	r4,r4,16
  805ae0:	00c00404 	movi	r3,16
  805ae4:	003fea06 	br	805a90 <__hi0bits+0xc>
  805ae8:	00c00804 	movi	r3,32
  805aec:	1805883a 	mov	r2,r3
  805af0:	f800283a 	ret

00805af4 <__lo0bits>:
  805af4:	20c00017 	ldw	r3,0(r4)
  805af8:	188001cc 	andi	r2,r3,7
  805afc:	10000a26 	beq	r2,zero,805b28 <__lo0bits+0x34>
  805b00:	1880004c 	andi	r2,r3,1
  805b04:	1005003a 	cmpeq	r2,r2,zero
  805b08:	10002126 	beq	r2,zero,805b90 <__lo0bits+0x9c>
  805b0c:	1880008c 	andi	r2,r3,2
  805b10:	1000251e 	bne	r2,zero,805ba8 <__lo0bits+0xb4>
  805b14:	1804d0ba 	srli	r2,r3,2
  805b18:	01400084 	movi	r5,2
  805b1c:	20800015 	stw	r2,0(r4)
  805b20:	2805883a 	mov	r2,r5
  805b24:	f800283a 	ret
  805b28:	18bfffcc 	andi	r2,r3,65535
  805b2c:	10001526 	beq	r2,zero,805b84 <__lo0bits+0x90>
  805b30:	000b883a 	mov	r5,zero
  805b34:	18803fcc 	andi	r2,r3,255
  805b38:	1000021e 	bne	r2,zero,805b44 <__lo0bits+0x50>
  805b3c:	1806d23a 	srli	r3,r3,8
  805b40:	29400204 	addi	r5,r5,8
  805b44:	188003cc 	andi	r2,r3,15
  805b48:	1000021e 	bne	r2,zero,805b54 <__lo0bits+0x60>
  805b4c:	1806d13a 	srli	r3,r3,4
  805b50:	29400104 	addi	r5,r5,4
  805b54:	188000cc 	andi	r2,r3,3
  805b58:	1000021e 	bne	r2,zero,805b64 <__lo0bits+0x70>
  805b5c:	1806d0ba 	srli	r3,r3,2
  805b60:	29400084 	addi	r5,r5,2
  805b64:	1880004c 	andi	r2,r3,1
  805b68:	1000031e 	bne	r2,zero,805b78 <__lo0bits+0x84>
  805b6c:	1806d07a 	srli	r3,r3,1
  805b70:	18000a26 	beq	r3,zero,805b9c <__lo0bits+0xa8>
  805b74:	29400044 	addi	r5,r5,1
  805b78:	2805883a 	mov	r2,r5
  805b7c:	20c00015 	stw	r3,0(r4)
  805b80:	f800283a 	ret
  805b84:	1806d43a 	srli	r3,r3,16
  805b88:	01400404 	movi	r5,16
  805b8c:	003fe906 	br	805b34 <__lo0bits+0x40>
  805b90:	000b883a 	mov	r5,zero
  805b94:	2805883a 	mov	r2,r5
  805b98:	f800283a 	ret
  805b9c:	01400804 	movi	r5,32
  805ba0:	2805883a 	mov	r2,r5
  805ba4:	f800283a 	ret
  805ba8:	1804d07a 	srli	r2,r3,1
  805bac:	01400044 	movi	r5,1
  805bb0:	20800015 	stw	r2,0(r4)
  805bb4:	003fda06 	br	805b20 <__lo0bits+0x2c>

00805bb8 <__mcmp>:
  805bb8:	20800417 	ldw	r2,16(r4)
  805bbc:	28c00417 	ldw	r3,16(r5)
  805bc0:	10cfc83a 	sub	r7,r2,r3
  805bc4:	38000c1e 	bne	r7,zero,805bf8 <__mcmp+0x40>
  805bc8:	18c5883a 	add	r2,r3,r3
  805bcc:	1085883a 	add	r2,r2,r2
  805bd0:	10c00504 	addi	r3,r2,20
  805bd4:	21000504 	addi	r4,r4,20
  805bd8:	28cb883a 	add	r5,r5,r3
  805bdc:	2085883a 	add	r2,r4,r2
  805be0:	10bfff04 	addi	r2,r2,-4
  805be4:	297fff04 	addi	r5,r5,-4
  805be8:	11800017 	ldw	r6,0(r2)
  805bec:	28c00017 	ldw	r3,0(r5)
  805bf0:	30c0031e 	bne	r6,r3,805c00 <__mcmp+0x48>
  805bf4:	20bffa36 	bltu	r4,r2,805be0 <__mcmp+0x28>
  805bf8:	3805883a 	mov	r2,r7
  805bfc:	f800283a 	ret
  805c00:	30c00336 	bltu	r6,r3,805c10 <__mcmp+0x58>
  805c04:	01c00044 	movi	r7,1
  805c08:	3805883a 	mov	r2,r7
  805c0c:	f800283a 	ret
  805c10:	01ffffc4 	movi	r7,-1
  805c14:	003ff806 	br	805bf8 <__mcmp+0x40>

00805c18 <__ulp>:
  805c18:	295ffc2c 	andhi	r5,r5,32752
  805c1c:	013f3034 	movhi	r4,64704
  805c20:	290b883a 	add	r5,r5,r4
  805c24:	0145c83a 	sub	r2,zero,r5
  805c28:	1007d53a 	srai	r3,r2,20
  805c2c:	000d883a 	mov	r6,zero
  805c30:	0140040e 	bge	zero,r5,805c44 <__ulp+0x2c>
  805c34:	280f883a 	mov	r7,r5
  805c38:	3807883a 	mov	r3,r7
  805c3c:	3005883a 	mov	r2,r6
  805c40:	f800283a 	ret
  805c44:	008004c4 	movi	r2,19
  805c48:	193ffb04 	addi	r4,r3,-20
  805c4c:	10c00c0e 	bge	r2,r3,805c80 <__ulp+0x68>
  805c50:	008007c4 	movi	r2,31
  805c54:	1107c83a 	sub	r3,r2,r4
  805c58:	00800784 	movi	r2,30
  805c5c:	01400044 	movi	r5,1
  805c60:	11000216 	blt	r2,r4,805c6c <__ulp+0x54>
  805c64:	00800044 	movi	r2,1
  805c68:	10ca983a 	sll	r5,r2,r3
  805c6c:	000f883a 	mov	r7,zero
  805c70:	280d883a 	mov	r6,r5
  805c74:	3807883a 	mov	r3,r7
  805c78:	3005883a 	mov	r2,r6
  805c7c:	f800283a 	ret
  805c80:	00800234 	movhi	r2,8
  805c84:	10cfd83a 	sra	r7,r2,r3
  805c88:	000d883a 	mov	r6,zero
  805c8c:	3005883a 	mov	r2,r6
  805c90:	3807883a 	mov	r3,r7
  805c94:	f800283a 	ret

00805c98 <__b2d>:
  805c98:	20800417 	ldw	r2,16(r4)
  805c9c:	defff904 	addi	sp,sp,-28
  805ca0:	dd000415 	stw	r20,16(sp)
  805ca4:	1085883a 	add	r2,r2,r2
  805ca8:	25000504 	addi	r20,r4,20
  805cac:	1085883a 	add	r2,r2,r2
  805cb0:	dc000015 	stw	r16,0(sp)
  805cb4:	a0a1883a 	add	r16,r20,r2
  805cb8:	dd400515 	stw	r21,20(sp)
  805cbc:	857fff17 	ldw	r21,-4(r16)
  805cc0:	dc400115 	stw	r17,4(sp)
  805cc4:	dfc00615 	stw	ra,24(sp)
  805cc8:	a809883a 	mov	r4,r21
  805ccc:	2823883a 	mov	r17,r5
  805cd0:	dcc00315 	stw	r19,12(sp)
  805cd4:	dc800215 	stw	r18,8(sp)
  805cd8:	0805a840 	call	805a84 <__hi0bits>
  805cdc:	100b883a 	mov	r5,r2
  805ce0:	00800804 	movi	r2,32
  805ce4:	1145c83a 	sub	r2,r2,r5
  805ce8:	88800015 	stw	r2,0(r17)
  805cec:	00800284 	movi	r2,10
  805cf0:	80ffff04 	addi	r3,r16,-4
  805cf4:	11401416 	blt	r2,r5,805d48 <__b2d+0xb0>
  805cf8:	008002c4 	movi	r2,11
  805cfc:	1149c83a 	sub	r4,r2,r5
  805d00:	a0c02736 	bltu	r20,r3,805da0 <__b2d+0x108>
  805d04:	000d883a 	mov	r6,zero
  805d08:	28800544 	addi	r2,r5,21
  805d0c:	a906d83a 	srl	r3,r21,r4
  805d10:	a884983a 	sll	r2,r21,r2
  805d14:	1ccffc34 	orhi	r19,r3,16368
  805d18:	11a4b03a 	or	r18,r2,r6
  805d1c:	9005883a 	mov	r2,r18
  805d20:	9807883a 	mov	r3,r19
  805d24:	dfc00617 	ldw	ra,24(sp)
  805d28:	dd400517 	ldw	r21,20(sp)
  805d2c:	dd000417 	ldw	r20,16(sp)
  805d30:	dcc00317 	ldw	r19,12(sp)
  805d34:	dc800217 	ldw	r18,8(sp)
  805d38:	dc400117 	ldw	r17,4(sp)
  805d3c:	dc000017 	ldw	r16,0(sp)
  805d40:	dec00704 	addi	sp,sp,28
  805d44:	f800283a 	ret
  805d48:	a0c00e36 	bltu	r20,r3,805d84 <__b2d+0xec>
  805d4c:	293ffd44 	addi	r4,r5,-11
  805d50:	000d883a 	mov	r6,zero
  805d54:	20000f26 	beq	r4,zero,805d94 <__b2d+0xfc>
  805d58:	00800804 	movi	r2,32
  805d5c:	110bc83a 	sub	r5,r2,r4
  805d60:	a0c01236 	bltu	r20,r3,805dac <__b2d+0x114>
  805d64:	000f883a 	mov	r7,zero
  805d68:	a904983a 	sll	r2,r21,r4
  805d6c:	3146d83a 	srl	r3,r6,r5
  805d70:	3108983a 	sll	r4,r6,r4
  805d74:	108ffc34 	orhi	r2,r2,16368
  805d78:	18a6b03a 	or	r19,r3,r2
  805d7c:	3924b03a 	or	r18,r7,r4
  805d80:	003fe606 	br	805d1c <__b2d+0x84>
  805d84:	293ffd44 	addi	r4,r5,-11
  805d88:	81bffe17 	ldw	r6,-8(r16)
  805d8c:	80fffe04 	addi	r3,r16,-8
  805d90:	203ff11e 	bne	r4,zero,805d58 <__b2d+0xc0>
  805d94:	accffc34 	orhi	r19,r21,16368
  805d98:	3025883a 	mov	r18,r6
  805d9c:	003fdf06 	br	805d1c <__b2d+0x84>
  805da0:	18bfff17 	ldw	r2,-4(r3)
  805da4:	110cd83a 	srl	r6,r2,r4
  805da8:	003fd706 	br	805d08 <__b2d+0x70>
  805dac:	18bfff17 	ldw	r2,-4(r3)
  805db0:	114ed83a 	srl	r7,r2,r5
  805db4:	003fec06 	br	805d68 <__b2d+0xd0>

00805db8 <__ratio>:
  805db8:	defff904 	addi	sp,sp,-28
  805dbc:	dc400215 	stw	r17,8(sp)
  805dc0:	2823883a 	mov	r17,r5
  805dc4:	d80b883a 	mov	r5,sp
  805dc8:	dfc00615 	stw	ra,24(sp)
  805dcc:	dd000515 	stw	r20,20(sp)
  805dd0:	dcc00415 	stw	r19,16(sp)
  805dd4:	dc800315 	stw	r18,12(sp)
  805dd8:	2025883a 	mov	r18,r4
  805ddc:	0805c980 	call	805c98 <__b2d>
  805de0:	8809883a 	mov	r4,r17
  805de4:	d9400104 	addi	r5,sp,4
  805de8:	1027883a 	mov	r19,r2
  805dec:	1829883a 	mov	r20,r3
  805df0:	0805c980 	call	805c98 <__b2d>
  805df4:	89000417 	ldw	r4,16(r17)
  805df8:	91c00417 	ldw	r7,16(r18)
  805dfc:	d9800117 	ldw	r6,4(sp)
  805e00:	180b883a 	mov	r5,r3
  805e04:	390fc83a 	sub	r7,r7,r4
  805e08:	1009883a 	mov	r4,r2
  805e0c:	d8800017 	ldw	r2,0(sp)
  805e10:	380e917a 	slli	r7,r7,5
  805e14:	2011883a 	mov	r8,r4
  805e18:	1185c83a 	sub	r2,r2,r6
  805e1c:	11c5883a 	add	r2,r2,r7
  805e20:	1006953a 	slli	r3,r2,20
  805e24:	2813883a 	mov	r9,r5
  805e28:	00800d0e 	bge	zero,r2,805e60 <__ratio+0xa8>
  805e2c:	1d29883a 	add	r20,r3,r20
  805e30:	a00b883a 	mov	r5,r20
  805e34:	480f883a 	mov	r7,r9
  805e38:	9809883a 	mov	r4,r19
  805e3c:	400d883a 	mov	r6,r8
  805e40:	0808c140 	call	808c14 <__divdf3>
  805e44:	dfc00617 	ldw	ra,24(sp)
  805e48:	dd000517 	ldw	r20,20(sp)
  805e4c:	dcc00417 	ldw	r19,16(sp)
  805e50:	dc800317 	ldw	r18,12(sp)
  805e54:	dc400217 	ldw	r17,8(sp)
  805e58:	dec00704 	addi	sp,sp,28
  805e5c:	f800283a 	ret
  805e60:	28d3c83a 	sub	r9,r5,r3
  805e64:	003ff206 	br	805e30 <__ratio+0x78>

00805e68 <_mprec_log10>:
  805e68:	defffe04 	addi	sp,sp,-8
  805e6c:	008005c4 	movi	r2,23
  805e70:	dc000015 	stw	r16,0(sp)
  805e74:	dfc00115 	stw	ra,4(sp)
  805e78:	2021883a 	mov	r16,r4
  805e7c:	11000c16 	blt	r2,r4,805eb0 <_mprec_log10+0x48>
  805e80:	200490fa 	slli	r2,r4,3
  805e84:	00c02074 	movhi	r3,129
  805e88:	18d6a604 	addi	r3,r3,23192
  805e8c:	10c5883a 	add	r2,r2,r3
  805e90:	12400117 	ldw	r9,4(r2)
  805e94:	12000017 	ldw	r8,0(r2)
  805e98:	4807883a 	mov	r3,r9
  805e9c:	4005883a 	mov	r2,r8
  805ea0:	dfc00117 	ldw	ra,4(sp)
  805ea4:	dc000017 	ldw	r16,0(sp)
  805ea8:	dec00204 	addi	sp,sp,8
  805eac:	f800283a 	ret
  805eb0:	0011883a 	mov	r8,zero
  805eb4:	024ffc34 	movhi	r9,16368
  805eb8:	0005883a 	mov	r2,zero
  805ebc:	00d00934 	movhi	r3,16420
  805ec0:	480b883a 	mov	r5,r9
  805ec4:	4009883a 	mov	r4,r8
  805ec8:	180f883a 	mov	r7,r3
  805ecc:	100d883a 	mov	r6,r2
  805ed0:	08088500 	call	808850 <__muldf3>
  805ed4:	843fffc4 	addi	r16,r16,-1
  805ed8:	1011883a 	mov	r8,r2
  805edc:	1813883a 	mov	r9,r3
  805ee0:	803ff51e 	bne	r16,zero,805eb8 <_mprec_log10+0x50>
  805ee4:	4005883a 	mov	r2,r8
  805ee8:	4807883a 	mov	r3,r9
  805eec:	dfc00117 	ldw	ra,4(sp)
  805ef0:	dc000017 	ldw	r16,0(sp)
  805ef4:	dec00204 	addi	sp,sp,8
  805ef8:	f800283a 	ret

00805efc <__copybits>:
  805efc:	297fffc4 	addi	r5,r5,-1
  805f00:	30800417 	ldw	r2,16(r6)
  805f04:	280bd17a 	srai	r5,r5,5
  805f08:	31800504 	addi	r6,r6,20
  805f0c:	1085883a 	add	r2,r2,r2
  805f10:	294b883a 	add	r5,r5,r5
  805f14:	294b883a 	add	r5,r5,r5
  805f18:	1085883a 	add	r2,r2,r2
  805f1c:	290b883a 	add	r5,r5,r4
  805f20:	3087883a 	add	r3,r6,r2
  805f24:	29400104 	addi	r5,r5,4
  805f28:	30c0052e 	bgeu	r6,r3,805f40 <__copybits+0x44>
  805f2c:	30800017 	ldw	r2,0(r6)
  805f30:	31800104 	addi	r6,r6,4
  805f34:	20800015 	stw	r2,0(r4)
  805f38:	21000104 	addi	r4,r4,4
  805f3c:	30fffb36 	bltu	r6,r3,805f2c <__copybits+0x30>
  805f40:	2140032e 	bgeu	r4,r5,805f50 <__copybits+0x54>
  805f44:	20000015 	stw	zero,0(r4)
  805f48:	21000104 	addi	r4,r4,4
  805f4c:	217ffd36 	bltu	r4,r5,805f44 <__copybits+0x48>
  805f50:	f800283a 	ret

00805f54 <__any_on>:
  805f54:	20800417 	ldw	r2,16(r4)
  805f58:	2807d17a 	srai	r3,r5,5
  805f5c:	21000504 	addi	r4,r4,20
  805f60:	10c00d0e 	bge	r2,r3,805f98 <__any_on+0x44>
  805f64:	1085883a 	add	r2,r2,r2
  805f68:	1085883a 	add	r2,r2,r2
  805f6c:	208d883a 	add	r6,r4,r2
  805f70:	2180182e 	bgeu	r4,r6,805fd4 <__any_on+0x80>
  805f74:	30bfff17 	ldw	r2,-4(r6)
  805f78:	30ffff04 	addi	r3,r6,-4
  805f7c:	1000041e 	bne	r2,zero,805f90 <__any_on+0x3c>
  805f80:	20c0142e 	bgeu	r4,r3,805fd4 <__any_on+0x80>
  805f84:	18ffff04 	addi	r3,r3,-4
  805f88:	18800017 	ldw	r2,0(r3)
  805f8c:	103ffc26 	beq	r2,zero,805f80 <__any_on+0x2c>
  805f90:	00800044 	movi	r2,1
  805f94:	f800283a 	ret
  805f98:	18800a0e 	bge	r3,r2,805fc4 <__any_on+0x70>
  805f9c:	294007cc 	andi	r5,r5,31
  805fa0:	28000826 	beq	r5,zero,805fc4 <__any_on+0x70>
  805fa4:	18c5883a 	add	r2,r3,r3
  805fa8:	1085883a 	add	r2,r2,r2
  805fac:	208d883a 	add	r6,r4,r2
  805fb0:	30c00017 	ldw	r3,0(r6)
  805fb4:	1944d83a 	srl	r2,r3,r5
  805fb8:	1144983a 	sll	r2,r2,r5
  805fbc:	18bff41e 	bne	r3,r2,805f90 <__any_on+0x3c>
  805fc0:	003feb06 	br	805f70 <__any_on+0x1c>
  805fc4:	18c5883a 	add	r2,r3,r3
  805fc8:	1085883a 	add	r2,r2,r2
  805fcc:	208d883a 	add	r6,r4,r2
  805fd0:	003fe706 	br	805f70 <__any_on+0x1c>
  805fd4:	0005883a 	mov	r2,zero
  805fd8:	f800283a 	ret

00805fdc <_Balloc>:
  805fdc:	20c01317 	ldw	r3,76(r4)
  805fe0:	defffb04 	addi	sp,sp,-20
  805fe4:	dcc00315 	stw	r19,12(sp)
  805fe8:	dc800215 	stw	r18,8(sp)
  805fec:	dfc00415 	stw	ra,16(sp)
  805ff0:	2825883a 	mov	r18,r5
  805ff4:	dc400115 	stw	r17,4(sp)
  805ff8:	dc000015 	stw	r16,0(sp)
  805ffc:	2027883a 	mov	r19,r4
  806000:	01800404 	movi	r6,16
  806004:	01400104 	movi	r5,4
  806008:	18001726 	beq	r3,zero,806068 <_Balloc+0x8c>
  80600c:	01400044 	movi	r5,1
  806010:	9485883a 	add	r2,r18,r18
  806014:	2ca2983a 	sll	r17,r5,r18
  806018:	1085883a 	add	r2,r2,r2
  80601c:	10c7883a 	add	r3,r2,r3
  806020:	1c000017 	ldw	r16,0(r3)
  806024:	8c4d883a 	add	r6,r17,r17
  806028:	318d883a 	add	r6,r6,r6
  80602c:	9809883a 	mov	r4,r19
  806030:	31800504 	addi	r6,r6,20
  806034:	80001226 	beq	r16,zero,806080 <_Balloc+0xa4>
  806038:	80800017 	ldw	r2,0(r16)
  80603c:	18800015 	stw	r2,0(r3)
  806040:	80000415 	stw	zero,16(r16)
  806044:	80000315 	stw	zero,12(r16)
  806048:	8005883a 	mov	r2,r16
  80604c:	dfc00417 	ldw	ra,16(sp)
  806050:	dcc00317 	ldw	r19,12(sp)
  806054:	dc800217 	ldw	r18,8(sp)
  806058:	dc400117 	ldw	r17,4(sp)
  80605c:	dc000017 	ldw	r16,0(sp)
  806060:	dec00504 	addi	sp,sp,20
  806064:	f800283a 	ret
  806068:	08073a40 	call	8073a4 <_calloc_r>
  80606c:	1007883a 	mov	r3,r2
  806070:	0021883a 	mov	r16,zero
  806074:	98801315 	stw	r2,76(r19)
  806078:	103fe41e 	bne	r2,zero,80600c <_Balloc+0x30>
  80607c:	003ff206 	br	806048 <_Balloc+0x6c>
  806080:	08073a40 	call	8073a4 <_calloc_r>
  806084:	103ff026 	beq	r2,zero,806048 <_Balloc+0x6c>
  806088:	1021883a 	mov	r16,r2
  80608c:	14800115 	stw	r18,4(r2)
  806090:	14400215 	stw	r17,8(r2)
  806094:	003fea06 	br	806040 <_Balloc+0x64>

00806098 <__d2b>:
  806098:	defff504 	addi	sp,sp,-44
  80609c:	dcc00515 	stw	r19,20(sp)
  8060a0:	04c00044 	movi	r19,1
  8060a4:	dc000215 	stw	r16,8(sp)
  8060a8:	2821883a 	mov	r16,r5
  8060ac:	980b883a 	mov	r5,r19
  8060b0:	ddc00915 	stw	r23,36(sp)
  8060b4:	dd800815 	stw	r22,32(sp)
  8060b8:	dd400715 	stw	r21,28(sp)
  8060bc:	dd000615 	stw	r20,24(sp)
  8060c0:	dc800415 	stw	r18,16(sp)
  8060c4:	dc400315 	stw	r17,12(sp)
  8060c8:	dfc00a15 	stw	ra,40(sp)
  8060cc:	3023883a 	mov	r17,r6
  8060d0:	382d883a 	mov	r22,r7
  8060d4:	ddc00b17 	ldw	r23,44(sp)
  8060d8:	0805fdc0 	call	805fdc <_Balloc>
  8060dc:	1025883a 	mov	r18,r2
  8060e0:	00a00034 	movhi	r2,32768
  8060e4:	10bfffc4 	addi	r2,r2,-1
  8060e8:	8888703a 	and	r4,r17,r2
  8060ec:	202ad53a 	srli	r21,r4,20
  8060f0:	00800434 	movhi	r2,16
  8060f4:	10bfffc4 	addi	r2,r2,-1
  8060f8:	8886703a 	and	r3,r17,r2
  8060fc:	a829003a 	cmpeq	r20,r21,zero
  806100:	800b883a 	mov	r5,r16
  806104:	d8c00115 	stw	r3,4(sp)
  806108:	94000504 	addi	r16,r18,20
  80610c:	a000021e 	bne	r20,zero,806118 <__d2b+0x80>
  806110:	18c00434 	orhi	r3,r3,16
  806114:	d8c00115 	stw	r3,4(sp)
  806118:	28002726 	beq	r5,zero,8061b8 <__d2b+0x120>
  80611c:	d809883a 	mov	r4,sp
  806120:	d9400015 	stw	r5,0(sp)
  806124:	0805af40 	call	805af4 <__lo0bits>
  806128:	100d883a 	mov	r6,r2
  80612c:	10003526 	beq	r2,zero,806204 <__d2b+0x16c>
  806130:	d8c00117 	ldw	r3,4(sp)
  806134:	00800804 	movi	r2,32
  806138:	1185c83a 	sub	r2,r2,r6
  80613c:	d9000017 	ldw	r4,0(sp)
  806140:	1886983a 	sll	r3,r3,r2
  806144:	1906b03a 	or	r3,r3,r4
  806148:	90c00515 	stw	r3,20(r18)
  80614c:	d8c00117 	ldw	r3,4(sp)
  806150:	1986d83a 	srl	r3,r3,r6
  806154:	d8c00115 	stw	r3,4(sp)
  806158:	180b003a 	cmpeq	r5,r3,zero
  80615c:	00800084 	movi	r2,2
  806160:	114bc83a 	sub	r5,r2,r5
  806164:	80c00115 	stw	r3,4(r16)
  806168:	91400415 	stw	r5,16(r18)
  80616c:	a0001a1e 	bne	r20,zero,8061d8 <__d2b+0x140>
  806170:	3545883a 	add	r2,r6,r21
  806174:	10bef344 	addi	r2,r2,-1075
  806178:	00c00d44 	movi	r3,53
  80617c:	b0800015 	stw	r2,0(r22)
  806180:	1987c83a 	sub	r3,r3,r6
  806184:	b8c00015 	stw	r3,0(r23)
  806188:	9005883a 	mov	r2,r18
  80618c:	dfc00a17 	ldw	ra,40(sp)
  806190:	ddc00917 	ldw	r23,36(sp)
  806194:	dd800817 	ldw	r22,32(sp)
  806198:	dd400717 	ldw	r21,28(sp)
  80619c:	dd000617 	ldw	r20,24(sp)
  8061a0:	dcc00517 	ldw	r19,20(sp)
  8061a4:	dc800417 	ldw	r18,16(sp)
  8061a8:	dc400317 	ldw	r17,12(sp)
  8061ac:	dc000217 	ldw	r16,8(sp)
  8061b0:	dec00b04 	addi	sp,sp,44
  8061b4:	f800283a 	ret
  8061b8:	d9000104 	addi	r4,sp,4
  8061bc:	0805af40 	call	805af4 <__lo0bits>
  8061c0:	11800804 	addi	r6,r2,32
  8061c4:	d8800117 	ldw	r2,4(sp)
  8061c8:	94c00415 	stw	r19,16(r18)
  8061cc:	980b883a 	mov	r5,r19
  8061d0:	90800515 	stw	r2,20(r18)
  8061d4:	a03fe626 	beq	r20,zero,806170 <__d2b+0xd8>
  8061d8:	2945883a 	add	r2,r5,r5
  8061dc:	1085883a 	add	r2,r2,r2
  8061e0:	1405883a 	add	r2,r2,r16
  8061e4:	113fff17 	ldw	r4,-4(r2)
  8061e8:	30fef384 	addi	r3,r6,-1074
  8061ec:	2820917a 	slli	r16,r5,5
  8061f0:	b0c00015 	stw	r3,0(r22)
  8061f4:	0805a840 	call	805a84 <__hi0bits>
  8061f8:	80a1c83a 	sub	r16,r16,r2
  8061fc:	bc000015 	stw	r16,0(r23)
  806200:	003fe106 	br	806188 <__d2b+0xf0>
  806204:	d8800017 	ldw	r2,0(sp)
  806208:	90800515 	stw	r2,20(r18)
  80620c:	d8c00117 	ldw	r3,4(sp)
  806210:	003fd106 	br	806158 <__d2b+0xc0>

00806214 <__mdiff>:
  806214:	defffb04 	addi	sp,sp,-20
  806218:	dc000015 	stw	r16,0(sp)
  80621c:	2821883a 	mov	r16,r5
  806220:	dc800215 	stw	r18,8(sp)
  806224:	300b883a 	mov	r5,r6
  806228:	2025883a 	mov	r18,r4
  80622c:	8009883a 	mov	r4,r16
  806230:	dc400115 	stw	r17,4(sp)
  806234:	dfc00415 	stw	ra,16(sp)
  806238:	dcc00315 	stw	r19,12(sp)
  80623c:	3023883a 	mov	r17,r6
  806240:	0805bb80 	call	805bb8 <__mcmp>
  806244:	10004226 	beq	r2,zero,806350 <__mdiff+0x13c>
  806248:	10005016 	blt	r2,zero,80638c <__mdiff+0x178>
  80624c:	0027883a 	mov	r19,zero
  806250:	81400117 	ldw	r5,4(r16)
  806254:	9009883a 	mov	r4,r18
  806258:	0805fdc0 	call	805fdc <_Balloc>
  80625c:	1019883a 	mov	r12,r2
  806260:	82800417 	ldw	r10,16(r16)
  806264:	88800417 	ldw	r2,16(r17)
  806268:	81800504 	addi	r6,r16,20
  80626c:	5287883a 	add	r3,r10,r10
  806270:	1085883a 	add	r2,r2,r2
  806274:	18c7883a 	add	r3,r3,r3
  806278:	1085883a 	add	r2,r2,r2
  80627c:	8a000504 	addi	r8,r17,20
  806280:	64c00315 	stw	r19,12(r12)
  806284:	30db883a 	add	r13,r6,r3
  806288:	4097883a 	add	r11,r8,r2
  80628c:	61c00504 	addi	r7,r12,20
  806290:	0013883a 	mov	r9,zero
  806294:	31000017 	ldw	r4,0(r6)
  806298:	41400017 	ldw	r5,0(r8)
  80629c:	42000104 	addi	r8,r8,4
  8062a0:	20bfffcc 	andi	r2,r4,65535
  8062a4:	28ffffcc 	andi	r3,r5,65535
  8062a8:	10c5c83a 	sub	r2,r2,r3
  8062ac:	1245883a 	add	r2,r2,r9
  8062b0:	2008d43a 	srli	r4,r4,16
  8062b4:	280ad43a 	srli	r5,r5,16
  8062b8:	1007d43a 	srai	r3,r2,16
  8062bc:	3880000d 	sth	r2,0(r7)
  8062c0:	2149c83a 	sub	r4,r4,r5
  8062c4:	20c9883a 	add	r4,r4,r3
  8062c8:	3900008d 	sth	r4,2(r7)
  8062cc:	31800104 	addi	r6,r6,4
  8062d0:	39c00104 	addi	r7,r7,4
  8062d4:	2013d43a 	srai	r9,r4,16
  8062d8:	42ffee36 	bltu	r8,r11,806294 <__mdiff+0x80>
  8062dc:	33400c2e 	bgeu	r6,r13,806310 <__mdiff+0xfc>
  8062e0:	30800017 	ldw	r2,0(r6)
  8062e4:	31800104 	addi	r6,r6,4
  8062e8:	10ffffcc 	andi	r3,r2,65535
  8062ec:	1a47883a 	add	r3,r3,r9
  8062f0:	1004d43a 	srli	r2,r2,16
  8062f4:	1809d43a 	srai	r4,r3,16
  8062f8:	38c0000d 	sth	r3,0(r7)
  8062fc:	1105883a 	add	r2,r2,r4
  806300:	3880008d 	sth	r2,2(r7)
  806304:	1013d43a 	srai	r9,r2,16
  806308:	39c00104 	addi	r7,r7,4
  80630c:	337ff436 	bltu	r6,r13,8062e0 <__mdiff+0xcc>
  806310:	38bfff17 	ldw	r2,-4(r7)
  806314:	38ffff04 	addi	r3,r7,-4
  806318:	1000041e 	bne	r2,zero,80632c <__mdiff+0x118>
  80631c:	18ffff04 	addi	r3,r3,-4
  806320:	18800017 	ldw	r2,0(r3)
  806324:	52bfffc4 	addi	r10,r10,-1
  806328:	103ffc26 	beq	r2,zero,80631c <__mdiff+0x108>
  80632c:	6005883a 	mov	r2,r12
  806330:	62800415 	stw	r10,16(r12)
  806334:	dfc00417 	ldw	ra,16(sp)
  806338:	dcc00317 	ldw	r19,12(sp)
  80633c:	dc800217 	ldw	r18,8(sp)
  806340:	dc400117 	ldw	r17,4(sp)
  806344:	dc000017 	ldw	r16,0(sp)
  806348:	dec00504 	addi	sp,sp,20
  80634c:	f800283a 	ret
  806350:	9009883a 	mov	r4,r18
  806354:	000b883a 	mov	r5,zero
  806358:	0805fdc0 	call	805fdc <_Balloc>
  80635c:	1019883a 	mov	r12,r2
  806360:	00800044 	movi	r2,1
  806364:	60800415 	stw	r2,16(r12)
  806368:	6005883a 	mov	r2,r12
  80636c:	60000515 	stw	zero,20(r12)
  806370:	dfc00417 	ldw	ra,16(sp)
  806374:	dcc00317 	ldw	r19,12(sp)
  806378:	dc800217 	ldw	r18,8(sp)
  80637c:	dc400117 	ldw	r17,4(sp)
  806380:	dc000017 	ldw	r16,0(sp)
  806384:	dec00504 	addi	sp,sp,20
  806388:	f800283a 	ret
  80638c:	880d883a 	mov	r6,r17
  806390:	04c00044 	movi	r19,1
  806394:	8023883a 	mov	r17,r16
  806398:	3021883a 	mov	r16,r6
  80639c:	003fac06 	br	806250 <__mdiff+0x3c>

008063a0 <__lshift>:
  8063a0:	defff904 	addi	sp,sp,-28
  8063a4:	28800417 	ldw	r2,16(r5)
  8063a8:	dc000015 	stw	r16,0(sp)
  8063ac:	3021d17a 	srai	r16,r6,5
  8063b0:	28c00217 	ldw	r3,8(r5)
  8063b4:	10800044 	addi	r2,r2,1
  8063b8:	dc400115 	stw	r17,4(sp)
  8063bc:	80a3883a 	add	r17,r16,r2
  8063c0:	dd400515 	stw	r21,20(sp)
  8063c4:	dd000415 	stw	r20,16(sp)
  8063c8:	dc800215 	stw	r18,8(sp)
  8063cc:	dfc00615 	stw	ra,24(sp)
  8063d0:	2825883a 	mov	r18,r5
  8063d4:	dcc00315 	stw	r19,12(sp)
  8063d8:	3029883a 	mov	r20,r6
  8063dc:	202b883a 	mov	r21,r4
  8063e0:	29400117 	ldw	r5,4(r5)
  8063e4:	1c40030e 	bge	r3,r17,8063f4 <__lshift+0x54>
  8063e8:	18c7883a 	add	r3,r3,r3
  8063ec:	29400044 	addi	r5,r5,1
  8063f0:	1c7ffd16 	blt	r3,r17,8063e8 <__lshift+0x48>
  8063f4:	a809883a 	mov	r4,r21
  8063f8:	0805fdc0 	call	805fdc <_Balloc>
  8063fc:	1027883a 	mov	r19,r2
  806400:	11400504 	addi	r5,r2,20
  806404:	0400090e 	bge	zero,r16,80642c <__lshift+0x8c>
  806408:	2805883a 	mov	r2,r5
  80640c:	0007883a 	mov	r3,zero
  806410:	18c00044 	addi	r3,r3,1
  806414:	10000015 	stw	zero,0(r2)
  806418:	10800104 	addi	r2,r2,4
  80641c:	80fffc1e 	bne	r16,r3,806410 <__lshift+0x70>
  806420:	8405883a 	add	r2,r16,r16
  806424:	1085883a 	add	r2,r2,r2
  806428:	288b883a 	add	r5,r5,r2
  80642c:	90800417 	ldw	r2,16(r18)
  806430:	91000504 	addi	r4,r18,20
  806434:	a18007cc 	andi	r6,r20,31
  806438:	1085883a 	add	r2,r2,r2
  80643c:	1085883a 	add	r2,r2,r2
  806440:	208f883a 	add	r7,r4,r2
  806444:	30001e26 	beq	r6,zero,8064c0 <__lshift+0x120>
  806448:	00800804 	movi	r2,32
  80644c:	1191c83a 	sub	r8,r2,r6
  806450:	0007883a 	mov	r3,zero
  806454:	20800017 	ldw	r2,0(r4)
  806458:	1184983a 	sll	r2,r2,r6
  80645c:	1884b03a 	or	r2,r3,r2
  806460:	28800015 	stw	r2,0(r5)
  806464:	20c00017 	ldw	r3,0(r4)
  806468:	21000104 	addi	r4,r4,4
  80646c:	29400104 	addi	r5,r5,4
  806470:	1a06d83a 	srl	r3,r3,r8
  806474:	21fff736 	bltu	r4,r7,806454 <__lshift+0xb4>
  806478:	28c00015 	stw	r3,0(r5)
  80647c:	18000126 	beq	r3,zero,806484 <__lshift+0xe4>
  806480:	8c400044 	addi	r17,r17,1
  806484:	88bfffc4 	addi	r2,r17,-1
  806488:	98800415 	stw	r2,16(r19)
  80648c:	a809883a 	mov	r4,r21
  806490:	900b883a 	mov	r5,r18
  806494:	0805a5c0 	call	805a5c <_Bfree>
  806498:	9805883a 	mov	r2,r19
  80649c:	dfc00617 	ldw	ra,24(sp)
  8064a0:	dd400517 	ldw	r21,20(sp)
  8064a4:	dd000417 	ldw	r20,16(sp)
  8064a8:	dcc00317 	ldw	r19,12(sp)
  8064ac:	dc800217 	ldw	r18,8(sp)
  8064b0:	dc400117 	ldw	r17,4(sp)
  8064b4:	dc000017 	ldw	r16,0(sp)
  8064b8:	dec00704 	addi	sp,sp,28
  8064bc:	f800283a 	ret
  8064c0:	20800017 	ldw	r2,0(r4)
  8064c4:	21000104 	addi	r4,r4,4
  8064c8:	28800015 	stw	r2,0(r5)
  8064cc:	29400104 	addi	r5,r5,4
  8064d0:	21ffec2e 	bgeu	r4,r7,806484 <__lshift+0xe4>
  8064d4:	20800017 	ldw	r2,0(r4)
  8064d8:	21000104 	addi	r4,r4,4
  8064dc:	28800015 	stw	r2,0(r5)
  8064e0:	29400104 	addi	r5,r5,4
  8064e4:	21fff636 	bltu	r4,r7,8064c0 <__lshift+0x120>
  8064e8:	003fe606 	br	806484 <__lshift+0xe4>

008064ec <__multiply>:
  8064ec:	defff904 	addi	sp,sp,-28
  8064f0:	dcc00315 	stw	r19,12(sp)
  8064f4:	dc800215 	stw	r18,8(sp)
  8064f8:	2cc00417 	ldw	r19,16(r5)
  8064fc:	34800417 	ldw	r18,16(r6)
  806500:	dd000415 	stw	r20,16(sp)
  806504:	dc400115 	stw	r17,4(sp)
  806508:	dfc00615 	stw	ra,24(sp)
  80650c:	dd400515 	stw	r21,20(sp)
  806510:	dc000015 	stw	r16,0(sp)
  806514:	2823883a 	mov	r17,r5
  806518:	3029883a 	mov	r20,r6
  80651c:	9c80040e 	bge	r19,r18,806530 <__multiply+0x44>
  806520:	9027883a 	mov	r19,r18
  806524:	2c800417 	ldw	r18,16(r5)
  806528:	2829883a 	mov	r20,r5
  80652c:	3023883a 	mov	r17,r6
  806530:	88800217 	ldw	r2,8(r17)
  806534:	9ca1883a 	add	r16,r19,r18
  806538:	89400117 	ldw	r5,4(r17)
  80653c:	1400010e 	bge	r2,r16,806544 <__multiply+0x58>
  806540:	29400044 	addi	r5,r5,1
  806544:	0805fdc0 	call	805fdc <_Balloc>
  806548:	102b883a 	mov	r21,r2
  80654c:	8405883a 	add	r2,r16,r16
  806550:	1085883a 	add	r2,r2,r2
  806554:	a9000504 	addi	r4,r21,20
  806558:	209d883a 	add	r14,r4,r2
  80655c:	2380042e 	bgeu	r4,r14,806570 <__multiply+0x84>
  806560:	2005883a 	mov	r2,r4
  806564:	10000015 	stw	zero,0(r2)
  806568:	10800104 	addi	r2,r2,4
  80656c:	13bffd36 	bltu	r2,r14,806564 <__multiply+0x78>
  806570:	9485883a 	add	r2,r18,r18
  806574:	9cc7883a 	add	r3,r19,r19
  806578:	a1800504 	addi	r6,r20,20
  80657c:	1085883a 	add	r2,r2,r2
  806580:	8b400504 	addi	r13,r17,20
  806584:	18c7883a 	add	r3,r3,r3
  806588:	309f883a 	add	r15,r6,r2
  80658c:	68d7883a 	add	r11,r13,r3
  806590:	33c03b2e 	bgeu	r6,r15,806680 <__multiply+0x194>
  806594:	2019883a 	mov	r12,r4
  806598:	30800017 	ldw	r2,0(r6)
  80659c:	127fffcc 	andi	r9,r2,65535
  8065a0:	48001826 	beq	r9,zero,806604 <__multiply+0x118>
  8065a4:	6811883a 	mov	r8,r13
  8065a8:	600f883a 	mov	r7,r12
  8065ac:	0015883a 	mov	r10,zero
  8065b0:	40c00017 	ldw	r3,0(r8)
  8065b4:	39400017 	ldw	r5,0(r7)
  8065b8:	42000104 	addi	r8,r8,4
  8065bc:	193fffcc 	andi	r4,r3,65535
  8065c0:	4909383a 	mul	r4,r9,r4
  8065c4:	1806d43a 	srli	r3,r3,16
  8065c8:	28bfffcc 	andi	r2,r5,65535
  8065cc:	5085883a 	add	r2,r10,r2
  8065d0:	2089883a 	add	r4,r4,r2
  8065d4:	48c7383a 	mul	r3,r9,r3
  8065d8:	280ad43a 	srli	r5,r5,16
  8065dc:	2004d43a 	srli	r2,r4,16
  8065e0:	3900000d 	sth	r4,0(r7)
  8065e4:	1947883a 	add	r3,r3,r5
  8065e8:	10c5883a 	add	r2,r2,r3
  8065ec:	3880008d 	sth	r2,2(r7)
  8065f0:	1014d43a 	srli	r10,r2,16
  8065f4:	39c00104 	addi	r7,r7,4
  8065f8:	42ffed36 	bltu	r8,r11,8065b0 <__multiply+0xc4>
  8065fc:	3a800015 	stw	r10,0(r7)
  806600:	30800017 	ldw	r2,0(r6)
  806604:	1012d43a 	srli	r9,r2,16
  806608:	48001926 	beq	r9,zero,806670 <__multiply+0x184>
  80660c:	60800017 	ldw	r2,0(r12)
  806610:	6811883a 	mov	r8,r13
  806614:	600f883a 	mov	r7,r12
  806618:	0015883a 	mov	r10,zero
  80661c:	100b883a 	mov	r5,r2
  806620:	41000017 	ldw	r4,0(r8)
  806624:	2806d43a 	srli	r3,r5,16
  806628:	3880000d 	sth	r2,0(r7)
  80662c:	20bfffcc 	andi	r2,r4,65535
  806630:	4885383a 	mul	r2,r9,r2
  806634:	50c7883a 	add	r3,r10,r3
  806638:	2008d43a 	srli	r4,r4,16
  80663c:	10c5883a 	add	r2,r2,r3
  806640:	3880008d 	sth	r2,2(r7)
  806644:	39c00104 	addi	r7,r7,4
  806648:	39400017 	ldw	r5,0(r7)
  80664c:	4909383a 	mul	r4,r9,r4
  806650:	1004d43a 	srli	r2,r2,16
  806654:	28ffffcc 	andi	r3,r5,65535
  806658:	20c9883a 	add	r4,r4,r3
  80665c:	1105883a 	add	r2,r2,r4
  806660:	42000104 	addi	r8,r8,4
  806664:	1014d43a 	srli	r10,r2,16
  806668:	42ffed36 	bltu	r8,r11,806620 <__multiply+0x134>
  80666c:	38800015 	stw	r2,0(r7)
  806670:	31800104 	addi	r6,r6,4
  806674:	33c0022e 	bgeu	r6,r15,806680 <__multiply+0x194>
  806678:	63000104 	addi	r12,r12,4
  80667c:	003fc606 	br	806598 <__multiply+0xac>
  806680:	0400090e 	bge	zero,r16,8066a8 <__multiply+0x1bc>
  806684:	70bfff17 	ldw	r2,-4(r14)
  806688:	70ffff04 	addi	r3,r14,-4
  80668c:	10000326 	beq	r2,zero,80669c <__multiply+0x1b0>
  806690:	00000506 	br	8066a8 <__multiply+0x1bc>
  806694:	18800017 	ldw	r2,0(r3)
  806698:	1000031e 	bne	r2,zero,8066a8 <__multiply+0x1bc>
  80669c:	843fffc4 	addi	r16,r16,-1
  8066a0:	18ffff04 	addi	r3,r3,-4
  8066a4:	803ffb1e 	bne	r16,zero,806694 <__multiply+0x1a8>
  8066a8:	a805883a 	mov	r2,r21
  8066ac:	ac000415 	stw	r16,16(r21)
  8066b0:	dfc00617 	ldw	ra,24(sp)
  8066b4:	dd400517 	ldw	r21,20(sp)
  8066b8:	dd000417 	ldw	r20,16(sp)
  8066bc:	dcc00317 	ldw	r19,12(sp)
  8066c0:	dc800217 	ldw	r18,8(sp)
  8066c4:	dc400117 	ldw	r17,4(sp)
  8066c8:	dc000017 	ldw	r16,0(sp)
  8066cc:	dec00704 	addi	sp,sp,28
  8066d0:	f800283a 	ret

008066d4 <__i2b>:
  8066d4:	defffd04 	addi	sp,sp,-12
  8066d8:	dc000015 	stw	r16,0(sp)
  8066dc:	04000044 	movi	r16,1
  8066e0:	dc800115 	stw	r18,4(sp)
  8066e4:	2825883a 	mov	r18,r5
  8066e8:	800b883a 	mov	r5,r16
  8066ec:	dfc00215 	stw	ra,8(sp)
  8066f0:	0805fdc0 	call	805fdc <_Balloc>
  8066f4:	14000415 	stw	r16,16(r2)
  8066f8:	14800515 	stw	r18,20(r2)
  8066fc:	dfc00217 	ldw	ra,8(sp)
  806700:	dc800117 	ldw	r18,4(sp)
  806704:	dc000017 	ldw	r16,0(sp)
  806708:	dec00304 	addi	sp,sp,12
  80670c:	f800283a 	ret

00806710 <__multadd>:
  806710:	defffa04 	addi	sp,sp,-24
  806714:	dc800215 	stw	r18,8(sp)
  806718:	2c800417 	ldw	r18,16(r5)
  80671c:	dd000415 	stw	r20,16(sp)
  806720:	dcc00315 	stw	r19,12(sp)
  806724:	dc000015 	stw	r16,0(sp)
  806728:	dfc00515 	stw	ra,20(sp)
  80672c:	3821883a 	mov	r16,r7
  806730:	dc400115 	stw	r17,4(sp)
  806734:	2827883a 	mov	r19,r5
  806738:	2029883a 	mov	r20,r4
  80673c:	2a000504 	addi	r8,r5,20
  806740:	000f883a 	mov	r7,zero
  806744:	40800017 	ldw	r2,0(r8)
  806748:	39c00044 	addi	r7,r7,1
  80674c:	10ffffcc 	andi	r3,r2,65535
  806750:	1987383a 	mul	r3,r3,r6
  806754:	1004d43a 	srli	r2,r2,16
  806758:	1c07883a 	add	r3,r3,r16
  80675c:	180ad43a 	srli	r5,r3,16
  806760:	1185383a 	mul	r2,r2,r6
  806764:	18ffffcc 	andi	r3,r3,65535
  806768:	1145883a 	add	r2,r2,r5
  80676c:	1008943a 	slli	r4,r2,16
  806770:	1020d43a 	srli	r16,r2,16
  806774:	20c9883a 	add	r4,r4,r3
  806778:	41000015 	stw	r4,0(r8)
  80677c:	42000104 	addi	r8,r8,4
  806780:	3cbff016 	blt	r7,r18,806744 <__multadd+0x34>
  806784:	80000826 	beq	r16,zero,8067a8 <__multadd+0x98>
  806788:	98800217 	ldw	r2,8(r19)
  80678c:	90800f0e 	bge	r18,r2,8067cc <__multadd+0xbc>
  806790:	9485883a 	add	r2,r18,r18
  806794:	1085883a 	add	r2,r2,r2
  806798:	14c5883a 	add	r2,r2,r19
  80679c:	90c00044 	addi	r3,r18,1
  8067a0:	14000515 	stw	r16,20(r2)
  8067a4:	98c00415 	stw	r3,16(r19)
  8067a8:	9805883a 	mov	r2,r19
  8067ac:	dfc00517 	ldw	ra,20(sp)
  8067b0:	dd000417 	ldw	r20,16(sp)
  8067b4:	dcc00317 	ldw	r19,12(sp)
  8067b8:	dc800217 	ldw	r18,8(sp)
  8067bc:	dc400117 	ldw	r17,4(sp)
  8067c0:	dc000017 	ldw	r16,0(sp)
  8067c4:	dec00604 	addi	sp,sp,24
  8067c8:	f800283a 	ret
  8067cc:	99400117 	ldw	r5,4(r19)
  8067d0:	a009883a 	mov	r4,r20
  8067d4:	29400044 	addi	r5,r5,1
  8067d8:	0805fdc0 	call	805fdc <_Balloc>
  8067dc:	99800417 	ldw	r6,16(r19)
  8067e0:	99400304 	addi	r5,r19,12
  8067e4:	11000304 	addi	r4,r2,12
  8067e8:	318d883a 	add	r6,r6,r6
  8067ec:	318d883a 	add	r6,r6,r6
  8067f0:	31800204 	addi	r6,r6,8
  8067f4:	1023883a 	mov	r17,r2
  8067f8:	08058440 	call	805844 <memcpy>
  8067fc:	980b883a 	mov	r5,r19
  806800:	a009883a 	mov	r4,r20
  806804:	0805a5c0 	call	805a5c <_Bfree>
  806808:	8827883a 	mov	r19,r17
  80680c:	003fe006 	br	806790 <__multadd+0x80>

00806810 <__pow5mult>:
  806810:	defffa04 	addi	sp,sp,-24
  806814:	308000cc 	andi	r2,r6,3
  806818:	dd000415 	stw	r20,16(sp)
  80681c:	dcc00315 	stw	r19,12(sp)
  806820:	dc000015 	stw	r16,0(sp)
  806824:	dfc00515 	stw	ra,20(sp)
  806828:	dc800215 	stw	r18,8(sp)
  80682c:	dc400115 	stw	r17,4(sp)
  806830:	3021883a 	mov	r16,r6
  806834:	2027883a 	mov	r19,r4
  806838:	2829883a 	mov	r20,r5
  80683c:	10002b1e 	bne	r2,zero,8068ec <__pow5mult+0xdc>
  806840:	8025d0ba 	srai	r18,r16,2
  806844:	90001b26 	beq	r18,zero,8068b4 <__pow5mult+0xa4>
  806848:	9c001217 	ldw	r16,72(r19)
  80684c:	8000081e 	bne	r16,zero,806870 <__pow5mult+0x60>
  806850:	00003006 	br	806914 <__pow5mult+0x104>
  806854:	800b883a 	mov	r5,r16
  806858:	800d883a 	mov	r6,r16
  80685c:	9809883a 	mov	r4,r19
  806860:	90001426 	beq	r18,zero,8068b4 <__pow5mult+0xa4>
  806864:	80800017 	ldw	r2,0(r16)
  806868:	10001b26 	beq	r2,zero,8068d8 <__pow5mult+0xc8>
  80686c:	1021883a 	mov	r16,r2
  806870:	9080004c 	andi	r2,r18,1
  806874:	1005003a 	cmpeq	r2,r2,zero
  806878:	9025d07a 	srai	r18,r18,1
  80687c:	800d883a 	mov	r6,r16
  806880:	9809883a 	mov	r4,r19
  806884:	a00b883a 	mov	r5,r20
  806888:	103ff21e 	bne	r2,zero,806854 <__pow5mult+0x44>
  80688c:	08064ec0 	call	8064ec <__multiply>
  806890:	a00b883a 	mov	r5,r20
  806894:	9809883a 	mov	r4,r19
  806898:	1023883a 	mov	r17,r2
  80689c:	0805a5c0 	call	805a5c <_Bfree>
  8068a0:	8829883a 	mov	r20,r17
  8068a4:	800b883a 	mov	r5,r16
  8068a8:	800d883a 	mov	r6,r16
  8068ac:	9809883a 	mov	r4,r19
  8068b0:	903fec1e 	bne	r18,zero,806864 <__pow5mult+0x54>
  8068b4:	a005883a 	mov	r2,r20
  8068b8:	dfc00517 	ldw	ra,20(sp)
  8068bc:	dd000417 	ldw	r20,16(sp)
  8068c0:	dcc00317 	ldw	r19,12(sp)
  8068c4:	dc800217 	ldw	r18,8(sp)
  8068c8:	dc400117 	ldw	r17,4(sp)
  8068cc:	dc000017 	ldw	r16,0(sp)
  8068d0:	dec00604 	addi	sp,sp,24
  8068d4:	f800283a 	ret
  8068d8:	08064ec0 	call	8064ec <__multiply>
  8068dc:	80800015 	stw	r2,0(r16)
  8068e0:	1021883a 	mov	r16,r2
  8068e4:	10000015 	stw	zero,0(r2)
  8068e8:	003fe106 	br	806870 <__pow5mult+0x60>
  8068ec:	1085883a 	add	r2,r2,r2
  8068f0:	00c02074 	movhi	r3,129
  8068f4:	18d6ec04 	addi	r3,r3,23472
  8068f8:	1085883a 	add	r2,r2,r2
  8068fc:	10c5883a 	add	r2,r2,r3
  806900:	11bfff17 	ldw	r6,-4(r2)
  806904:	000f883a 	mov	r7,zero
  806908:	08067100 	call	806710 <__multadd>
  80690c:	1029883a 	mov	r20,r2
  806910:	003fcb06 	br	806840 <__pow5mult+0x30>
  806914:	9809883a 	mov	r4,r19
  806918:	01409c44 	movi	r5,625
  80691c:	08066d40 	call	8066d4 <__i2b>
  806920:	98801215 	stw	r2,72(r19)
  806924:	1021883a 	mov	r16,r2
  806928:	10000015 	stw	zero,0(r2)
  80692c:	003fd006 	br	806870 <__pow5mult+0x60>

00806930 <__s2b>:
  806930:	defff904 	addi	sp,sp,-28
  806934:	dcc00315 	stw	r19,12(sp)
  806938:	dc800215 	stw	r18,8(sp)
  80693c:	2827883a 	mov	r19,r5
  806940:	2025883a 	mov	r18,r4
  806944:	01400244 	movi	r5,9
  806948:	39000204 	addi	r4,r7,8
  80694c:	dd000415 	stw	r20,16(sp)
  806950:	dc400115 	stw	r17,4(sp)
  806954:	dfc00615 	stw	ra,24(sp)
  806958:	dd400515 	stw	r21,20(sp)
  80695c:	dc000015 	stw	r16,0(sp)
  806960:	3829883a 	mov	r20,r7
  806964:	3023883a 	mov	r17,r6
  806968:	08094f40 	call	8094f4 <__divsi3>
  80696c:	00c00044 	movi	r3,1
  806970:	1880350e 	bge	r3,r2,806a48 <__s2b+0x118>
  806974:	000b883a 	mov	r5,zero
  806978:	18c7883a 	add	r3,r3,r3
  80697c:	29400044 	addi	r5,r5,1
  806980:	18bffd16 	blt	r3,r2,806978 <__s2b+0x48>
  806984:	9009883a 	mov	r4,r18
  806988:	0805fdc0 	call	805fdc <_Balloc>
  80698c:	1011883a 	mov	r8,r2
  806990:	d8800717 	ldw	r2,28(sp)
  806994:	00c00044 	movi	r3,1
  806998:	01800244 	movi	r6,9
  80699c:	40800515 	stw	r2,20(r8)
  8069a0:	40c00415 	stw	r3,16(r8)
  8069a4:	3440260e 	bge	r6,r17,806a40 <__s2b+0x110>
  8069a8:	3021883a 	mov	r16,r6
  8069ac:	99ab883a 	add	r21,r19,r6
  8069b0:	9c05883a 	add	r2,r19,r16
  8069b4:	11c00007 	ldb	r7,0(r2)
  8069b8:	400b883a 	mov	r5,r8
  8069bc:	9009883a 	mov	r4,r18
  8069c0:	39fff404 	addi	r7,r7,-48
  8069c4:	01800284 	movi	r6,10
  8069c8:	08067100 	call	806710 <__multadd>
  8069cc:	84000044 	addi	r16,r16,1
  8069d0:	1011883a 	mov	r8,r2
  8069d4:	8c3ff61e 	bne	r17,r16,8069b0 <__s2b+0x80>
  8069d8:	ac45883a 	add	r2,r21,r17
  8069dc:	117ffe04 	addi	r5,r2,-8
  8069e0:	880d883a 	mov	r6,r17
  8069e4:	35000c0e 	bge	r6,r20,806a18 <__s2b+0xe8>
  8069e8:	a185c83a 	sub	r2,r20,r6
  8069ec:	2821883a 	mov	r16,r5
  8069f0:	28a3883a 	add	r17,r5,r2
  8069f4:	81c00007 	ldb	r7,0(r16)
  8069f8:	400b883a 	mov	r5,r8
  8069fc:	9009883a 	mov	r4,r18
  806a00:	39fff404 	addi	r7,r7,-48
  806a04:	01800284 	movi	r6,10
  806a08:	08067100 	call	806710 <__multadd>
  806a0c:	84000044 	addi	r16,r16,1
  806a10:	1011883a 	mov	r8,r2
  806a14:	847ff71e 	bne	r16,r17,8069f4 <__s2b+0xc4>
  806a18:	4005883a 	mov	r2,r8
  806a1c:	dfc00617 	ldw	ra,24(sp)
  806a20:	dd400517 	ldw	r21,20(sp)
  806a24:	dd000417 	ldw	r20,16(sp)
  806a28:	dcc00317 	ldw	r19,12(sp)
  806a2c:	dc800217 	ldw	r18,8(sp)
  806a30:	dc400117 	ldw	r17,4(sp)
  806a34:	dc000017 	ldw	r16,0(sp)
  806a38:	dec00704 	addi	sp,sp,28
  806a3c:	f800283a 	ret
  806a40:	99400284 	addi	r5,r19,10
  806a44:	003fe706 	br	8069e4 <__s2b+0xb4>
  806a48:	000b883a 	mov	r5,zero
  806a4c:	003fcd06 	br	806984 <__s2b+0x54>

00806a50 <_realloc_r>:
  806a50:	defff404 	addi	sp,sp,-48
  806a54:	dd800815 	stw	r22,32(sp)
  806a58:	dc800415 	stw	r18,16(sp)
  806a5c:	dc400315 	stw	r17,12(sp)
  806a60:	dfc00b15 	stw	ra,44(sp)
  806a64:	df000a15 	stw	fp,40(sp)
  806a68:	ddc00915 	stw	r23,36(sp)
  806a6c:	dd400715 	stw	r21,28(sp)
  806a70:	dd000615 	stw	r20,24(sp)
  806a74:	dcc00515 	stw	r19,20(sp)
  806a78:	dc000215 	stw	r16,8(sp)
  806a7c:	2825883a 	mov	r18,r5
  806a80:	3023883a 	mov	r17,r6
  806a84:	202d883a 	mov	r22,r4
  806a88:	2800c926 	beq	r5,zero,806db0 <_realloc_r+0x360>
  806a8c:	080a7f40 	call	80a7f4 <__malloc_lock>
  806a90:	943ffe04 	addi	r16,r18,-8
  806a94:	88c002c4 	addi	r3,r17,11
  806a98:	00800584 	movi	r2,22
  806a9c:	82000117 	ldw	r8,4(r16)
  806aa0:	10c01b2e 	bgeu	r2,r3,806b10 <_realloc_r+0xc0>
  806aa4:	00bffe04 	movi	r2,-8
  806aa8:	188e703a 	and	r7,r3,r2
  806aac:	3839883a 	mov	fp,r7
  806ab0:	38001a16 	blt	r7,zero,806b1c <_realloc_r+0xcc>
  806ab4:	e4401936 	bltu	fp,r17,806b1c <_realloc_r+0xcc>
  806ab8:	013fff04 	movi	r4,-4
  806abc:	4126703a 	and	r19,r8,r4
  806ac0:	99c02616 	blt	r19,r7,806b5c <_realloc_r+0x10c>
  806ac4:	802b883a 	mov	r21,r16
  806ac8:	9829883a 	mov	r20,r19
  806acc:	84000204 	addi	r16,r16,8
  806ad0:	a80f883a 	mov	r7,r21
  806ad4:	a70dc83a 	sub	r6,r20,fp
  806ad8:	008003c4 	movi	r2,15
  806adc:	1180c136 	bltu	r2,r6,806de4 <_realloc_r+0x394>
  806ae0:	38800117 	ldw	r2,4(r7)
  806ae4:	a549883a 	add	r4,r20,r21
  806ae8:	1080004c 	andi	r2,r2,1
  806aec:	a084b03a 	or	r2,r20,r2
  806af0:	38800115 	stw	r2,4(r7)
  806af4:	20c00117 	ldw	r3,4(r4)
  806af8:	18c00054 	ori	r3,r3,1
  806afc:	20c00115 	stw	r3,4(r4)
  806b00:	b009883a 	mov	r4,r22
  806b04:	080a8fc0 	call	80a8fc <__malloc_unlock>
  806b08:	8023883a 	mov	r17,r16
  806b0c:	00000606 	br	806b28 <_realloc_r+0xd8>
  806b10:	01c00404 	movi	r7,16
  806b14:	3839883a 	mov	fp,r7
  806b18:	e47fe72e 	bgeu	fp,r17,806ab8 <_realloc_r+0x68>
  806b1c:	00800304 	movi	r2,12
  806b20:	0023883a 	mov	r17,zero
  806b24:	b0800015 	stw	r2,0(r22)
  806b28:	8805883a 	mov	r2,r17
  806b2c:	dfc00b17 	ldw	ra,44(sp)
  806b30:	df000a17 	ldw	fp,40(sp)
  806b34:	ddc00917 	ldw	r23,36(sp)
  806b38:	dd800817 	ldw	r22,32(sp)
  806b3c:	dd400717 	ldw	r21,28(sp)
  806b40:	dd000617 	ldw	r20,24(sp)
  806b44:	dcc00517 	ldw	r19,20(sp)
  806b48:	dc800417 	ldw	r18,16(sp)
  806b4c:	dc400317 	ldw	r17,12(sp)
  806b50:	dc000217 	ldw	r16,8(sp)
  806b54:	dec00c04 	addi	sp,sp,48
  806b58:	f800283a 	ret
  806b5c:	00802074 	movhi	r2,129
  806b60:	10989304 	addi	r2,r2,25164
  806b64:	12400217 	ldw	r9,8(r2)
  806b68:	84cd883a 	add	r6,r16,r19
  806b6c:	802b883a 	mov	r21,r16
  806b70:	3240b926 	beq	r6,r9,806e58 <_realloc_r+0x408>
  806b74:	31400117 	ldw	r5,4(r6)
  806b78:	00bfff84 	movi	r2,-2
  806b7c:	2884703a 	and	r2,r5,r2
  806b80:	1185883a 	add	r2,r2,r6
  806b84:	10c00117 	ldw	r3,4(r2)
  806b88:	18c0004c 	andi	r3,r3,1
  806b8c:	1807003a 	cmpeq	r3,r3,zero
  806b90:	1800a326 	beq	r3,zero,806e20 <_realloc_r+0x3d0>
  806b94:	2908703a 	and	r4,r5,r4
  806b98:	9929883a 	add	r20,r19,r4
  806b9c:	a1c0a30e 	bge	r20,r7,806e2c <_realloc_r+0x3dc>
  806ba0:	4080004c 	andi	r2,r8,1
  806ba4:	1000551e 	bne	r2,zero,806cfc <_realloc_r+0x2ac>
  806ba8:	80800017 	ldw	r2,0(r16)
  806bac:	80afc83a 	sub	r23,r16,r2
  806bb0:	b8c00117 	ldw	r3,4(r23)
  806bb4:	00bfff04 	movi	r2,-4
  806bb8:	1884703a 	and	r2,r3,r2
  806bbc:	30002e26 	beq	r6,zero,806c78 <_realloc_r+0x228>
  806bc0:	3240b926 	beq	r6,r9,806ea8 <_realloc_r+0x458>
  806bc4:	98a9883a 	add	r20,r19,r2
  806bc8:	2509883a 	add	r4,r4,r20
  806bcc:	d9000015 	stw	r4,0(sp)
  806bd0:	21c02a16 	blt	r4,r7,806c7c <_realloc_r+0x22c>
  806bd4:	30800317 	ldw	r2,12(r6)
  806bd8:	30c00217 	ldw	r3,8(r6)
  806bdc:	01400904 	movi	r5,36
  806be0:	99bfff04 	addi	r6,r19,-4
  806be4:	18800315 	stw	r2,12(r3)
  806be8:	10c00215 	stw	r3,8(r2)
  806bec:	b9000317 	ldw	r4,12(r23)
  806bf0:	b8800217 	ldw	r2,8(r23)
  806bf4:	b82b883a 	mov	r21,r23
  806bf8:	bc000204 	addi	r16,r23,8
  806bfc:	20800215 	stw	r2,8(r4)
  806c00:	11000315 	stw	r4,12(r2)
  806c04:	2980e436 	bltu	r5,r6,806f98 <_realloc_r+0x548>
  806c08:	008004c4 	movi	r2,19
  806c0c:	9009883a 	mov	r4,r18
  806c10:	8011883a 	mov	r8,r16
  806c14:	11800f2e 	bgeu	r2,r6,806c54 <_realloc_r+0x204>
  806c18:	90800017 	ldw	r2,0(r18)
  806c1c:	ba000404 	addi	r8,r23,16
  806c20:	91000204 	addi	r4,r18,8
  806c24:	b8800215 	stw	r2,8(r23)
  806c28:	90c00117 	ldw	r3,4(r18)
  806c2c:	008006c4 	movi	r2,27
  806c30:	b8c00315 	stw	r3,12(r23)
  806c34:	1180072e 	bgeu	r2,r6,806c54 <_realloc_r+0x204>
  806c38:	90c00217 	ldw	r3,8(r18)
  806c3c:	ba000604 	addi	r8,r23,24
  806c40:	91000404 	addi	r4,r18,16
  806c44:	b8c00415 	stw	r3,16(r23)
  806c48:	90800317 	ldw	r2,12(r18)
  806c4c:	b8800515 	stw	r2,20(r23)
  806c50:	3140e726 	beq	r6,r5,806ff0 <_realloc_r+0x5a0>
  806c54:	20800017 	ldw	r2,0(r4)
  806c58:	dd000017 	ldw	r20,0(sp)
  806c5c:	b80f883a 	mov	r7,r23
  806c60:	40800015 	stw	r2,0(r8)
  806c64:	20c00117 	ldw	r3,4(r4)
  806c68:	40c00115 	stw	r3,4(r8)
  806c6c:	20800217 	ldw	r2,8(r4)
  806c70:	40800215 	stw	r2,8(r8)
  806c74:	003f9706 	br	806ad4 <_realloc_r+0x84>
  806c78:	98a9883a 	add	r20,r19,r2
  806c7c:	a1c01f16 	blt	r20,r7,806cfc <_realloc_r+0x2ac>
  806c80:	b8c00317 	ldw	r3,12(r23)
  806c84:	b8800217 	ldw	r2,8(r23)
  806c88:	99bfff04 	addi	r6,r19,-4
  806c8c:	01400904 	movi	r5,36
  806c90:	b82b883a 	mov	r21,r23
  806c94:	18800215 	stw	r2,8(r3)
  806c98:	10c00315 	stw	r3,12(r2)
  806c9c:	bc000204 	addi	r16,r23,8
  806ca0:	2980c336 	bltu	r5,r6,806fb0 <_realloc_r+0x560>
  806ca4:	008004c4 	movi	r2,19
  806ca8:	9009883a 	mov	r4,r18
  806cac:	8011883a 	mov	r8,r16
  806cb0:	11800f2e 	bgeu	r2,r6,806cf0 <_realloc_r+0x2a0>
  806cb4:	90800017 	ldw	r2,0(r18)
  806cb8:	ba000404 	addi	r8,r23,16
  806cbc:	91000204 	addi	r4,r18,8
  806cc0:	b8800215 	stw	r2,8(r23)
  806cc4:	90c00117 	ldw	r3,4(r18)
  806cc8:	008006c4 	movi	r2,27
  806ccc:	b8c00315 	stw	r3,12(r23)
  806cd0:	1180072e 	bgeu	r2,r6,806cf0 <_realloc_r+0x2a0>
  806cd4:	90c00217 	ldw	r3,8(r18)
  806cd8:	ba000604 	addi	r8,r23,24
  806cdc:	91000404 	addi	r4,r18,16
  806ce0:	b8c00415 	stw	r3,16(r23)
  806ce4:	90800317 	ldw	r2,12(r18)
  806ce8:	b8800515 	stw	r2,20(r23)
  806cec:	3140c726 	beq	r6,r5,80700c <_realloc_r+0x5bc>
  806cf0:	20800017 	ldw	r2,0(r4)
  806cf4:	b80f883a 	mov	r7,r23
  806cf8:	003fd906 	br	806c60 <_realloc_r+0x210>
  806cfc:	880b883a 	mov	r5,r17
  806d00:	b009883a 	mov	r4,r22
  806d04:	08050200 	call	805020 <_malloc_r>
  806d08:	1023883a 	mov	r17,r2
  806d0c:	10002526 	beq	r2,zero,806da4 <_realloc_r+0x354>
  806d10:	80800117 	ldw	r2,4(r16)
  806d14:	00ffff84 	movi	r3,-2
  806d18:	893ffe04 	addi	r4,r17,-8
  806d1c:	10c4703a 	and	r2,r2,r3
  806d20:	8085883a 	add	r2,r16,r2
  806d24:	20809526 	beq	r4,r2,806f7c <_realloc_r+0x52c>
  806d28:	99bfff04 	addi	r6,r19,-4
  806d2c:	01c00904 	movi	r7,36
  806d30:	39804536 	bltu	r7,r6,806e48 <_realloc_r+0x3f8>
  806d34:	008004c4 	movi	r2,19
  806d38:	9009883a 	mov	r4,r18
  806d3c:	880b883a 	mov	r5,r17
  806d40:	11800f2e 	bgeu	r2,r6,806d80 <_realloc_r+0x330>
  806d44:	90800017 	ldw	r2,0(r18)
  806d48:	89400204 	addi	r5,r17,8
  806d4c:	91000204 	addi	r4,r18,8
  806d50:	88800015 	stw	r2,0(r17)
  806d54:	90c00117 	ldw	r3,4(r18)
  806d58:	008006c4 	movi	r2,27
  806d5c:	88c00115 	stw	r3,4(r17)
  806d60:	1180072e 	bgeu	r2,r6,806d80 <_realloc_r+0x330>
  806d64:	90c00217 	ldw	r3,8(r18)
  806d68:	89400404 	addi	r5,r17,16
  806d6c:	91000404 	addi	r4,r18,16
  806d70:	88c00215 	stw	r3,8(r17)
  806d74:	90800317 	ldw	r2,12(r18)
  806d78:	88800315 	stw	r2,12(r17)
  806d7c:	31c09126 	beq	r6,r7,806fc4 <_realloc_r+0x574>
  806d80:	20800017 	ldw	r2,0(r4)
  806d84:	28800015 	stw	r2,0(r5)
  806d88:	20c00117 	ldw	r3,4(r4)
  806d8c:	28c00115 	stw	r3,4(r5)
  806d90:	20800217 	ldw	r2,8(r4)
  806d94:	28800215 	stw	r2,8(r5)
  806d98:	900b883a 	mov	r5,r18
  806d9c:	b009883a 	mov	r4,r22
  806da0:	08044980 	call	804498 <_free_r>
  806da4:	b009883a 	mov	r4,r22
  806da8:	080a8fc0 	call	80a8fc <__malloc_unlock>
  806dac:	003f5e06 	br	806b28 <_realloc_r+0xd8>
  806db0:	300b883a 	mov	r5,r6
  806db4:	dfc00b17 	ldw	ra,44(sp)
  806db8:	df000a17 	ldw	fp,40(sp)
  806dbc:	ddc00917 	ldw	r23,36(sp)
  806dc0:	dd800817 	ldw	r22,32(sp)
  806dc4:	dd400717 	ldw	r21,28(sp)
  806dc8:	dd000617 	ldw	r20,24(sp)
  806dcc:	dcc00517 	ldw	r19,20(sp)
  806dd0:	dc800417 	ldw	r18,16(sp)
  806dd4:	dc400317 	ldw	r17,12(sp)
  806dd8:	dc000217 	ldw	r16,8(sp)
  806ddc:	dec00c04 	addi	sp,sp,48
  806de0:	08050201 	jmpi	805020 <_malloc_r>
  806de4:	38800117 	ldw	r2,4(r7)
  806de8:	e54b883a 	add	r5,fp,r21
  806dec:	31000054 	ori	r4,r6,1
  806df0:	1080004c 	andi	r2,r2,1
  806df4:	1704b03a 	or	r2,r2,fp
  806df8:	38800115 	stw	r2,4(r7)
  806dfc:	29000115 	stw	r4,4(r5)
  806e00:	2987883a 	add	r3,r5,r6
  806e04:	18800117 	ldw	r2,4(r3)
  806e08:	29400204 	addi	r5,r5,8
  806e0c:	b009883a 	mov	r4,r22
  806e10:	10800054 	ori	r2,r2,1
  806e14:	18800115 	stw	r2,4(r3)
  806e18:	08044980 	call	804498 <_free_r>
  806e1c:	003f3806 	br	806b00 <_realloc_r+0xb0>
  806e20:	000d883a 	mov	r6,zero
  806e24:	0009883a 	mov	r4,zero
  806e28:	003f5d06 	br	806ba0 <_realloc_r+0x150>
  806e2c:	30c00217 	ldw	r3,8(r6)
  806e30:	30800317 	ldw	r2,12(r6)
  806e34:	800f883a 	mov	r7,r16
  806e38:	84000204 	addi	r16,r16,8
  806e3c:	10c00215 	stw	r3,8(r2)
  806e40:	18800315 	stw	r2,12(r3)
  806e44:	003f2306 	br	806ad4 <_realloc_r+0x84>
  806e48:	8809883a 	mov	r4,r17
  806e4c:	900b883a 	mov	r5,r18
  806e50:	08058e40 	call	8058e4 <memmove>
  806e54:	003fd006 	br	806d98 <_realloc_r+0x348>
  806e58:	30800117 	ldw	r2,4(r6)
  806e5c:	e0c00404 	addi	r3,fp,16
  806e60:	1108703a 	and	r4,r2,r4
  806e64:	9905883a 	add	r2,r19,r4
  806e68:	10ff4d16 	blt	r2,r3,806ba0 <_realloc_r+0x150>
  806e6c:	1705c83a 	sub	r2,r2,fp
  806e70:	870b883a 	add	r5,r16,fp
  806e74:	10800054 	ori	r2,r2,1
  806e78:	28800115 	stw	r2,4(r5)
  806e7c:	80c00117 	ldw	r3,4(r16)
  806e80:	00802074 	movhi	r2,129
  806e84:	10989304 	addi	r2,r2,25164
  806e88:	b009883a 	mov	r4,r22
  806e8c:	18c0004c 	andi	r3,r3,1
  806e90:	e0c6b03a 	or	r3,fp,r3
  806e94:	11400215 	stw	r5,8(r2)
  806e98:	80c00115 	stw	r3,4(r16)
  806e9c:	080a8fc0 	call	80a8fc <__malloc_unlock>
  806ea0:	84400204 	addi	r17,r16,8
  806ea4:	003f2006 	br	806b28 <_realloc_r+0xd8>
  806ea8:	98a9883a 	add	r20,r19,r2
  806eac:	2509883a 	add	r4,r4,r20
  806eb0:	e0800404 	addi	r2,fp,16
  806eb4:	d9000115 	stw	r4,4(sp)
  806eb8:	20bf7016 	blt	r4,r2,806c7c <_realloc_r+0x22c>
  806ebc:	b8c00317 	ldw	r3,12(r23)
  806ec0:	b8800217 	ldw	r2,8(r23)
  806ec4:	99bfff04 	addi	r6,r19,-4
  806ec8:	01400904 	movi	r5,36
  806ecc:	18800215 	stw	r2,8(r3)
  806ed0:	10c00315 	stw	r3,12(r2)
  806ed4:	bc400204 	addi	r17,r23,8
  806ed8:	29804136 	bltu	r5,r6,806fe0 <_realloc_r+0x590>
  806edc:	008004c4 	movi	r2,19
  806ee0:	9009883a 	mov	r4,r18
  806ee4:	880f883a 	mov	r7,r17
  806ee8:	11800f2e 	bgeu	r2,r6,806f28 <_realloc_r+0x4d8>
  806eec:	90800017 	ldw	r2,0(r18)
  806ef0:	b9c00404 	addi	r7,r23,16
  806ef4:	91000204 	addi	r4,r18,8
  806ef8:	b8800215 	stw	r2,8(r23)
  806efc:	90c00117 	ldw	r3,4(r18)
  806f00:	008006c4 	movi	r2,27
  806f04:	b8c00315 	stw	r3,12(r23)
  806f08:	1180072e 	bgeu	r2,r6,806f28 <_realloc_r+0x4d8>
  806f0c:	90c00217 	ldw	r3,8(r18)
  806f10:	b9c00604 	addi	r7,r23,24
  806f14:	91000404 	addi	r4,r18,16
  806f18:	b8c00415 	stw	r3,16(r23)
  806f1c:	90800317 	ldw	r2,12(r18)
  806f20:	b8800515 	stw	r2,20(r23)
  806f24:	31404026 	beq	r6,r5,807028 <_realloc_r+0x5d8>
  806f28:	20800017 	ldw	r2,0(r4)
  806f2c:	38800015 	stw	r2,0(r7)
  806f30:	20c00117 	ldw	r3,4(r4)
  806f34:	38c00115 	stw	r3,4(r7)
  806f38:	20800217 	ldw	r2,8(r4)
  806f3c:	38800215 	stw	r2,8(r7)
  806f40:	d8c00117 	ldw	r3,4(sp)
  806f44:	bf0b883a 	add	r5,r23,fp
  806f48:	b009883a 	mov	r4,r22
  806f4c:	1f05c83a 	sub	r2,r3,fp
  806f50:	10800054 	ori	r2,r2,1
  806f54:	28800115 	stw	r2,4(r5)
  806f58:	b8c00117 	ldw	r3,4(r23)
  806f5c:	00802074 	movhi	r2,129
  806f60:	10989304 	addi	r2,r2,25164
  806f64:	11400215 	stw	r5,8(r2)
  806f68:	18c0004c 	andi	r3,r3,1
  806f6c:	e0c6b03a 	or	r3,fp,r3
  806f70:	b8c00115 	stw	r3,4(r23)
  806f74:	080a8fc0 	call	80a8fc <__malloc_unlock>
  806f78:	003eeb06 	br	806b28 <_realloc_r+0xd8>
  806f7c:	20800117 	ldw	r2,4(r4)
  806f80:	00ffff04 	movi	r3,-4
  806f84:	800f883a 	mov	r7,r16
  806f88:	10c4703a 	and	r2,r2,r3
  806f8c:	98a9883a 	add	r20,r19,r2
  806f90:	84000204 	addi	r16,r16,8
  806f94:	003ecf06 	br	806ad4 <_realloc_r+0x84>
  806f98:	900b883a 	mov	r5,r18
  806f9c:	8009883a 	mov	r4,r16
  806fa0:	08058e40 	call	8058e4 <memmove>
  806fa4:	dd000017 	ldw	r20,0(sp)
  806fa8:	b80f883a 	mov	r7,r23
  806fac:	003ec906 	br	806ad4 <_realloc_r+0x84>
  806fb0:	900b883a 	mov	r5,r18
  806fb4:	8009883a 	mov	r4,r16
  806fb8:	08058e40 	call	8058e4 <memmove>
  806fbc:	b80f883a 	mov	r7,r23
  806fc0:	003ec406 	br	806ad4 <_realloc_r+0x84>
  806fc4:	90c00417 	ldw	r3,16(r18)
  806fc8:	89400604 	addi	r5,r17,24
  806fcc:	91000604 	addi	r4,r18,24
  806fd0:	88c00415 	stw	r3,16(r17)
  806fd4:	90800517 	ldw	r2,20(r18)
  806fd8:	88800515 	stw	r2,20(r17)
  806fdc:	003f6806 	br	806d80 <_realloc_r+0x330>
  806fe0:	900b883a 	mov	r5,r18
  806fe4:	8809883a 	mov	r4,r17
  806fe8:	08058e40 	call	8058e4 <memmove>
  806fec:	003fd406 	br	806f40 <_realloc_r+0x4f0>
  806ff0:	90c00417 	ldw	r3,16(r18)
  806ff4:	91000604 	addi	r4,r18,24
  806ff8:	ba000804 	addi	r8,r23,32
  806ffc:	b8c00615 	stw	r3,24(r23)
  807000:	90800517 	ldw	r2,20(r18)
  807004:	b8800715 	stw	r2,28(r23)
  807008:	003f1206 	br	806c54 <_realloc_r+0x204>
  80700c:	90c00417 	ldw	r3,16(r18)
  807010:	91000604 	addi	r4,r18,24
  807014:	ba000804 	addi	r8,r23,32
  807018:	b8c00615 	stw	r3,24(r23)
  80701c:	90800517 	ldw	r2,20(r18)
  807020:	b8800715 	stw	r2,28(r23)
  807024:	003f3206 	br	806cf0 <_realloc_r+0x2a0>
  807028:	90c00417 	ldw	r3,16(r18)
  80702c:	91000604 	addi	r4,r18,24
  807030:	b9c00804 	addi	r7,r23,32
  807034:	b8c00615 	stw	r3,24(r23)
  807038:	90800517 	ldw	r2,20(r18)
  80703c:	b8800715 	stw	r2,28(r23)
  807040:	003fb906 	br	806f28 <_realloc_r+0x4d8>

00807044 <__isinfd>:
  807044:	200d883a 	mov	r6,r4
  807048:	0109c83a 	sub	r4,zero,r4
  80704c:	2188b03a 	or	r4,r4,r6
  807050:	2008d7fa 	srli	r4,r4,31
  807054:	00a00034 	movhi	r2,32768
  807058:	10bfffc4 	addi	r2,r2,-1
  80705c:	1144703a 	and	r2,r2,r5
  807060:	2088b03a 	or	r4,r4,r2
  807064:	009ffc34 	movhi	r2,32752
  807068:	1105c83a 	sub	r2,r2,r4
  80706c:	0087c83a 	sub	r3,zero,r2
  807070:	10c4b03a 	or	r2,r2,r3
  807074:	1004d7fa 	srli	r2,r2,31
  807078:	00c00044 	movi	r3,1
  80707c:	1885c83a 	sub	r2,r3,r2
  807080:	f800283a 	ret

00807084 <__isnand>:
  807084:	200d883a 	mov	r6,r4
  807088:	0109c83a 	sub	r4,zero,r4
  80708c:	2188b03a 	or	r4,r4,r6
  807090:	2008d7fa 	srli	r4,r4,31
  807094:	00a00034 	movhi	r2,32768
  807098:	10bfffc4 	addi	r2,r2,-1
  80709c:	1144703a 	and	r2,r2,r5
  8070a0:	2088b03a 	or	r4,r4,r2
  8070a4:	009ffc34 	movhi	r2,32752
  8070a8:	1105c83a 	sub	r2,r2,r4
  8070ac:	1004d7fa 	srli	r2,r2,31
  8070b0:	f800283a 	ret

008070b4 <_sbrk_r>:
  8070b4:	defffd04 	addi	sp,sp,-12
  8070b8:	dc000015 	stw	r16,0(sp)
  8070bc:	040020b4 	movhi	r16,130
  8070c0:	84251f04 	addi	r16,r16,-27524
  8070c4:	dc400115 	stw	r17,4(sp)
  8070c8:	80000015 	stw	zero,0(r16)
  8070cc:	2023883a 	mov	r17,r4
  8070d0:	2809883a 	mov	r4,r5
  8070d4:	dfc00215 	stw	ra,8(sp)
  8070d8:	080a4b00 	call	80a4b0 <sbrk>
  8070dc:	1007883a 	mov	r3,r2
  8070e0:	00bfffc4 	movi	r2,-1
  8070e4:	18800626 	beq	r3,r2,807100 <_sbrk_r+0x4c>
  8070e8:	1805883a 	mov	r2,r3
  8070ec:	dfc00217 	ldw	ra,8(sp)
  8070f0:	dc400117 	ldw	r17,4(sp)
  8070f4:	dc000017 	ldw	r16,0(sp)
  8070f8:	dec00304 	addi	sp,sp,12
  8070fc:	f800283a 	ret
  807100:	80800017 	ldw	r2,0(r16)
  807104:	103ff826 	beq	r2,zero,8070e8 <_sbrk_r+0x34>
  807108:	88800015 	stw	r2,0(r17)
  80710c:	1805883a 	mov	r2,r3
  807110:	dfc00217 	ldw	ra,8(sp)
  807114:	dc400117 	ldw	r17,4(sp)
  807118:	dc000017 	ldw	r16,0(sp)
  80711c:	dec00304 	addi	sp,sp,12
  807120:	f800283a 	ret

00807124 <__sclose>:
  807124:	2940038f 	ldh	r5,14(r5)
  807128:	08074581 	jmpi	807458 <_close_r>

0080712c <__sseek>:
  80712c:	defffe04 	addi	sp,sp,-8
  807130:	dc000015 	stw	r16,0(sp)
  807134:	2821883a 	mov	r16,r5
  807138:	2940038f 	ldh	r5,14(r5)
  80713c:	dfc00115 	stw	ra,4(sp)
  807140:	08076d00 	call	8076d0 <_lseek_r>
  807144:	1007883a 	mov	r3,r2
  807148:	00bfffc4 	movi	r2,-1
  80714c:	18800926 	beq	r3,r2,807174 <__sseek+0x48>
  807150:	8080030b 	ldhu	r2,12(r16)
  807154:	80c01415 	stw	r3,80(r16)
  807158:	10840014 	ori	r2,r2,4096
  80715c:	8080030d 	sth	r2,12(r16)
  807160:	1805883a 	mov	r2,r3
  807164:	dfc00117 	ldw	ra,4(sp)
  807168:	dc000017 	ldw	r16,0(sp)
  80716c:	dec00204 	addi	sp,sp,8
  807170:	f800283a 	ret
  807174:	8080030b 	ldhu	r2,12(r16)
  807178:	10bbffcc 	andi	r2,r2,61439
  80717c:	8080030d 	sth	r2,12(r16)
  807180:	1805883a 	mov	r2,r3
  807184:	dfc00117 	ldw	ra,4(sp)
  807188:	dc000017 	ldw	r16,0(sp)
  80718c:	dec00204 	addi	sp,sp,8
  807190:	f800283a 	ret

00807194 <__swrite>:
  807194:	2880030b 	ldhu	r2,12(r5)
  807198:	defffb04 	addi	sp,sp,-20
  80719c:	dcc00315 	stw	r19,12(sp)
  8071a0:	1080400c 	andi	r2,r2,256
  8071a4:	dc800215 	stw	r18,8(sp)
  8071a8:	dc400115 	stw	r17,4(sp)
  8071ac:	dc000015 	stw	r16,0(sp)
  8071b0:	3027883a 	mov	r19,r6
  8071b4:	3825883a 	mov	r18,r7
  8071b8:	dfc00415 	stw	ra,16(sp)
  8071bc:	2821883a 	mov	r16,r5
  8071c0:	000d883a 	mov	r6,zero
  8071c4:	01c00084 	movi	r7,2
  8071c8:	2023883a 	mov	r17,r4
  8071cc:	10000226 	beq	r2,zero,8071d8 <__swrite+0x44>
  8071d0:	2940038f 	ldh	r5,14(r5)
  8071d4:	08076d00 	call	8076d0 <_lseek_r>
  8071d8:	8080030b 	ldhu	r2,12(r16)
  8071dc:	8140038f 	ldh	r5,14(r16)
  8071e0:	8809883a 	mov	r4,r17
  8071e4:	10bbffcc 	andi	r2,r2,61439
  8071e8:	980d883a 	mov	r6,r19
  8071ec:	900f883a 	mov	r7,r18
  8071f0:	8080030d 	sth	r2,12(r16)
  8071f4:	dfc00417 	ldw	ra,16(sp)
  8071f8:	dcc00317 	ldw	r19,12(sp)
  8071fc:	dc800217 	ldw	r18,8(sp)
  807200:	dc400117 	ldw	r17,4(sp)
  807204:	dc000017 	ldw	r16,0(sp)
  807208:	dec00504 	addi	sp,sp,20
  80720c:	080732c1 	jmpi	80732c <_write_r>

00807210 <__sread>:
  807210:	defffe04 	addi	sp,sp,-8
  807214:	dc000015 	stw	r16,0(sp)
  807218:	2821883a 	mov	r16,r5
  80721c:	2940038f 	ldh	r5,14(r5)
  807220:	dfc00115 	stw	ra,4(sp)
  807224:	08077480 	call	807748 <_read_r>
  807228:	1007883a 	mov	r3,r2
  80722c:	10000816 	blt	r2,zero,807250 <__sread+0x40>
  807230:	80801417 	ldw	r2,80(r16)
  807234:	10c5883a 	add	r2,r2,r3
  807238:	80801415 	stw	r2,80(r16)
  80723c:	1805883a 	mov	r2,r3
  807240:	dfc00117 	ldw	ra,4(sp)
  807244:	dc000017 	ldw	r16,0(sp)
  807248:	dec00204 	addi	sp,sp,8
  80724c:	f800283a 	ret
  807250:	8080030b 	ldhu	r2,12(r16)
  807254:	10bbffcc 	andi	r2,r2,61439
  807258:	8080030d 	sth	r2,12(r16)
  80725c:	1805883a 	mov	r2,r3
  807260:	dfc00117 	ldw	ra,4(sp)
  807264:	dc000017 	ldw	r16,0(sp)
  807268:	dec00204 	addi	sp,sp,8
  80726c:	f800283a 	ret

00807270 <strcmp>:
  807270:	2144b03a 	or	r2,r4,r5
  807274:	108000cc 	andi	r2,r2,3
  807278:	10001d1e 	bne	r2,zero,8072f0 <strcmp+0x80>
  80727c:	200f883a 	mov	r7,r4
  807280:	28800017 	ldw	r2,0(r5)
  807284:	21000017 	ldw	r4,0(r4)
  807288:	280d883a 	mov	r6,r5
  80728c:	2080161e 	bne	r4,r2,8072e8 <strcmp+0x78>
  807290:	023fbff4 	movhi	r8,65279
  807294:	423fbfc4 	addi	r8,r8,-257
  807298:	2207883a 	add	r3,r4,r8
  80729c:	01602074 	movhi	r5,32897
  8072a0:	29602004 	addi	r5,r5,-32640
  8072a4:	1946703a 	and	r3,r3,r5
  8072a8:	0104303a 	nor	r2,zero,r4
  8072ac:	10c4703a 	and	r2,r2,r3
  8072b0:	10001c1e 	bne	r2,zero,807324 <strcmp+0xb4>
  8072b4:	4013883a 	mov	r9,r8
  8072b8:	2811883a 	mov	r8,r5
  8072bc:	00000106 	br	8072c4 <strcmp+0x54>
  8072c0:	1800181e 	bne	r3,zero,807324 <strcmp+0xb4>
  8072c4:	39c00104 	addi	r7,r7,4
  8072c8:	39000017 	ldw	r4,0(r7)
  8072cc:	31800104 	addi	r6,r6,4
  8072d0:	31400017 	ldw	r5,0(r6)
  8072d4:	2245883a 	add	r2,r4,r9
  8072d8:	1204703a 	and	r2,r2,r8
  8072dc:	0106303a 	nor	r3,zero,r4
  8072e0:	1886703a 	and	r3,r3,r2
  8072e4:	217ff626 	beq	r4,r5,8072c0 <strcmp+0x50>
  8072e8:	3809883a 	mov	r4,r7
  8072ec:	300b883a 	mov	r5,r6
  8072f0:	20c00007 	ldb	r3,0(r4)
  8072f4:	1800051e 	bne	r3,zero,80730c <strcmp+0x9c>
  8072f8:	00000606 	br	807314 <strcmp+0xa4>
  8072fc:	21000044 	addi	r4,r4,1
  807300:	20c00007 	ldb	r3,0(r4)
  807304:	29400044 	addi	r5,r5,1
  807308:	18000226 	beq	r3,zero,807314 <strcmp+0xa4>
  80730c:	28800007 	ldb	r2,0(r5)
  807310:	18bffa26 	beq	r3,r2,8072fc <strcmp+0x8c>
  807314:	20c00003 	ldbu	r3,0(r4)
  807318:	28800003 	ldbu	r2,0(r5)
  80731c:	1885c83a 	sub	r2,r3,r2
  807320:	f800283a 	ret
  807324:	0005883a 	mov	r2,zero
  807328:	f800283a 	ret

0080732c <_write_r>:
  80732c:	defffd04 	addi	sp,sp,-12
  807330:	dc000015 	stw	r16,0(sp)
  807334:	040020b4 	movhi	r16,130
  807338:	84251f04 	addi	r16,r16,-27524
  80733c:	dc400115 	stw	r17,4(sp)
  807340:	80000015 	stw	zero,0(r16)
  807344:	2023883a 	mov	r17,r4
  807348:	2809883a 	mov	r4,r5
  80734c:	300b883a 	mov	r5,r6
  807350:	380d883a 	mov	r6,r7
  807354:	dfc00215 	stw	ra,8(sp)
  807358:	080a56c0 	call	80a56c <write>
  80735c:	1007883a 	mov	r3,r2
  807360:	00bfffc4 	movi	r2,-1
  807364:	18800626 	beq	r3,r2,807380 <_write_r+0x54>
  807368:	1805883a 	mov	r2,r3
  80736c:	dfc00217 	ldw	ra,8(sp)
  807370:	dc400117 	ldw	r17,4(sp)
  807374:	dc000017 	ldw	r16,0(sp)
  807378:	dec00304 	addi	sp,sp,12
  80737c:	f800283a 	ret
  807380:	80800017 	ldw	r2,0(r16)
  807384:	103ff826 	beq	r2,zero,807368 <_write_r+0x3c>
  807388:	88800015 	stw	r2,0(r17)
  80738c:	1805883a 	mov	r2,r3
  807390:	dfc00217 	ldw	ra,8(sp)
  807394:	dc400117 	ldw	r17,4(sp)
  807398:	dc000017 	ldw	r16,0(sp)
  80739c:	dec00304 	addi	sp,sp,12
  8073a0:	f800283a 	ret

008073a4 <_calloc_r>:
  8073a4:	298b383a 	mul	r5,r5,r6
  8073a8:	defffe04 	addi	sp,sp,-8
  8073ac:	dc000015 	stw	r16,0(sp)
  8073b0:	dfc00115 	stw	ra,4(sp)
  8073b4:	08050200 	call	805020 <_malloc_r>
  8073b8:	1021883a 	mov	r16,r2
  8073bc:	01c00904 	movi	r7,36
  8073c0:	10000d26 	beq	r2,zero,8073f8 <_calloc_r+0x54>
  8073c4:	10ffff17 	ldw	r3,-4(r2)
  8073c8:	1009883a 	mov	r4,r2
  8073cc:	00bfff04 	movi	r2,-4
  8073d0:	1886703a 	and	r3,r3,r2
  8073d4:	1887883a 	add	r3,r3,r2
  8073d8:	180d883a 	mov	r6,r3
  8073dc:	000b883a 	mov	r5,zero
  8073e0:	38c01736 	bltu	r7,r3,807440 <_calloc_r+0x9c>
  8073e4:	008004c4 	movi	r2,19
  8073e8:	10c00836 	bltu	r2,r3,80740c <_calloc_r+0x68>
  8073ec:	20000215 	stw	zero,8(r4)
  8073f0:	20000015 	stw	zero,0(r4)
  8073f4:	20000115 	stw	zero,4(r4)
  8073f8:	8005883a 	mov	r2,r16
  8073fc:	dfc00117 	ldw	ra,4(sp)
  807400:	dc000017 	ldw	r16,0(sp)
  807404:	dec00204 	addi	sp,sp,8
  807408:	f800283a 	ret
  80740c:	008006c4 	movi	r2,27
  807410:	80000015 	stw	zero,0(r16)
  807414:	80000115 	stw	zero,4(r16)
  807418:	81000204 	addi	r4,r16,8
  80741c:	10fff32e 	bgeu	r2,r3,8073ec <_calloc_r+0x48>
  807420:	80000215 	stw	zero,8(r16)
  807424:	80000315 	stw	zero,12(r16)
  807428:	81000404 	addi	r4,r16,16
  80742c:	19ffef1e 	bne	r3,r7,8073ec <_calloc_r+0x48>
  807430:	81000604 	addi	r4,r16,24
  807434:	80000415 	stw	zero,16(r16)
  807438:	80000515 	stw	zero,20(r16)
  80743c:	003feb06 	br	8073ec <_calloc_r+0x48>
  807440:	08059c40 	call	8059c4 <memset>
  807444:	8005883a 	mov	r2,r16
  807448:	dfc00117 	ldw	ra,4(sp)
  80744c:	dc000017 	ldw	r16,0(sp)
  807450:	dec00204 	addi	sp,sp,8
  807454:	f800283a 	ret

00807458 <_close_r>:
  807458:	defffd04 	addi	sp,sp,-12
  80745c:	dc000015 	stw	r16,0(sp)
  807460:	040020b4 	movhi	r16,130
  807464:	84251f04 	addi	r16,r16,-27524
  807468:	dc400115 	stw	r17,4(sp)
  80746c:	80000015 	stw	zero,0(r16)
  807470:	2023883a 	mov	r17,r4
  807474:	2809883a 	mov	r4,r5
  807478:	dfc00215 	stw	ra,8(sp)
  80747c:	0809bf00 	call	809bf0 <close>
  807480:	1007883a 	mov	r3,r2
  807484:	00bfffc4 	movi	r2,-1
  807488:	18800626 	beq	r3,r2,8074a4 <_close_r+0x4c>
  80748c:	1805883a 	mov	r2,r3
  807490:	dfc00217 	ldw	ra,8(sp)
  807494:	dc400117 	ldw	r17,4(sp)
  807498:	dc000017 	ldw	r16,0(sp)
  80749c:	dec00304 	addi	sp,sp,12
  8074a0:	f800283a 	ret
  8074a4:	80800017 	ldw	r2,0(r16)
  8074a8:	103ff826 	beq	r2,zero,80748c <_close_r+0x34>
  8074ac:	88800015 	stw	r2,0(r17)
  8074b0:	1805883a 	mov	r2,r3
  8074b4:	dfc00217 	ldw	ra,8(sp)
  8074b8:	dc400117 	ldw	r17,4(sp)
  8074bc:	dc000017 	ldw	r16,0(sp)
  8074c0:	dec00304 	addi	sp,sp,12
  8074c4:	f800283a 	ret

008074c8 <_fclose_r>:
  8074c8:	defffc04 	addi	sp,sp,-16
  8074cc:	dc400115 	stw	r17,4(sp)
  8074d0:	dc000015 	stw	r16,0(sp)
  8074d4:	dfc00315 	stw	ra,12(sp)
  8074d8:	dc800215 	stw	r18,8(sp)
  8074dc:	2821883a 	mov	r16,r5
  8074e0:	2023883a 	mov	r17,r4
  8074e4:	28002926 	beq	r5,zero,80758c <_fclose_r+0xc4>
  8074e8:	08041040 	call	804104 <__sfp_lock_acquire>
  8074ec:	88000226 	beq	r17,zero,8074f8 <_fclose_r+0x30>
  8074f0:	88800e17 	ldw	r2,56(r17)
  8074f4:	10002d26 	beq	r2,zero,8075ac <_fclose_r+0xe4>
  8074f8:	8080030f 	ldh	r2,12(r16)
  8074fc:	10002226 	beq	r2,zero,807588 <_fclose_r+0xc0>
  807500:	8809883a 	mov	r4,r17
  807504:	800b883a 	mov	r5,r16
  807508:	0803e7c0 	call	803e7c <_fflush_r>
  80750c:	1025883a 	mov	r18,r2
  807510:	80800b17 	ldw	r2,44(r16)
  807514:	10000426 	beq	r2,zero,807528 <_fclose_r+0x60>
  807518:	81400717 	ldw	r5,28(r16)
  80751c:	8809883a 	mov	r4,r17
  807520:	103ee83a 	callr	r2
  807524:	10002a16 	blt	r2,zero,8075d0 <_fclose_r+0x108>
  807528:	8080030b 	ldhu	r2,12(r16)
  80752c:	1080200c 	andi	r2,r2,128
  807530:	1000231e 	bne	r2,zero,8075c0 <_fclose_r+0xf8>
  807534:	81400c17 	ldw	r5,48(r16)
  807538:	28000526 	beq	r5,zero,807550 <_fclose_r+0x88>
  80753c:	80801004 	addi	r2,r16,64
  807540:	28800226 	beq	r5,r2,80754c <_fclose_r+0x84>
  807544:	8809883a 	mov	r4,r17
  807548:	08044980 	call	804498 <_free_r>
  80754c:	80000c15 	stw	zero,48(r16)
  807550:	81401117 	ldw	r5,68(r16)
  807554:	28000326 	beq	r5,zero,807564 <_fclose_r+0x9c>
  807558:	8809883a 	mov	r4,r17
  80755c:	08044980 	call	804498 <_free_r>
  807560:	80001115 	stw	zero,68(r16)
  807564:	8000030d 	sth	zero,12(r16)
  807568:	08041080 	call	804108 <__sfp_lock_release>
  80756c:	9005883a 	mov	r2,r18
  807570:	dfc00317 	ldw	ra,12(sp)
  807574:	dc800217 	ldw	r18,8(sp)
  807578:	dc400117 	ldw	r17,4(sp)
  80757c:	dc000017 	ldw	r16,0(sp)
  807580:	dec00404 	addi	sp,sp,16
  807584:	f800283a 	ret
  807588:	08041080 	call	804108 <__sfp_lock_release>
  80758c:	0025883a 	mov	r18,zero
  807590:	9005883a 	mov	r2,r18
  807594:	dfc00317 	ldw	ra,12(sp)
  807598:	dc800217 	ldw	r18,8(sp)
  80759c:	dc400117 	ldw	r17,4(sp)
  8075a0:	dc000017 	ldw	r16,0(sp)
  8075a4:	dec00404 	addi	sp,sp,16
  8075a8:	f800283a 	ret
  8075ac:	8809883a 	mov	r4,r17
  8075b0:	08041140 	call	804114 <__sinit>
  8075b4:	8080030f 	ldh	r2,12(r16)
  8075b8:	103fd11e 	bne	r2,zero,807500 <_fclose_r+0x38>
  8075bc:	003ff206 	br	807588 <_fclose_r+0xc0>
  8075c0:	81400417 	ldw	r5,16(r16)
  8075c4:	8809883a 	mov	r4,r17
  8075c8:	08044980 	call	804498 <_free_r>
  8075cc:	003fd906 	br	807534 <_fclose_r+0x6c>
  8075d0:	04bfffc4 	movi	r18,-1
  8075d4:	003fd406 	br	807528 <_fclose_r+0x60>

008075d8 <fclose>:
  8075d8:	00802074 	movhi	r2,129
  8075dc:	109e2504 	addi	r2,r2,30868
  8075e0:	200b883a 	mov	r5,r4
  8075e4:	11000017 	ldw	r4,0(r2)
  8075e8:	08074c81 	jmpi	8074c8 <_fclose_r>

008075ec <_fstat_r>:
  8075ec:	defffd04 	addi	sp,sp,-12
  8075f0:	dc000015 	stw	r16,0(sp)
  8075f4:	040020b4 	movhi	r16,130
  8075f8:	84251f04 	addi	r16,r16,-27524
  8075fc:	dc400115 	stw	r17,4(sp)
  807600:	80000015 	stw	zero,0(r16)
  807604:	2023883a 	mov	r17,r4
  807608:	2809883a 	mov	r4,r5
  80760c:	300b883a 	mov	r5,r6
  807610:	dfc00215 	stw	ra,8(sp)
  807614:	0809d780 	call	809d78 <fstat>
  807618:	1007883a 	mov	r3,r2
  80761c:	00bfffc4 	movi	r2,-1
  807620:	18800626 	beq	r3,r2,80763c <_fstat_r+0x50>
  807624:	1805883a 	mov	r2,r3
  807628:	dfc00217 	ldw	ra,8(sp)
  80762c:	dc400117 	ldw	r17,4(sp)
  807630:	dc000017 	ldw	r16,0(sp)
  807634:	dec00304 	addi	sp,sp,12
  807638:	f800283a 	ret
  80763c:	80800017 	ldw	r2,0(r16)
  807640:	103ff826 	beq	r2,zero,807624 <_fstat_r+0x38>
  807644:	88800015 	stw	r2,0(r17)
  807648:	1805883a 	mov	r2,r3
  80764c:	dfc00217 	ldw	ra,8(sp)
  807650:	dc400117 	ldw	r17,4(sp)
  807654:	dc000017 	ldw	r16,0(sp)
  807658:	dec00304 	addi	sp,sp,12
  80765c:	f800283a 	ret

00807660 <_isatty_r>:
  807660:	defffd04 	addi	sp,sp,-12
  807664:	dc000015 	stw	r16,0(sp)
  807668:	040020b4 	movhi	r16,130
  80766c:	84251f04 	addi	r16,r16,-27524
  807670:	dc400115 	stw	r17,4(sp)
  807674:	80000015 	stw	zero,0(r16)
  807678:	2023883a 	mov	r17,r4
  80767c:	2809883a 	mov	r4,r5
  807680:	dfc00215 	stw	ra,8(sp)
  807684:	0809eac0 	call	809eac <isatty>
  807688:	1007883a 	mov	r3,r2
  80768c:	00bfffc4 	movi	r2,-1
  807690:	18800626 	beq	r3,r2,8076ac <_isatty_r+0x4c>
  807694:	1805883a 	mov	r2,r3
  807698:	dfc00217 	ldw	ra,8(sp)
  80769c:	dc400117 	ldw	r17,4(sp)
  8076a0:	dc000017 	ldw	r16,0(sp)
  8076a4:	dec00304 	addi	sp,sp,12
  8076a8:	f800283a 	ret
  8076ac:	80800017 	ldw	r2,0(r16)
  8076b0:	103ff826 	beq	r2,zero,807694 <_isatty_r+0x34>
  8076b4:	88800015 	stw	r2,0(r17)
  8076b8:	1805883a 	mov	r2,r3
  8076bc:	dfc00217 	ldw	ra,8(sp)
  8076c0:	dc400117 	ldw	r17,4(sp)
  8076c4:	dc000017 	ldw	r16,0(sp)
  8076c8:	dec00304 	addi	sp,sp,12
  8076cc:	f800283a 	ret

008076d0 <_lseek_r>:
  8076d0:	defffd04 	addi	sp,sp,-12
  8076d4:	dc000015 	stw	r16,0(sp)
  8076d8:	040020b4 	movhi	r16,130
  8076dc:	84251f04 	addi	r16,r16,-27524
  8076e0:	dc400115 	stw	r17,4(sp)
  8076e4:	80000015 	stw	zero,0(r16)
  8076e8:	2023883a 	mov	r17,r4
  8076ec:	2809883a 	mov	r4,r5
  8076f0:	300b883a 	mov	r5,r6
  8076f4:	380d883a 	mov	r6,r7
  8076f8:	dfc00215 	stw	ra,8(sp)
  8076fc:	080a0b80 	call	80a0b8 <lseek>
  807700:	1007883a 	mov	r3,r2
  807704:	00bfffc4 	movi	r2,-1
  807708:	18800626 	beq	r3,r2,807724 <_lseek_r+0x54>
  80770c:	1805883a 	mov	r2,r3
  807710:	dfc00217 	ldw	ra,8(sp)
  807714:	dc400117 	ldw	r17,4(sp)
  807718:	dc000017 	ldw	r16,0(sp)
  80771c:	dec00304 	addi	sp,sp,12
  807720:	f800283a 	ret
  807724:	80800017 	ldw	r2,0(r16)
  807728:	103ff826 	beq	r2,zero,80770c <_lseek_r+0x3c>
  80772c:	88800015 	stw	r2,0(r17)
  807730:	1805883a 	mov	r2,r3
  807734:	dfc00217 	ldw	ra,8(sp)
  807738:	dc400117 	ldw	r17,4(sp)
  80773c:	dc000017 	ldw	r16,0(sp)
  807740:	dec00304 	addi	sp,sp,12
  807744:	f800283a 	ret

00807748 <_read_r>:
  807748:	defffd04 	addi	sp,sp,-12
  80774c:	dc000015 	stw	r16,0(sp)
  807750:	040020b4 	movhi	r16,130
  807754:	84251f04 	addi	r16,r16,-27524
  807758:	dc400115 	stw	r17,4(sp)
  80775c:	80000015 	stw	zero,0(r16)
  807760:	2023883a 	mov	r17,r4
  807764:	2809883a 	mov	r4,r5
  807768:	300b883a 	mov	r5,r6
  80776c:	380d883a 	mov	r6,r7
  807770:	dfc00215 	stw	ra,8(sp)
  807774:	080a2d00 	call	80a2d0 <read>
  807778:	1007883a 	mov	r3,r2
  80777c:	00bfffc4 	movi	r2,-1
  807780:	18800626 	beq	r3,r2,80779c <_read_r+0x54>
  807784:	1805883a 	mov	r2,r3
  807788:	dfc00217 	ldw	ra,8(sp)
  80778c:	dc400117 	ldw	r17,4(sp)
  807790:	dc000017 	ldw	r16,0(sp)
  807794:	dec00304 	addi	sp,sp,12
  807798:	f800283a 	ret
  80779c:	80800017 	ldw	r2,0(r16)
  8077a0:	103ff826 	beq	r2,zero,807784 <_read_r+0x3c>
  8077a4:	88800015 	stw	r2,0(r17)
  8077a8:	1805883a 	mov	r2,r3
  8077ac:	dfc00217 	ldw	ra,8(sp)
  8077b0:	dc400117 	ldw	r17,4(sp)
  8077b4:	dc000017 	ldw	r16,0(sp)
  8077b8:	dec00304 	addi	sp,sp,12
  8077bc:	f800283a 	ret

008077c0 <__udivdi3>:
  8077c0:	defff004 	addi	sp,sp,-64
  8077c4:	2005883a 	mov	r2,r4
  8077c8:	3011883a 	mov	r8,r6
  8077cc:	df000e15 	stw	fp,56(sp)
  8077d0:	dd000a15 	stw	r20,40(sp)
  8077d4:	dc000615 	stw	r16,24(sp)
  8077d8:	dfc00f15 	stw	ra,60(sp)
  8077dc:	ddc00d15 	stw	r23,52(sp)
  8077e0:	dd800c15 	stw	r22,48(sp)
  8077e4:	dd400b15 	stw	r21,44(sp)
  8077e8:	dcc00915 	stw	r19,36(sp)
  8077ec:	dc800815 	stw	r18,32(sp)
  8077f0:	dc400715 	stw	r17,28(sp)
  8077f4:	4021883a 	mov	r16,r8
  8077f8:	1039883a 	mov	fp,r2
  8077fc:	2829883a 	mov	r20,r5
  807800:	38003b1e 	bne	r7,zero,8078f0 <__udivdi3+0x130>
  807804:	2a005c36 	bltu	r5,r8,807978 <__udivdi3+0x1b8>
  807808:	4000a626 	beq	r8,zero,807aa4 <__udivdi3+0x2e4>
  80780c:	00bfffd4 	movui	r2,65535
  807810:	14009e36 	bltu	r2,r16,807a8c <__udivdi3+0x2cc>
  807814:	00803fc4 	movi	r2,255
  807818:	14013d36 	bltu	r2,r16,807d10 <__udivdi3+0x550>
  80781c:	000b883a 	mov	r5,zero
  807820:	0005883a 	mov	r2,zero
  807824:	8084d83a 	srl	r2,r16,r2
  807828:	01002074 	movhi	r4,129
  80782c:	2116f404 	addi	r4,r4,23504
  807830:	01800804 	movi	r6,32
  807834:	1105883a 	add	r2,r2,r4
  807838:	10c00003 	ldbu	r3,0(r2)
  80783c:	28c7883a 	add	r3,r5,r3
  807840:	30edc83a 	sub	r22,r6,r3
  807844:	b000ee1e 	bne	r22,zero,807c00 <__udivdi3+0x440>
  807848:	802ad43a 	srli	r21,r16,16
  80784c:	00800044 	movi	r2,1
  807850:	a423c83a 	sub	r17,r20,r16
  807854:	85ffffcc 	andi	r23,r16,65535
  807858:	d8800315 	stw	r2,12(sp)
  80785c:	8809883a 	mov	r4,r17
  807860:	a80b883a 	mov	r5,r21
  807864:	08095b40 	call	8095b4 <__udivsi3>
  807868:	8809883a 	mov	r4,r17
  80786c:	a80b883a 	mov	r5,r21
  807870:	102d883a 	mov	r22,r2
  807874:	08095bc0 	call	8095bc <__umodsi3>
  807878:	1004943a 	slli	r2,r2,16
  80787c:	e006d43a 	srli	r3,fp,16
  807880:	bda3383a 	mul	r17,r23,r22
  807884:	10c4b03a 	or	r2,r2,r3
  807888:	1440042e 	bgeu	r2,r17,80789c <__udivdi3+0xdc>
  80788c:	1405883a 	add	r2,r2,r16
  807890:	b5bfffc4 	addi	r22,r22,-1
  807894:	14000136 	bltu	r2,r16,80789c <__udivdi3+0xdc>
  807898:	14413d36 	bltu	r2,r17,807d90 <__udivdi3+0x5d0>
  80789c:	1463c83a 	sub	r17,r2,r17
  8078a0:	8809883a 	mov	r4,r17
  8078a4:	a80b883a 	mov	r5,r21
  8078a8:	08095b40 	call	8095b4 <__udivsi3>
  8078ac:	8809883a 	mov	r4,r17
  8078b0:	a80b883a 	mov	r5,r21
  8078b4:	1029883a 	mov	r20,r2
  8078b8:	08095bc0 	call	8095bc <__umodsi3>
  8078bc:	1004943a 	slli	r2,r2,16
  8078c0:	bd09383a 	mul	r4,r23,r20
  8078c4:	e0ffffcc 	andi	r3,fp,65535
  8078c8:	10c4b03a 	or	r2,r2,r3
  8078cc:	1100042e 	bgeu	r2,r4,8078e0 <__udivdi3+0x120>
  8078d0:	8085883a 	add	r2,r16,r2
  8078d4:	a53fffc4 	addi	r20,r20,-1
  8078d8:	14000136 	bltu	r2,r16,8078e0 <__udivdi3+0x120>
  8078dc:	11012036 	bltu	r2,r4,807d60 <__udivdi3+0x5a0>
  8078e0:	b004943a 	slli	r2,r22,16
  8078e4:	d9000317 	ldw	r4,12(sp)
  8078e8:	a084b03a 	or	r2,r20,r2
  8078ec:	00001506 	br	807944 <__udivdi3+0x184>
  8078f0:	380d883a 	mov	r6,r7
  8078f4:	29c06236 	bltu	r5,r7,807a80 <__udivdi3+0x2c0>
  8078f8:	00bfffd4 	movui	r2,65535
  8078fc:	11c05a36 	bltu	r2,r7,807a68 <__udivdi3+0x2a8>
  807900:	00803fc4 	movi	r2,255
  807904:	11c0fc36 	bltu	r2,r7,807cf8 <__udivdi3+0x538>
  807908:	000b883a 	mov	r5,zero
  80790c:	0005883a 	mov	r2,zero
  807910:	3084d83a 	srl	r2,r6,r2
  807914:	01002074 	movhi	r4,129
  807918:	2116f404 	addi	r4,r4,23504
  80791c:	01c00804 	movi	r7,32
  807920:	1105883a 	add	r2,r2,r4
  807924:	10c00003 	ldbu	r3,0(r2)
  807928:	28c7883a 	add	r3,r5,r3
  80792c:	38efc83a 	sub	r23,r7,r3
  807930:	b800691e 	bne	r23,zero,807ad8 <__udivdi3+0x318>
  807934:	35000136 	bltu	r6,r20,80793c <__udivdi3+0x17c>
  807938:	e4005136 	bltu	fp,r16,807a80 <__udivdi3+0x2c0>
  80793c:	00800044 	movi	r2,1
  807940:	0009883a 	mov	r4,zero
  807944:	2007883a 	mov	r3,r4
  807948:	dfc00f17 	ldw	ra,60(sp)
  80794c:	df000e17 	ldw	fp,56(sp)
  807950:	ddc00d17 	ldw	r23,52(sp)
  807954:	dd800c17 	ldw	r22,48(sp)
  807958:	dd400b17 	ldw	r21,44(sp)
  80795c:	dd000a17 	ldw	r20,40(sp)
  807960:	dcc00917 	ldw	r19,36(sp)
  807964:	dc800817 	ldw	r18,32(sp)
  807968:	dc400717 	ldw	r17,28(sp)
  80796c:	dc000617 	ldw	r16,24(sp)
  807970:	dec01004 	addi	sp,sp,64
  807974:	f800283a 	ret
  807978:	00bfffd4 	movui	r2,65535
  80797c:	12005036 	bltu	r2,r8,807ac0 <__udivdi3+0x300>
  807980:	00803fc4 	movi	r2,255
  807984:	1200e836 	bltu	r2,r8,807d28 <__udivdi3+0x568>
  807988:	000b883a 	mov	r5,zero
  80798c:	0005883a 	mov	r2,zero
  807990:	8084d83a 	srl	r2,r16,r2
  807994:	01002074 	movhi	r4,129
  807998:	2116f404 	addi	r4,r4,23504
  80799c:	01800804 	movi	r6,32
  8079a0:	1105883a 	add	r2,r2,r4
  8079a4:	10c00003 	ldbu	r3,0(r2)
  8079a8:	28c7883a 	add	r3,r5,r3
  8079ac:	30cbc83a 	sub	r5,r6,r3
  8079b0:	28000626 	beq	r5,zero,8079cc <__udivdi3+0x20c>
  8079b4:	3145c83a 	sub	r2,r6,r5
  8079b8:	e084d83a 	srl	r2,fp,r2
  8079bc:	a146983a 	sll	r3,r20,r5
  8079c0:	e178983a 	sll	fp,fp,r5
  8079c4:	8160983a 	sll	r16,r16,r5
  8079c8:	18a8b03a 	or	r20,r3,r2
  8079cc:	802ad43a 	srli	r21,r16,16
  8079d0:	a009883a 	mov	r4,r20
  8079d4:	85ffffcc 	andi	r23,r16,65535
  8079d8:	a80b883a 	mov	r5,r21
  8079dc:	08095b40 	call	8095b4 <__udivsi3>
  8079e0:	a009883a 	mov	r4,r20
  8079e4:	a80b883a 	mov	r5,r21
  8079e8:	102d883a 	mov	r22,r2
  8079ec:	08095bc0 	call	8095bc <__umodsi3>
  8079f0:	1004943a 	slli	r2,r2,16
  8079f4:	e006d43a 	srli	r3,fp,16
  8079f8:	bda3383a 	mul	r17,r23,r22
  8079fc:	10c4b03a 	or	r2,r2,r3
  807a00:	1440042e 	bgeu	r2,r17,807a14 <__udivdi3+0x254>
  807a04:	1405883a 	add	r2,r2,r16
  807a08:	b5bfffc4 	addi	r22,r22,-1
  807a0c:	14000136 	bltu	r2,r16,807a14 <__udivdi3+0x254>
  807a10:	1440d536 	bltu	r2,r17,807d68 <__udivdi3+0x5a8>
  807a14:	1463c83a 	sub	r17,r2,r17
  807a18:	8809883a 	mov	r4,r17
  807a1c:	a80b883a 	mov	r5,r21
  807a20:	08095b40 	call	8095b4 <__udivsi3>
  807a24:	8809883a 	mov	r4,r17
  807a28:	a80b883a 	mov	r5,r21
  807a2c:	1029883a 	mov	r20,r2
  807a30:	08095bc0 	call	8095bc <__umodsi3>
  807a34:	1004943a 	slli	r2,r2,16
  807a38:	bd09383a 	mul	r4,r23,r20
  807a3c:	e0ffffcc 	andi	r3,fp,65535
  807a40:	10c4b03a 	or	r2,r2,r3
  807a44:	1100042e 	bgeu	r2,r4,807a58 <__udivdi3+0x298>
  807a48:	8085883a 	add	r2,r16,r2
  807a4c:	a53fffc4 	addi	r20,r20,-1
  807a50:	14000136 	bltu	r2,r16,807a58 <__udivdi3+0x298>
  807a54:	1100c736 	bltu	r2,r4,807d74 <__udivdi3+0x5b4>
  807a58:	b004943a 	slli	r2,r22,16
  807a5c:	0009883a 	mov	r4,zero
  807a60:	a084b03a 	or	r2,r20,r2
  807a64:	003fb706 	br	807944 <__udivdi3+0x184>
  807a68:	00804034 	movhi	r2,256
  807a6c:	10bfffc4 	addi	r2,r2,-1
  807a70:	11c0a436 	bltu	r2,r7,807d04 <__udivdi3+0x544>
  807a74:	01400404 	movi	r5,16
  807a78:	2805883a 	mov	r2,r5
  807a7c:	003fa406 	br	807910 <__udivdi3+0x150>
  807a80:	0005883a 	mov	r2,zero
  807a84:	0009883a 	mov	r4,zero
  807a88:	003fae06 	br	807944 <__udivdi3+0x184>
  807a8c:	00804034 	movhi	r2,256
  807a90:	10bfffc4 	addi	r2,r2,-1
  807a94:	1400a136 	bltu	r2,r16,807d1c <__udivdi3+0x55c>
  807a98:	01400404 	movi	r5,16
  807a9c:	2805883a 	mov	r2,r5
  807aa0:	003f6006 	br	807824 <__udivdi3+0x64>
  807aa4:	01000044 	movi	r4,1
  807aa8:	000b883a 	mov	r5,zero
  807aac:	08095b40 	call	8095b4 <__udivsi3>
  807ab0:	1021883a 	mov	r16,r2
  807ab4:	00bfffd4 	movui	r2,65535
  807ab8:	143ff436 	bltu	r2,r16,807a8c <__udivdi3+0x2cc>
  807abc:	003f5506 	br	807814 <__udivdi3+0x54>
  807ac0:	00804034 	movhi	r2,256
  807ac4:	10bfffc4 	addi	r2,r2,-1
  807ac8:	12009a36 	bltu	r2,r8,807d34 <__udivdi3+0x574>
  807acc:	01400404 	movi	r5,16
  807ad0:	2805883a 	mov	r2,r5
  807ad4:	003fae06 	br	807990 <__udivdi3+0x1d0>
  807ad8:	3dc5c83a 	sub	r2,r7,r23
  807adc:	35c8983a 	sll	r4,r6,r23
  807ae0:	8086d83a 	srl	r3,r16,r2
  807ae4:	a0a2d83a 	srl	r17,r20,r2
  807ae8:	e084d83a 	srl	r2,fp,r2
  807aec:	20eab03a 	or	r21,r4,r3
  807af0:	a82cd43a 	srli	r22,r21,16
  807af4:	a5c6983a 	sll	r3,r20,r23
  807af8:	8809883a 	mov	r4,r17
  807afc:	b00b883a 	mov	r5,r22
  807b00:	1886b03a 	or	r3,r3,r2
  807b04:	d8c00215 	stw	r3,8(sp)
  807b08:	08095b40 	call	8095b4 <__udivsi3>
  807b0c:	8809883a 	mov	r4,r17
  807b10:	b00b883a 	mov	r5,r22
  807b14:	1029883a 	mov	r20,r2
  807b18:	08095bc0 	call	8095bc <__umodsi3>
  807b1c:	a8ffffcc 	andi	r3,r21,65535
  807b20:	d8c00515 	stw	r3,20(sp)
  807b24:	d9000217 	ldw	r4,8(sp)
  807b28:	d9400517 	ldw	r5,20(sp)
  807b2c:	1004943a 	slli	r2,r2,16
  807b30:	2006d43a 	srli	r3,r4,16
  807b34:	85e0983a 	sll	r16,r16,r23
  807b38:	2d23383a 	mul	r17,r5,r20
  807b3c:	10c4b03a 	or	r2,r2,r3
  807b40:	dc000015 	stw	r16,0(sp)
  807b44:	1440032e 	bgeu	r2,r17,807b54 <__udivdi3+0x394>
  807b48:	1545883a 	add	r2,r2,r21
  807b4c:	a53fffc4 	addi	r20,r20,-1
  807b50:	15407f2e 	bgeu	r2,r21,807d50 <__udivdi3+0x590>
  807b54:	1463c83a 	sub	r17,r2,r17
  807b58:	8809883a 	mov	r4,r17
  807b5c:	b00b883a 	mov	r5,r22
  807b60:	08095b40 	call	8095b4 <__udivsi3>
  807b64:	8809883a 	mov	r4,r17
  807b68:	b00b883a 	mov	r5,r22
  807b6c:	1021883a 	mov	r16,r2
  807b70:	08095bc0 	call	8095bc <__umodsi3>
  807b74:	d8c00517 	ldw	r3,20(sp)
  807b78:	d9000217 	ldw	r4,8(sp)
  807b7c:	1004943a 	slli	r2,r2,16
  807b80:	1c0f383a 	mul	r7,r3,r16
  807b84:	20ffffcc 	andi	r3,r4,65535
  807b88:	10e2b03a 	or	r17,r2,r3
  807b8c:	89c0032e 	bgeu	r17,r7,807b9c <__udivdi3+0x3dc>
  807b90:	8d63883a 	add	r17,r17,r21
  807b94:	843fffc4 	addi	r16,r16,-1
  807b98:	8d40692e 	bgeu	r17,r21,807d40 <__udivdi3+0x580>
  807b9c:	a008943a 	slli	r4,r20,16
  807ba0:	d9400017 	ldw	r5,0(sp)
  807ba4:	89e3c83a 	sub	r17,r17,r7
  807ba8:	8110b03a 	or	r8,r16,r4
  807bac:	280cd43a 	srli	r6,r5,16
  807bb0:	28ffffcc 	andi	r3,r5,65535
  807bb4:	40bfffcc 	andi	r2,r8,65535
  807bb8:	400ad43a 	srli	r5,r8,16
  807bbc:	10d3383a 	mul	r9,r2,r3
  807bc0:	1185383a 	mul	r2,r2,r6
  807bc4:	28c7383a 	mul	r3,r5,r3
  807bc8:	4808d43a 	srli	r4,r9,16
  807bcc:	298b383a 	mul	r5,r5,r6
  807bd0:	10c5883a 	add	r2,r2,r3
  807bd4:	2089883a 	add	r4,r4,r2
  807bd8:	20c0022e 	bgeu	r4,r3,807be4 <__udivdi3+0x424>
  807bdc:	00800074 	movhi	r2,1
  807be0:	288b883a 	add	r5,r5,r2
  807be4:	2004d43a 	srli	r2,r4,16
  807be8:	288b883a 	add	r5,r5,r2
  807bec:	89403f36 	bltu	r17,r5,807cec <__udivdi3+0x52c>
  807bf0:	89403926 	beq	r17,r5,807cd8 <__udivdi3+0x518>
  807bf4:	4005883a 	mov	r2,r8
  807bf8:	0009883a 	mov	r4,zero
  807bfc:	003f5106 	br	807944 <__udivdi3+0x184>
  807c00:	85a0983a 	sll	r16,r16,r22
  807c04:	3585c83a 	sub	r2,r6,r22
  807c08:	a0a2d83a 	srl	r17,r20,r2
  807c0c:	802ad43a 	srli	r21,r16,16
  807c10:	e084d83a 	srl	r2,fp,r2
  807c14:	a586983a 	sll	r3,r20,r22
  807c18:	8809883a 	mov	r4,r17
  807c1c:	a80b883a 	mov	r5,r21
  807c20:	1886b03a 	or	r3,r3,r2
  807c24:	d8c00115 	stw	r3,4(sp)
  807c28:	08095b40 	call	8095b4 <__udivsi3>
  807c2c:	8809883a 	mov	r4,r17
  807c30:	a80b883a 	mov	r5,r21
  807c34:	d8800415 	stw	r2,16(sp)
  807c38:	08095bc0 	call	8095bc <__umodsi3>
  807c3c:	d9000117 	ldw	r4,4(sp)
  807c40:	d9400417 	ldw	r5,16(sp)
  807c44:	1004943a 	slli	r2,r2,16
  807c48:	85ffffcc 	andi	r23,r16,65535
  807c4c:	2006d43a 	srli	r3,r4,16
  807c50:	b963383a 	mul	r17,r23,r5
  807c54:	10c4b03a 	or	r2,r2,r3
  807c58:	1440042e 	bgeu	r2,r17,807c6c <__udivdi3+0x4ac>
  807c5c:	297fffc4 	addi	r5,r5,-1
  807c60:	1405883a 	add	r2,r2,r16
  807c64:	d9400415 	stw	r5,16(sp)
  807c68:	1400442e 	bgeu	r2,r16,807d7c <__udivdi3+0x5bc>
  807c6c:	1463c83a 	sub	r17,r2,r17
  807c70:	8809883a 	mov	r4,r17
  807c74:	a80b883a 	mov	r5,r21
  807c78:	08095b40 	call	8095b4 <__udivsi3>
  807c7c:	8809883a 	mov	r4,r17
  807c80:	a80b883a 	mov	r5,r21
  807c84:	1029883a 	mov	r20,r2
  807c88:	08095bc0 	call	8095bc <__umodsi3>
  807c8c:	d9400117 	ldw	r5,4(sp)
  807c90:	1004943a 	slli	r2,r2,16
  807c94:	bd09383a 	mul	r4,r23,r20
  807c98:	28ffffcc 	andi	r3,r5,65535
  807c9c:	10c6b03a 	or	r3,r2,r3
  807ca0:	1900062e 	bgeu	r3,r4,807cbc <__udivdi3+0x4fc>
  807ca4:	1c07883a 	add	r3,r3,r16
  807ca8:	a53fffc4 	addi	r20,r20,-1
  807cac:	1c000336 	bltu	r3,r16,807cbc <__udivdi3+0x4fc>
  807cb0:	1900022e 	bgeu	r3,r4,807cbc <__udivdi3+0x4fc>
  807cb4:	a53fffc4 	addi	r20,r20,-1
  807cb8:	1c07883a 	add	r3,r3,r16
  807cbc:	d9400417 	ldw	r5,16(sp)
  807cc0:	e5b8983a 	sll	fp,fp,r22
  807cc4:	1923c83a 	sub	r17,r3,r4
  807cc8:	2804943a 	slli	r2,r5,16
  807ccc:	a0a8b03a 	or	r20,r20,r2
  807cd0:	dd000315 	stw	r20,12(sp)
  807cd4:	003ee106 	br	80785c <__udivdi3+0x9c>
  807cd8:	2004943a 	slli	r2,r4,16
  807cdc:	e5c8983a 	sll	r4,fp,r23
  807ce0:	48ffffcc 	andi	r3,r9,65535
  807ce4:	10c5883a 	add	r2,r2,r3
  807ce8:	20bfc22e 	bgeu	r4,r2,807bf4 <__udivdi3+0x434>
  807cec:	40bfffc4 	addi	r2,r8,-1
  807cf0:	0009883a 	mov	r4,zero
  807cf4:	003f1306 	br	807944 <__udivdi3+0x184>
  807cf8:	01400204 	movi	r5,8
  807cfc:	2805883a 	mov	r2,r5
  807d00:	003f0306 	br	807910 <__udivdi3+0x150>
  807d04:	01400604 	movi	r5,24
  807d08:	2805883a 	mov	r2,r5
  807d0c:	003f0006 	br	807910 <__udivdi3+0x150>
  807d10:	01400204 	movi	r5,8
  807d14:	2805883a 	mov	r2,r5
  807d18:	003ec206 	br	807824 <__udivdi3+0x64>
  807d1c:	01400604 	movi	r5,24
  807d20:	2805883a 	mov	r2,r5
  807d24:	003ebf06 	br	807824 <__udivdi3+0x64>
  807d28:	01400204 	movi	r5,8
  807d2c:	2805883a 	mov	r2,r5
  807d30:	003f1706 	br	807990 <__udivdi3+0x1d0>
  807d34:	01400604 	movi	r5,24
  807d38:	2805883a 	mov	r2,r5
  807d3c:	003f1406 	br	807990 <__udivdi3+0x1d0>
  807d40:	89ff962e 	bgeu	r17,r7,807b9c <__udivdi3+0x3dc>
  807d44:	8d63883a 	add	r17,r17,r21
  807d48:	843fffc4 	addi	r16,r16,-1
  807d4c:	003f9306 	br	807b9c <__udivdi3+0x3dc>
  807d50:	147f802e 	bgeu	r2,r17,807b54 <__udivdi3+0x394>
  807d54:	a53fffc4 	addi	r20,r20,-1
  807d58:	1545883a 	add	r2,r2,r21
  807d5c:	003f7d06 	br	807b54 <__udivdi3+0x394>
  807d60:	a53fffc4 	addi	r20,r20,-1
  807d64:	003ede06 	br	8078e0 <__udivdi3+0x120>
  807d68:	b5bfffc4 	addi	r22,r22,-1
  807d6c:	1405883a 	add	r2,r2,r16
  807d70:	003f2806 	br	807a14 <__udivdi3+0x254>
  807d74:	a53fffc4 	addi	r20,r20,-1
  807d78:	003f3706 	br	807a58 <__udivdi3+0x298>
  807d7c:	147fbb2e 	bgeu	r2,r17,807c6c <__udivdi3+0x4ac>
  807d80:	297fffc4 	addi	r5,r5,-1
  807d84:	1405883a 	add	r2,r2,r16
  807d88:	d9400415 	stw	r5,16(sp)
  807d8c:	003fb706 	br	807c6c <__udivdi3+0x4ac>
  807d90:	b5bfffc4 	addi	r22,r22,-1
  807d94:	1405883a 	add	r2,r2,r16
  807d98:	003ec006 	br	80789c <__udivdi3+0xdc>

00807d9c <__umoddi3>:
  807d9c:	defff104 	addi	sp,sp,-60
  807da0:	dd800b15 	stw	r22,44(sp)
  807da4:	dd000915 	stw	r20,36(sp)
  807da8:	dc000515 	stw	r16,20(sp)
  807dac:	dfc00e15 	stw	ra,56(sp)
  807db0:	df000d15 	stw	fp,52(sp)
  807db4:	ddc00c15 	stw	r23,48(sp)
  807db8:	dd400a15 	stw	r21,40(sp)
  807dbc:	dcc00815 	stw	r19,32(sp)
  807dc0:	dc800715 	stw	r18,28(sp)
  807dc4:	dc400615 	stw	r17,24(sp)
  807dc8:	3021883a 	mov	r16,r6
  807dcc:	202d883a 	mov	r22,r4
  807dd0:	2829883a 	mov	r20,r5
  807dd4:	38002b1e 	bne	r7,zero,807e84 <__umoddi3+0xe8>
  807dd8:	29805036 	bltu	r5,r6,807f1c <__umoddi3+0x180>
  807ddc:	30008a26 	beq	r6,zero,808008 <__umoddi3+0x26c>
  807de0:	00bfffd4 	movui	r2,65535
  807de4:	14008236 	bltu	r2,r16,807ff0 <__umoddi3+0x254>
  807de8:	00803fc4 	movi	r2,255
  807dec:	14013636 	bltu	r2,r16,8082c8 <__umoddi3+0x52c>
  807df0:	000b883a 	mov	r5,zero
  807df4:	0005883a 	mov	r2,zero
  807df8:	8084d83a 	srl	r2,r16,r2
  807dfc:	01002074 	movhi	r4,129
  807e00:	2116f404 	addi	r4,r4,23504
  807e04:	01800804 	movi	r6,32
  807e08:	1105883a 	add	r2,r2,r4
  807e0c:	10c00003 	ldbu	r3,0(r2)
  807e10:	28c7883a 	add	r3,r5,r3
  807e14:	30efc83a 	sub	r23,r6,r3
  807e18:	b800941e 	bne	r23,zero,80806c <__umoddi3+0x2d0>
  807e1c:	802ad43a 	srli	r21,r16,16
  807e20:	a423c83a 	sub	r17,r20,r16
  807e24:	0039883a 	mov	fp,zero
  807e28:	853fffcc 	andi	r20,r16,65535
  807e2c:	8809883a 	mov	r4,r17
  807e30:	a80b883a 	mov	r5,r21
  807e34:	08095b40 	call	8095b4 <__udivsi3>
  807e38:	8809883a 	mov	r4,r17
  807e3c:	a80b883a 	mov	r5,r21
  807e40:	a0a3383a 	mul	r17,r20,r2
  807e44:	08095bc0 	call	8095bc <__umodsi3>
  807e48:	1004943a 	slli	r2,r2,16
  807e4c:	b006d43a 	srli	r3,r22,16
  807e50:	10c4b03a 	or	r2,r2,r3
  807e54:	1440032e 	bgeu	r2,r17,807e64 <__umoddi3+0xc8>
  807e58:	1405883a 	add	r2,r2,r16
  807e5c:	14000136 	bltu	r2,r16,807e64 <__umoddi3+0xc8>
  807e60:	14413536 	bltu	r2,r17,808338 <__umoddi3+0x59c>
  807e64:	1463c83a 	sub	r17,r2,r17
  807e68:	8809883a 	mov	r4,r17
  807e6c:	a80b883a 	mov	r5,r21
  807e70:	08095b40 	call	8095b4 <__udivsi3>
  807e74:	8809883a 	mov	r4,r17
  807e78:	a0a3383a 	mul	r17,r20,r2
  807e7c:	a80b883a 	mov	r5,r21
  807e80:	00004d06 	br	807fb8 <__umoddi3+0x21c>
  807e84:	380d883a 	mov	r6,r7
  807e88:	29c0102e 	bgeu	r5,r7,807ecc <__umoddi3+0x130>
  807e8c:	2011883a 	mov	r8,r4
  807e90:	2813883a 	mov	r9,r5
  807e94:	4005883a 	mov	r2,r8
  807e98:	4807883a 	mov	r3,r9
  807e9c:	dfc00e17 	ldw	ra,56(sp)
  807ea0:	df000d17 	ldw	fp,52(sp)
  807ea4:	ddc00c17 	ldw	r23,48(sp)
  807ea8:	dd800b17 	ldw	r22,44(sp)
  807eac:	dd400a17 	ldw	r21,40(sp)
  807eb0:	dd000917 	ldw	r20,36(sp)
  807eb4:	dcc00817 	ldw	r19,32(sp)
  807eb8:	dc800717 	ldw	r18,28(sp)
  807ebc:	dc400617 	ldw	r17,24(sp)
  807ec0:	dc000517 	ldw	r16,20(sp)
  807ec4:	dec00f04 	addi	sp,sp,60
  807ec8:	f800283a 	ret
  807ecc:	00bfffd4 	movui	r2,65535
  807ed0:	11c05a36 	bltu	r2,r7,80803c <__umoddi3+0x2a0>
  807ed4:	00803fc4 	movi	r2,255
  807ed8:	11c0fe36 	bltu	r2,r7,8082d4 <__umoddi3+0x538>
  807edc:	000b883a 	mov	r5,zero
  807ee0:	0005883a 	mov	r2,zero
  807ee4:	3084d83a 	srl	r2,r6,r2
  807ee8:	01002074 	movhi	r4,129
  807eec:	2116f404 	addi	r4,r4,23504
  807ef0:	01c00804 	movi	r7,32
  807ef4:	1105883a 	add	r2,r2,r4
  807ef8:	10c00003 	ldbu	r3,0(r2)
  807efc:	28c7883a 	add	r3,r5,r3
  807f00:	38ebc83a 	sub	r21,r7,r3
  807f04:	a800851e 	bne	r21,zero,80811c <__umoddi3+0x380>
  807f08:	35005236 	bltu	r6,r20,808054 <__umoddi3+0x2b8>
  807f0c:	b400512e 	bgeu	r22,r16,808054 <__umoddi3+0x2b8>
  807f10:	b011883a 	mov	r8,r22
  807f14:	a013883a 	mov	r9,r20
  807f18:	003fde06 	br	807e94 <__umoddi3+0xf8>
  807f1c:	00bfffd4 	movui	r2,65535
  807f20:	11804036 	bltu	r2,r6,808024 <__umoddi3+0x288>
  807f24:	00803fc4 	movi	r2,255
  807f28:	1180ed36 	bltu	r2,r6,8082e0 <__umoddi3+0x544>
  807f2c:	000b883a 	mov	r5,zero
  807f30:	0005883a 	mov	r2,zero
  807f34:	8084d83a 	srl	r2,r16,r2
  807f38:	01002074 	movhi	r4,129
  807f3c:	2116f404 	addi	r4,r4,23504
  807f40:	01800804 	movi	r6,32
  807f44:	1105883a 	add	r2,r2,r4
  807f48:	10c00003 	ldbu	r3,0(r2)
  807f4c:	28c7883a 	add	r3,r5,r3
  807f50:	30c7c83a 	sub	r3,r6,r3
  807f54:	1800bf1e 	bne	r3,zero,808254 <__umoddi3+0x4b8>
  807f58:	0039883a 	mov	fp,zero
  807f5c:	802ad43a 	srli	r21,r16,16
  807f60:	a009883a 	mov	r4,r20
  807f64:	85ffffcc 	andi	r23,r16,65535
  807f68:	a80b883a 	mov	r5,r21
  807f6c:	08095b40 	call	8095b4 <__udivsi3>
  807f70:	a009883a 	mov	r4,r20
  807f74:	a80b883a 	mov	r5,r21
  807f78:	b8a3383a 	mul	r17,r23,r2
  807f7c:	08095bc0 	call	8095bc <__umodsi3>
  807f80:	1004943a 	slli	r2,r2,16
  807f84:	b006d43a 	srli	r3,r22,16
  807f88:	10c4b03a 	or	r2,r2,r3
  807f8c:	1440032e 	bgeu	r2,r17,807f9c <__umoddi3+0x200>
  807f90:	1405883a 	add	r2,r2,r16
  807f94:	14000136 	bltu	r2,r16,807f9c <__umoddi3+0x200>
  807f98:	1440e536 	bltu	r2,r17,808330 <__umoddi3+0x594>
  807f9c:	1463c83a 	sub	r17,r2,r17
  807fa0:	8809883a 	mov	r4,r17
  807fa4:	a80b883a 	mov	r5,r21
  807fa8:	08095b40 	call	8095b4 <__udivsi3>
  807fac:	8809883a 	mov	r4,r17
  807fb0:	b8a3383a 	mul	r17,r23,r2
  807fb4:	a80b883a 	mov	r5,r21
  807fb8:	08095bc0 	call	8095bc <__umodsi3>
  807fbc:	1004943a 	slli	r2,r2,16
  807fc0:	b0ffffcc 	andi	r3,r22,65535
  807fc4:	10c4b03a 	or	r2,r2,r3
  807fc8:	1440042e 	bgeu	r2,r17,807fdc <__umoddi3+0x240>
  807fcc:	1405883a 	add	r2,r2,r16
  807fd0:	14000236 	bltu	r2,r16,807fdc <__umoddi3+0x240>
  807fd4:	1440012e 	bgeu	r2,r17,807fdc <__umoddi3+0x240>
  807fd8:	1405883a 	add	r2,r2,r16
  807fdc:	1445c83a 	sub	r2,r2,r17
  807fe0:	1724d83a 	srl	r18,r2,fp
  807fe4:	0013883a 	mov	r9,zero
  807fe8:	9011883a 	mov	r8,r18
  807fec:	003fa906 	br	807e94 <__umoddi3+0xf8>
  807ff0:	00804034 	movhi	r2,256
  807ff4:	10bfffc4 	addi	r2,r2,-1
  807ff8:	1400b036 	bltu	r2,r16,8082bc <__umoddi3+0x520>
  807ffc:	01400404 	movi	r5,16
  808000:	2805883a 	mov	r2,r5
  808004:	003f7c06 	br	807df8 <__umoddi3+0x5c>
  808008:	01000044 	movi	r4,1
  80800c:	000b883a 	mov	r5,zero
  808010:	08095b40 	call	8095b4 <__udivsi3>
  808014:	1021883a 	mov	r16,r2
  808018:	00bfffd4 	movui	r2,65535
  80801c:	143ff436 	bltu	r2,r16,807ff0 <__umoddi3+0x254>
  808020:	003f7106 	br	807de8 <__umoddi3+0x4c>
  808024:	00804034 	movhi	r2,256
  808028:	10bfffc4 	addi	r2,r2,-1
  80802c:	1180af36 	bltu	r2,r6,8082ec <__umoddi3+0x550>
  808030:	01400404 	movi	r5,16
  808034:	2805883a 	mov	r2,r5
  808038:	003fbe06 	br	807f34 <__umoddi3+0x198>
  80803c:	00804034 	movhi	r2,256
  808040:	10bfffc4 	addi	r2,r2,-1
  808044:	11c0ac36 	bltu	r2,r7,8082f8 <__umoddi3+0x55c>
  808048:	01400404 	movi	r5,16
  80804c:	2805883a 	mov	r2,r5
  808050:	003fa406 	br	807ee4 <__umoddi3+0x148>
  808054:	b409c83a 	sub	r4,r22,r16
  808058:	b105803a 	cmpltu	r2,r22,r4
  80805c:	a187c83a 	sub	r3,r20,r6
  808060:	18a9c83a 	sub	r20,r3,r2
  808064:	202d883a 	mov	r22,r4
  808068:	003fa906 	br	807f10 <__umoddi3+0x174>
  80806c:	85e0983a 	sll	r16,r16,r23
  808070:	35c5c83a 	sub	r2,r6,r23
  808074:	a0a2d83a 	srl	r17,r20,r2
  808078:	802ad43a 	srli	r21,r16,16
  80807c:	b084d83a 	srl	r2,r22,r2
  808080:	a5c6983a 	sll	r3,r20,r23
  808084:	8809883a 	mov	r4,r17
  808088:	a80b883a 	mov	r5,r21
  80808c:	1886b03a 	or	r3,r3,r2
  808090:	d8c00115 	stw	r3,4(sp)
  808094:	853fffcc 	andi	r20,r16,65535
  808098:	08095b40 	call	8095b4 <__udivsi3>
  80809c:	8809883a 	mov	r4,r17
  8080a0:	a80b883a 	mov	r5,r21
  8080a4:	a0a3383a 	mul	r17,r20,r2
  8080a8:	08095bc0 	call	8095bc <__umodsi3>
  8080ac:	d9000117 	ldw	r4,4(sp)
  8080b0:	1004943a 	slli	r2,r2,16
  8080b4:	b839883a 	mov	fp,r23
  8080b8:	2006d43a 	srli	r3,r4,16
  8080bc:	10c4b03a 	or	r2,r2,r3
  8080c0:	1440022e 	bgeu	r2,r17,8080cc <__umoddi3+0x330>
  8080c4:	1405883a 	add	r2,r2,r16
  8080c8:	1400962e 	bgeu	r2,r16,808324 <__umoddi3+0x588>
  8080cc:	1463c83a 	sub	r17,r2,r17
  8080d0:	8809883a 	mov	r4,r17
  8080d4:	a80b883a 	mov	r5,r21
  8080d8:	08095b40 	call	8095b4 <__udivsi3>
  8080dc:	8809883a 	mov	r4,r17
  8080e0:	a80b883a 	mov	r5,r21
  8080e4:	a0a3383a 	mul	r17,r20,r2
  8080e8:	08095bc0 	call	8095bc <__umodsi3>
  8080ec:	d9400117 	ldw	r5,4(sp)
  8080f0:	1004943a 	slli	r2,r2,16
  8080f4:	28ffffcc 	andi	r3,r5,65535
  8080f8:	10c4b03a 	or	r2,r2,r3
  8080fc:	1440042e 	bgeu	r2,r17,808110 <__umoddi3+0x374>
  808100:	1405883a 	add	r2,r2,r16
  808104:	14000236 	bltu	r2,r16,808110 <__umoddi3+0x374>
  808108:	1440012e 	bgeu	r2,r17,808110 <__umoddi3+0x374>
  80810c:	1405883a 	add	r2,r2,r16
  808110:	b5ec983a 	sll	r22,r22,r23
  808114:	1463c83a 	sub	r17,r2,r17
  808118:	003f4406 	br	807e2c <__umoddi3+0x90>
  80811c:	3d4fc83a 	sub	r7,r7,r21
  808120:	3546983a 	sll	r3,r6,r21
  808124:	81c4d83a 	srl	r2,r16,r7
  808128:	a1e2d83a 	srl	r17,r20,r7
  80812c:	a54c983a 	sll	r6,r20,r21
  808130:	18aeb03a 	or	r23,r3,r2
  808134:	b828d43a 	srli	r20,r23,16
  808138:	b1c4d83a 	srl	r2,r22,r7
  80813c:	8809883a 	mov	r4,r17
  808140:	a00b883a 	mov	r5,r20
  808144:	308cb03a 	or	r6,r6,r2
  808148:	d9c00315 	stw	r7,12(sp)
  80814c:	d9800215 	stw	r6,8(sp)
  808150:	08095b40 	call	8095b4 <__udivsi3>
  808154:	8809883a 	mov	r4,r17
  808158:	a00b883a 	mov	r5,r20
  80815c:	1039883a 	mov	fp,r2
  808160:	08095bc0 	call	8095bc <__umodsi3>
  808164:	b8ffffcc 	andi	r3,r23,65535
  808168:	d8c00415 	stw	r3,16(sp)
  80816c:	d9000217 	ldw	r4,8(sp)
  808170:	d9400417 	ldw	r5,16(sp)
  808174:	1004943a 	slli	r2,r2,16
  808178:	2006d43a 	srli	r3,r4,16
  80817c:	8560983a 	sll	r16,r16,r21
  808180:	2f23383a 	mul	r17,r5,fp
  808184:	10c4b03a 	or	r2,r2,r3
  808188:	dc000015 	stw	r16,0(sp)
  80818c:	b56c983a 	sll	r22,r22,r21
  808190:	1440032e 	bgeu	r2,r17,8081a0 <__umoddi3+0x404>
  808194:	15c5883a 	add	r2,r2,r23
  808198:	e73fffc4 	addi	fp,fp,-1
  80819c:	15c05d2e 	bgeu	r2,r23,808314 <__umoddi3+0x578>
  8081a0:	1463c83a 	sub	r17,r2,r17
  8081a4:	8809883a 	mov	r4,r17
  8081a8:	a00b883a 	mov	r5,r20
  8081ac:	08095b40 	call	8095b4 <__udivsi3>
  8081b0:	8809883a 	mov	r4,r17
  8081b4:	a00b883a 	mov	r5,r20
  8081b8:	1021883a 	mov	r16,r2
  8081bc:	08095bc0 	call	8095bc <__umodsi3>
  8081c0:	d8c00417 	ldw	r3,16(sp)
  8081c4:	d9000217 	ldw	r4,8(sp)
  8081c8:	1004943a 	slli	r2,r2,16
  8081cc:	1c23383a 	mul	r17,r3,r16
  8081d0:	20ffffcc 	andi	r3,r4,65535
  8081d4:	10ceb03a 	or	r7,r2,r3
  8081d8:	3c40032e 	bgeu	r7,r17,8081e8 <__umoddi3+0x44c>
  8081dc:	3dcf883a 	add	r7,r7,r23
  8081e0:	843fffc4 	addi	r16,r16,-1
  8081e4:	3dc0472e 	bgeu	r7,r23,808304 <__umoddi3+0x568>
  8081e8:	e004943a 	slli	r2,fp,16
  8081ec:	d9400017 	ldw	r5,0(sp)
  8081f0:	3c4fc83a 	sub	r7,r7,r17
  8081f4:	8084b03a 	or	r2,r16,r2
  8081f8:	28ffffcc 	andi	r3,r5,65535
  8081fc:	280cd43a 	srli	r6,r5,16
  808200:	100ad43a 	srli	r5,r2,16
  808204:	10bfffcc 	andi	r2,r2,65535
  808208:	10d1383a 	mul	r8,r2,r3
  80820c:	28c7383a 	mul	r3,r5,r3
  808210:	1185383a 	mul	r2,r2,r6
  808214:	4008d43a 	srli	r4,r8,16
  808218:	298b383a 	mul	r5,r5,r6
  80821c:	10c5883a 	add	r2,r2,r3
  808220:	2089883a 	add	r4,r4,r2
  808224:	20c0022e 	bgeu	r4,r3,808230 <__umoddi3+0x494>
  808228:	00800074 	movhi	r2,1
  80822c:	288b883a 	add	r5,r5,r2
  808230:	2004d43a 	srli	r2,r4,16
  808234:	2008943a 	slli	r4,r4,16
  808238:	40ffffcc 	andi	r3,r8,65535
  80823c:	288b883a 	add	r5,r5,r2
  808240:	20c9883a 	add	r4,r4,r3
  808244:	39400b36 	bltu	r7,r5,808274 <__umoddi3+0x4d8>
  808248:	39403d26 	beq	r7,r5,808340 <__umoddi3+0x5a4>
  80824c:	394bc83a 	sub	r5,r7,r5
  808250:	00000f06 	br	808290 <__umoddi3+0x4f4>
  808254:	30c5c83a 	sub	r2,r6,r3
  808258:	1839883a 	mov	fp,r3
  80825c:	b084d83a 	srl	r2,r22,r2
  808260:	a0c6983a 	sll	r3,r20,r3
  808264:	8720983a 	sll	r16,r16,fp
  808268:	b72c983a 	sll	r22,r22,fp
  80826c:	18a8b03a 	or	r20,r3,r2
  808270:	003f3a06 	br	807f5c <__umoddi3+0x1c0>
  808274:	d8c00017 	ldw	r3,0(sp)
  808278:	20c5c83a 	sub	r2,r4,r3
  80827c:	2089803a 	cmpltu	r4,r4,r2
  808280:	2dc7c83a 	sub	r3,r5,r23
  808284:	1907c83a 	sub	r3,r3,r4
  808288:	38cbc83a 	sub	r5,r7,r3
  80828c:	1009883a 	mov	r4,r2
  808290:	b105c83a 	sub	r2,r22,r4
  808294:	b087803a 	cmpltu	r3,r22,r2
  808298:	28c7c83a 	sub	r3,r5,r3
  80829c:	d9400317 	ldw	r5,12(sp)
  8082a0:	1544d83a 	srl	r2,r2,r21
  8082a4:	1948983a 	sll	r4,r3,r5
  8082a8:	1d46d83a 	srl	r3,r3,r21
  8082ac:	20a4b03a 	or	r18,r4,r2
  8082b0:	9011883a 	mov	r8,r18
  8082b4:	1813883a 	mov	r9,r3
  8082b8:	003ef606 	br	807e94 <__umoddi3+0xf8>
  8082bc:	01400604 	movi	r5,24
  8082c0:	2805883a 	mov	r2,r5
  8082c4:	003ecc06 	br	807df8 <__umoddi3+0x5c>
  8082c8:	01400204 	movi	r5,8
  8082cc:	2805883a 	mov	r2,r5
  8082d0:	003ec906 	br	807df8 <__umoddi3+0x5c>
  8082d4:	01400204 	movi	r5,8
  8082d8:	2805883a 	mov	r2,r5
  8082dc:	003f0106 	br	807ee4 <__umoddi3+0x148>
  8082e0:	01400204 	movi	r5,8
  8082e4:	2805883a 	mov	r2,r5
  8082e8:	003f1206 	br	807f34 <__umoddi3+0x198>
  8082ec:	01400604 	movi	r5,24
  8082f0:	2805883a 	mov	r2,r5
  8082f4:	003f0f06 	br	807f34 <__umoddi3+0x198>
  8082f8:	01400604 	movi	r5,24
  8082fc:	2805883a 	mov	r2,r5
  808300:	003ef806 	br	807ee4 <__umoddi3+0x148>
  808304:	3c7fb82e 	bgeu	r7,r17,8081e8 <__umoddi3+0x44c>
  808308:	843fffc4 	addi	r16,r16,-1
  80830c:	3dcf883a 	add	r7,r7,r23
  808310:	003fb506 	br	8081e8 <__umoddi3+0x44c>
  808314:	147fa22e 	bgeu	r2,r17,8081a0 <__umoddi3+0x404>
  808318:	e73fffc4 	addi	fp,fp,-1
  80831c:	15c5883a 	add	r2,r2,r23
  808320:	003f9f06 	br	8081a0 <__umoddi3+0x404>
  808324:	147f692e 	bgeu	r2,r17,8080cc <__umoddi3+0x330>
  808328:	1405883a 	add	r2,r2,r16
  80832c:	003f6706 	br	8080cc <__umoddi3+0x330>
  808330:	1405883a 	add	r2,r2,r16
  808334:	003f1906 	br	807f9c <__umoddi3+0x200>
  808338:	1405883a 	add	r2,r2,r16
  80833c:	003ec906 	br	807e64 <__umoddi3+0xc8>
  808340:	b13fcc36 	bltu	r22,r4,808274 <__umoddi3+0x4d8>
  808344:	000b883a 	mov	r5,zero
  808348:	003fd106 	br	808290 <__umoddi3+0x4f4>

0080834c <_fpadd_parts>:
  80834c:	defff804 	addi	sp,sp,-32
  808350:	dcc00315 	stw	r19,12(sp)
  808354:	2027883a 	mov	r19,r4
  808358:	21000017 	ldw	r4,0(r4)
  80835c:	00c00044 	movi	r3,1
  808360:	dd400515 	stw	r21,20(sp)
  808364:	dd000415 	stw	r20,16(sp)
  808368:	ddc00715 	stw	r23,28(sp)
  80836c:	dd800615 	stw	r22,24(sp)
  808370:	dc800215 	stw	r18,8(sp)
  808374:	dc400115 	stw	r17,4(sp)
  808378:	dc000015 	stw	r16,0(sp)
  80837c:	282b883a 	mov	r21,r5
  808380:	3029883a 	mov	r20,r6
  808384:	1900632e 	bgeu	r3,r4,808514 <_fpadd_parts+0x1c8>
  808388:	28800017 	ldw	r2,0(r5)
  80838c:	1880812e 	bgeu	r3,r2,808594 <_fpadd_parts+0x248>
  808390:	00c00104 	movi	r3,4
  808394:	20c0dc26 	beq	r4,r3,808708 <_fpadd_parts+0x3bc>
  808398:	10c07e26 	beq	r2,r3,808594 <_fpadd_parts+0x248>
  80839c:	00c00084 	movi	r3,2
  8083a0:	10c06726 	beq	r2,r3,808540 <_fpadd_parts+0x1f4>
  8083a4:	20c07b26 	beq	r4,r3,808594 <_fpadd_parts+0x248>
  8083a8:	9dc00217 	ldw	r23,8(r19)
  8083ac:	28c00217 	ldw	r3,8(r5)
  8083b0:	9c400317 	ldw	r17,12(r19)
  8083b4:	2bc00317 	ldw	r15,12(r5)
  8083b8:	b8cdc83a 	sub	r6,r23,r3
  8083bc:	9c800417 	ldw	r18,16(r19)
  8083c0:	2c000417 	ldw	r16,16(r5)
  8083c4:	3009883a 	mov	r4,r6
  8083c8:	30009716 	blt	r6,zero,808628 <_fpadd_parts+0x2dc>
  8083cc:	00800fc4 	movi	r2,63
  8083d0:	11806b16 	blt	r2,r6,808580 <_fpadd_parts+0x234>
  8083d4:	0100a40e 	bge	zero,r4,808668 <_fpadd_parts+0x31c>
  8083d8:	35bff804 	addi	r22,r6,-32
  8083dc:	b000bc16 	blt	r22,zero,8086d0 <_fpadd_parts+0x384>
  8083e0:	8596d83a 	srl	r11,r16,r22
  8083e4:	0019883a 	mov	r12,zero
  8083e8:	0013883a 	mov	r9,zero
  8083ec:	01000044 	movi	r4,1
  8083f0:	0015883a 	mov	r10,zero
  8083f4:	b000be16 	blt	r22,zero,8086f0 <_fpadd_parts+0x3a4>
  8083f8:	2590983a 	sll	r8,r4,r22
  8083fc:	000f883a 	mov	r7,zero
  808400:	00bfffc4 	movi	r2,-1
  808404:	3889883a 	add	r4,r7,r2
  808408:	408b883a 	add	r5,r8,r2
  80840c:	21cd803a 	cmpltu	r6,r4,r7
  808410:	314b883a 	add	r5,r6,r5
  808414:	7904703a 	and	r2,r15,r4
  808418:	8146703a 	and	r3,r16,r5
  80841c:	10c4b03a 	or	r2,r2,r3
  808420:	10000226 	beq	r2,zero,80842c <_fpadd_parts+0xe0>
  808424:	02400044 	movi	r9,1
  808428:	0015883a 	mov	r10,zero
  80842c:	5a5eb03a 	or	r15,r11,r9
  808430:	62a0b03a 	or	r16,r12,r10
  808434:	99400117 	ldw	r5,4(r19)
  808438:	a8800117 	ldw	r2,4(r21)
  80843c:	28806e26 	beq	r5,r2,8085f8 <_fpadd_parts+0x2ac>
  808440:	28006626 	beq	r5,zero,8085dc <_fpadd_parts+0x290>
  808444:	7c45c83a 	sub	r2,r15,r17
  808448:	7889803a 	cmpltu	r4,r15,r2
  80844c:	8487c83a 	sub	r3,r16,r18
  808450:	1909c83a 	sub	r4,r3,r4
  808454:	100d883a 	mov	r6,r2
  808458:	200f883a 	mov	r7,r4
  80845c:	38007716 	blt	r7,zero,80863c <_fpadd_parts+0x2f0>
  808460:	a5c00215 	stw	r23,8(r20)
  808464:	a1c00415 	stw	r7,16(r20)
  808468:	a0000115 	stw	zero,4(r20)
  80846c:	a1800315 	stw	r6,12(r20)
  808470:	a2000317 	ldw	r8,12(r20)
  808474:	a2400417 	ldw	r9,16(r20)
  808478:	00bfffc4 	movi	r2,-1
  80847c:	408b883a 	add	r5,r8,r2
  808480:	2a09803a 	cmpltu	r4,r5,r8
  808484:	488d883a 	add	r6,r9,r2
  808488:	01c40034 	movhi	r7,4096
  80848c:	39ffffc4 	addi	r7,r7,-1
  808490:	218d883a 	add	r6,r4,r6
  808494:	39801736 	bltu	r7,r6,8084f4 <_fpadd_parts+0x1a8>
  808498:	31c06526 	beq	r6,r7,808630 <_fpadd_parts+0x2e4>
  80849c:	a3000217 	ldw	r12,8(r20)
  8084a0:	4209883a 	add	r4,r8,r8
  8084a4:	00bfffc4 	movi	r2,-1
  8084a8:	220f803a 	cmpltu	r7,r4,r8
  8084ac:	4a4b883a 	add	r5,r9,r9
  8084b0:	394f883a 	add	r7,r7,r5
  8084b4:	2095883a 	add	r10,r4,r2
  8084b8:	3897883a 	add	r11,r7,r2
  8084bc:	510d803a 	cmpltu	r6,r10,r4
  8084c0:	6099883a 	add	r12,r12,r2
  8084c4:	32d7883a 	add	r11,r6,r11
  8084c8:	00840034 	movhi	r2,4096
  8084cc:	10bfffc4 	addi	r2,r2,-1
  8084d0:	2011883a 	mov	r8,r4
  8084d4:	3813883a 	mov	r9,r7
  8084d8:	a1000315 	stw	r4,12(r20)
  8084dc:	a1c00415 	stw	r7,16(r20)
  8084e0:	a3000215 	stw	r12,8(r20)
  8084e4:	12c00336 	bltu	r2,r11,8084f4 <_fpadd_parts+0x1a8>
  8084e8:	58bfed1e 	bne	r11,r2,8084a0 <_fpadd_parts+0x154>
  8084ec:	00bfff84 	movi	r2,-2
  8084f0:	12bfeb2e 	bgeu	r2,r10,8084a0 <_fpadd_parts+0x154>
  8084f4:	a2800417 	ldw	r10,16(r20)
  8084f8:	008000c4 	movi	r2,3
  8084fc:	00c80034 	movhi	r3,8192
  808500:	18ffffc4 	addi	r3,r3,-1
  808504:	a2400317 	ldw	r9,12(r20)
  808508:	a0800015 	stw	r2,0(r20)
  80850c:	1a802336 	bltu	r3,r10,80859c <_fpadd_parts+0x250>
  808510:	a027883a 	mov	r19,r20
  808514:	9805883a 	mov	r2,r19
  808518:	ddc00717 	ldw	r23,28(sp)
  80851c:	dd800617 	ldw	r22,24(sp)
  808520:	dd400517 	ldw	r21,20(sp)
  808524:	dd000417 	ldw	r20,16(sp)
  808528:	dcc00317 	ldw	r19,12(sp)
  80852c:	dc800217 	ldw	r18,8(sp)
  808530:	dc400117 	ldw	r17,4(sp)
  808534:	dc000017 	ldw	r16,0(sp)
  808538:	dec00804 	addi	sp,sp,32
  80853c:	f800283a 	ret
  808540:	20fff41e 	bne	r4,r3,808514 <_fpadd_parts+0x1c8>
  808544:	31000015 	stw	r4,0(r6)
  808548:	98800117 	ldw	r2,4(r19)
  80854c:	30800115 	stw	r2,4(r6)
  808550:	98c00217 	ldw	r3,8(r19)
  808554:	30c00215 	stw	r3,8(r6)
  808558:	98800317 	ldw	r2,12(r19)
  80855c:	30800315 	stw	r2,12(r6)
  808560:	98c00417 	ldw	r3,16(r19)
  808564:	30c00415 	stw	r3,16(r6)
  808568:	98800117 	ldw	r2,4(r19)
  80856c:	28c00117 	ldw	r3,4(r5)
  808570:	3027883a 	mov	r19,r6
  808574:	10c4703a 	and	r2,r2,r3
  808578:	30800115 	stw	r2,4(r6)
  80857c:	003fe506 	br	808514 <_fpadd_parts+0x1c8>
  808580:	1dc02616 	blt	r3,r23,80861c <_fpadd_parts+0x2d0>
  808584:	0023883a 	mov	r17,zero
  808588:	182f883a 	mov	r23,r3
  80858c:	0025883a 	mov	r18,zero
  808590:	003fa806 	br	808434 <_fpadd_parts+0xe8>
  808594:	a827883a 	mov	r19,r21
  808598:	003fde06 	br	808514 <_fpadd_parts+0x1c8>
  80859c:	01800044 	movi	r6,1
  8085a0:	500497fa 	slli	r2,r10,31
  8085a4:	4808d07a 	srli	r4,r9,1
  8085a8:	518ad83a 	srl	r5,r10,r6
  8085ac:	a2000217 	ldw	r8,8(r20)
  8085b0:	1108b03a 	or	r4,r2,r4
  8085b4:	0007883a 	mov	r3,zero
  8085b8:	4984703a 	and	r2,r9,r6
  8085bc:	208cb03a 	or	r6,r4,r2
  8085c0:	28ceb03a 	or	r7,r5,r3
  8085c4:	42000044 	addi	r8,r8,1
  8085c8:	a027883a 	mov	r19,r20
  8085cc:	a1c00415 	stw	r7,16(r20)
  8085d0:	a2000215 	stw	r8,8(r20)
  8085d4:	a1800315 	stw	r6,12(r20)
  8085d8:	003fce06 	br	808514 <_fpadd_parts+0x1c8>
  8085dc:	8bc5c83a 	sub	r2,r17,r15
  8085e0:	8889803a 	cmpltu	r4,r17,r2
  8085e4:	9407c83a 	sub	r3,r18,r16
  8085e8:	1909c83a 	sub	r4,r3,r4
  8085ec:	100d883a 	mov	r6,r2
  8085f0:	200f883a 	mov	r7,r4
  8085f4:	003f9906 	br	80845c <_fpadd_parts+0x110>
  8085f8:	7c45883a 	add	r2,r15,r17
  8085fc:	13c9803a 	cmpltu	r4,r2,r15
  808600:	8487883a 	add	r3,r16,r18
  808604:	20c9883a 	add	r4,r4,r3
  808608:	a1400115 	stw	r5,4(r20)
  80860c:	a5c00215 	stw	r23,8(r20)
  808610:	a0800315 	stw	r2,12(r20)
  808614:	a1000415 	stw	r4,16(r20)
  808618:	003fb606 	br	8084f4 <_fpadd_parts+0x1a8>
  80861c:	001f883a 	mov	r15,zero
  808620:	0021883a 	mov	r16,zero
  808624:	003f8306 	br	808434 <_fpadd_parts+0xe8>
  808628:	018dc83a 	sub	r6,zero,r6
  80862c:	003f6706 	br	8083cc <_fpadd_parts+0x80>
  808630:	00bfff84 	movi	r2,-2
  808634:	117faf36 	bltu	r2,r5,8084f4 <_fpadd_parts+0x1a8>
  808638:	003f9806 	br	80849c <_fpadd_parts+0x150>
  80863c:	0005883a 	mov	r2,zero
  808640:	1189c83a 	sub	r4,r2,r6
  808644:	1105803a 	cmpltu	r2,r2,r4
  808648:	01cbc83a 	sub	r5,zero,r7
  80864c:	2885c83a 	sub	r2,r5,r2
  808650:	01800044 	movi	r6,1
  808654:	a1800115 	stw	r6,4(r20)
  808658:	a5c00215 	stw	r23,8(r20)
  80865c:	a1000315 	stw	r4,12(r20)
  808660:	a0800415 	stw	r2,16(r20)
  808664:	003f8206 	br	808470 <_fpadd_parts+0x124>
  808668:	203f7226 	beq	r4,zero,808434 <_fpadd_parts+0xe8>
  80866c:	35bff804 	addi	r22,r6,-32
  808670:	b9af883a 	add	r23,r23,r6
  808674:	b0003116 	blt	r22,zero,80873c <_fpadd_parts+0x3f0>
  808678:	959ad83a 	srl	r13,r18,r22
  80867c:	001d883a 	mov	r14,zero
  808680:	000f883a 	mov	r7,zero
  808684:	01000044 	movi	r4,1
  808688:	0011883a 	mov	r8,zero
  80868c:	b0002516 	blt	r22,zero,808724 <_fpadd_parts+0x3d8>
  808690:	2594983a 	sll	r10,r4,r22
  808694:	0013883a 	mov	r9,zero
  808698:	00bfffc4 	movi	r2,-1
  80869c:	4889883a 	add	r4,r9,r2
  8086a0:	508b883a 	add	r5,r10,r2
  8086a4:	224d803a 	cmpltu	r6,r4,r9
  8086a8:	314b883a 	add	r5,r6,r5
  8086ac:	8904703a 	and	r2,r17,r4
  8086b0:	9146703a 	and	r3,r18,r5
  8086b4:	10c4b03a 	or	r2,r2,r3
  8086b8:	10000226 	beq	r2,zero,8086c4 <_fpadd_parts+0x378>
  8086bc:	01c00044 	movi	r7,1
  8086c0:	0011883a 	mov	r8,zero
  8086c4:	69e2b03a 	or	r17,r13,r7
  8086c8:	7224b03a 	or	r18,r14,r8
  8086cc:	003f5906 	br	808434 <_fpadd_parts+0xe8>
  8086d0:	8407883a 	add	r3,r16,r16
  8086d4:	008007c4 	movi	r2,31
  8086d8:	1185c83a 	sub	r2,r2,r6
  8086dc:	1886983a 	sll	r3,r3,r2
  8086e0:	7996d83a 	srl	r11,r15,r6
  8086e4:	8198d83a 	srl	r12,r16,r6
  8086e8:	1ad6b03a 	or	r11,r3,r11
  8086ec:	003f3e06 	br	8083e8 <_fpadd_parts+0x9c>
  8086f0:	2006d07a 	srli	r3,r4,1
  8086f4:	008007c4 	movi	r2,31
  8086f8:	1185c83a 	sub	r2,r2,r6
  8086fc:	1890d83a 	srl	r8,r3,r2
  808700:	218e983a 	sll	r7,r4,r6
  808704:	003f3e06 	br	808400 <_fpadd_parts+0xb4>
  808708:	113f821e 	bne	r2,r4,808514 <_fpadd_parts+0x1c8>
  80870c:	28c00117 	ldw	r3,4(r5)
  808710:	98800117 	ldw	r2,4(r19)
  808714:	10ff7f26 	beq	r2,r3,808514 <_fpadd_parts+0x1c8>
  808718:	04c02074 	movhi	r19,129
  80871c:	9cd6ef04 	addi	r19,r19,23484
  808720:	003f7c06 	br	808514 <_fpadd_parts+0x1c8>
  808724:	2006d07a 	srli	r3,r4,1
  808728:	008007c4 	movi	r2,31
  80872c:	1185c83a 	sub	r2,r2,r6
  808730:	1894d83a 	srl	r10,r3,r2
  808734:	2192983a 	sll	r9,r4,r6
  808738:	003fd706 	br	808698 <_fpadd_parts+0x34c>
  80873c:	9487883a 	add	r3,r18,r18
  808740:	008007c4 	movi	r2,31
  808744:	1185c83a 	sub	r2,r2,r6
  808748:	1886983a 	sll	r3,r3,r2
  80874c:	899ad83a 	srl	r13,r17,r6
  808750:	919cd83a 	srl	r14,r18,r6
  808754:	1b5ab03a 	or	r13,r3,r13
  808758:	003fc906 	br	808680 <_fpadd_parts+0x334>

0080875c <__subdf3>:
  80875c:	deffea04 	addi	sp,sp,-88
  808760:	dcc01415 	stw	r19,80(sp)
  808764:	dcc00404 	addi	r19,sp,16
  808768:	2011883a 	mov	r8,r4
  80876c:	2813883a 	mov	r9,r5
  808770:	dc401315 	stw	r17,76(sp)
  808774:	d809883a 	mov	r4,sp
  808778:	980b883a 	mov	r5,r19
  80877c:	dc400904 	addi	r17,sp,36
  808780:	dfc01515 	stw	ra,84(sp)
  808784:	da400115 	stw	r9,4(sp)
  808788:	d9c00315 	stw	r7,12(sp)
  80878c:	da000015 	stw	r8,0(sp)
  808790:	d9800215 	stw	r6,8(sp)
  808794:	08099f00 	call	8099f0 <__unpack_d>
  808798:	d9000204 	addi	r4,sp,8
  80879c:	880b883a 	mov	r5,r17
  8087a0:	08099f00 	call	8099f0 <__unpack_d>
  8087a4:	d8800a17 	ldw	r2,40(sp)
  8087a8:	880b883a 	mov	r5,r17
  8087ac:	9809883a 	mov	r4,r19
  8087b0:	d9800e04 	addi	r6,sp,56
  8087b4:	1080005c 	xori	r2,r2,1
  8087b8:	d8800a15 	stw	r2,40(sp)
  8087bc:	080834c0 	call	80834c <_fpadd_parts>
  8087c0:	1009883a 	mov	r4,r2
  8087c4:	08096dc0 	call	8096dc <__pack_d>
  8087c8:	dfc01517 	ldw	ra,84(sp)
  8087cc:	dcc01417 	ldw	r19,80(sp)
  8087d0:	dc401317 	ldw	r17,76(sp)
  8087d4:	dec01604 	addi	sp,sp,88
  8087d8:	f800283a 	ret

008087dc <__adddf3>:
  8087dc:	deffea04 	addi	sp,sp,-88
  8087e0:	dcc01415 	stw	r19,80(sp)
  8087e4:	dcc00404 	addi	r19,sp,16
  8087e8:	2011883a 	mov	r8,r4
  8087ec:	2813883a 	mov	r9,r5
  8087f0:	dc401315 	stw	r17,76(sp)
  8087f4:	d809883a 	mov	r4,sp
  8087f8:	980b883a 	mov	r5,r19
  8087fc:	dc400904 	addi	r17,sp,36
  808800:	dfc01515 	stw	ra,84(sp)
  808804:	da400115 	stw	r9,4(sp)
  808808:	d9c00315 	stw	r7,12(sp)
  80880c:	da000015 	stw	r8,0(sp)
  808810:	d9800215 	stw	r6,8(sp)
  808814:	08099f00 	call	8099f0 <__unpack_d>
  808818:	d9000204 	addi	r4,sp,8
  80881c:	880b883a 	mov	r5,r17
  808820:	08099f00 	call	8099f0 <__unpack_d>
  808824:	d9800e04 	addi	r6,sp,56
  808828:	9809883a 	mov	r4,r19
  80882c:	880b883a 	mov	r5,r17
  808830:	080834c0 	call	80834c <_fpadd_parts>
  808834:	1009883a 	mov	r4,r2
  808838:	08096dc0 	call	8096dc <__pack_d>
  80883c:	dfc01517 	ldw	ra,84(sp)
  808840:	dcc01417 	ldw	r19,80(sp)
  808844:	dc401317 	ldw	r17,76(sp)
  808848:	dec01604 	addi	sp,sp,88
  80884c:	f800283a 	ret

00808850 <__muldf3>:
  808850:	deffe004 	addi	sp,sp,-128
  808854:	dc401815 	stw	r17,96(sp)
  808858:	dc400404 	addi	r17,sp,16
  80885c:	2011883a 	mov	r8,r4
  808860:	2813883a 	mov	r9,r5
  808864:	dc001715 	stw	r16,92(sp)
  808868:	d809883a 	mov	r4,sp
  80886c:	880b883a 	mov	r5,r17
  808870:	dc000904 	addi	r16,sp,36
  808874:	dfc01f15 	stw	ra,124(sp)
  808878:	da400115 	stw	r9,4(sp)
  80887c:	d9c00315 	stw	r7,12(sp)
  808880:	da000015 	stw	r8,0(sp)
  808884:	d9800215 	stw	r6,8(sp)
  808888:	ddc01e15 	stw	r23,120(sp)
  80888c:	dd801d15 	stw	r22,116(sp)
  808890:	dd401c15 	stw	r21,112(sp)
  808894:	dd001b15 	stw	r20,108(sp)
  808898:	dcc01a15 	stw	r19,104(sp)
  80889c:	dc801915 	stw	r18,100(sp)
  8088a0:	08099f00 	call	8099f0 <__unpack_d>
  8088a4:	d9000204 	addi	r4,sp,8
  8088a8:	800b883a 	mov	r5,r16
  8088ac:	08099f00 	call	8099f0 <__unpack_d>
  8088b0:	d9000417 	ldw	r4,16(sp)
  8088b4:	00800044 	movi	r2,1
  8088b8:	1100102e 	bgeu	r2,r4,8088fc <__muldf3+0xac>
  8088bc:	d8c00917 	ldw	r3,36(sp)
  8088c0:	10c0062e 	bgeu	r2,r3,8088dc <__muldf3+0x8c>
  8088c4:	00800104 	movi	r2,4
  8088c8:	20800a26 	beq	r4,r2,8088f4 <__muldf3+0xa4>
  8088cc:	1880cc26 	beq	r3,r2,808c00 <__muldf3+0x3b0>
  8088d0:	00800084 	movi	r2,2
  8088d4:	20800926 	beq	r4,r2,8088fc <__muldf3+0xac>
  8088d8:	1880191e 	bne	r3,r2,808940 <__muldf3+0xf0>
  8088dc:	d8c00a17 	ldw	r3,40(sp)
  8088e0:	d8800517 	ldw	r2,20(sp)
  8088e4:	8009883a 	mov	r4,r16
  8088e8:	10c4c03a 	cmpne	r2,r2,r3
  8088ec:	d8800a15 	stw	r2,40(sp)
  8088f0:	00000706 	br	808910 <__muldf3+0xc0>
  8088f4:	00800084 	movi	r2,2
  8088f8:	1880c326 	beq	r3,r2,808c08 <__muldf3+0x3b8>
  8088fc:	d8800517 	ldw	r2,20(sp)
  808900:	d8c00a17 	ldw	r3,40(sp)
  808904:	8809883a 	mov	r4,r17
  808908:	10c4c03a 	cmpne	r2,r2,r3
  80890c:	d8800515 	stw	r2,20(sp)
  808910:	08096dc0 	call	8096dc <__pack_d>
  808914:	dfc01f17 	ldw	ra,124(sp)
  808918:	ddc01e17 	ldw	r23,120(sp)
  80891c:	dd801d17 	ldw	r22,116(sp)
  808920:	dd401c17 	ldw	r21,112(sp)
  808924:	dd001b17 	ldw	r20,108(sp)
  808928:	dcc01a17 	ldw	r19,104(sp)
  80892c:	dc801917 	ldw	r18,100(sp)
  808930:	dc401817 	ldw	r17,96(sp)
  808934:	dc001717 	ldw	r16,92(sp)
  808938:	dec02004 	addi	sp,sp,128
  80893c:	f800283a 	ret
  808940:	dd800717 	ldw	r22,28(sp)
  808944:	dc800c17 	ldw	r18,48(sp)
  808948:	002b883a 	mov	r21,zero
  80894c:	0023883a 	mov	r17,zero
  808950:	a80b883a 	mov	r5,r21
  808954:	b00d883a 	mov	r6,r22
  808958:	880f883a 	mov	r7,r17
  80895c:	ddc00817 	ldw	r23,32(sp)
  808960:	dcc00d17 	ldw	r19,52(sp)
  808964:	9009883a 	mov	r4,r18
  808968:	08095c40 	call	8095c4 <__muldi3>
  80896c:	001b883a 	mov	r13,zero
  808970:	680f883a 	mov	r7,r13
  808974:	b009883a 	mov	r4,r22
  808978:	000b883a 	mov	r5,zero
  80897c:	980d883a 	mov	r6,r19
  808980:	b82d883a 	mov	r22,r23
  808984:	002f883a 	mov	r23,zero
  808988:	db401615 	stw	r13,88(sp)
  80898c:	d8801315 	stw	r2,76(sp)
  808990:	d8c01415 	stw	r3,80(sp)
  808994:	dcc01515 	stw	r19,84(sp)
  808998:	08095c40 	call	8095c4 <__muldi3>
  80899c:	b00d883a 	mov	r6,r22
  8089a0:	000b883a 	mov	r5,zero
  8089a4:	9009883a 	mov	r4,r18
  8089a8:	b80f883a 	mov	r7,r23
  8089ac:	1021883a 	mov	r16,r2
  8089b0:	1823883a 	mov	r17,r3
  8089b4:	08095c40 	call	8095c4 <__muldi3>
  8089b8:	8085883a 	add	r2,r16,r2
  8089bc:	140d803a 	cmpltu	r6,r2,r16
  8089c0:	88c7883a 	add	r3,r17,r3
  8089c4:	30cd883a 	add	r6,r6,r3
  8089c8:	1029883a 	mov	r20,r2
  8089cc:	302b883a 	mov	r21,r6
  8089d0:	da801317 	ldw	r10,76(sp)
  8089d4:	dac01417 	ldw	r11,80(sp)
  8089d8:	db001517 	ldw	r12,84(sp)
  8089dc:	db401617 	ldw	r13,88(sp)
  8089e0:	3440612e 	bgeu	r6,r17,808b68 <__muldf3+0x318>
  8089e4:	0009883a 	mov	r4,zero
  8089e8:	5105883a 	add	r2,r10,r4
  8089ec:	128d803a 	cmpltu	r6,r2,r10
  8089f0:	5d07883a 	add	r3,r11,r20
  8089f4:	30cd883a 	add	r6,r6,r3
  8089f8:	0021883a 	mov	r16,zero
  8089fc:	04400044 	movi	r17,1
  808a00:	1025883a 	mov	r18,r2
  808a04:	3027883a 	mov	r19,r6
  808a08:	32c06236 	bltu	r6,r11,808b94 <__muldf3+0x344>
  808a0c:	59807a26 	beq	r11,r6,808bf8 <__muldf3+0x3a8>
  808a10:	680b883a 	mov	r5,r13
  808a14:	b80f883a 	mov	r7,r23
  808a18:	6009883a 	mov	r4,r12
  808a1c:	b00d883a 	mov	r6,r22
  808a20:	08095c40 	call	8095c4 <__muldi3>
  808a24:	1009883a 	mov	r4,r2
  808a28:	000f883a 	mov	r7,zero
  808a2c:	1545883a 	add	r2,r2,r21
  808a30:	1111803a 	cmpltu	r8,r2,r4
  808a34:	19c7883a 	add	r3,r3,r7
  808a38:	40c7883a 	add	r3,r8,r3
  808a3c:	88cb883a 	add	r5,r17,r3
  808a40:	d8c00617 	ldw	r3,24(sp)
  808a44:	8089883a 	add	r4,r16,r2
  808a48:	d8800b17 	ldw	r2,44(sp)
  808a4c:	18c00104 	addi	r3,r3,4
  808a50:	240d803a 	cmpltu	r6,r4,r16
  808a54:	10c7883a 	add	r3,r2,r3
  808a58:	2013883a 	mov	r9,r4
  808a5c:	d8800a17 	ldw	r2,40(sp)
  808a60:	d9000517 	ldw	r4,20(sp)
  808a64:	314d883a 	add	r6,r6,r5
  808a68:	3015883a 	mov	r10,r6
  808a6c:	2088c03a 	cmpne	r4,r4,r2
  808a70:	00880034 	movhi	r2,8192
  808a74:	10bfffc4 	addi	r2,r2,-1
  808a78:	d9000f15 	stw	r4,60(sp)
  808a7c:	d8c01015 	stw	r3,64(sp)
  808a80:	1180162e 	bgeu	r2,r6,808adc <__muldf3+0x28c>
  808a84:	1811883a 	mov	r8,r3
  808a88:	101f883a 	mov	r15,r2
  808a8c:	980497fa 	slli	r2,r19,31
  808a90:	9016d07a 	srli	r11,r18,1
  808a94:	500697fa 	slli	r3,r10,31
  808a98:	480cd07a 	srli	r6,r9,1
  808a9c:	500ed07a 	srli	r7,r10,1
  808aa0:	12d6b03a 	or	r11,r2,r11
  808aa4:	00800044 	movi	r2,1
  808aa8:	198cb03a 	or	r6,r3,r6
  808aac:	4888703a 	and	r4,r9,r2
  808ab0:	9818d07a 	srli	r12,r19,1
  808ab4:	001b883a 	mov	r13,zero
  808ab8:	03a00034 	movhi	r14,32768
  808abc:	3013883a 	mov	r9,r6
  808ac0:	3815883a 	mov	r10,r7
  808ac4:	4091883a 	add	r8,r8,r2
  808ac8:	20000226 	beq	r4,zero,808ad4 <__muldf3+0x284>
  808acc:	5b64b03a 	or	r18,r11,r13
  808ad0:	63a6b03a 	or	r19,r12,r14
  808ad4:	7abfed36 	bltu	r15,r10,808a8c <__muldf3+0x23c>
  808ad8:	da001015 	stw	r8,64(sp)
  808adc:	00840034 	movhi	r2,4096
  808ae0:	10bfffc4 	addi	r2,r2,-1
  808ae4:	12801436 	bltu	r2,r10,808b38 <__muldf3+0x2e8>
  808ae8:	da001017 	ldw	r8,64(sp)
  808aec:	101f883a 	mov	r15,r2
  808af0:	4a45883a 	add	r2,r9,r9
  808af4:	124d803a 	cmpltu	r6,r2,r9
  808af8:	5287883a 	add	r3,r10,r10
  808afc:	9497883a 	add	r11,r18,r18
  808b00:	5c8f803a 	cmpltu	r7,r11,r18
  808b04:	9cd9883a 	add	r12,r19,r19
  808b08:	01000044 	movi	r4,1
  808b0c:	30cd883a 	add	r6,r6,r3
  808b10:	3b0f883a 	add	r7,r7,r12
  808b14:	423fffc4 	addi	r8,r8,-1
  808b18:	1013883a 	mov	r9,r2
  808b1c:	3015883a 	mov	r10,r6
  808b20:	111ab03a 	or	r13,r2,r4
  808b24:	98003016 	blt	r19,zero,808be8 <__muldf3+0x398>
  808b28:	5825883a 	mov	r18,r11
  808b2c:	3827883a 	mov	r19,r7
  808b30:	7abfef2e 	bgeu	r15,r10,808af0 <__muldf3+0x2a0>
  808b34:	da001015 	stw	r8,64(sp)
  808b38:	00803fc4 	movi	r2,255
  808b3c:	488e703a 	and	r7,r9,r2
  808b40:	00802004 	movi	r2,128
  808b44:	0007883a 	mov	r3,zero
  808b48:	0011883a 	mov	r8,zero
  808b4c:	38801826 	beq	r7,r2,808bb0 <__muldf3+0x360>
  808b50:	008000c4 	movi	r2,3
  808b54:	d9000e04 	addi	r4,sp,56
  808b58:	da801215 	stw	r10,72(sp)
  808b5c:	d8800e15 	stw	r2,56(sp)
  808b60:	da401115 	stw	r9,68(sp)
  808b64:	003f6a06 	br	808910 <__muldf3+0xc0>
  808b68:	89802126 	beq	r17,r6,808bf0 <__muldf3+0x3a0>
  808b6c:	0009883a 	mov	r4,zero
  808b70:	5105883a 	add	r2,r10,r4
  808b74:	128d803a 	cmpltu	r6,r2,r10
  808b78:	5d07883a 	add	r3,r11,r20
  808b7c:	30cd883a 	add	r6,r6,r3
  808b80:	0021883a 	mov	r16,zero
  808b84:	0023883a 	mov	r17,zero
  808b88:	1025883a 	mov	r18,r2
  808b8c:	3027883a 	mov	r19,r6
  808b90:	32ff9e2e 	bgeu	r6,r11,808a0c <__muldf3+0x1bc>
  808b94:	00800044 	movi	r2,1
  808b98:	8089883a 	add	r4,r16,r2
  808b9c:	240d803a 	cmpltu	r6,r4,r16
  808ba0:	344d883a 	add	r6,r6,r17
  808ba4:	2021883a 	mov	r16,r4
  808ba8:	3023883a 	mov	r17,r6
  808bac:	003f9806 	br	808a10 <__muldf3+0x1c0>
  808bb0:	403fe71e 	bne	r8,zero,808b50 <__muldf3+0x300>
  808bb4:	01004004 	movi	r4,256
  808bb8:	4904703a 	and	r2,r9,r4
  808bbc:	10c4b03a 	or	r2,r2,r3
  808bc0:	103fe31e 	bne	r2,zero,808b50 <__muldf3+0x300>
  808bc4:	94c4b03a 	or	r2,r18,r19
  808bc8:	103fe126 	beq	r2,zero,808b50 <__muldf3+0x300>
  808bcc:	49c5883a 	add	r2,r9,r7
  808bd0:	1251803a 	cmpltu	r8,r2,r9
  808bd4:	4291883a 	add	r8,r8,r10
  808bd8:	013fc004 	movi	r4,-256
  808bdc:	1112703a 	and	r9,r2,r4
  808be0:	4015883a 	mov	r10,r8
  808be4:	003fda06 	br	808b50 <__muldf3+0x300>
  808be8:	6813883a 	mov	r9,r13
  808bec:	003fce06 	br	808b28 <__muldf3+0x2d8>
  808bf0:	143f7c36 	bltu	r2,r16,8089e4 <__muldf3+0x194>
  808bf4:	003fdd06 	br	808b6c <__muldf3+0x31c>
  808bf8:	12bf852e 	bgeu	r2,r10,808a10 <__muldf3+0x1c0>
  808bfc:	003fe506 	br	808b94 <__muldf3+0x344>
  808c00:	00800084 	movi	r2,2
  808c04:	20bf351e 	bne	r4,r2,8088dc <__muldf3+0x8c>
  808c08:	01002074 	movhi	r4,129
  808c0c:	2116ef04 	addi	r4,r4,23484
  808c10:	003f3f06 	br	808910 <__muldf3+0xc0>

00808c14 <__divdf3>:
  808c14:	deffed04 	addi	sp,sp,-76
  808c18:	dcc01115 	stw	r19,68(sp)
  808c1c:	dcc00404 	addi	r19,sp,16
  808c20:	2011883a 	mov	r8,r4
  808c24:	2813883a 	mov	r9,r5
  808c28:	dc000e15 	stw	r16,56(sp)
  808c2c:	d809883a 	mov	r4,sp
  808c30:	980b883a 	mov	r5,r19
  808c34:	dc000904 	addi	r16,sp,36
  808c38:	dfc01215 	stw	ra,72(sp)
  808c3c:	da400115 	stw	r9,4(sp)
  808c40:	d9c00315 	stw	r7,12(sp)
  808c44:	da000015 	stw	r8,0(sp)
  808c48:	d9800215 	stw	r6,8(sp)
  808c4c:	dc801015 	stw	r18,64(sp)
  808c50:	dc400f15 	stw	r17,60(sp)
  808c54:	08099f00 	call	8099f0 <__unpack_d>
  808c58:	d9000204 	addi	r4,sp,8
  808c5c:	800b883a 	mov	r5,r16
  808c60:	08099f00 	call	8099f0 <__unpack_d>
  808c64:	d9000417 	ldw	r4,16(sp)
  808c68:	00800044 	movi	r2,1
  808c6c:	11000b2e 	bgeu	r2,r4,808c9c <__divdf3+0x88>
  808c70:	d9400917 	ldw	r5,36(sp)
  808c74:	1140762e 	bgeu	r2,r5,808e50 <__divdf3+0x23c>
  808c78:	d8800517 	ldw	r2,20(sp)
  808c7c:	d8c00a17 	ldw	r3,40(sp)
  808c80:	01800104 	movi	r6,4
  808c84:	10c4f03a 	xor	r2,r2,r3
  808c88:	d8800515 	stw	r2,20(sp)
  808c8c:	21800226 	beq	r4,r6,808c98 <__divdf3+0x84>
  808c90:	00800084 	movi	r2,2
  808c94:	2080141e 	bne	r4,r2,808ce8 <__divdf3+0xd4>
  808c98:	29000926 	beq	r5,r4,808cc0 <__divdf3+0xac>
  808c9c:	9809883a 	mov	r4,r19
  808ca0:	08096dc0 	call	8096dc <__pack_d>
  808ca4:	dfc01217 	ldw	ra,72(sp)
  808ca8:	dcc01117 	ldw	r19,68(sp)
  808cac:	dc801017 	ldw	r18,64(sp)
  808cb0:	dc400f17 	ldw	r17,60(sp)
  808cb4:	dc000e17 	ldw	r16,56(sp)
  808cb8:	dec01304 	addi	sp,sp,76
  808cbc:	f800283a 	ret
  808cc0:	01002074 	movhi	r4,129
  808cc4:	2116ef04 	addi	r4,r4,23484
  808cc8:	08096dc0 	call	8096dc <__pack_d>
  808ccc:	dfc01217 	ldw	ra,72(sp)
  808cd0:	dcc01117 	ldw	r19,68(sp)
  808cd4:	dc801017 	ldw	r18,64(sp)
  808cd8:	dc400f17 	ldw	r17,60(sp)
  808cdc:	dc000e17 	ldw	r16,56(sp)
  808ce0:	dec01304 	addi	sp,sp,76
  808ce4:	f800283a 	ret
  808ce8:	29805b26 	beq	r5,r6,808e58 <__divdf3+0x244>
  808cec:	28802d26 	beq	r5,r2,808da4 <__divdf3+0x190>
  808cf0:	d8c00617 	ldw	r3,24(sp)
  808cf4:	d8800b17 	ldw	r2,44(sp)
  808cf8:	d9c00817 	ldw	r7,32(sp)
  808cfc:	dc400d17 	ldw	r17,52(sp)
  808d00:	188bc83a 	sub	r5,r3,r2
  808d04:	d9800717 	ldw	r6,28(sp)
  808d08:	dc000c17 	ldw	r16,48(sp)
  808d0c:	d9400615 	stw	r5,24(sp)
  808d10:	3c403836 	bltu	r7,r17,808df4 <__divdf3+0x1e0>
  808d14:	89c03626 	beq	r17,r7,808df0 <__divdf3+0x1dc>
  808d18:	0015883a 	mov	r10,zero
  808d1c:	001d883a 	mov	r14,zero
  808d20:	02c40034 	movhi	r11,4096
  808d24:	001f883a 	mov	r15,zero
  808d28:	003f883a 	mov	ra,zero
  808d2c:	04800f44 	movi	r18,61
  808d30:	00000f06 	br	808d70 <__divdf3+0x15c>
  808d34:	601d883a 	mov	r14,r12
  808d38:	681f883a 	mov	r15,r13
  808d3c:	400d883a 	mov	r6,r8
  808d40:	100f883a 	mov	r7,r2
  808d44:	3191883a 	add	r8,r6,r6
  808d48:	5808d07a 	srli	r4,r11,1
  808d4c:	4185803a 	cmpltu	r2,r8,r6
  808d50:	39d3883a 	add	r9,r7,r7
  808d54:	28c6b03a 	or	r3,r5,r3
  808d58:	1245883a 	add	r2,r2,r9
  808d5c:	1815883a 	mov	r10,r3
  808d60:	2017883a 	mov	r11,r4
  808d64:	400d883a 	mov	r6,r8
  808d68:	100f883a 	mov	r7,r2
  808d6c:	fc801726 	beq	ra,r18,808dcc <__divdf3+0x1b8>
  808d70:	580a97fa 	slli	r5,r11,31
  808d74:	5006d07a 	srli	r3,r10,1
  808d78:	ffc00044 	addi	ra,ra,1
  808d7c:	3c7ff136 	bltu	r7,r17,808d44 <__divdf3+0x130>
  808d80:	3411c83a 	sub	r8,r6,r16
  808d84:	3205803a 	cmpltu	r2,r6,r8
  808d88:	3c53c83a 	sub	r9,r7,r17
  808d8c:	7298b03a 	or	r12,r14,r10
  808d90:	7adab03a 	or	r13,r15,r11
  808d94:	4885c83a 	sub	r2,r9,r2
  808d98:	89ffe61e 	bne	r17,r7,808d34 <__divdf3+0x120>
  808d9c:	343fe936 	bltu	r6,r16,808d44 <__divdf3+0x130>
  808da0:	003fe406 	br	808d34 <__divdf3+0x120>
  808da4:	9809883a 	mov	r4,r19
  808da8:	d9800415 	stw	r6,16(sp)
  808dac:	08096dc0 	call	8096dc <__pack_d>
  808db0:	dfc01217 	ldw	ra,72(sp)
  808db4:	dcc01117 	ldw	r19,68(sp)
  808db8:	dc801017 	ldw	r18,64(sp)
  808dbc:	dc400f17 	ldw	r17,60(sp)
  808dc0:	dc000e17 	ldw	r16,56(sp)
  808dc4:	dec01304 	addi	sp,sp,76
  808dc8:	f800283a 	ret
  808dcc:	00803fc4 	movi	r2,255
  808dd0:	7090703a 	and	r8,r14,r2
  808dd4:	00802004 	movi	r2,128
  808dd8:	0007883a 	mov	r3,zero
  808ddc:	0013883a 	mov	r9,zero
  808de0:	40800d26 	beq	r8,r2,808e18 <__divdf3+0x204>
  808de4:	dbc00815 	stw	r15,32(sp)
  808de8:	db800715 	stw	r14,28(sp)
  808dec:	003fab06 	br	808c9c <__divdf3+0x88>
  808df0:	343fc92e 	bgeu	r6,r16,808d18 <__divdf3+0x104>
  808df4:	3185883a 	add	r2,r6,r6
  808df8:	1189803a 	cmpltu	r4,r2,r6
  808dfc:	39c7883a 	add	r3,r7,r7
  808e00:	20c9883a 	add	r4,r4,r3
  808e04:	297fffc4 	addi	r5,r5,-1
  808e08:	100d883a 	mov	r6,r2
  808e0c:	200f883a 	mov	r7,r4
  808e10:	d9400615 	stw	r5,24(sp)
  808e14:	003fc006 	br	808d18 <__divdf3+0x104>
  808e18:	483ff21e 	bne	r9,zero,808de4 <__divdf3+0x1d0>
  808e1c:	01004004 	movi	r4,256
  808e20:	7104703a 	and	r2,r14,r4
  808e24:	10c4b03a 	or	r2,r2,r3
  808e28:	103fee1e 	bne	r2,zero,808de4 <__divdf3+0x1d0>
  808e2c:	31c4b03a 	or	r2,r6,r7
  808e30:	103fec26 	beq	r2,zero,808de4 <__divdf3+0x1d0>
  808e34:	7205883a 	add	r2,r14,r8
  808e38:	1391803a 	cmpltu	r8,r2,r14
  808e3c:	43d1883a 	add	r8,r8,r15
  808e40:	013fc004 	movi	r4,-256
  808e44:	111c703a 	and	r14,r2,r4
  808e48:	401f883a 	mov	r15,r8
  808e4c:	003fe506 	br	808de4 <__divdf3+0x1d0>
  808e50:	8009883a 	mov	r4,r16
  808e54:	003f9206 	br	808ca0 <__divdf3+0x8c>
  808e58:	9809883a 	mov	r4,r19
  808e5c:	d8000715 	stw	zero,28(sp)
  808e60:	d8000815 	stw	zero,32(sp)
  808e64:	d8000615 	stw	zero,24(sp)
  808e68:	003f8d06 	br	808ca0 <__divdf3+0x8c>

00808e6c <__eqdf2>:
  808e6c:	deffef04 	addi	sp,sp,-68
  808e70:	dc400f15 	stw	r17,60(sp)
  808e74:	dc400404 	addi	r17,sp,16
  808e78:	2005883a 	mov	r2,r4
  808e7c:	2807883a 	mov	r3,r5
  808e80:	dc000e15 	stw	r16,56(sp)
  808e84:	d809883a 	mov	r4,sp
  808e88:	880b883a 	mov	r5,r17
  808e8c:	dc000904 	addi	r16,sp,36
  808e90:	d8c00115 	stw	r3,4(sp)
  808e94:	d8800015 	stw	r2,0(sp)
  808e98:	d9800215 	stw	r6,8(sp)
  808e9c:	dfc01015 	stw	ra,64(sp)
  808ea0:	d9c00315 	stw	r7,12(sp)
  808ea4:	08099f00 	call	8099f0 <__unpack_d>
  808ea8:	d9000204 	addi	r4,sp,8
  808eac:	800b883a 	mov	r5,r16
  808eb0:	08099f00 	call	8099f0 <__unpack_d>
  808eb4:	d8800417 	ldw	r2,16(sp)
  808eb8:	00c00044 	movi	r3,1
  808ebc:	180d883a 	mov	r6,r3
  808ec0:	1880062e 	bgeu	r3,r2,808edc <__eqdf2+0x70>
  808ec4:	d8800917 	ldw	r2,36(sp)
  808ec8:	8809883a 	mov	r4,r17
  808ecc:	800b883a 	mov	r5,r16
  808ed0:	1880022e 	bgeu	r3,r2,808edc <__eqdf2+0x70>
  808ed4:	0809b280 	call	809b28 <__fpcmp_parts_d>
  808ed8:	100d883a 	mov	r6,r2
  808edc:	3005883a 	mov	r2,r6
  808ee0:	dfc01017 	ldw	ra,64(sp)
  808ee4:	dc400f17 	ldw	r17,60(sp)
  808ee8:	dc000e17 	ldw	r16,56(sp)
  808eec:	dec01104 	addi	sp,sp,68
  808ef0:	f800283a 	ret

00808ef4 <__nedf2>:
  808ef4:	deffef04 	addi	sp,sp,-68
  808ef8:	dc400f15 	stw	r17,60(sp)
  808efc:	dc400404 	addi	r17,sp,16
  808f00:	2005883a 	mov	r2,r4
  808f04:	2807883a 	mov	r3,r5
  808f08:	dc000e15 	stw	r16,56(sp)
  808f0c:	d809883a 	mov	r4,sp
  808f10:	880b883a 	mov	r5,r17
  808f14:	dc000904 	addi	r16,sp,36
  808f18:	d8c00115 	stw	r3,4(sp)
  808f1c:	d8800015 	stw	r2,0(sp)
  808f20:	d9800215 	stw	r6,8(sp)
  808f24:	dfc01015 	stw	ra,64(sp)
  808f28:	d9c00315 	stw	r7,12(sp)
  808f2c:	08099f00 	call	8099f0 <__unpack_d>
  808f30:	d9000204 	addi	r4,sp,8
  808f34:	800b883a 	mov	r5,r16
  808f38:	08099f00 	call	8099f0 <__unpack_d>
  808f3c:	d8800417 	ldw	r2,16(sp)
  808f40:	00c00044 	movi	r3,1
  808f44:	180d883a 	mov	r6,r3
  808f48:	1880062e 	bgeu	r3,r2,808f64 <__nedf2+0x70>
  808f4c:	d8800917 	ldw	r2,36(sp)
  808f50:	8809883a 	mov	r4,r17
  808f54:	800b883a 	mov	r5,r16
  808f58:	1880022e 	bgeu	r3,r2,808f64 <__nedf2+0x70>
  808f5c:	0809b280 	call	809b28 <__fpcmp_parts_d>
  808f60:	100d883a 	mov	r6,r2
  808f64:	3005883a 	mov	r2,r6
  808f68:	dfc01017 	ldw	ra,64(sp)
  808f6c:	dc400f17 	ldw	r17,60(sp)
  808f70:	dc000e17 	ldw	r16,56(sp)
  808f74:	dec01104 	addi	sp,sp,68
  808f78:	f800283a 	ret

00808f7c <__gtdf2>:
  808f7c:	deffef04 	addi	sp,sp,-68
  808f80:	dc400f15 	stw	r17,60(sp)
  808f84:	dc400404 	addi	r17,sp,16
  808f88:	2005883a 	mov	r2,r4
  808f8c:	2807883a 	mov	r3,r5
  808f90:	dc000e15 	stw	r16,56(sp)
  808f94:	d809883a 	mov	r4,sp
  808f98:	880b883a 	mov	r5,r17
  808f9c:	dc000904 	addi	r16,sp,36
  808fa0:	d8c00115 	stw	r3,4(sp)
  808fa4:	d8800015 	stw	r2,0(sp)
  808fa8:	d9800215 	stw	r6,8(sp)
  808fac:	dfc01015 	stw	ra,64(sp)
  808fb0:	d9c00315 	stw	r7,12(sp)
  808fb4:	08099f00 	call	8099f0 <__unpack_d>
  808fb8:	d9000204 	addi	r4,sp,8
  808fbc:	800b883a 	mov	r5,r16
  808fc0:	08099f00 	call	8099f0 <__unpack_d>
  808fc4:	d8800417 	ldw	r2,16(sp)
  808fc8:	00c00044 	movi	r3,1
  808fcc:	01bfffc4 	movi	r6,-1
  808fd0:	1880062e 	bgeu	r3,r2,808fec <__gtdf2+0x70>
  808fd4:	d8800917 	ldw	r2,36(sp)
  808fd8:	8809883a 	mov	r4,r17
  808fdc:	800b883a 	mov	r5,r16
  808fe0:	1880022e 	bgeu	r3,r2,808fec <__gtdf2+0x70>
  808fe4:	0809b280 	call	809b28 <__fpcmp_parts_d>
  808fe8:	100d883a 	mov	r6,r2
  808fec:	3005883a 	mov	r2,r6
  808ff0:	dfc01017 	ldw	ra,64(sp)
  808ff4:	dc400f17 	ldw	r17,60(sp)
  808ff8:	dc000e17 	ldw	r16,56(sp)
  808ffc:	dec01104 	addi	sp,sp,68
  809000:	f800283a 	ret

00809004 <__gedf2>:
  809004:	deffef04 	addi	sp,sp,-68
  809008:	dc400f15 	stw	r17,60(sp)
  80900c:	dc400404 	addi	r17,sp,16
  809010:	2005883a 	mov	r2,r4
  809014:	2807883a 	mov	r3,r5
  809018:	dc000e15 	stw	r16,56(sp)
  80901c:	d809883a 	mov	r4,sp
  809020:	880b883a 	mov	r5,r17
  809024:	dc000904 	addi	r16,sp,36
  809028:	d8c00115 	stw	r3,4(sp)
  80902c:	d8800015 	stw	r2,0(sp)
  809030:	d9800215 	stw	r6,8(sp)
  809034:	dfc01015 	stw	ra,64(sp)
  809038:	d9c00315 	stw	r7,12(sp)
  80903c:	08099f00 	call	8099f0 <__unpack_d>
  809040:	d9000204 	addi	r4,sp,8
  809044:	800b883a 	mov	r5,r16
  809048:	08099f00 	call	8099f0 <__unpack_d>
  80904c:	d8800417 	ldw	r2,16(sp)
  809050:	00c00044 	movi	r3,1
  809054:	01bfffc4 	movi	r6,-1
  809058:	1880062e 	bgeu	r3,r2,809074 <__gedf2+0x70>
  80905c:	d8800917 	ldw	r2,36(sp)
  809060:	8809883a 	mov	r4,r17
  809064:	800b883a 	mov	r5,r16
  809068:	1880022e 	bgeu	r3,r2,809074 <__gedf2+0x70>
  80906c:	0809b280 	call	809b28 <__fpcmp_parts_d>
  809070:	100d883a 	mov	r6,r2
  809074:	3005883a 	mov	r2,r6
  809078:	dfc01017 	ldw	ra,64(sp)
  80907c:	dc400f17 	ldw	r17,60(sp)
  809080:	dc000e17 	ldw	r16,56(sp)
  809084:	dec01104 	addi	sp,sp,68
  809088:	f800283a 	ret

0080908c <__ltdf2>:
  80908c:	deffef04 	addi	sp,sp,-68
  809090:	dc400f15 	stw	r17,60(sp)
  809094:	dc400404 	addi	r17,sp,16
  809098:	2005883a 	mov	r2,r4
  80909c:	2807883a 	mov	r3,r5
  8090a0:	dc000e15 	stw	r16,56(sp)
  8090a4:	d809883a 	mov	r4,sp
  8090a8:	880b883a 	mov	r5,r17
  8090ac:	dc000904 	addi	r16,sp,36
  8090b0:	d8c00115 	stw	r3,4(sp)
  8090b4:	d8800015 	stw	r2,0(sp)
  8090b8:	d9800215 	stw	r6,8(sp)
  8090bc:	dfc01015 	stw	ra,64(sp)
  8090c0:	d9c00315 	stw	r7,12(sp)
  8090c4:	08099f00 	call	8099f0 <__unpack_d>
  8090c8:	d9000204 	addi	r4,sp,8
  8090cc:	800b883a 	mov	r5,r16
  8090d0:	08099f00 	call	8099f0 <__unpack_d>
  8090d4:	d8800417 	ldw	r2,16(sp)
  8090d8:	00c00044 	movi	r3,1
  8090dc:	180d883a 	mov	r6,r3
  8090e0:	1880062e 	bgeu	r3,r2,8090fc <__ltdf2+0x70>
  8090e4:	d8800917 	ldw	r2,36(sp)
  8090e8:	8809883a 	mov	r4,r17
  8090ec:	800b883a 	mov	r5,r16
  8090f0:	1880022e 	bgeu	r3,r2,8090fc <__ltdf2+0x70>
  8090f4:	0809b280 	call	809b28 <__fpcmp_parts_d>
  8090f8:	100d883a 	mov	r6,r2
  8090fc:	3005883a 	mov	r2,r6
  809100:	dfc01017 	ldw	ra,64(sp)
  809104:	dc400f17 	ldw	r17,60(sp)
  809108:	dc000e17 	ldw	r16,56(sp)
  80910c:	dec01104 	addi	sp,sp,68
  809110:	f800283a 	ret

00809114 <__floatsidf>:
  809114:	2006d7fa 	srli	r3,r4,31
  809118:	defff604 	addi	sp,sp,-40
  80911c:	008000c4 	movi	r2,3
  809120:	dfc00915 	stw	ra,36(sp)
  809124:	dcc00815 	stw	r19,32(sp)
  809128:	dc800715 	stw	r18,28(sp)
  80912c:	dc400615 	stw	r17,24(sp)
  809130:	dc000515 	stw	r16,20(sp)
  809134:	d8800015 	stw	r2,0(sp)
  809138:	d8c00115 	stw	r3,4(sp)
  80913c:	20000f1e 	bne	r4,zero,80917c <__floatsidf+0x68>
  809140:	00800084 	movi	r2,2
  809144:	d8800015 	stw	r2,0(sp)
  809148:	d809883a 	mov	r4,sp
  80914c:	08096dc0 	call	8096dc <__pack_d>
  809150:	1009883a 	mov	r4,r2
  809154:	180b883a 	mov	r5,r3
  809158:	2005883a 	mov	r2,r4
  80915c:	2807883a 	mov	r3,r5
  809160:	dfc00917 	ldw	ra,36(sp)
  809164:	dcc00817 	ldw	r19,32(sp)
  809168:	dc800717 	ldw	r18,28(sp)
  80916c:	dc400617 	ldw	r17,24(sp)
  809170:	dc000517 	ldw	r16,20(sp)
  809174:	dec00a04 	addi	sp,sp,40
  809178:	f800283a 	ret
  80917c:	00800f04 	movi	r2,60
  809180:	1807003a 	cmpeq	r3,r3,zero
  809184:	d8800215 	stw	r2,8(sp)
  809188:	18001126 	beq	r3,zero,8091d0 <__floatsidf+0xbc>
  80918c:	0027883a 	mov	r19,zero
  809190:	2025883a 	mov	r18,r4
  809194:	d9000315 	stw	r4,12(sp)
  809198:	dcc00415 	stw	r19,16(sp)
  80919c:	080965c0 	call	80965c <__clzsi2>
  8091a0:	11000744 	addi	r4,r2,29
  8091a4:	013fe80e 	bge	zero,r4,809148 <__floatsidf+0x34>
  8091a8:	10bfff44 	addi	r2,r2,-3
  8091ac:	10000c16 	blt	r2,zero,8091e0 <__floatsidf+0xcc>
  8091b0:	90a2983a 	sll	r17,r18,r2
  8091b4:	0021883a 	mov	r16,zero
  8091b8:	d8800217 	ldw	r2,8(sp)
  8091bc:	dc400415 	stw	r17,16(sp)
  8091c0:	dc000315 	stw	r16,12(sp)
  8091c4:	1105c83a 	sub	r2,r2,r4
  8091c8:	d8800215 	stw	r2,8(sp)
  8091cc:	003fde06 	br	809148 <__floatsidf+0x34>
  8091d0:	00a00034 	movhi	r2,32768
  8091d4:	20800a26 	beq	r4,r2,809200 <__floatsidf+0xec>
  8091d8:	0109c83a 	sub	r4,zero,r4
  8091dc:	003feb06 	br	80918c <__floatsidf+0x78>
  8091e0:	9006d07a 	srli	r3,r18,1
  8091e4:	008007c4 	movi	r2,31
  8091e8:	1105c83a 	sub	r2,r2,r4
  8091ec:	1886d83a 	srl	r3,r3,r2
  8091f0:	9922983a 	sll	r17,r19,r4
  8091f4:	9120983a 	sll	r16,r18,r4
  8091f8:	1c62b03a 	or	r17,r3,r17
  8091fc:	003fee06 	br	8091b8 <__floatsidf+0xa4>
  809200:	0009883a 	mov	r4,zero
  809204:	01707834 	movhi	r5,49632
  809208:	003fd306 	br	809158 <__floatsidf+0x44>

0080920c <__fixdfsi>:
  80920c:	defff804 	addi	sp,sp,-32
  809210:	2005883a 	mov	r2,r4
  809214:	2807883a 	mov	r3,r5
  809218:	d809883a 	mov	r4,sp
  80921c:	d9400204 	addi	r5,sp,8
  809220:	d8c00115 	stw	r3,4(sp)
  809224:	d8800015 	stw	r2,0(sp)
  809228:	dfc00715 	stw	ra,28(sp)
  80922c:	08099f00 	call	8099f0 <__unpack_d>
  809230:	d8c00217 	ldw	r3,8(sp)
  809234:	00800084 	movi	r2,2
  809238:	1880051e 	bne	r3,r2,809250 <__fixdfsi+0x44>
  80923c:	0007883a 	mov	r3,zero
  809240:	1805883a 	mov	r2,r3
  809244:	dfc00717 	ldw	ra,28(sp)
  809248:	dec00804 	addi	sp,sp,32
  80924c:	f800283a 	ret
  809250:	00800044 	movi	r2,1
  809254:	10fff92e 	bgeu	r2,r3,80923c <__fixdfsi+0x30>
  809258:	00800104 	movi	r2,4
  80925c:	18800426 	beq	r3,r2,809270 <__fixdfsi+0x64>
  809260:	d8c00417 	ldw	r3,16(sp)
  809264:	183ff516 	blt	r3,zero,80923c <__fixdfsi+0x30>
  809268:	00800784 	movi	r2,30
  80926c:	10c0080e 	bge	r2,r3,809290 <__fixdfsi+0x84>
  809270:	d8800317 	ldw	r2,12(sp)
  809274:	1000121e 	bne	r2,zero,8092c0 <__fixdfsi+0xb4>
  809278:	00e00034 	movhi	r3,32768
  80927c:	18ffffc4 	addi	r3,r3,-1
  809280:	1805883a 	mov	r2,r3
  809284:	dfc00717 	ldw	ra,28(sp)
  809288:	dec00804 	addi	sp,sp,32
  80928c:	f800283a 	ret
  809290:	00800f04 	movi	r2,60
  809294:	10d1c83a 	sub	r8,r2,r3
  809298:	40bff804 	addi	r2,r8,-32
  80929c:	d9800517 	ldw	r6,20(sp)
  8092a0:	d9c00617 	ldw	r7,24(sp)
  8092a4:	10000816 	blt	r2,zero,8092c8 <__fixdfsi+0xbc>
  8092a8:	3888d83a 	srl	r4,r7,r2
  8092ac:	d8800317 	ldw	r2,12(sp)
  8092b0:	2007883a 	mov	r3,r4
  8092b4:	103fe226 	beq	r2,zero,809240 <__fixdfsi+0x34>
  8092b8:	0107c83a 	sub	r3,zero,r4
  8092bc:	003fe006 	br	809240 <__fixdfsi+0x34>
  8092c0:	00e00034 	movhi	r3,32768
  8092c4:	003fde06 	br	809240 <__fixdfsi+0x34>
  8092c8:	39c7883a 	add	r3,r7,r7
  8092cc:	008007c4 	movi	r2,31
  8092d0:	1205c83a 	sub	r2,r2,r8
  8092d4:	1886983a 	sll	r3,r3,r2
  8092d8:	3208d83a 	srl	r4,r6,r8
  8092dc:	1908b03a 	or	r4,r3,r4
  8092e0:	003ff206 	br	8092ac <__fixdfsi+0xa0>

008092e4 <__floatunsidf>:
  8092e4:	defff204 	addi	sp,sp,-56
  8092e8:	dfc00d15 	stw	ra,52(sp)
  8092ec:	ddc00c15 	stw	r23,48(sp)
  8092f0:	dd800b15 	stw	r22,44(sp)
  8092f4:	dd400a15 	stw	r21,40(sp)
  8092f8:	dd000915 	stw	r20,36(sp)
  8092fc:	dcc00815 	stw	r19,32(sp)
  809300:	dc800715 	stw	r18,28(sp)
  809304:	dc400615 	stw	r17,24(sp)
  809308:	dc000515 	stw	r16,20(sp)
  80930c:	d8000115 	stw	zero,4(sp)
  809310:	20000f1e 	bne	r4,zero,809350 <__floatunsidf+0x6c>
  809314:	00800084 	movi	r2,2
  809318:	d8800015 	stw	r2,0(sp)
  80931c:	d809883a 	mov	r4,sp
  809320:	08096dc0 	call	8096dc <__pack_d>
  809324:	dfc00d17 	ldw	ra,52(sp)
  809328:	ddc00c17 	ldw	r23,48(sp)
  80932c:	dd800b17 	ldw	r22,44(sp)
  809330:	dd400a17 	ldw	r21,40(sp)
  809334:	dd000917 	ldw	r20,36(sp)
  809338:	dcc00817 	ldw	r19,32(sp)
  80933c:	dc800717 	ldw	r18,28(sp)
  809340:	dc400617 	ldw	r17,24(sp)
  809344:	dc000517 	ldw	r16,20(sp)
  809348:	dec00e04 	addi	sp,sp,56
  80934c:	f800283a 	ret
  809350:	008000c4 	movi	r2,3
  809354:	00c00f04 	movi	r3,60
  809358:	002f883a 	mov	r23,zero
  80935c:	202d883a 	mov	r22,r4
  809360:	d8800015 	stw	r2,0(sp)
  809364:	d8c00215 	stw	r3,8(sp)
  809368:	d9000315 	stw	r4,12(sp)
  80936c:	ddc00415 	stw	r23,16(sp)
  809370:	080965c0 	call	80965c <__clzsi2>
  809374:	12400744 	addi	r9,r2,29
  809378:	48000b16 	blt	r9,zero,8093a8 <__floatunsidf+0xc4>
  80937c:	483fe726 	beq	r9,zero,80931c <__floatunsidf+0x38>
  809380:	10bfff44 	addi	r2,r2,-3
  809384:	10002e16 	blt	r2,zero,809440 <__floatunsidf+0x15c>
  809388:	b0a2983a 	sll	r17,r22,r2
  80938c:	0021883a 	mov	r16,zero
  809390:	d8800217 	ldw	r2,8(sp)
  809394:	dc400415 	stw	r17,16(sp)
  809398:	dc000315 	stw	r16,12(sp)
  80939c:	1245c83a 	sub	r2,r2,r9
  8093a0:	d8800215 	stw	r2,8(sp)
  8093a4:	003fdd06 	br	80931c <__floatunsidf+0x38>
  8093a8:	0255c83a 	sub	r10,zero,r9
  8093ac:	51bff804 	addi	r6,r10,-32
  8093b0:	30001b16 	blt	r6,zero,809420 <__floatunsidf+0x13c>
  8093b4:	b9a8d83a 	srl	r20,r23,r6
  8093b8:	002b883a 	mov	r21,zero
  8093bc:	000f883a 	mov	r7,zero
  8093c0:	01000044 	movi	r4,1
  8093c4:	0011883a 	mov	r8,zero
  8093c8:	30002516 	blt	r6,zero,809460 <__floatunsidf+0x17c>
  8093cc:	21a6983a 	sll	r19,r4,r6
  8093d0:	0025883a 	mov	r18,zero
  8093d4:	00bfffc4 	movi	r2,-1
  8093d8:	9089883a 	add	r4,r18,r2
  8093dc:	988b883a 	add	r5,r19,r2
  8093e0:	248d803a 	cmpltu	r6,r4,r18
  8093e4:	314b883a 	add	r5,r6,r5
  8093e8:	b104703a 	and	r2,r22,r4
  8093ec:	b946703a 	and	r3,r23,r5
  8093f0:	10c4b03a 	or	r2,r2,r3
  8093f4:	10000226 	beq	r2,zero,809400 <__floatunsidf+0x11c>
  8093f8:	01c00044 	movi	r7,1
  8093fc:	0011883a 	mov	r8,zero
  809400:	d9000217 	ldw	r4,8(sp)
  809404:	a1c4b03a 	or	r2,r20,r7
  809408:	aa06b03a 	or	r3,r21,r8
  80940c:	2249c83a 	sub	r4,r4,r9
  809410:	d8c00415 	stw	r3,16(sp)
  809414:	d9000215 	stw	r4,8(sp)
  809418:	d8800315 	stw	r2,12(sp)
  80941c:	003fbf06 	br	80931c <__floatunsidf+0x38>
  809420:	bdc7883a 	add	r3,r23,r23
  809424:	008007c4 	movi	r2,31
  809428:	1285c83a 	sub	r2,r2,r10
  80942c:	1886983a 	sll	r3,r3,r2
  809430:	b2a8d83a 	srl	r20,r22,r10
  809434:	baaad83a 	srl	r21,r23,r10
  809438:	1d28b03a 	or	r20,r3,r20
  80943c:	003fdf06 	br	8093bc <__floatunsidf+0xd8>
  809440:	b006d07a 	srli	r3,r22,1
  809444:	008007c4 	movi	r2,31
  809448:	1245c83a 	sub	r2,r2,r9
  80944c:	1886d83a 	srl	r3,r3,r2
  809450:	ba62983a 	sll	r17,r23,r9
  809454:	b260983a 	sll	r16,r22,r9
  809458:	1c62b03a 	or	r17,r3,r17
  80945c:	003fcc06 	br	809390 <__floatunsidf+0xac>
  809460:	2006d07a 	srli	r3,r4,1
  809464:	008007c4 	movi	r2,31
  809468:	1285c83a 	sub	r2,r2,r10
  80946c:	18a6d83a 	srl	r19,r3,r2
  809470:	22a4983a 	sll	r18,r4,r10
  809474:	003fd706 	br	8093d4 <__floatunsidf+0xf0>

00809478 <udivmodsi4>:
  809478:	29001b2e 	bgeu	r5,r4,8094e8 <udivmodsi4+0x70>
  80947c:	28001a16 	blt	r5,zero,8094e8 <udivmodsi4+0x70>
  809480:	00800044 	movi	r2,1
  809484:	0007883a 	mov	r3,zero
  809488:	01c007c4 	movi	r7,31
  80948c:	00000306 	br	80949c <udivmodsi4+0x24>
  809490:	19c01326 	beq	r3,r7,8094e0 <udivmodsi4+0x68>
  809494:	18c00044 	addi	r3,r3,1
  809498:	28000416 	blt	r5,zero,8094ac <udivmodsi4+0x34>
  80949c:	294b883a 	add	r5,r5,r5
  8094a0:	1085883a 	add	r2,r2,r2
  8094a4:	293ffa36 	bltu	r5,r4,809490 <udivmodsi4+0x18>
  8094a8:	10000d26 	beq	r2,zero,8094e0 <udivmodsi4+0x68>
  8094ac:	0007883a 	mov	r3,zero
  8094b0:	21400236 	bltu	r4,r5,8094bc <udivmodsi4+0x44>
  8094b4:	2149c83a 	sub	r4,r4,r5
  8094b8:	1886b03a 	or	r3,r3,r2
  8094bc:	1004d07a 	srli	r2,r2,1
  8094c0:	280ad07a 	srli	r5,r5,1
  8094c4:	103ffa1e 	bne	r2,zero,8094b0 <udivmodsi4+0x38>
  8094c8:	30000226 	beq	r6,zero,8094d4 <udivmodsi4+0x5c>
  8094cc:	2005883a 	mov	r2,r4
  8094d0:	f800283a 	ret
  8094d4:	1809883a 	mov	r4,r3
  8094d8:	2005883a 	mov	r2,r4
  8094dc:	f800283a 	ret
  8094e0:	0007883a 	mov	r3,zero
  8094e4:	003ff806 	br	8094c8 <udivmodsi4+0x50>
  8094e8:	00800044 	movi	r2,1
  8094ec:	0007883a 	mov	r3,zero
  8094f0:	003fef06 	br	8094b0 <udivmodsi4+0x38>

008094f4 <__divsi3>:
  8094f4:	defffe04 	addi	sp,sp,-8
  8094f8:	dc000015 	stw	r16,0(sp)
  8094fc:	dfc00115 	stw	ra,4(sp)
  809500:	0021883a 	mov	r16,zero
  809504:	20000c16 	blt	r4,zero,809538 <__divsi3+0x44>
  809508:	000d883a 	mov	r6,zero
  80950c:	28000e16 	blt	r5,zero,809548 <__divsi3+0x54>
  809510:	08094780 	call	809478 <udivmodsi4>
  809514:	1007883a 	mov	r3,r2
  809518:	8005003a 	cmpeq	r2,r16,zero
  80951c:	1000011e 	bne	r2,zero,809524 <__divsi3+0x30>
  809520:	00c7c83a 	sub	r3,zero,r3
  809524:	1805883a 	mov	r2,r3
  809528:	dfc00117 	ldw	ra,4(sp)
  80952c:	dc000017 	ldw	r16,0(sp)
  809530:	dec00204 	addi	sp,sp,8
  809534:	f800283a 	ret
  809538:	0109c83a 	sub	r4,zero,r4
  80953c:	04000044 	movi	r16,1
  809540:	000d883a 	mov	r6,zero
  809544:	283ff20e 	bge	r5,zero,809510 <__divsi3+0x1c>
  809548:	014bc83a 	sub	r5,zero,r5
  80954c:	8021003a 	cmpeq	r16,r16,zero
  809550:	003fef06 	br	809510 <__divsi3+0x1c>

00809554 <__modsi3>:
  809554:	deffff04 	addi	sp,sp,-4
  809558:	dfc00015 	stw	ra,0(sp)
  80955c:	01800044 	movi	r6,1
  809560:	2807883a 	mov	r3,r5
  809564:	20000416 	blt	r4,zero,809578 <__modsi3+0x24>
  809568:	28000c16 	blt	r5,zero,80959c <__modsi3+0x48>
  80956c:	dfc00017 	ldw	ra,0(sp)
  809570:	dec00104 	addi	sp,sp,4
  809574:	08094781 	jmpi	809478 <udivmodsi4>
  809578:	0109c83a 	sub	r4,zero,r4
  80957c:	28000b16 	blt	r5,zero,8095ac <__modsi3+0x58>
  809580:	180b883a 	mov	r5,r3
  809584:	01800044 	movi	r6,1
  809588:	08094780 	call	809478 <udivmodsi4>
  80958c:	0085c83a 	sub	r2,zero,r2
  809590:	dfc00017 	ldw	ra,0(sp)
  809594:	dec00104 	addi	sp,sp,4
  809598:	f800283a 	ret
  80959c:	014bc83a 	sub	r5,zero,r5
  8095a0:	dfc00017 	ldw	ra,0(sp)
  8095a4:	dec00104 	addi	sp,sp,4
  8095a8:	08094781 	jmpi	809478 <udivmodsi4>
  8095ac:	0147c83a 	sub	r3,zero,r5
  8095b0:	003ff306 	br	809580 <__modsi3+0x2c>

008095b4 <__udivsi3>:
  8095b4:	000d883a 	mov	r6,zero
  8095b8:	08094781 	jmpi	809478 <udivmodsi4>

008095bc <__umodsi3>:
  8095bc:	01800044 	movi	r6,1
  8095c0:	08094781 	jmpi	809478 <udivmodsi4>

008095c4 <__muldi3>:
  8095c4:	2011883a 	mov	r8,r4
  8095c8:	427fffcc 	andi	r9,r8,65535
  8095cc:	4018d43a 	srli	r12,r8,16
  8095d0:	32bfffcc 	andi	r10,r6,65535
  8095d4:	3016d43a 	srli	r11,r6,16
  8095d8:	4a85383a 	mul	r2,r9,r10
  8095dc:	6295383a 	mul	r10,r12,r10
  8095e0:	4ad3383a 	mul	r9,r9,r11
  8095e4:	113fffcc 	andi	r4,r2,65535
  8095e8:	1004d43a 	srli	r2,r2,16
  8095ec:	4a93883a 	add	r9,r9,r10
  8095f0:	3807883a 	mov	r3,r7
  8095f4:	1245883a 	add	r2,r2,r9
  8095f8:	280f883a 	mov	r7,r5
  8095fc:	180b883a 	mov	r5,r3
  809600:	1006943a 	slli	r3,r2,16
  809604:	defffd04 	addi	sp,sp,-12
  809608:	dc800215 	stw	r18,8(sp)
  80960c:	1907883a 	add	r3,r3,r4
  809610:	dc400115 	stw	r17,4(sp)
  809614:	dc000015 	stw	r16,0(sp)
  809618:	4165383a 	mul	r18,r8,r5
  80961c:	31e3383a 	mul	r17,r6,r7
  809620:	1012d43a 	srli	r9,r2,16
  809624:	62d9383a 	mul	r12,r12,r11
  809628:	181f883a 	mov	r15,r3
  80962c:	1280022e 	bgeu	r2,r10,809638 <__muldi3+0x74>
  809630:	00800074 	movhi	r2,1
  809634:	6099883a 	add	r12,r12,r2
  809638:	624d883a 	add	r6,r12,r9
  80963c:	9187883a 	add	r3,r18,r6
  809640:	88c7883a 	add	r3,r17,r3
  809644:	7805883a 	mov	r2,r15
  809648:	dc800217 	ldw	r18,8(sp)
  80964c:	dc400117 	ldw	r17,4(sp)
  809650:	dc000017 	ldw	r16,0(sp)
  809654:	dec00304 	addi	sp,sp,12
  809658:	f800283a 	ret

0080965c <__clzsi2>:
  80965c:	00bfffd4 	movui	r2,65535
  809660:	11000e36 	bltu	r2,r4,80969c <__clzsi2+0x40>
  809664:	00803fc4 	movi	r2,255
  809668:	01400204 	movi	r5,8
  80966c:	0007883a 	mov	r3,zero
  809670:	11001036 	bltu	r2,r4,8096b4 <__clzsi2+0x58>
  809674:	000b883a 	mov	r5,zero
  809678:	20c6d83a 	srl	r3,r4,r3
  80967c:	00802074 	movhi	r2,129
  809680:	1096f404 	addi	r2,r2,23504
  809684:	1887883a 	add	r3,r3,r2
  809688:	18800003 	ldbu	r2,0(r3)
  80968c:	00c00804 	movi	r3,32
  809690:	2885883a 	add	r2,r5,r2
  809694:	1885c83a 	sub	r2,r3,r2
  809698:	f800283a 	ret
  80969c:	01400404 	movi	r5,16
  8096a0:	00804034 	movhi	r2,256
  8096a4:	10bfffc4 	addi	r2,r2,-1
  8096a8:	2807883a 	mov	r3,r5
  8096ac:	113ff22e 	bgeu	r2,r4,809678 <__clzsi2+0x1c>
  8096b0:	01400604 	movi	r5,24
  8096b4:	2807883a 	mov	r3,r5
  8096b8:	20c6d83a 	srl	r3,r4,r3
  8096bc:	00802074 	movhi	r2,129
  8096c0:	1096f404 	addi	r2,r2,23504
  8096c4:	1887883a 	add	r3,r3,r2
  8096c8:	18800003 	ldbu	r2,0(r3)
  8096cc:	00c00804 	movi	r3,32
  8096d0:	2885883a 	add	r2,r5,r2
  8096d4:	1885c83a 	sub	r2,r3,r2
  8096d8:	f800283a 	ret

008096dc <__pack_d>:
  8096dc:	20c00017 	ldw	r3,0(r4)
  8096e0:	defffd04 	addi	sp,sp,-12
  8096e4:	dc000015 	stw	r16,0(sp)
  8096e8:	dc800215 	stw	r18,8(sp)
  8096ec:	dc400115 	stw	r17,4(sp)
  8096f0:	00800044 	movi	r2,1
  8096f4:	22000317 	ldw	r8,12(r4)
  8096f8:	001f883a 	mov	r15,zero
  8096fc:	22400417 	ldw	r9,16(r4)
  809700:	24000117 	ldw	r16,4(r4)
  809704:	10c0552e 	bgeu	r2,r3,80985c <__pack_d+0x180>
  809708:	00800104 	movi	r2,4
  80970c:	18804f26 	beq	r3,r2,80984c <__pack_d+0x170>
  809710:	00800084 	movi	r2,2
  809714:	18800226 	beq	r3,r2,809720 <__pack_d+0x44>
  809718:	4244b03a 	or	r2,r8,r9
  80971c:	10001a1e 	bne	r2,zero,809788 <__pack_d+0xac>
  809720:	000d883a 	mov	r6,zero
  809724:	000f883a 	mov	r7,zero
  809728:	0011883a 	mov	r8,zero
  80972c:	00800434 	movhi	r2,16
  809730:	10bfffc4 	addi	r2,r2,-1
  809734:	301d883a 	mov	r14,r6
  809738:	3884703a 	and	r2,r7,r2
  80973c:	400a953a 	slli	r5,r8,20
  809740:	79bffc2c 	andhi	r6,r15,65520
  809744:	308cb03a 	or	r6,r6,r2
  809748:	00e00434 	movhi	r3,32784
  80974c:	18ffffc4 	addi	r3,r3,-1
  809750:	800497fa 	slli	r2,r16,31
  809754:	30c6703a 	and	r3,r6,r3
  809758:	1946b03a 	or	r3,r3,r5
  80975c:	01600034 	movhi	r5,32768
  809760:	297fffc4 	addi	r5,r5,-1
  809764:	194a703a 	and	r5,r3,r5
  809768:	288ab03a 	or	r5,r5,r2
  80976c:	2807883a 	mov	r3,r5
  809770:	7005883a 	mov	r2,r14
  809774:	dc800217 	ldw	r18,8(sp)
  809778:	dc400117 	ldw	r17,4(sp)
  80977c:	dc000017 	ldw	r16,0(sp)
  809780:	dec00304 	addi	sp,sp,12
  809784:	f800283a 	ret
  809788:	21000217 	ldw	r4,8(r4)
  80978c:	00bf0084 	movi	r2,-1022
  809790:	20803f16 	blt	r4,r2,809890 <__pack_d+0x1b4>
  809794:	0080ffc4 	movi	r2,1023
  809798:	11002c16 	blt	r2,r4,80984c <__pack_d+0x170>
  80979c:	00803fc4 	movi	r2,255
  8097a0:	408c703a 	and	r6,r8,r2
  8097a4:	00802004 	movi	r2,128
  8097a8:	0007883a 	mov	r3,zero
  8097ac:	000f883a 	mov	r7,zero
  8097b0:	2280ffc4 	addi	r10,r4,1023
  8097b4:	30801e26 	beq	r6,r2,809830 <__pack_d+0x154>
  8097b8:	00801fc4 	movi	r2,127
  8097bc:	4089883a 	add	r4,r8,r2
  8097c0:	220d803a 	cmpltu	r6,r4,r8
  8097c4:	324d883a 	add	r6,r6,r9
  8097c8:	2011883a 	mov	r8,r4
  8097cc:	3013883a 	mov	r9,r6
  8097d0:	00880034 	movhi	r2,8192
  8097d4:	10bfffc4 	addi	r2,r2,-1
  8097d8:	12400d36 	bltu	r2,r9,809810 <__pack_d+0x134>
  8097dc:	4804963a 	slli	r2,r9,24
  8097e0:	400cd23a 	srli	r6,r8,8
  8097e4:	480ed23a 	srli	r7,r9,8
  8097e8:	013fffc4 	movi	r4,-1
  8097ec:	118cb03a 	or	r6,r2,r6
  8097f0:	01400434 	movhi	r5,16
  8097f4:	297fffc4 	addi	r5,r5,-1
  8097f8:	3104703a 	and	r2,r6,r4
  8097fc:	3946703a 	and	r3,r7,r5
  809800:	5201ffcc 	andi	r8,r10,2047
  809804:	100d883a 	mov	r6,r2
  809808:	180f883a 	mov	r7,r3
  80980c:	003fc706 	br	80972c <__pack_d+0x50>
  809810:	480897fa 	slli	r4,r9,31
  809814:	4004d07a 	srli	r2,r8,1
  809818:	4806d07a 	srli	r3,r9,1
  80981c:	52800044 	addi	r10,r10,1
  809820:	2084b03a 	or	r2,r4,r2
  809824:	1011883a 	mov	r8,r2
  809828:	1813883a 	mov	r9,r3
  80982c:	003feb06 	br	8097dc <__pack_d+0x100>
  809830:	383fe11e 	bne	r7,zero,8097b8 <__pack_d+0xdc>
  809834:	01004004 	movi	r4,256
  809838:	4104703a 	and	r2,r8,r4
  80983c:	10c4b03a 	or	r2,r2,r3
  809840:	103fe326 	beq	r2,zero,8097d0 <__pack_d+0xf4>
  809844:	3005883a 	mov	r2,r6
  809848:	003fdc06 	br	8097bc <__pack_d+0xe0>
  80984c:	000d883a 	mov	r6,zero
  809850:	000f883a 	mov	r7,zero
  809854:	0201ffc4 	movi	r8,2047
  809858:	003fb406 	br	80972c <__pack_d+0x50>
  80985c:	0005883a 	mov	r2,zero
  809860:	00c00234 	movhi	r3,8
  809864:	408cb03a 	or	r6,r8,r2
  809868:	48ceb03a 	or	r7,r9,r3
  80986c:	013fffc4 	movi	r4,-1
  809870:	01400434 	movhi	r5,16
  809874:	297fffc4 	addi	r5,r5,-1
  809878:	3104703a 	and	r2,r6,r4
  80987c:	3946703a 	and	r3,r7,r5
  809880:	100d883a 	mov	r6,r2
  809884:	180f883a 	mov	r7,r3
  809888:	0201ffc4 	movi	r8,2047
  80988c:	003fa706 	br	80972c <__pack_d+0x50>
  809890:	1109c83a 	sub	r4,r2,r4
  809894:	00800e04 	movi	r2,56
  809898:	11004316 	blt	r2,r4,8099a8 <__pack_d+0x2cc>
  80989c:	21fff804 	addi	r7,r4,-32
  8098a0:	38004516 	blt	r7,zero,8099b8 <__pack_d+0x2dc>
  8098a4:	49d8d83a 	srl	r12,r9,r7
  8098a8:	001b883a 	mov	r13,zero
  8098ac:	0023883a 	mov	r17,zero
  8098b0:	01400044 	movi	r5,1
  8098b4:	0025883a 	mov	r18,zero
  8098b8:	38004716 	blt	r7,zero,8099d8 <__pack_d+0x2fc>
  8098bc:	29d6983a 	sll	r11,r5,r7
  8098c0:	0015883a 	mov	r10,zero
  8098c4:	00bfffc4 	movi	r2,-1
  8098c8:	5089883a 	add	r4,r10,r2
  8098cc:	588b883a 	add	r5,r11,r2
  8098d0:	228d803a 	cmpltu	r6,r4,r10
  8098d4:	314b883a 	add	r5,r6,r5
  8098d8:	4104703a 	and	r2,r8,r4
  8098dc:	4946703a 	and	r3,r9,r5
  8098e0:	10c4b03a 	or	r2,r2,r3
  8098e4:	10000226 	beq	r2,zero,8098f0 <__pack_d+0x214>
  8098e8:	04400044 	movi	r17,1
  8098ec:	0025883a 	mov	r18,zero
  8098f0:	00803fc4 	movi	r2,255
  8098f4:	644eb03a 	or	r7,r12,r17
  8098f8:	3892703a 	and	r9,r7,r2
  8098fc:	00802004 	movi	r2,128
  809900:	6c90b03a 	or	r8,r13,r18
  809904:	0015883a 	mov	r10,zero
  809908:	48801626 	beq	r9,r2,809964 <__pack_d+0x288>
  80990c:	01001fc4 	movi	r4,127
  809910:	3905883a 	add	r2,r7,r4
  809914:	11cd803a 	cmpltu	r6,r2,r7
  809918:	320d883a 	add	r6,r6,r8
  80991c:	100f883a 	mov	r7,r2
  809920:	00840034 	movhi	r2,4096
  809924:	10bfffc4 	addi	r2,r2,-1
  809928:	3011883a 	mov	r8,r6
  80992c:	0007883a 	mov	r3,zero
  809930:	11801b36 	bltu	r2,r6,8099a0 <__pack_d+0x2c4>
  809934:	4004963a 	slli	r2,r8,24
  809938:	3808d23a 	srli	r4,r7,8
  80993c:	400ad23a 	srli	r5,r8,8
  809940:	1813883a 	mov	r9,r3
  809944:	1108b03a 	or	r4,r2,r4
  809948:	00bfffc4 	movi	r2,-1
  80994c:	00c00434 	movhi	r3,16
  809950:	18ffffc4 	addi	r3,r3,-1
  809954:	208c703a 	and	r6,r4,r2
  809958:	28ce703a 	and	r7,r5,r3
  80995c:	4a01ffcc 	andi	r8,r9,2047
  809960:	003f7206 	br	80972c <__pack_d+0x50>
  809964:	503fe91e 	bne	r10,zero,80990c <__pack_d+0x230>
  809968:	01004004 	movi	r4,256
  80996c:	3904703a 	and	r2,r7,r4
  809970:	0007883a 	mov	r3,zero
  809974:	10c4b03a 	or	r2,r2,r3
  809978:	10000626 	beq	r2,zero,809994 <__pack_d+0x2b8>
  80997c:	3a45883a 	add	r2,r7,r9
  809980:	11cd803a 	cmpltu	r6,r2,r7
  809984:	320d883a 	add	r6,r6,r8
  809988:	100f883a 	mov	r7,r2
  80998c:	3011883a 	mov	r8,r6
  809990:	0007883a 	mov	r3,zero
  809994:	00840034 	movhi	r2,4096
  809998:	10bfffc4 	addi	r2,r2,-1
  80999c:	123fe52e 	bgeu	r2,r8,809934 <__pack_d+0x258>
  8099a0:	00c00044 	movi	r3,1
  8099a4:	003fe306 	br	809934 <__pack_d+0x258>
  8099a8:	0009883a 	mov	r4,zero
  8099ac:	0013883a 	mov	r9,zero
  8099b0:	000b883a 	mov	r5,zero
  8099b4:	003fe406 	br	809948 <__pack_d+0x26c>
  8099b8:	4a47883a 	add	r3,r9,r9
  8099bc:	008007c4 	movi	r2,31
  8099c0:	1105c83a 	sub	r2,r2,r4
  8099c4:	1886983a 	sll	r3,r3,r2
  8099c8:	4118d83a 	srl	r12,r8,r4
  8099cc:	491ad83a 	srl	r13,r9,r4
  8099d0:	1b18b03a 	or	r12,r3,r12
  8099d4:	003fb506 	br	8098ac <__pack_d+0x1d0>
  8099d8:	2806d07a 	srli	r3,r5,1
  8099dc:	008007c4 	movi	r2,31
  8099e0:	1105c83a 	sub	r2,r2,r4
  8099e4:	1896d83a 	srl	r11,r3,r2
  8099e8:	2914983a 	sll	r10,r5,r4
  8099ec:	003fb506 	br	8098c4 <__pack_d+0x1e8>

008099f0 <__unpack_d>:
  8099f0:	20c00117 	ldw	r3,4(r4)
  8099f4:	22400017 	ldw	r9,0(r4)
  8099f8:	00800434 	movhi	r2,16
  8099fc:	10bfffc4 	addi	r2,r2,-1
  809a00:	1808d53a 	srli	r4,r3,20
  809a04:	180cd7fa 	srli	r6,r3,31
  809a08:	1894703a 	and	r10,r3,r2
  809a0c:	2201ffcc 	andi	r8,r4,2047
  809a10:	281b883a 	mov	r13,r5
  809a14:	4817883a 	mov	r11,r9
  809a18:	29800115 	stw	r6,4(r5)
  809a1c:	5019883a 	mov	r12,r10
  809a20:	40001e1e 	bne	r8,zero,809a9c <__unpack_d+0xac>
  809a24:	4a84b03a 	or	r2,r9,r10
  809a28:	10001926 	beq	r2,zero,809a90 <__unpack_d+0xa0>
  809a2c:	4804d63a 	srli	r2,r9,24
  809a30:	500c923a 	slli	r6,r10,8
  809a34:	013f0084 	movi	r4,-1022
  809a38:	00c40034 	movhi	r3,4096
  809a3c:	18ffffc4 	addi	r3,r3,-1
  809a40:	118cb03a 	or	r6,r2,r6
  809a44:	008000c4 	movi	r2,3
  809a48:	480a923a 	slli	r5,r9,8
  809a4c:	68800015 	stw	r2,0(r13)
  809a50:	69000215 	stw	r4,8(r13)
  809a54:	19800b36 	bltu	r3,r6,809a84 <__unpack_d+0x94>
  809a58:	200f883a 	mov	r7,r4
  809a5c:	1811883a 	mov	r8,r3
  809a60:	2945883a 	add	r2,r5,r5
  809a64:	1149803a 	cmpltu	r4,r2,r5
  809a68:	3187883a 	add	r3,r6,r6
  809a6c:	20c9883a 	add	r4,r4,r3
  809a70:	100b883a 	mov	r5,r2
  809a74:	200d883a 	mov	r6,r4
  809a78:	39ffffc4 	addi	r7,r7,-1
  809a7c:	413ff82e 	bgeu	r8,r4,809a60 <__unpack_d+0x70>
  809a80:	69c00215 	stw	r7,8(r13)
  809a84:	69800415 	stw	r6,16(r13)
  809a88:	69400315 	stw	r5,12(r13)
  809a8c:	f800283a 	ret
  809a90:	00800084 	movi	r2,2
  809a94:	28800015 	stw	r2,0(r5)
  809a98:	f800283a 	ret
  809a9c:	0081ffc4 	movi	r2,2047
  809aa0:	40800f26 	beq	r8,r2,809ae0 <__unpack_d+0xf0>
  809aa4:	480cd63a 	srli	r6,r9,24
  809aa8:	5006923a 	slli	r3,r10,8
  809aac:	4804923a 	slli	r2,r9,8
  809ab0:	0009883a 	mov	r4,zero
  809ab4:	30c6b03a 	or	r3,r6,r3
  809ab8:	01440034 	movhi	r5,4096
  809abc:	110cb03a 	or	r6,r2,r4
  809ac0:	423f0044 	addi	r8,r8,-1023
  809ac4:	194eb03a 	or	r7,r3,r5
  809ac8:	008000c4 	movi	r2,3
  809acc:	69c00415 	stw	r7,16(r13)
  809ad0:	6a000215 	stw	r8,8(r13)
  809ad4:	68800015 	stw	r2,0(r13)
  809ad8:	69800315 	stw	r6,12(r13)
  809adc:	f800283a 	ret
  809ae0:	4a84b03a 	or	r2,r9,r10
  809ae4:	1000031e 	bne	r2,zero,809af4 <__unpack_d+0x104>
  809ae8:	00800104 	movi	r2,4
  809aec:	28800015 	stw	r2,0(r5)
  809af0:	f800283a 	ret
  809af4:	0009883a 	mov	r4,zero
  809af8:	01400234 	movhi	r5,8
  809afc:	4904703a 	and	r2,r9,r4
  809b00:	5146703a 	and	r3,r10,r5
  809b04:	10c4b03a 	or	r2,r2,r3
  809b08:	10000526 	beq	r2,zero,809b20 <__unpack_d+0x130>
  809b0c:	00800044 	movi	r2,1
  809b10:	68800015 	stw	r2,0(r13)
  809b14:	6b000415 	stw	r12,16(r13)
  809b18:	6ac00315 	stw	r11,12(r13)
  809b1c:	f800283a 	ret
  809b20:	68000015 	stw	zero,0(r13)
  809b24:	003ffb06 	br	809b14 <__unpack_d+0x124>

00809b28 <__fpcmp_parts_d>:
  809b28:	21800017 	ldw	r6,0(r4)
  809b2c:	00c00044 	movi	r3,1
  809b30:	19800a2e 	bgeu	r3,r6,809b5c <__fpcmp_parts_d+0x34>
  809b34:	28800017 	ldw	r2,0(r5)
  809b38:	1880082e 	bgeu	r3,r2,809b5c <__fpcmp_parts_d+0x34>
  809b3c:	00c00104 	movi	r3,4
  809b40:	30c02626 	beq	r6,r3,809bdc <__fpcmp_parts_d+0xb4>
  809b44:	10c02226 	beq	r2,r3,809bd0 <__fpcmp_parts_d+0xa8>
  809b48:	00c00084 	movi	r3,2
  809b4c:	30c00526 	beq	r6,r3,809b64 <__fpcmp_parts_d+0x3c>
  809b50:	10c0071e 	bne	r2,r3,809b70 <__fpcmp_parts_d+0x48>
  809b54:	20800117 	ldw	r2,4(r4)
  809b58:	1000091e 	bne	r2,zero,809b80 <__fpcmp_parts_d+0x58>
  809b5c:	00800044 	movi	r2,1
  809b60:	f800283a 	ret
  809b64:	10c01a1e 	bne	r2,r3,809bd0 <__fpcmp_parts_d+0xa8>
  809b68:	0005883a 	mov	r2,zero
  809b6c:	f800283a 	ret
  809b70:	22000117 	ldw	r8,4(r4)
  809b74:	28800117 	ldw	r2,4(r5)
  809b78:	40800326 	beq	r8,r2,809b88 <__fpcmp_parts_d+0x60>
  809b7c:	403ff726 	beq	r8,zero,809b5c <__fpcmp_parts_d+0x34>
  809b80:	00bfffc4 	movi	r2,-1
  809b84:	f800283a 	ret
  809b88:	20c00217 	ldw	r3,8(r4)
  809b8c:	28800217 	ldw	r2,8(r5)
  809b90:	10fffa16 	blt	r2,r3,809b7c <__fpcmp_parts_d+0x54>
  809b94:	18800916 	blt	r3,r2,809bbc <__fpcmp_parts_d+0x94>
  809b98:	21c00417 	ldw	r7,16(r4)
  809b9c:	28c00417 	ldw	r3,16(r5)
  809ba0:	21800317 	ldw	r6,12(r4)
  809ba4:	28800317 	ldw	r2,12(r5)
  809ba8:	19fff436 	bltu	r3,r7,809b7c <__fpcmp_parts_d+0x54>
  809bac:	38c00526 	beq	r7,r3,809bc4 <__fpcmp_parts_d+0x9c>
  809bb0:	38c00236 	bltu	r7,r3,809bbc <__fpcmp_parts_d+0x94>
  809bb4:	19ffec1e 	bne	r3,r7,809b68 <__fpcmp_parts_d+0x40>
  809bb8:	30bfeb2e 	bgeu	r6,r2,809b68 <__fpcmp_parts_d+0x40>
  809bbc:	403fe71e 	bne	r8,zero,809b5c <__fpcmp_parts_d+0x34>
  809bc0:	003fef06 	br	809b80 <__fpcmp_parts_d+0x58>
  809bc4:	11bffa2e 	bgeu	r2,r6,809bb0 <__fpcmp_parts_d+0x88>
  809bc8:	403fe426 	beq	r8,zero,809b5c <__fpcmp_parts_d+0x34>
  809bcc:	003fec06 	br	809b80 <__fpcmp_parts_d+0x58>
  809bd0:	28800117 	ldw	r2,4(r5)
  809bd4:	103fe11e 	bne	r2,zero,809b5c <__fpcmp_parts_d+0x34>
  809bd8:	003fe906 	br	809b80 <__fpcmp_parts_d+0x58>
  809bdc:	11bfdd1e 	bne	r2,r6,809b54 <__fpcmp_parts_d+0x2c>
  809be0:	28c00117 	ldw	r3,4(r5)
  809be4:	20800117 	ldw	r2,4(r4)
  809be8:	1885c83a 	sub	r2,r3,r2
  809bec:	f800283a 	ret

00809bf0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  809bf0:	defff804 	addi	sp,sp,-32
  809bf4:	dfc00715 	stw	ra,28(sp)
  809bf8:	df000615 	stw	fp,24(sp)
  809bfc:	df000604 	addi	fp,sp,24
  809c00:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  809c04:	e0bffc17 	ldw	r2,-16(fp)
  809c08:	1004803a 	cmplt	r2,r2,zero
  809c0c:	1000081e 	bne	r2,zero,809c30 <close+0x40>
  809c10:	e0bffc17 	ldw	r2,-16(fp)
  809c14:	10800324 	muli	r2,r2,12
  809c18:	1007883a 	mov	r3,r2
  809c1c:	00802074 	movhi	r2,129
  809c20:	10999f04 	addi	r2,r2,26236
  809c24:	1887883a 	add	r3,r3,r2
  809c28:	e0ffff15 	stw	r3,-4(fp)
  809c2c:	00000106 	br	809c34 <close+0x44>
  809c30:	e03fff15 	stw	zero,-4(fp)
  809c34:	e0bfff17 	ldw	r2,-4(fp)
  809c38:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  809c3c:	e0bffb17 	ldw	r2,-20(fp)
  809c40:	1005003a 	cmpeq	r2,r2,zero
  809c44:	10001d1e 	bne	r2,zero,809cbc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  809c48:	e0bffb17 	ldw	r2,-20(fp)
  809c4c:	10800017 	ldw	r2,0(r2)
  809c50:	10800417 	ldw	r2,16(r2)
  809c54:	1005003a 	cmpeq	r2,r2,zero
  809c58:	1000071e 	bne	r2,zero,809c78 <close+0x88>
  809c5c:	e0bffb17 	ldw	r2,-20(fp)
  809c60:	10800017 	ldw	r2,0(r2)
  809c64:	10800417 	ldw	r2,16(r2)
  809c68:	e13ffb17 	ldw	r4,-20(fp)
  809c6c:	103ee83a 	callr	r2
  809c70:	e0bffe15 	stw	r2,-8(fp)
  809c74:	00000106 	br	809c7c <close+0x8c>
  809c78:	e03ffe15 	stw	zero,-8(fp)
  809c7c:	e0bffe17 	ldw	r2,-8(fp)
  809c80:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  809c84:	e13ffc17 	ldw	r4,-16(fp)
  809c88:	080a4500 	call	80a450 <alt_release_fd>
    if (rval < 0)
  809c8c:	e0bffa17 	ldw	r2,-24(fp)
  809c90:	1004403a 	cmpge	r2,r2,zero
  809c94:	1000071e 	bne	r2,zero,809cb4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
  809c98:	0809cec0 	call	809cec <alt_get_errno>
  809c9c:	e0fffa17 	ldw	r3,-24(fp)
  809ca0:	00c7c83a 	sub	r3,zero,r3
  809ca4:	10c00015 	stw	r3,0(r2)
      return -1;
  809ca8:	00bfffc4 	movi	r2,-1
  809cac:	e0bffd15 	stw	r2,-12(fp)
  809cb0:	00000806 	br	809cd4 <close+0xe4>
    }
    return 0;
  809cb4:	e03ffd15 	stw	zero,-12(fp)
  809cb8:	00000606 	br	809cd4 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809cbc:	0809cec0 	call	809cec <alt_get_errno>
  809cc0:	1007883a 	mov	r3,r2
  809cc4:	00801444 	movi	r2,81
  809cc8:	18800015 	stw	r2,0(r3)
    return -1;
  809ccc:	00bfffc4 	movi	r2,-1
  809cd0:	e0bffd15 	stw	r2,-12(fp)
  809cd4:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  809cd8:	e037883a 	mov	sp,fp
  809cdc:	dfc00117 	ldw	ra,4(sp)
  809ce0:	df000017 	ldw	fp,0(sp)
  809ce4:	dec00204 	addi	sp,sp,8
  809ce8:	f800283a 	ret

00809cec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809cec:	defffd04 	addi	sp,sp,-12
  809cf0:	dfc00215 	stw	ra,8(sp)
  809cf4:	df000115 	stw	fp,4(sp)
  809cf8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809cfc:	00802074 	movhi	r2,129
  809d00:	109e3004 	addi	r2,r2,30912
  809d04:	10800017 	ldw	r2,0(r2)
  809d08:	1005003a 	cmpeq	r2,r2,zero
  809d0c:	1000061e 	bne	r2,zero,809d28 <alt_get_errno+0x3c>
  809d10:	00802074 	movhi	r2,129
  809d14:	109e3004 	addi	r2,r2,30912
  809d18:	10800017 	ldw	r2,0(r2)
  809d1c:	103ee83a 	callr	r2
  809d20:	e0bfff15 	stw	r2,-4(fp)
  809d24:	00000306 	br	809d34 <alt_get_errno+0x48>
  809d28:	008020b4 	movhi	r2,130
  809d2c:	10a51f04 	addi	r2,r2,-27524
  809d30:	e0bfff15 	stw	r2,-4(fp)
  809d34:	e0bfff17 	ldw	r2,-4(fp)
}
  809d38:	e037883a 	mov	sp,fp
  809d3c:	dfc00117 	ldw	ra,4(sp)
  809d40:	df000017 	ldw	fp,0(sp)
  809d44:	dec00204 	addi	sp,sp,8
  809d48:	f800283a 	ret

00809d4c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  809d4c:	defffc04 	addi	sp,sp,-16
  809d50:	df000315 	stw	fp,12(sp)
  809d54:	df000304 	addi	fp,sp,12
  809d58:	e13ffd15 	stw	r4,-12(fp)
  809d5c:	e17ffe15 	stw	r5,-8(fp)
  809d60:	e1bfff15 	stw	r6,-4(fp)
  return len;
  809d64:	e0bfff17 	ldw	r2,-4(fp)
}
  809d68:	e037883a 	mov	sp,fp
  809d6c:	df000017 	ldw	fp,0(sp)
  809d70:	dec00104 	addi	sp,sp,4
  809d74:	f800283a 	ret

00809d78 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  809d78:	defff904 	addi	sp,sp,-28
  809d7c:	dfc00615 	stw	ra,24(sp)
  809d80:	df000515 	stw	fp,20(sp)
  809d84:	df000504 	addi	fp,sp,20
  809d88:	e13ffc15 	stw	r4,-16(fp)
  809d8c:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809d90:	e0bffc17 	ldw	r2,-16(fp)
  809d94:	1004803a 	cmplt	r2,r2,zero
  809d98:	1000081e 	bne	r2,zero,809dbc <fstat+0x44>
  809d9c:	e0bffc17 	ldw	r2,-16(fp)
  809da0:	10800324 	muli	r2,r2,12
  809da4:	1007883a 	mov	r3,r2
  809da8:	00802074 	movhi	r2,129
  809dac:	10999f04 	addi	r2,r2,26236
  809db0:	1887883a 	add	r3,r3,r2
  809db4:	e0ffff15 	stw	r3,-4(fp)
  809db8:	00000106 	br	809dc0 <fstat+0x48>
  809dbc:	e03fff15 	stw	zero,-4(fp)
  809dc0:	e0bfff17 	ldw	r2,-4(fp)
  809dc4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  809dc8:	e0bffb17 	ldw	r2,-20(fp)
  809dcc:	1005003a 	cmpeq	r2,r2,zero
  809dd0:	1000121e 	bne	r2,zero,809e1c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  809dd4:	e0bffb17 	ldw	r2,-20(fp)
  809dd8:	10800017 	ldw	r2,0(r2)
  809ddc:	10800817 	ldw	r2,32(r2)
  809de0:	1005003a 	cmpeq	r2,r2,zero
  809de4:	1000081e 	bne	r2,zero,809e08 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
  809de8:	e0bffb17 	ldw	r2,-20(fp)
  809dec:	10800017 	ldw	r2,0(r2)
  809df0:	10800817 	ldw	r2,32(r2)
  809df4:	e13ffb17 	ldw	r4,-20(fp)
  809df8:	e17ffd17 	ldw	r5,-12(fp)
  809dfc:	103ee83a 	callr	r2
  809e00:	e0bffe15 	stw	r2,-8(fp)
  809e04:	00000b06 	br	809e34 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  809e08:	e0fffd17 	ldw	r3,-12(fp)
  809e0c:	00880004 	movi	r2,8192
  809e10:	18800115 	stw	r2,4(r3)
      return 0;
  809e14:	e03ffe15 	stw	zero,-8(fp)
  809e18:	00000606 	br	809e34 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809e1c:	0809e4c0 	call	809e4c <alt_get_errno>
  809e20:	1007883a 	mov	r3,r2
  809e24:	00801444 	movi	r2,81
  809e28:	18800015 	stw	r2,0(r3)
    return -1;
  809e2c:	00bfffc4 	movi	r2,-1
  809e30:	e0bffe15 	stw	r2,-8(fp)
  809e34:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  809e38:	e037883a 	mov	sp,fp
  809e3c:	dfc00117 	ldw	ra,4(sp)
  809e40:	df000017 	ldw	fp,0(sp)
  809e44:	dec00204 	addi	sp,sp,8
  809e48:	f800283a 	ret

00809e4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809e4c:	defffd04 	addi	sp,sp,-12
  809e50:	dfc00215 	stw	ra,8(sp)
  809e54:	df000115 	stw	fp,4(sp)
  809e58:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809e5c:	00802074 	movhi	r2,129
  809e60:	109e3004 	addi	r2,r2,30912
  809e64:	10800017 	ldw	r2,0(r2)
  809e68:	1005003a 	cmpeq	r2,r2,zero
  809e6c:	1000061e 	bne	r2,zero,809e88 <alt_get_errno+0x3c>
  809e70:	00802074 	movhi	r2,129
  809e74:	109e3004 	addi	r2,r2,30912
  809e78:	10800017 	ldw	r2,0(r2)
  809e7c:	103ee83a 	callr	r2
  809e80:	e0bfff15 	stw	r2,-4(fp)
  809e84:	00000306 	br	809e94 <alt_get_errno+0x48>
  809e88:	008020b4 	movhi	r2,130
  809e8c:	10a51f04 	addi	r2,r2,-27524
  809e90:	e0bfff15 	stw	r2,-4(fp)
  809e94:	e0bfff17 	ldw	r2,-4(fp)
}
  809e98:	e037883a 	mov	sp,fp
  809e9c:	dfc00117 	ldw	ra,4(sp)
  809ea0:	df000017 	ldw	fp,0(sp)
  809ea4:	dec00204 	addi	sp,sp,8
  809ea8:	f800283a 	ret

00809eac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  809eac:	deffeb04 	addi	sp,sp,-84
  809eb0:	dfc01415 	stw	ra,80(sp)
  809eb4:	df001315 	stw	fp,76(sp)
  809eb8:	df001304 	addi	fp,sp,76
  809ebc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  809ec0:	e0bffd17 	ldw	r2,-12(fp)
  809ec4:	1004803a 	cmplt	r2,r2,zero
  809ec8:	1000081e 	bne	r2,zero,809eec <isatty+0x40>
  809ecc:	e0bffd17 	ldw	r2,-12(fp)
  809ed0:	10800324 	muli	r2,r2,12
  809ed4:	1007883a 	mov	r3,r2
  809ed8:	00802074 	movhi	r2,129
  809edc:	10999f04 	addi	r2,r2,26236
  809ee0:	1887883a 	add	r3,r3,r2
  809ee4:	e0ffff15 	stw	r3,-4(fp)
  809ee8:	00000106 	br	809ef0 <isatty+0x44>
  809eec:	e03fff15 	stw	zero,-4(fp)
  809ef0:	e0bfff17 	ldw	r2,-4(fp)
  809ef4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  809ef8:	e0bfed17 	ldw	r2,-76(fp)
  809efc:	1005003a 	cmpeq	r2,r2,zero
  809f00:	10000f1e 	bne	r2,zero,809f40 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  809f04:	e0bfed17 	ldw	r2,-76(fp)
  809f08:	10800017 	ldw	r2,0(r2)
  809f0c:	10800817 	ldw	r2,32(r2)
  809f10:	1004c03a 	cmpne	r2,r2,zero
  809f14:	1000031e 	bne	r2,zero,809f24 <isatty+0x78>
    {
      return 1;
  809f18:	00800044 	movi	r2,1
  809f1c:	e0bffe15 	stw	r2,-8(fp)
  809f20:	00000c06 	br	809f54 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  809f24:	e17fee04 	addi	r5,fp,-72
  809f28:	e13ffd17 	ldw	r4,-12(fp)
  809f2c:	0809d780 	call	809d78 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  809f30:	e0bfef17 	ldw	r2,-68(fp)
  809f34:	10880020 	cmpeqi	r2,r2,8192
  809f38:	e0bffe15 	stw	r2,-8(fp)
  809f3c:	00000506 	br	809f54 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  809f40:	0809f6c0 	call	809f6c <alt_get_errno>
  809f44:	1007883a 	mov	r3,r2
  809f48:	00801444 	movi	r2,81
  809f4c:	18800015 	stw	r2,0(r3)
    return 0;
  809f50:	e03ffe15 	stw	zero,-8(fp)
  809f54:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  809f58:	e037883a 	mov	sp,fp
  809f5c:	dfc00117 	ldw	ra,4(sp)
  809f60:	df000017 	ldw	fp,0(sp)
  809f64:	dec00204 	addi	sp,sp,8
  809f68:	f800283a 	ret

00809f6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  809f6c:	defffd04 	addi	sp,sp,-12
  809f70:	dfc00215 	stw	ra,8(sp)
  809f74:	df000115 	stw	fp,4(sp)
  809f78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  809f7c:	00802074 	movhi	r2,129
  809f80:	109e3004 	addi	r2,r2,30912
  809f84:	10800017 	ldw	r2,0(r2)
  809f88:	1005003a 	cmpeq	r2,r2,zero
  809f8c:	1000061e 	bne	r2,zero,809fa8 <alt_get_errno+0x3c>
  809f90:	00802074 	movhi	r2,129
  809f94:	109e3004 	addi	r2,r2,30912
  809f98:	10800017 	ldw	r2,0(r2)
  809f9c:	103ee83a 	callr	r2
  809fa0:	e0bfff15 	stw	r2,-4(fp)
  809fa4:	00000306 	br	809fb4 <alt_get_errno+0x48>
  809fa8:	008020b4 	movhi	r2,130
  809fac:	10a51f04 	addi	r2,r2,-27524
  809fb0:	e0bfff15 	stw	r2,-4(fp)
  809fb4:	e0bfff17 	ldw	r2,-4(fp)
}
  809fb8:	e037883a 	mov	sp,fp
  809fbc:	dfc00117 	ldw	ra,4(sp)
  809fc0:	df000017 	ldw	fp,0(sp)
  809fc4:	dec00204 	addi	sp,sp,8
  809fc8:	f800283a 	ret

00809fcc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  809fcc:	defffe04 	addi	sp,sp,-8
  809fd0:	dfc00115 	stw	ra,4(sp)
  809fd4:	df000015 	stw	fp,0(sp)
  809fd8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
  809fdc:	01002074 	movhi	r4,129
  809fe0:	211e5404 	addi	r4,r4,31056
  809fe4:	01402074 	movhi	r5,129
  809fe8:	29579004 	addi	r5,r5,24128
  809fec:	01802074 	movhi	r6,129
  809ff0:	319e5404 	addi	r6,r6,31056
  809ff4:	080a04c0 	call	80a04c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
  809ff8:	01002034 	movhi	r4,128
  809ffc:	21000004 	addi	r4,r4,0
  80a000:	01404434 	movhi	r5,272
  80a004:	29500804 	addi	r5,r5,16416
  80a008:	01804434 	movhi	r6,272
  80a00c:	31906f04 	addi	r6,r6,16828
  80a010:	080a04c0 	call	80a04c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
  80a014:	01002074 	movhi	r4,129
  80a018:	21165d04 	addi	r4,r4,22900
  80a01c:	01402074 	movhi	r5,129
  80a020:	29565d04 	addi	r5,r5,22900
  80a024:	01802074 	movhi	r6,129
  80a028:	31979004 	addi	r6,r6,24128
  80a02c:	080a04c0 	call	80a04c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  80a030:	08142580 	call	814258 <alt_dcache_flush_all>
  alt_icache_flush_all();
  80a034:	081450c0 	call	81450c <alt_icache_flush_all>
}
  80a038:	e037883a 	mov	sp,fp
  80a03c:	dfc00117 	ldw	ra,4(sp)
  80a040:	df000017 	ldw	fp,0(sp)
  80a044:	dec00204 	addi	sp,sp,8
  80a048:	f800283a 	ret

0080a04c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  80a04c:	defffc04 	addi	sp,sp,-16
  80a050:	df000315 	stw	fp,12(sp)
  80a054:	df000304 	addi	fp,sp,12
  80a058:	e13ffd15 	stw	r4,-12(fp)
  80a05c:	e17ffe15 	stw	r5,-8(fp)
  80a060:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
  80a064:	e0fffe17 	ldw	r3,-8(fp)
  80a068:	e0bffd17 	ldw	r2,-12(fp)
  80a06c:	18800e26 	beq	r3,r2,80a0a8 <alt_load_section+0x5c>
  {
    while( to != end )
  80a070:	00000a06 	br	80a09c <alt_load_section+0x50>
    {
      *to++ = *from++;
  80a074:	e0bffd17 	ldw	r2,-12(fp)
  80a078:	10c00017 	ldw	r3,0(r2)
  80a07c:	e0bffe17 	ldw	r2,-8(fp)
  80a080:	10c00015 	stw	r3,0(r2)
  80a084:	e0bffe17 	ldw	r2,-8(fp)
  80a088:	10800104 	addi	r2,r2,4
  80a08c:	e0bffe15 	stw	r2,-8(fp)
  80a090:	e0bffd17 	ldw	r2,-12(fp)
  80a094:	10800104 	addi	r2,r2,4
  80a098:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  80a09c:	e0fffe17 	ldw	r3,-8(fp)
  80a0a0:	e0bfff17 	ldw	r2,-4(fp)
  80a0a4:	18bff31e 	bne	r3,r2,80a074 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
  80a0a8:	e037883a 	mov	sp,fp
  80a0ac:	df000017 	ldw	fp,0(sp)
  80a0b0:	dec00104 	addi	sp,sp,4
  80a0b4:	f800283a 	ret

0080a0b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80a0b8:	defff804 	addi	sp,sp,-32
  80a0bc:	dfc00715 	stw	ra,28(sp)
  80a0c0:	df000615 	stw	fp,24(sp)
  80a0c4:	df000604 	addi	fp,sp,24
  80a0c8:	e13ffc15 	stw	r4,-16(fp)
  80a0cc:	e17ffd15 	stw	r5,-12(fp)
  80a0d0:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80a0d4:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a0d8:	e0bffc17 	ldw	r2,-16(fp)
  80a0dc:	1004803a 	cmplt	r2,r2,zero
  80a0e0:	1000081e 	bne	r2,zero,80a104 <lseek+0x4c>
  80a0e4:	e0bffc17 	ldw	r2,-16(fp)
  80a0e8:	10800324 	muli	r2,r2,12
  80a0ec:	1007883a 	mov	r3,r2
  80a0f0:	00802074 	movhi	r2,129
  80a0f4:	10999f04 	addi	r2,r2,26236
  80a0f8:	1887883a 	add	r3,r3,r2
  80a0fc:	e0ffff15 	stw	r3,-4(fp)
  80a100:	00000106 	br	80a108 <lseek+0x50>
  80a104:	e03fff15 	stw	zero,-4(fp)
  80a108:	e0bfff17 	ldw	r2,-4(fp)
  80a10c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80a110:	e0bffb17 	ldw	r2,-20(fp)
  80a114:	1005003a 	cmpeq	r2,r2,zero
  80a118:	1000111e 	bne	r2,zero,80a160 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80a11c:	e0bffb17 	ldw	r2,-20(fp)
  80a120:	10800017 	ldw	r2,0(r2)
  80a124:	10800717 	ldw	r2,28(r2)
  80a128:	1005003a 	cmpeq	r2,r2,zero
  80a12c:	1000091e 	bne	r2,zero,80a154 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80a130:	e0bffb17 	ldw	r2,-20(fp)
  80a134:	10800017 	ldw	r2,0(r2)
  80a138:	10800717 	ldw	r2,28(r2)
  80a13c:	e13ffb17 	ldw	r4,-20(fp)
  80a140:	e17ffd17 	ldw	r5,-12(fp)
  80a144:	e1bffe17 	ldw	r6,-8(fp)
  80a148:	103ee83a 	callr	r2
  80a14c:	e0bffa15 	stw	r2,-24(fp)
  80a150:	00000506 	br	80a168 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80a154:	00bfde84 	movi	r2,-134
  80a158:	e0bffa15 	stw	r2,-24(fp)
  80a15c:	00000206 	br	80a168 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
  80a160:	00bfebc4 	movi	r2,-81
  80a164:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80a168:	e0bffa17 	ldw	r2,-24(fp)
  80a16c:	1004403a 	cmpge	r2,r2,zero
  80a170:	1000071e 	bne	r2,zero,80a190 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
  80a174:	080a1a80 	call	80a1a8 <alt_get_errno>
  80a178:	1007883a 	mov	r3,r2
  80a17c:	e0bffa17 	ldw	r2,-24(fp)
  80a180:	0085c83a 	sub	r2,zero,r2
  80a184:	18800015 	stw	r2,0(r3)
    rc = -1;
  80a188:	00bfffc4 	movi	r2,-1
  80a18c:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80a190:	e0bffa17 	ldw	r2,-24(fp)
}
  80a194:	e037883a 	mov	sp,fp
  80a198:	dfc00117 	ldw	ra,4(sp)
  80a19c:	df000017 	ldw	fp,0(sp)
  80a1a0:	dec00204 	addi	sp,sp,8
  80a1a4:	f800283a 	ret

0080a1a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a1a8:	defffd04 	addi	sp,sp,-12
  80a1ac:	dfc00215 	stw	ra,8(sp)
  80a1b0:	df000115 	stw	fp,4(sp)
  80a1b4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a1b8:	00802074 	movhi	r2,129
  80a1bc:	109e3004 	addi	r2,r2,30912
  80a1c0:	10800017 	ldw	r2,0(r2)
  80a1c4:	1005003a 	cmpeq	r2,r2,zero
  80a1c8:	1000061e 	bne	r2,zero,80a1e4 <alt_get_errno+0x3c>
  80a1cc:	00802074 	movhi	r2,129
  80a1d0:	109e3004 	addi	r2,r2,30912
  80a1d4:	10800017 	ldw	r2,0(r2)
  80a1d8:	103ee83a 	callr	r2
  80a1dc:	e0bfff15 	stw	r2,-4(fp)
  80a1e0:	00000306 	br	80a1f0 <alt_get_errno+0x48>
  80a1e4:	008020b4 	movhi	r2,130
  80a1e8:	10a51f04 	addi	r2,r2,-27524
  80a1ec:	e0bfff15 	stw	r2,-4(fp)
  80a1f0:	e0bfff17 	ldw	r2,-4(fp)
}
  80a1f4:	e037883a 	mov	sp,fp
  80a1f8:	dfc00117 	ldw	ra,4(sp)
  80a1fc:	df000017 	ldw	fp,0(sp)
  80a200:	dec00204 	addi	sp,sp,8
  80a204:	f800283a 	ret

0080a208 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80a208:	defffb04 	addi	sp,sp,-20
  80a20c:	dfc00415 	stw	ra,16(sp)
  80a210:	df000315 	stw	fp,12(sp)
  80a214:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80a218:	0009883a 	mov	r4,zero
  80a21c:	0812c980 	call	812c98 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80a220:	080b2f40 	call	80b2f4 <OSInit>
  80a224:	01000044 	movi	r4,1
  80a228:	08101b80 	call	8101b8 <OSSemCreate>
  80a22c:	1007883a 	mov	r3,r2
  80a230:	008020b4 	movhi	r2,130
  80a234:	10a52504 	addi	r2,r2,-27500
  80a238:	10c00015 	stw	r3,0(r2)
  80a23c:	01000044 	movi	r4,1
  80a240:	08101b80 	call	8101b8 <OSSemCreate>
  80a244:	1007883a 	mov	r3,r2
  80a248:	008020b4 	movhi	r2,130
  80a24c:	10a52704 	addi	r2,r2,-27492
  80a250:	10c00015 	stw	r3,0(r2)
  80a254:	008020b4 	movhi	r2,130
  80a258:	10a52004 	addi	r2,r2,-27520
  80a25c:	e0bffd15 	stw	r2,-12(fp)
  80a260:	00800044 	movi	r2,1
  80a264:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80a268:	e13ffe0b 	ldhu	r4,-8(fp)
  80a26c:	08101b80 	call	8101b8 <OSSemCreate>
  80a270:	1007883a 	mov	r3,r2
  80a274:	e0bffd17 	ldw	r2,-12(fp)
  80a278:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80a27c:	0812ccc0 	call	812ccc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80a280:	01002074 	movhi	r4,129
  80a284:	21173704 	addi	r4,r4,23772
  80a288:	01402074 	movhi	r5,129
  80a28c:	29573704 	addi	r5,r5,23772
  80a290:	01802074 	movhi	r6,129
  80a294:	31973704 	addi	r6,r6,23772
  80a298:	08148cc0 	call	8148cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80a29c:	08143b00 	call	8143b0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80a2a0:	01002074 	movhi	r4,129
  80a2a4:	21110504 	addi	r4,r4,17428
  80a2a8:	081555c0 	call	81555c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80a2ac:	d126fc17 	ldw	r4,-25616(gp)
  80a2b0:	d166fd17 	ldw	r5,-25612(gp)
  80a2b4:	d1a6fe17 	ldw	r6,-25608(gp)
  80a2b8:	08003c40 	call	8003c4 <main>
  80a2bc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80a2c0:	01000044 	movi	r4,1
  80a2c4:	0809bf00 	call	809bf0 <close>
  exit (result);
  80a2c8:	e13fff17 	ldw	r4,-4(fp)
  80a2cc:	08155700 	call	815570 <exit>

0080a2d0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80a2d0:	defff704 	addi	sp,sp,-36
  80a2d4:	dfc00815 	stw	ra,32(sp)
  80a2d8:	df000715 	stw	fp,28(sp)
  80a2dc:	df000704 	addi	fp,sp,28
  80a2e0:	e13ffb15 	stw	r4,-20(fp)
  80a2e4:	e17ffc15 	stw	r5,-16(fp)
  80a2e8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a2ec:	e0bffb17 	ldw	r2,-20(fp)
  80a2f0:	1004803a 	cmplt	r2,r2,zero
  80a2f4:	1000081e 	bne	r2,zero,80a318 <read+0x48>
  80a2f8:	e0bffb17 	ldw	r2,-20(fp)
  80a2fc:	10800324 	muli	r2,r2,12
  80a300:	1007883a 	mov	r3,r2
  80a304:	00802074 	movhi	r2,129
  80a308:	10999f04 	addi	r2,r2,26236
  80a30c:	1887883a 	add	r3,r3,r2
  80a310:	e0ffff15 	stw	r3,-4(fp)
  80a314:	00000106 	br	80a31c <read+0x4c>
  80a318:	e03fff15 	stw	zero,-4(fp)
  80a31c:	e0bfff17 	ldw	r2,-4(fp)
  80a320:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a324:	e0bffa17 	ldw	r2,-24(fp)
  80a328:	1005003a 	cmpeq	r2,r2,zero
  80a32c:	1000241e 	bne	r2,zero,80a3c0 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80a330:	e0bffa17 	ldw	r2,-24(fp)
  80a334:	10800217 	ldw	r2,8(r2)
  80a338:	108000cc 	andi	r2,r2,3
  80a33c:	10800060 	cmpeqi	r2,r2,1
  80a340:	10001a1e 	bne	r2,zero,80a3ac <read+0xdc>
  80a344:	e0bffa17 	ldw	r2,-24(fp)
  80a348:	10800017 	ldw	r2,0(r2)
  80a34c:	10800517 	ldw	r2,20(r2)
  80a350:	1005003a 	cmpeq	r2,r2,zero
  80a354:	1000151e 	bne	r2,zero,80a3ac <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80a358:	e0bffa17 	ldw	r2,-24(fp)
  80a35c:	10800017 	ldw	r2,0(r2)
  80a360:	10800517 	ldw	r2,20(r2)
  80a364:	e17ffc17 	ldw	r5,-16(fp)
  80a368:	e1bffd17 	ldw	r6,-12(fp)
  80a36c:	e13ffa17 	ldw	r4,-24(fp)
  80a370:	103ee83a 	callr	r2
  80a374:	e0bff915 	stw	r2,-28(fp)
  80a378:	e0bff917 	ldw	r2,-28(fp)
  80a37c:	1004403a 	cmpge	r2,r2,zero
  80a380:	1000071e 	bne	r2,zero,80a3a0 <read+0xd0>
        {
          ALT_ERRNO = -rval;
  80a384:	080a3f00 	call	80a3f0 <alt_get_errno>
  80a388:	e0fff917 	ldw	r3,-28(fp)
  80a38c:	00c7c83a 	sub	r3,zero,r3
  80a390:	10c00015 	stw	r3,0(r2)
          return -1;
  80a394:	00bfffc4 	movi	r2,-1
  80a398:	e0bffe15 	stw	r2,-8(fp)
  80a39c:	00000e06 	br	80a3d8 <read+0x108>
        }
        return rval;
  80a3a0:	e0bff917 	ldw	r2,-28(fp)
  80a3a4:	e0bffe15 	stw	r2,-8(fp)
  80a3a8:	00000b06 	br	80a3d8 <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80a3ac:	080a3f00 	call	80a3f0 <alt_get_errno>
  80a3b0:	1007883a 	mov	r3,r2
  80a3b4:	00800344 	movi	r2,13
  80a3b8:	18800015 	stw	r2,0(r3)
  80a3bc:	00000406 	br	80a3d0 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80a3c0:	080a3f00 	call	80a3f0 <alt_get_errno>
  80a3c4:	1007883a 	mov	r3,r2
  80a3c8:	00801444 	movi	r2,81
  80a3cc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a3d0:	00bfffc4 	movi	r2,-1
  80a3d4:	e0bffe15 	stw	r2,-8(fp)
  80a3d8:	e0bffe17 	ldw	r2,-8(fp)
}
  80a3dc:	e037883a 	mov	sp,fp
  80a3e0:	dfc00117 	ldw	ra,4(sp)
  80a3e4:	df000017 	ldw	fp,0(sp)
  80a3e8:	dec00204 	addi	sp,sp,8
  80a3ec:	f800283a 	ret

0080a3f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a3f0:	defffd04 	addi	sp,sp,-12
  80a3f4:	dfc00215 	stw	ra,8(sp)
  80a3f8:	df000115 	stw	fp,4(sp)
  80a3fc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a400:	00802074 	movhi	r2,129
  80a404:	109e3004 	addi	r2,r2,30912
  80a408:	10800017 	ldw	r2,0(r2)
  80a40c:	1005003a 	cmpeq	r2,r2,zero
  80a410:	1000061e 	bne	r2,zero,80a42c <alt_get_errno+0x3c>
  80a414:	00802074 	movhi	r2,129
  80a418:	109e3004 	addi	r2,r2,30912
  80a41c:	10800017 	ldw	r2,0(r2)
  80a420:	103ee83a 	callr	r2
  80a424:	e0bfff15 	stw	r2,-4(fp)
  80a428:	00000306 	br	80a438 <alt_get_errno+0x48>
  80a42c:	008020b4 	movhi	r2,130
  80a430:	10a51f04 	addi	r2,r2,-27524
  80a434:	e0bfff15 	stw	r2,-4(fp)
  80a438:	e0bfff17 	ldw	r2,-4(fp)
}
  80a43c:	e037883a 	mov	sp,fp
  80a440:	dfc00117 	ldw	ra,4(sp)
  80a444:	df000017 	ldw	fp,0(sp)
  80a448:	dec00204 	addi	sp,sp,8
  80a44c:	f800283a 	ret

0080a450 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80a450:	defffe04 	addi	sp,sp,-8
  80a454:	df000115 	stw	fp,4(sp)
  80a458:	df000104 	addi	fp,sp,4
  80a45c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80a460:	e0bfff17 	ldw	r2,-4(fp)
  80a464:	108000d0 	cmplti	r2,r2,3
  80a468:	10000d1e 	bne	r2,zero,80a4a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80a46c:	e0bfff17 	ldw	r2,-4(fp)
  80a470:	00c02074 	movhi	r3,129
  80a474:	18d99f04 	addi	r3,r3,26236
  80a478:	10800324 	muli	r2,r2,12
  80a47c:	10c5883a 	add	r2,r2,r3
  80a480:	10800204 	addi	r2,r2,8
  80a484:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80a488:	e0bfff17 	ldw	r2,-4(fp)
  80a48c:	00c02074 	movhi	r3,129
  80a490:	18d99f04 	addi	r3,r3,26236
  80a494:	10800324 	muli	r2,r2,12
  80a498:	10c5883a 	add	r2,r2,r3
  80a49c:	10000015 	stw	zero,0(r2)
  }
}
  80a4a0:	e037883a 	mov	sp,fp
  80a4a4:	df000017 	ldw	fp,0(sp)
  80a4a8:	dec00104 	addi	sp,sp,4
  80a4ac:	f800283a 	ret

0080a4b0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80a4b0:	defff804 	addi	sp,sp,-32
  80a4b4:	df000715 	stw	fp,28(sp)
  80a4b8:	df000704 	addi	fp,sp,28
  80a4bc:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a4c0:	0005303a 	rdctl	r2,status
  80a4c4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a4c8:	e0fffb17 	ldw	r3,-20(fp)
  80a4cc:	00bfff84 	movi	r2,-2
  80a4d0:	1884703a 	and	r2,r3,r2
  80a4d4:	1001703a 	wrctl	status,r2
  
  return context;
  80a4d8:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80a4dc:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80a4e0:	d0a00c17 	ldw	r2,-32720(gp)
  80a4e4:	10c000c4 	addi	r3,r2,3
  80a4e8:	00bfff04 	movi	r2,-4
  80a4ec:	1884703a 	and	r2,r3,r2
  80a4f0:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80a4f4:	d0e00c17 	ldw	r3,-32720(gp)
  80a4f8:	e0bffe17 	ldw	r2,-8(fp)
  80a4fc:	1887883a 	add	r3,r3,r2
  80a500:	00804034 	movhi	r2,256
  80a504:	10800004 	addi	r2,r2,0
  80a508:	10c0072e 	bgeu	r2,r3,80a528 <sbrk+0x78>
  80a50c:	e0bffd17 	ldw	r2,-12(fp)
  80a510:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a514:	e0bffa17 	ldw	r2,-24(fp)
  80a518:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80a51c:	00bfffc4 	movi	r2,-1
  80a520:	e0bfff15 	stw	r2,-4(fp)
  80a524:	00000c06 	br	80a558 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80a528:	d0a00c17 	ldw	r2,-32720(gp)
  80a52c:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80a530:	d0e00c17 	ldw	r3,-32720(gp)
  80a534:	e0bffe17 	ldw	r2,-8(fp)
  80a538:	1885883a 	add	r2,r3,r2
  80a53c:	d0a00c15 	stw	r2,-32720(gp)
  80a540:	e0bffd17 	ldw	r2,-12(fp)
  80a544:	e0bff915 	stw	r2,-28(fp)
  80a548:	e0bff917 	ldw	r2,-28(fp)
  80a54c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80a550:	e0bffc17 	ldw	r2,-16(fp)
  80a554:	e0bfff15 	stw	r2,-4(fp)
  80a558:	e0bfff17 	ldw	r2,-4(fp)
} 
  80a55c:	e037883a 	mov	sp,fp
  80a560:	df000017 	ldw	fp,0(sp)
  80a564:	dec00104 	addi	sp,sp,4
  80a568:	f800283a 	ret

0080a56c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80a56c:	defff704 	addi	sp,sp,-36
  80a570:	dfc00815 	stw	ra,32(sp)
  80a574:	df000715 	stw	fp,28(sp)
  80a578:	df000704 	addi	fp,sp,28
  80a57c:	e13ffb15 	stw	r4,-20(fp)
  80a580:	e17ffc15 	stw	r5,-16(fp)
  80a584:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80a588:	e0bffb17 	ldw	r2,-20(fp)
  80a58c:	1004803a 	cmplt	r2,r2,zero
  80a590:	1000081e 	bne	r2,zero,80a5b4 <write+0x48>
  80a594:	e0bffb17 	ldw	r2,-20(fp)
  80a598:	10800324 	muli	r2,r2,12
  80a59c:	1007883a 	mov	r3,r2
  80a5a0:	00802074 	movhi	r2,129
  80a5a4:	10999f04 	addi	r2,r2,26236
  80a5a8:	1887883a 	add	r3,r3,r2
  80a5ac:	e0ffff15 	stw	r3,-4(fp)
  80a5b0:	00000106 	br	80a5b8 <write+0x4c>
  80a5b4:	e03fff15 	stw	zero,-4(fp)
  80a5b8:	e0bfff17 	ldw	r2,-4(fp)
  80a5bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80a5c0:	e0bffa17 	ldw	r2,-24(fp)
  80a5c4:	1005003a 	cmpeq	r2,r2,zero
  80a5c8:	1000241e 	bne	r2,zero,80a65c <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80a5cc:	e0bffa17 	ldw	r2,-24(fp)
  80a5d0:	10800217 	ldw	r2,8(r2)
  80a5d4:	108000cc 	andi	r2,r2,3
  80a5d8:	1005003a 	cmpeq	r2,r2,zero
  80a5dc:	10001a1e 	bne	r2,zero,80a648 <write+0xdc>
  80a5e0:	e0bffa17 	ldw	r2,-24(fp)
  80a5e4:	10800017 	ldw	r2,0(r2)
  80a5e8:	10800617 	ldw	r2,24(r2)
  80a5ec:	1005003a 	cmpeq	r2,r2,zero
  80a5f0:	1000151e 	bne	r2,zero,80a648 <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80a5f4:	e0bffa17 	ldw	r2,-24(fp)
  80a5f8:	10800017 	ldw	r2,0(r2)
  80a5fc:	10800617 	ldw	r2,24(r2)
  80a600:	e17ffc17 	ldw	r5,-16(fp)
  80a604:	e1bffd17 	ldw	r6,-12(fp)
  80a608:	e13ffa17 	ldw	r4,-24(fp)
  80a60c:	103ee83a 	callr	r2
  80a610:	e0bff915 	stw	r2,-28(fp)
  80a614:	e0bff917 	ldw	r2,-28(fp)
  80a618:	1004403a 	cmpge	r2,r2,zero
  80a61c:	1000071e 	bne	r2,zero,80a63c <write+0xd0>
      {
        ALT_ERRNO = -rval;
  80a620:	080a68c0 	call	80a68c <alt_get_errno>
  80a624:	e0fff917 	ldw	r3,-28(fp)
  80a628:	00c7c83a 	sub	r3,zero,r3
  80a62c:	10c00015 	stw	r3,0(r2)
        return -1;
  80a630:	00bfffc4 	movi	r2,-1
  80a634:	e0bffe15 	stw	r2,-8(fp)
  80a638:	00000e06 	br	80a674 <write+0x108>
      }
      return rval;
  80a63c:	e0bff917 	ldw	r2,-28(fp)
  80a640:	e0bffe15 	stw	r2,-8(fp)
  80a644:	00000b06 	br	80a674 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80a648:	080a68c0 	call	80a68c <alt_get_errno>
  80a64c:	1007883a 	mov	r3,r2
  80a650:	00800344 	movi	r2,13
  80a654:	18800015 	stw	r2,0(r3)
  80a658:	00000406 	br	80a66c <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80a65c:	080a68c0 	call	80a68c <alt_get_errno>
  80a660:	1007883a 	mov	r3,r2
  80a664:	00801444 	movi	r2,81
  80a668:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80a66c:	00bfffc4 	movi	r2,-1
  80a670:	e0bffe15 	stw	r2,-8(fp)
  80a674:	e0bffe17 	ldw	r2,-8(fp)
}
  80a678:	e037883a 	mov	sp,fp
  80a67c:	dfc00117 	ldw	ra,4(sp)
  80a680:	df000017 	ldw	fp,0(sp)
  80a684:	dec00204 	addi	sp,sp,8
  80a688:	f800283a 	ret

0080a68c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80a68c:	defffd04 	addi	sp,sp,-12
  80a690:	dfc00215 	stw	ra,8(sp)
  80a694:	df000115 	stw	fp,4(sp)
  80a698:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80a69c:	00802074 	movhi	r2,129
  80a6a0:	109e3004 	addi	r2,r2,30912
  80a6a4:	10800017 	ldw	r2,0(r2)
  80a6a8:	1005003a 	cmpeq	r2,r2,zero
  80a6ac:	1000061e 	bne	r2,zero,80a6c8 <alt_get_errno+0x3c>
  80a6b0:	00802074 	movhi	r2,129
  80a6b4:	109e3004 	addi	r2,r2,30912
  80a6b8:	10800017 	ldw	r2,0(r2)
  80a6bc:	103ee83a 	callr	r2
  80a6c0:	e0bfff15 	stw	r2,-4(fp)
  80a6c4:	00000306 	br	80a6d4 <alt_get_errno+0x48>
  80a6c8:	008020b4 	movhi	r2,130
  80a6cc:	10a51f04 	addi	r2,r2,-27524
  80a6d0:	e0bfff15 	stw	r2,-4(fp)
  80a6d4:	e0bfff17 	ldw	r2,-4(fp)
}
  80a6d8:	e037883a 	mov	sp,fp
  80a6dc:	dfc00117 	ldw	ra,4(sp)
  80a6e0:	df000017 	ldw	fp,0(sp)
  80a6e4:	dec00204 	addi	sp,sp,8
  80a6e8:	f800283a 	ret

0080a6ec <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80a6ec:	deffdf04 	addi	sp,sp,-132
  80a6f0:	dfc02015 	stw	ra,128(sp)
  80a6f4:	df001f15 	stw	fp,124(sp)
  80a6f8:	df001f04 	addi	fp,sp,124
  80a6fc:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80a700:	e17fe204 	addi	r5,fp,-120
  80a704:	01003fc4 	movi	r4,255
  80a708:	08125400 	call	812540 <OSTaskQuery>
  80a70c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80a710:	e0bffe83 	ldbu	r2,-6(fp)
  80a714:	10803fcc 	andi	r2,r2,255
  80a718:	1004c03a 	cmpne	r2,r2,zero
  80a71c:	1000191e 	bne	r2,zero,80a784 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80a720:	e0bfee83 	ldbu	r2,-70(fp)
  80a724:	10803fcc 	andi	r2,r2,255
  80a728:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80a72c:	d1270017 	ldw	r4,-25600(gp)
  80a730:	e17ffd04 	addi	r5,fp,-12
  80a734:	0810a8c0 	call	810a8c <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80a738:	e0bffe43 	ldbu	r2,-7(fp)
  80a73c:	10803fcc 	andi	r2,r2,255
  80a740:	1005003a 	cmpeq	r2,r2,zero
  80a744:	1000071e 	bne	r2,zero,80a764 <__env_lock+0x78>
  80a748:	d0e00d17 	ldw	r3,-32716(gp)
  80a74c:	e0bfe117 	ldw	r2,-124(fp)
  80a750:	10c0041e 	bne	r2,r3,80a764 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80a754:	d0a6ff17 	ldw	r2,-25604(gp)
  80a758:	10800044 	addi	r2,r2,1
  80a75c:	d0a6ff15 	stw	r2,-25604(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80a760:	00000806 	br	80a784 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80a764:	d1270017 	ldw	r4,-25600(gp)
  80a768:	e1bffe84 	addi	r6,fp,-6
  80a76c:	000b883a 	mov	r5,zero
  80a770:	081056c0 	call	81056c <OSSemPend>
    locks  = 1;
  80a774:	00800044 	movi	r2,1
  80a778:	d0a6ff15 	stw	r2,-25604(gp)
    lockid = id;
  80a77c:	e0bfe117 	ldw	r2,-124(fp)
  80a780:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80a784:	e037883a 	mov	sp,fp
  80a788:	dfc00117 	ldw	ra,4(sp)
  80a78c:	df000017 	ldw	fp,0(sp)
  80a790:	dec00204 	addi	sp,sp,8
  80a794:	f800283a 	ret

0080a798 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80a798:	defffd04 	addi	sp,sp,-12
  80a79c:	dfc00215 	stw	ra,8(sp)
  80a7a0:	df000115 	stw	fp,4(sp)
  80a7a4:	df000104 	addi	fp,sp,4
  80a7a8:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80a7ac:	d0a6ff17 	ldw	r2,-25604(gp)
  80a7b0:	1005003a 	cmpeq	r2,r2,zero
  80a7b4:	10000a1e 	bne	r2,zero,80a7e0 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80a7b8:	d0a6ff17 	ldw	r2,-25604(gp)
  80a7bc:	10bfffc4 	addi	r2,r2,-1
  80a7c0:	d0a6ff15 	stw	r2,-25604(gp)
  80a7c4:	d0a6ff17 	ldw	r2,-25604(gp)
  80a7c8:	1004c03a 	cmpne	r2,r2,zero
  80a7cc:	1000041e 	bne	r2,zero,80a7e0 <__env_unlock+0x48>
  {
    lockid = -1;
  80a7d0:	00bfffc4 	movi	r2,-1
  80a7d4:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  80a7d8:	d1270017 	ldw	r4,-25600(gp)
  80a7dc:	08109640 	call	810964 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80a7e0:	e037883a 	mov	sp,fp
  80a7e4:	dfc00117 	ldw	ra,4(sp)
  80a7e8:	df000017 	ldw	fp,0(sp)
  80a7ec:	dec00204 	addi	sp,sp,8
  80a7f0:	f800283a 	ret

0080a7f4 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80a7f4:	deffdb04 	addi	sp,sp,-148
  80a7f8:	dfc02415 	stw	ra,144(sp)
  80a7fc:	df002315 	stw	fp,140(sp)
  80a800:	df002304 	addi	fp,sp,140
  80a804:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a808:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80a80c:	008020b4 	movhi	r2,130
  80a810:	10a52844 	addi	r2,r2,-27487
  80a814:	10800003 	ldbu	r2,0(r2)
  80a818:	10803fcc 	andi	r2,r2,255
  80a81c:	10800058 	cmpnei	r2,r2,1
  80a820:	1000311e 	bne	r2,zero,80a8e8 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80a824:	e17fe204 	addi	r5,fp,-120
  80a828:	01003fc4 	movi	r4,255
  80a82c:	08125400 	call	812540 <OSTaskQuery>
  80a830:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80a834:	e0bffe83 	ldbu	r2,-6(fp)
  80a838:	10803fcc 	andi	r2,r2,255
  80a83c:	1004c03a 	cmpne	r2,r2,zero
  80a840:	1000291e 	bne	r2,zero,80a8e8 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80a844:	e0bfee83 	ldbu	r2,-70(fp)
  80a848:	10803fcc 	andi	r2,r2,255
  80a84c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80a850:	d1270217 	ldw	r4,-25592(gp)
  80a854:	e17ffd04 	addi	r5,fp,-12
  80a858:	0810a8c0 	call	810a8c <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a85c:	0005303a 	rdctl	r2,status
  80a860:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a864:	e0ffdf17 	ldw	r3,-132(fp)
  80a868:	00bfff84 	movi	r2,-2
  80a86c:	1884703a 	and	r2,r3,r2
  80a870:	1001703a 	wrctl	status,r2
  
  return context;
  80a874:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80a878:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80a87c:	e0bffd0b 	ldhu	r2,-12(fp)
  80a880:	10bfffcc 	andi	r2,r2,65535
  80a884:	1004c03a 	cmpne	r2,r2,zero
  80a888:	10000b1e 	bne	r2,zero,80a8b8 <__malloc_lock+0xc4>
  80a88c:	d0e00e17 	ldw	r3,-32712(gp)
  80a890:	e0bfe117 	ldw	r2,-124(fp)
  80a894:	10c0081e 	bne	r2,r3,80a8b8 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80a898:	d0a70117 	ldw	r2,-25596(gp)
  80a89c:	10800044 	addi	r2,r2,1
  80a8a0:	d0a70115 	stw	r2,-25596(gp)
  80a8a4:	e0bfe017 	ldw	r2,-128(fp)
  80a8a8:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a8ac:	e0bfde17 	ldw	r2,-136(fp)
  80a8b0:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80a8b4:	00000c06 	br	80a8e8 <__malloc_lock+0xf4>
  80a8b8:	e0bfe017 	ldw	r2,-128(fp)
  80a8bc:	e0bfdd15 	stw	r2,-140(fp)
  80a8c0:	e0bfdd17 	ldw	r2,-140(fp)
  80a8c4:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80a8c8:	d1270217 	ldw	r4,-25592(gp)
  80a8cc:	e1bffe84 	addi	r6,fp,-6
  80a8d0:	000b883a 	mov	r5,zero
  80a8d4:	081056c0 	call	81056c <OSSemPend>
    locks  = 1;
  80a8d8:	00800044 	movi	r2,1
  80a8dc:	d0a70115 	stw	r2,-25596(gp)
    lockid = id;
  80a8e0:	e0bfe117 	ldw	r2,-124(fp)
  80a8e4:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80a8e8:	e037883a 	mov	sp,fp
  80a8ec:	dfc00117 	ldw	ra,4(sp)
  80a8f0:	df000017 	ldw	fp,0(sp)
  80a8f4:	dec00204 	addi	sp,sp,8
  80a8f8:	f800283a 	ret

0080a8fc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80a8fc:	defff804 	addi	sp,sp,-32
  80a900:	dfc00715 	stw	ra,28(sp)
  80a904:	df000615 	stw	fp,24(sp)
  80a908:	df000604 	addi	fp,sp,24
  80a90c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a910:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80a914:	008020b4 	movhi	r2,130
  80a918:	10a52844 	addi	r2,r2,-27487
  80a91c:	10800003 	ldbu	r2,0(r2)
  80a920:	10803fcc 	andi	r2,r2,255
  80a924:	10800058 	cmpnei	r2,r2,1
  80a928:	1000231e 	bne	r2,zero,80a9b8 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80a92c:	0005303a 	rdctl	r2,status
  80a930:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80a934:	e0fffd17 	ldw	r3,-12(fp)
  80a938:	00bfff84 	movi	r2,-2
  80a93c:	1884703a 	and	r2,r3,r2
  80a940:	1001703a 	wrctl	status,r2
  
  return context;
  80a944:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80a948:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80a94c:	d0a70117 	ldw	r2,-25596(gp)
  80a950:	1004c03a 	cmpne	r2,r2,zero
  80a954:	1000051e 	bne	r2,zero,80a96c <__malloc_unlock+0x70>
  80a958:	e0bffe17 	ldw	r2,-8(fp)
  80a95c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80a960:	e0bffc17 	ldw	r2,-16(fp)
  80a964:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80a968:	00001306 	br	80a9b8 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80a96c:	d0a70117 	ldw	r2,-25596(gp)
  80a970:	10bfffc4 	addi	r2,r2,-1
  80a974:	d0a70115 	stw	r2,-25596(gp)
  80a978:	d0a70117 	ldw	r2,-25596(gp)
  80a97c:	1004c03a 	cmpne	r2,r2,zero
  80a980:	1000091e 	bne	r2,zero,80a9a8 <__malloc_unlock+0xac>
  {
    lockid = -1;
  80a984:	00bfffc4 	movi	r2,-1
  80a988:	d0a00e15 	stw	r2,-32712(gp)
  80a98c:	e0bffe17 	ldw	r2,-8(fp)
  80a990:	e0bffb15 	stw	r2,-20(fp)
  80a994:	e0bffb17 	ldw	r2,-20(fp)
  80a998:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80a99c:	d1270217 	ldw	r4,-25592(gp)
  80a9a0:	08109640 	call	810964 <OSSemPost>
  80a9a4:	00000406 	br	80a9b8 <__malloc_unlock+0xbc>
  80a9a8:	e0bffe17 	ldw	r2,-8(fp)
  80a9ac:	e0bffa15 	stw	r2,-24(fp)
  80a9b0:	e0bffa17 	ldw	r2,-24(fp)
  80a9b4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80a9b8:	e037883a 	mov	sp,fp
  80a9bc:	dfc00117 	ldw	ra,4(sp)
  80a9c0:	df000017 	ldw	fp,0(sp)
  80a9c4:	dec00204 	addi	sp,sp,8
  80a9c8:	f800283a 	ret

0080a9cc <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80a9cc:	defff604 	addi	sp,sp,-40
  80a9d0:	dfc00915 	stw	ra,36(sp)
  80a9d4:	df000815 	stw	fp,32(sp)
  80a9d8:	df000804 	addi	fp,sp,32
  80a9dc:	e13ffc15 	stw	r4,-16(fp)
  80a9e0:	e17ffd15 	stw	r5,-12(fp)
  80a9e4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80a9e8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80a9ec:	e0bffe17 	ldw	r2,-8(fp)
  80a9f0:	1004c03a 	cmpne	r2,r2,zero
  80a9f4:	1000021e 	bne	r2,zero,80aa00 <OSEventNameGet+0x34>
        return (0);
  80a9f8:	e03fff15 	stw	zero,-4(fp)
  80a9fc:	00003906 	br	80aae4 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80aa00:	e0bffc17 	ldw	r2,-16(fp)
  80aa04:	1004c03a 	cmpne	r2,r2,zero
  80aa08:	1000051e 	bne	r2,zero,80aa20 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80aa0c:	e0fffe17 	ldw	r3,-8(fp)
  80aa10:	00800104 	movi	r2,4
  80aa14:	18800005 	stb	r2,0(r3)
        return (0);
  80aa18:	e03fff15 	stw	zero,-4(fp)
  80aa1c:	00003106 	br	80aae4 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80aa20:	e0bffd17 	ldw	r2,-12(fp)
  80aa24:	1004c03a 	cmpne	r2,r2,zero
  80aa28:	1000051e 	bne	r2,zero,80aa40 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80aa2c:	e0fffe17 	ldw	r3,-8(fp)
  80aa30:	00800304 	movi	r2,12
  80aa34:	18800005 	stb	r2,0(r3)
        return (0);
  80aa38:	e03fff15 	stw	zero,-4(fp)
  80aa3c:	00002906 	br	80aae4 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80aa40:	d0a71103 	ldbu	r2,-25532(gp)
  80aa44:	10803fcc 	andi	r2,r2,255
  80aa48:	1005003a 	cmpeq	r2,r2,zero
  80aa4c:	1000051e 	bne	r2,zero,80aa64 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80aa50:	e0fffe17 	ldw	r3,-8(fp)
  80aa54:	00800444 	movi	r2,17
  80aa58:	18800005 	stb	r2,0(r3)
        return (0);
  80aa5c:	e03fff15 	stw	zero,-4(fp)
  80aa60:	00002006 	br	80aae4 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80aa64:	e0bffc17 	ldw	r2,-16(fp)
  80aa68:	10800003 	ldbu	r2,0(r2)
  80aa6c:	10803fcc 	andi	r2,r2,255
  80aa70:	10bfffc4 	addi	r2,r2,-1
  80aa74:	10800128 	cmpgeui	r2,r2,4
  80aa78:	1000161e 	bne	r2,zero,80aad4 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80aa7c:	0005303a 	rdctl	r2,status
  80aa80:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aa84:	e0fff917 	ldw	r3,-28(fp)
  80aa88:	00bfff84 	movi	r2,-2
  80aa8c:	1884703a 	and	r2,r3,r2
  80aa90:	1001703a 	wrctl	status,r2
  
  return context;
  80aa94:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80aa98:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80aa9c:	e0bffc17 	ldw	r2,-16(fp)
  80aaa0:	11400384 	addi	r5,r2,14
  80aaa4:	e13ffd17 	ldw	r4,-12(fp)
  80aaa8:	080c5500 	call	80c550 <OS_StrCopy>
  80aaac:	e0bffb05 	stb	r2,-20(fp)
  80aab0:	e0bffa17 	ldw	r2,-24(fp)
  80aab4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80aab8:	e0bff817 	ldw	r2,-32(fp)
  80aabc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80aac0:	e0bffe17 	ldw	r2,-8(fp)
  80aac4:	10000005 	stb	zero,0(r2)
    return (len);
  80aac8:	e0bffb03 	ldbu	r2,-20(fp)
  80aacc:	e0bfff15 	stw	r2,-4(fp)
  80aad0:	00000406 	br	80aae4 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80aad4:	e0fffe17 	ldw	r3,-8(fp)
  80aad8:	00800044 	movi	r2,1
  80aadc:	18800005 	stb	r2,0(r3)
             return (0);
  80aae0:	e03fff15 	stw	zero,-4(fp)
  80aae4:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80aae8:	e037883a 	mov	sp,fp
  80aaec:	dfc00117 	ldw	ra,4(sp)
  80aaf0:	df000017 	ldw	fp,0(sp)
  80aaf4:	dec00204 	addi	sp,sp,8
  80aaf8:	f800283a 	ret

0080aafc <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80aafc:	defff604 	addi	sp,sp,-40
  80ab00:	dfc00915 	stw	ra,36(sp)
  80ab04:	df000815 	stw	fp,32(sp)
  80ab08:	df000804 	addi	fp,sp,32
  80ab0c:	e13ffd15 	stw	r4,-12(fp)
  80ab10:	e17ffe15 	stw	r5,-8(fp)
  80ab14:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ab18:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ab1c:	e0bfff17 	ldw	r2,-4(fp)
  80ab20:	1005003a 	cmpeq	r2,r2,zero
  80ab24:	1000411e 	bne	r2,zero,80ac2c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80ab28:	e0bffd17 	ldw	r2,-12(fp)
  80ab2c:	1004c03a 	cmpne	r2,r2,zero
  80ab30:	1000041e 	bne	r2,zero,80ab44 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80ab34:	e0ffff17 	ldw	r3,-4(fp)
  80ab38:	00800104 	movi	r2,4
  80ab3c:	18800005 	stb	r2,0(r3)
        return;
  80ab40:	00003a06 	br	80ac2c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ab44:	e0bffe17 	ldw	r2,-8(fp)
  80ab48:	1004c03a 	cmpne	r2,r2,zero
  80ab4c:	1000041e 	bne	r2,zero,80ab60 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ab50:	e0ffff17 	ldw	r3,-4(fp)
  80ab54:	00800304 	movi	r2,12
  80ab58:	18800005 	stb	r2,0(r3)
        return;
  80ab5c:	00003306 	br	80ac2c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ab60:	d0a71103 	ldbu	r2,-25532(gp)
  80ab64:	10803fcc 	andi	r2,r2,255
  80ab68:	1005003a 	cmpeq	r2,r2,zero
  80ab6c:	1000041e 	bne	r2,zero,80ab80 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80ab70:	e0ffff17 	ldw	r3,-4(fp)
  80ab74:	00800484 	movi	r2,18
  80ab78:	18800005 	stb	r2,0(r3)
        return;
  80ab7c:	00002b06 	br	80ac2c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80ab80:	e0bffd17 	ldw	r2,-12(fp)
  80ab84:	10800003 	ldbu	r2,0(r2)
  80ab88:	10803fcc 	andi	r2,r2,255
  80ab8c:	10bfffc4 	addi	r2,r2,-1
  80ab90:	10800128 	cmpgeui	r2,r2,4
  80ab94:	10000f1e 	bne	r2,zero,80abd4 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ab98:	0005303a 	rdctl	r2,status
  80ab9c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80aba0:	e0fffa17 	ldw	r3,-24(fp)
  80aba4:	00bfff84 	movi	r2,-2
  80aba8:	1884703a 	and	r2,r3,r2
  80abac:	1001703a 	wrctl	status,r2
  
  return context;
  80abb0:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80abb4:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80abb8:	e13ffe17 	ldw	r4,-8(fp)
  80abbc:	080c5d00 	call	80c5d0 <OS_StrLen>
  80abc0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80abc4:	e0bffc03 	ldbu	r2,-16(fp)
  80abc8:	10800828 	cmpgeui	r2,r2,32
  80abcc:	1000051e 	bne	r2,zero,80abe4 <OSEventNameSet+0xe8>
  80abd0:	00000c06 	br	80ac04 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80abd4:	e0ffff17 	ldw	r3,-4(fp)
  80abd8:	00800044 	movi	r2,1
  80abdc:	18800005 	stb	r2,0(r3)
             return;
  80abe0:	00001206 	br	80ac2c <OSEventNameSet+0x130>
  80abe4:	e0bffb17 	ldw	r2,-20(fp)
  80abe8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80abec:	e0bff917 	ldw	r2,-28(fp)
  80abf0:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80abf4:	e0ffff17 	ldw	r3,-4(fp)
  80abf8:	008002c4 	movi	r2,11
  80abfc:	18800005 	stb	r2,0(r3)
        return;
  80ac00:	00000a06 	br	80ac2c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80ac04:	e0bffd17 	ldw	r2,-12(fp)
  80ac08:	11000384 	addi	r4,r2,14
  80ac0c:	e17ffe17 	ldw	r5,-8(fp)
  80ac10:	080c5500 	call	80c550 <OS_StrCopy>
  80ac14:	e0bffb17 	ldw	r2,-20(fp)
  80ac18:	e0bff815 	stw	r2,-32(fp)
  80ac1c:	e0bff817 	ldw	r2,-32(fp)
  80ac20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80ac24:	e0bfff17 	ldw	r2,-4(fp)
  80ac28:	10000005 	stb	zero,0(r2)
}
  80ac2c:	e037883a 	mov	sp,fp
  80ac30:	dfc00117 	ldw	ra,4(sp)
  80ac34:	df000017 	ldw	fp,0(sp)
  80ac38:	dec00204 	addi	sp,sp,8
  80ac3c:	f800283a 	ret

0080ac40 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80ac40:	deffe704 	addi	sp,sp,-100
  80ac44:	dfc01815 	stw	ra,96(sp)
  80ac48:	df001715 	stw	fp,92(sp)
  80ac4c:	df001704 	addi	fp,sp,92
  80ac50:	e13ff615 	stw	r4,-40(fp)
  80ac54:	e17ff715 	stw	r5,-36(fp)
  80ac58:	e1bff815 	stw	r6,-32(fp)
  80ac5c:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80ac60:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80ac64:	e0800217 	ldw	r2,8(fp)
  80ac68:	1004c03a 	cmpne	r2,r2,zero
  80ac6c:	1000021e 	bne	r2,zero,80ac78 <OSEventPendMulti+0x38>
        return (0);
  80ac70:	e03fff15 	stw	zero,-4(fp)
  80ac74:	00019906 	br	80b2dc <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80ac78:	e0bff617 	ldw	r2,-40(fp)
  80ac7c:	1004c03a 	cmpne	r2,r2,zero
  80ac80:	1000051e 	bne	r2,zero,80ac98 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80ac84:	e0c00217 	ldw	r3,8(fp)
  80ac88:	00800104 	movi	r2,4
  80ac8c:	18800005 	stb	r2,0(r3)
        return (0);
  80ac90:	e03fff15 	stw	zero,-4(fp)
  80ac94:	00019106 	br	80b2dc <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80ac98:	e0bff717 	ldw	r2,-36(fp)
  80ac9c:	1004c03a 	cmpne	r2,r2,zero
  80aca0:	1000051e 	bne	r2,zero,80acb8 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80aca4:	e0c00217 	ldw	r3,8(fp)
  80aca8:	00800104 	movi	r2,4
  80acac:	18800005 	stb	r2,0(r3)
        return (0);
  80acb0:	e03fff15 	stw	zero,-4(fp)
  80acb4:	00018906 	br	80b2dc <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80acb8:	e0bff817 	ldw	r2,-32(fp)
  80acbc:	1004c03a 	cmpne	r2,r2,zero
  80acc0:	1000051e 	bne	r2,zero,80acd8 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80acc4:	e0c00217 	ldw	r3,8(fp)
  80acc8:	00800104 	movi	r2,4
  80accc:	18800005 	stb	r2,0(r3)
        return (0);
  80acd0:	e03fff15 	stw	zero,-4(fp)
  80acd4:	00018106 	br	80b2dc <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80acd8:	e0bff717 	ldw	r2,-36(fp)
  80acdc:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80ace0:	e0bff617 	ldw	r2,-40(fp)
  80ace4:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80ace8:	e0bff517 	ldw	r2,-44(fp)
  80acec:	10800017 	ldw	r2,0(r2)
  80acf0:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80acf4:	00001806 	br	80ad58 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80acf8:	e0bff417 	ldw	r2,-48(fp)
  80acfc:	10800003 	ldbu	r2,0(r2)
  80ad00:	10803fcc 	andi	r2,r2,255
  80ad04:	e0bffe15 	stw	r2,-8(fp)
  80ad08:	e0fffe17 	ldw	r3,-8(fp)
  80ad0c:	188000a0 	cmpeqi	r2,r3,2
  80ad10:	10000b1e 	bne	r2,zero,80ad40 <OSEventPendMulti+0x100>
  80ad14:	e0fffe17 	ldw	r3,-8(fp)
  80ad18:	188000e0 	cmpeqi	r2,r3,3
  80ad1c:	1000081e 	bne	r2,zero,80ad40 <OSEventPendMulti+0x100>
  80ad20:	e0fffe17 	ldw	r3,-8(fp)
  80ad24:	18800060 	cmpeqi	r2,r3,1
  80ad28:	1000051e 	bne	r2,zero,80ad40 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80ad2c:	e0c00217 	ldw	r3,8(fp)
  80ad30:	00800044 	movi	r2,1
  80ad34:	18800005 	stb	r2,0(r3)
                 return (0);
  80ad38:	e03fff15 	stw	zero,-4(fp)
  80ad3c:	00016706 	br	80b2dc <OSEventPendMulti+0x69c>
        }
        pevents++;
  80ad40:	e0bff517 	ldw	r2,-44(fp)
  80ad44:	10800104 	addi	r2,r2,4
  80ad48:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80ad4c:	e0bff517 	ldw	r2,-44(fp)
  80ad50:	10800017 	ldw	r2,0(r2)
  80ad54:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80ad58:	e0bff417 	ldw	r2,-48(fp)
  80ad5c:	1004c03a 	cmpne	r2,r2,zero
  80ad60:	103fe51e 	bne	r2,zero,80acf8 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80ad64:	d0a71103 	ldbu	r2,-25532(gp)
  80ad68:	10803fcc 	andi	r2,r2,255
  80ad6c:	1005003a 	cmpeq	r2,r2,zero
  80ad70:	1000051e 	bne	r2,zero,80ad88 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80ad74:	e0c00217 	ldw	r3,8(fp)
  80ad78:	00800084 	movi	r2,2
  80ad7c:	18800005 	stb	r2,0(r3)
        return (0);
  80ad80:	e03fff15 	stw	zero,-4(fp)
  80ad84:	00015506 	br	80b2dc <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80ad88:	d0a70303 	ldbu	r2,-25588(gp)
  80ad8c:	10803fcc 	andi	r2,r2,255
  80ad90:	1005003a 	cmpeq	r2,r2,zero
  80ad94:	1000051e 	bne	r2,zero,80adac <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80ad98:	e0c00217 	ldw	r3,8(fp)
  80ad9c:	00800344 	movi	r2,13
  80ada0:	18800005 	stb	r2,0(r3)
        return (0);
  80ada4:	e03fff15 	stw	zero,-4(fp)
  80ada8:	00014c06 	br	80b2dc <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80adac:	0005303a 	rdctl	r2,status
  80adb0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80adb4:	e0ffef17 	ldw	r3,-68(fp)
  80adb8:	00bfff84 	movi	r2,-2
  80adbc:	1884703a 	and	r2,r3,r2
  80adc0:	1001703a 	wrctl	status,r2
  
  return context;
  80adc4:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80adc8:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80adcc:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80add0:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80add4:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80add8:	e0bff617 	ldw	r2,-40(fp)
  80addc:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80ade0:	e0bff517 	ldw	r2,-44(fp)
  80ade4:	10800017 	ldw	r2,0(r2)
  80ade8:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80adec:	00008f06 	br	80b02c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80adf0:	e0bff417 	ldw	r2,-48(fp)
  80adf4:	10800003 	ldbu	r2,0(r2)
  80adf8:	10803fcc 	andi	r2,r2,255
  80adfc:	e0bffd15 	stw	r2,-12(fp)
  80ae00:	e0fffd17 	ldw	r3,-12(fp)
  80ae04:	188000a0 	cmpeqi	r2,r3,2
  80ae08:	1000441e 	bne	r2,zero,80af1c <OSEventPendMulti+0x2dc>
  80ae0c:	e0fffd17 	ldw	r3,-12(fp)
  80ae10:	188000e0 	cmpeqi	r2,r3,3
  80ae14:	1000041e 	bne	r2,zero,80ae28 <OSEventPendMulti+0x1e8>
  80ae18:	e0fffd17 	ldw	r3,-12(fp)
  80ae1c:	18800060 	cmpeqi	r2,r3,1
  80ae20:	1000211e 	bne	r2,zero,80aea8 <OSEventPendMulti+0x268>
  80ae24:	00006f06 	br	80afe4 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80ae28:	e0bff417 	ldw	r2,-48(fp)
  80ae2c:	1080020b 	ldhu	r2,8(r2)
  80ae30:	10bfffcc 	andi	r2,r2,65535
  80ae34:	1005003a 	cmpeq	r2,r2,zero
  80ae38:	1000171e 	bne	r2,zero,80ae98 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80ae3c:	e0bff417 	ldw	r2,-48(fp)
  80ae40:	1080020b 	ldhu	r2,8(r2)
  80ae44:	10bfffc4 	addi	r2,r2,-1
  80ae48:	1007883a 	mov	r3,r2
  80ae4c:	e0bff417 	ldw	r2,-48(fp)
  80ae50:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80ae54:	e0fff717 	ldw	r3,-36(fp)
  80ae58:	e0bff417 	ldw	r2,-48(fp)
  80ae5c:	18800015 	stw	r2,0(r3)
  80ae60:	e0bff717 	ldw	r2,-36(fp)
  80ae64:	10800104 	addi	r2,r2,4
  80ae68:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80ae6c:	00800044 	movi	r2,1
  80ae70:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80ae74:	e0bff817 	ldw	r2,-32(fp)
  80ae78:	10000015 	stw	zero,0(r2)
  80ae7c:	e0bff817 	ldw	r2,-32(fp)
  80ae80:	10800104 	addi	r2,r2,4
  80ae84:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80ae88:	e0bff18b 	ldhu	r2,-58(fp)
  80ae8c:	10800044 	addi	r2,r2,1
  80ae90:	e0bff18d 	sth	r2,-58(fp)
  80ae94:	00005f06 	br	80b014 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80ae98:	e0bff103 	ldbu	r2,-60(fp)
  80ae9c:	10800054 	ori	r2,r2,1
  80aea0:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80aea4:	00005b06 	br	80b014 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80aea8:	e0bff417 	ldw	r2,-48(fp)
  80aeac:	10800117 	ldw	r2,4(r2)
  80aeb0:	1005003a 	cmpeq	r2,r2,zero
  80aeb4:	1000151e 	bne	r2,zero,80af0c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80aeb8:	e0bff417 	ldw	r2,-48(fp)
  80aebc:	10c00117 	ldw	r3,4(r2)
  80aec0:	e0bff817 	ldw	r2,-32(fp)
  80aec4:	10c00015 	stw	r3,0(r2)
  80aec8:	e0bff817 	ldw	r2,-32(fp)
  80aecc:	10800104 	addi	r2,r2,4
  80aed0:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80aed4:	e0bff417 	ldw	r2,-48(fp)
  80aed8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80aedc:	e0fff717 	ldw	r3,-36(fp)
  80aee0:	e0bff417 	ldw	r2,-48(fp)
  80aee4:	18800015 	stw	r2,0(r3)
  80aee8:	e0bff717 	ldw	r2,-36(fp)
  80aeec:	10800104 	addi	r2,r2,4
  80aef0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80aef4:	00800044 	movi	r2,1
  80aef8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80aefc:	e0bff18b 	ldhu	r2,-58(fp)
  80af00:	10800044 	addi	r2,r2,1
  80af04:	e0bff18d 	sth	r2,-58(fp)
  80af08:	00004206 	br	80b014 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80af0c:	e0bff103 	ldbu	r2,-60(fp)
  80af10:	10800094 	ori	r2,r2,2
  80af14:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80af18:	00003e06 	br	80b014 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80af1c:	e0bff417 	ldw	r2,-48(fp)
  80af20:	10800117 	ldw	r2,4(r2)
  80af24:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80af28:	e0bff317 	ldw	r2,-52(fp)
  80af2c:	1080058b 	ldhu	r2,22(r2)
  80af30:	10bfffcc 	andi	r2,r2,65535
  80af34:	1005003a 	cmpeq	r2,r2,zero
  80af38:	1000261e 	bne	r2,zero,80afd4 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80af3c:	e0bff317 	ldw	r2,-52(fp)
  80af40:	11000417 	ldw	r4,16(r2)
  80af44:	20c00017 	ldw	r3,0(r4)
  80af48:	e0bff817 	ldw	r2,-32(fp)
  80af4c:	10c00015 	stw	r3,0(r2)
  80af50:	e0bff817 	ldw	r2,-32(fp)
  80af54:	10800104 	addi	r2,r2,4
  80af58:	e0bff815 	stw	r2,-32(fp)
  80af5c:	20c00104 	addi	r3,r4,4
  80af60:	e0bff317 	ldw	r2,-52(fp)
  80af64:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80af68:	e0bff317 	ldw	r2,-52(fp)
  80af6c:	10c00417 	ldw	r3,16(r2)
  80af70:	e0bff317 	ldw	r2,-52(fp)
  80af74:	10800217 	ldw	r2,8(r2)
  80af78:	1880041e 	bne	r3,r2,80af8c <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80af7c:	e0bff317 	ldw	r2,-52(fp)
  80af80:	10c00117 	ldw	r3,4(r2)
  80af84:	e0bff317 	ldw	r2,-52(fp)
  80af88:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80af8c:	e0bff317 	ldw	r2,-52(fp)
  80af90:	1080058b 	ldhu	r2,22(r2)
  80af94:	10bfffc4 	addi	r2,r2,-1
  80af98:	1007883a 	mov	r3,r2
  80af9c:	e0bff317 	ldw	r2,-52(fp)
  80afa0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80afa4:	e0fff717 	ldw	r3,-36(fp)
  80afa8:	e0bff417 	ldw	r2,-48(fp)
  80afac:	18800015 	stw	r2,0(r3)
  80afb0:	e0bff717 	ldw	r2,-36(fp)
  80afb4:	10800104 	addi	r2,r2,4
  80afb8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80afbc:	00800044 	movi	r2,1
  80afc0:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80afc4:	e0bff18b 	ldhu	r2,-58(fp)
  80afc8:	10800044 	addi	r2,r2,1
  80afcc:	e0bff18d 	sth	r2,-58(fp)
  80afd0:	00001006 	br	80b014 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80afd4:	e0bff103 	ldbu	r2,-60(fp)
  80afd8:	10800114 	ori	r2,r2,4
  80afdc:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80afe0:	00000c06 	br	80b014 <OSEventPendMulti+0x3d4>
  80afe4:	e0bff017 	ldw	r2,-64(fp)
  80afe8:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80afec:	e0bfee17 	ldw	r2,-72(fp)
  80aff0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80aff4:	e0bff717 	ldw	r2,-36(fp)
  80aff8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80affc:	e0c00217 	ldw	r3,8(fp)
  80b000:	00800044 	movi	r2,1
  80b004:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80b008:	e0bff18b 	ldhu	r2,-58(fp)
  80b00c:	e0bfff15 	stw	r2,-4(fp)
  80b010:	0000b206 	br	80b2dc <OSEventPendMulti+0x69c>
        }
        pevents++;
  80b014:	e0bff517 	ldw	r2,-44(fp)
  80b018:	10800104 	addi	r2,r2,4
  80b01c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80b020:	e0bff517 	ldw	r2,-44(fp)
  80b024:	10800017 	ldw	r2,0(r2)
  80b028:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80b02c:	e0bff417 	ldw	r2,-48(fp)
  80b030:	1004c03a 	cmpne	r2,r2,zero
  80b034:	103f6e1e 	bne	r2,zero,80adf0 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80b038:	e0bff203 	ldbu	r2,-56(fp)
  80b03c:	10800058 	cmpnei	r2,r2,1
  80b040:	10000b1e 	bne	r2,zero,80b070 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80b044:	e0bff717 	ldw	r2,-36(fp)
  80b048:	10000015 	stw	zero,0(r2)
  80b04c:	e0bff017 	ldw	r2,-64(fp)
  80b050:	e0bfed15 	stw	r2,-76(fp)
  80b054:	e0bfed17 	ldw	r2,-76(fp)
  80b058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80b05c:	e0800217 	ldw	r2,8(fp)
  80b060:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80b064:	e0fff18b 	ldhu	r3,-58(fp)
  80b068:	e0ffff15 	stw	r3,-4(fp)
  80b06c:	00009b06 	br	80b2dc <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80b070:	d1271217 	ldw	r4,-25528(gp)
  80b074:	d0a71217 	ldw	r2,-25528(gp)
  80b078:	10c00c03 	ldbu	r3,48(r2)
  80b07c:	e0bff103 	ldbu	r2,-60(fp)
  80b080:	1884b03a 	or	r2,r3,r2
  80b084:	1007883a 	mov	r3,r2
  80b088:	00bfe004 	movi	r2,-128
  80b08c:	1884b03a 	or	r2,r3,r2
  80b090:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80b094:	d0a71217 	ldw	r2,-25528(gp)
  80b098:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80b09c:	d0e71217 	ldw	r3,-25528(gp)
  80b0a0:	e0bff90b 	ldhu	r2,-28(fp)
  80b0a4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80b0a8:	e13ff617 	ldw	r4,-40(fp)
  80b0ac:	080bc700 	call	80bc70 <OS_EventTaskWaitMulti>
  80b0b0:	e0bff017 	ldw	r2,-64(fp)
  80b0b4:	e0bfec15 	stw	r2,-80(fp)
  80b0b8:	e0bfec17 	ldw	r2,-80(fp)
  80b0bc:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80b0c0:	080c40c0 	call	80c40c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b0c4:	0005303a 	rdctl	r2,status
  80b0c8:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b0cc:	e0ffeb17 	ldw	r3,-84(fp)
  80b0d0:	00bfff84 	movi	r2,-2
  80b0d4:	1884703a 	and	r2,r3,r2
  80b0d8:	1001703a 	wrctl	status,r2
  
  return context;
  80b0dc:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80b0e0:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80b0e4:	d0a71217 	ldw	r2,-25528(gp)
  80b0e8:	10800c43 	ldbu	r2,49(r2)
  80b0ec:	10803fcc 	andi	r2,r2,255
  80b0f0:	e0bffc15 	stw	r2,-16(fp)
  80b0f4:	e0fffc17 	ldw	r3,-16(fp)
  80b0f8:	1805003a 	cmpeq	r2,r3,zero
  80b0fc:	1000041e 	bne	r2,zero,80b110 <OSEventPendMulti+0x4d0>
  80b100:	e0fffc17 	ldw	r3,-16(fp)
  80b104:	188000a0 	cmpeqi	r2,r3,2
  80b108:	1000011e 	bne	r2,zero,80b110 <OSEventPendMulti+0x4d0>
  80b10c:	00001906 	br	80b174 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80b110:	d0a71217 	ldw	r2,-25528(gp)
  80b114:	10800717 	ldw	r2,28(r2)
  80b118:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80b11c:	e0bff417 	ldw	r2,-48(fp)
  80b120:	1005003a 	cmpeq	r2,r2,zero
  80b124:	10000c1e 	bne	r2,zero,80b158 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80b128:	e0fff717 	ldw	r3,-36(fp)
  80b12c:	e0bff417 	ldw	r2,-48(fp)
  80b130:	18800015 	stw	r2,0(r3)
  80b134:	e0bff717 	ldw	r2,-36(fp)
  80b138:	10800104 	addi	r2,r2,4
  80b13c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80b140:	e0bff717 	ldw	r2,-36(fp)
  80b144:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80b148:	e0bff18b 	ldhu	r2,-58(fp)
  80b14c:	10800044 	addi	r2,r2,1
  80b150:	e0bff18d 	sth	r2,-58(fp)
  80b154:	00000a06 	br	80b180 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80b158:	d0a71217 	ldw	r2,-25528(gp)
  80b15c:	00c00044 	movi	r3,1
  80b160:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b164:	d1271217 	ldw	r4,-25528(gp)
  80b168:	e17ff617 	ldw	r5,-40(fp)
  80b16c:	080be7c0 	call	80be7c <OS_EventTaskRemoveMulti>
             }
			 break;
  80b170:	00000306 	br	80b180 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80b174:	d1271217 	ldw	r4,-25528(gp)
  80b178:	e17ff617 	ldw	r5,-40(fp)
  80b17c:	080be7c0 	call	80be7c <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80b180:	d0a71217 	ldw	r2,-25528(gp)
  80b184:	10800c43 	ldbu	r2,49(r2)
  80b188:	10803fcc 	andi	r2,r2,255
  80b18c:	e0bffb15 	stw	r2,-20(fp)
  80b190:	e0fffb17 	ldw	r3,-20(fp)
  80b194:	1805003a 	cmpeq	r2,r3,zero
  80b198:	1000041e 	bne	r2,zero,80b1ac <OSEventPendMulti+0x56c>
  80b19c:	e0fffb17 	ldw	r3,-20(fp)
  80b1a0:	188000a0 	cmpeqi	r2,r3,2
  80b1a4:	10002c1e 	bne	r2,zero,80b258 <OSEventPendMulti+0x618>
  80b1a8:	00003406 	br	80b27c <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80b1ac:	e0bff417 	ldw	r2,-48(fp)
  80b1b0:	10800003 	ldbu	r2,0(r2)
  80b1b4:	10803fcc 	andi	r2,r2,255
  80b1b8:	e0bffa15 	stw	r2,-24(fp)
  80b1bc:	e0fffa17 	ldw	r3,-24(fp)
  80b1c0:	18800050 	cmplti	r2,r3,1
  80b1c4:	1000151e 	bne	r2,zero,80b21c <OSEventPendMulti+0x5dc>
  80b1c8:	e0fffa17 	ldw	r3,-24(fp)
  80b1cc:	188000d0 	cmplti	r2,r3,3
  80b1d0:	10000a1e 	bne	r2,zero,80b1fc <OSEventPendMulti+0x5bc>
  80b1d4:	e0fffa17 	ldw	r3,-24(fp)
  80b1d8:	188000e0 	cmpeqi	r2,r3,3
  80b1dc:	1000011e 	bne	r2,zero,80b1e4 <OSEventPendMulti+0x5a4>
  80b1e0:	00000e06 	br	80b21c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80b1e4:	e0bff817 	ldw	r2,-32(fp)
  80b1e8:	10000015 	stw	zero,0(r2)
  80b1ec:	e0bff817 	ldw	r2,-32(fp)
  80b1f0:	10800104 	addi	r2,r2,4
  80b1f4:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b1f8:	00001406 	br	80b24c <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80b1fc:	d0a71217 	ldw	r2,-25528(gp)
  80b200:	10c00917 	ldw	r3,36(r2)
  80b204:	e0bff817 	ldw	r2,-32(fp)
  80b208:	10c00015 	stw	r3,0(r2)
  80b20c:	e0bff817 	ldw	r2,-32(fp)
  80b210:	10800104 	addi	r2,r2,4
  80b214:	e0bff815 	stw	r2,-32(fp)
                      break;
  80b218:	00000c06 	br	80b24c <OSEventPendMulti+0x60c>
  80b21c:	e0bff017 	ldw	r2,-64(fp)
  80b220:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b224:	e0bfea17 	ldw	r2,-88(fp)
  80b228:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80b22c:	e0bff717 	ldw	r2,-36(fp)
  80b230:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80b234:	e0c00217 	ldw	r3,8(fp)
  80b238:	00800044 	movi	r2,1
  80b23c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80b240:	e0bff18b 	ldhu	r2,-58(fp)
  80b244:	e0bfff15 	stw	r2,-4(fp)
  80b248:	00002406 	br	80b2dc <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80b24c:	e0800217 	ldw	r2,8(fp)
  80b250:	10000005 	stb	zero,0(r2)
             break;
  80b254:	00001106 	br	80b29c <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80b258:	e0bff817 	ldw	r2,-32(fp)
  80b25c:	10000015 	stw	zero,0(r2)
  80b260:	e0bff817 	ldw	r2,-32(fp)
  80b264:	10800104 	addi	r2,r2,4
  80b268:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80b26c:	e0c00217 	ldw	r3,8(fp)
  80b270:	00800384 	movi	r2,14
  80b274:	18800005 	stb	r2,0(r3)
             break;
  80b278:	00000806 	br	80b29c <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80b27c:	e0bff817 	ldw	r2,-32(fp)
  80b280:	10000015 	stw	zero,0(r2)
  80b284:	e0bff817 	ldw	r2,-32(fp)
  80b288:	10800104 	addi	r2,r2,4
  80b28c:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80b290:	e0c00217 	ldw	r3,8(fp)
  80b294:	00800284 	movi	r2,10
  80b298:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80b29c:	d0a71217 	ldw	r2,-25528(gp)
  80b2a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80b2a4:	d0a71217 	ldw	r2,-25528(gp)
  80b2a8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80b2ac:	d0a71217 	ldw	r2,-25528(gp)
  80b2b0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80b2b4:	d0a71217 	ldw	r2,-25528(gp)
  80b2b8:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80b2bc:	d0a71217 	ldw	r2,-25528(gp)
  80b2c0:	10000915 	stw	zero,36(r2)
  80b2c4:	e0bff017 	ldw	r2,-64(fp)
  80b2c8:	e0bfe915 	stw	r2,-92(fp)
  80b2cc:	e0bfe917 	ldw	r2,-92(fp)
  80b2d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80b2d4:	e0fff18b 	ldhu	r3,-58(fp)
  80b2d8:	e0ffff15 	stw	r3,-4(fp)
  80b2dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80b2e0:	e037883a 	mov	sp,fp
  80b2e4:	dfc00117 	ldw	ra,4(sp)
  80b2e8:	df000017 	ldw	fp,0(sp)
  80b2ec:	dec00204 	addi	sp,sp,8
  80b2f0:	f800283a 	ret

0080b2f4 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80b2f4:	defffe04 	addi	sp,sp,-8
  80b2f8:	dfc00115 	stw	ra,4(sp)
  80b2fc:	df000015 	stw	fp,0(sp)
  80b300:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80b304:	08152440 	call	815244 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80b308:	080c0c40 	call	80c0c4 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80b30c:	080c1080 	call	80c108 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80b310:	080c26c0 	call	80c26c <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80b314:	080bfe80 	call	80bfe8 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80b318:	080e31c0 	call	80e31c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80b31c:	080ecf40 	call	80ecf4 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80b320:	081004c0 	call	81004c <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80b324:	080c1740 	call	80c174 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80b328:	080c1f00 	call	80c1f0 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80b32c:	08152600 	call	815260 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80b330:	080caf40 	call	80caf4 <OSDebugInit>
#endif
}
  80b334:	e037883a 	mov	sp,fp
  80b338:	dfc00117 	ldw	ra,4(sp)
  80b33c:	df000017 	ldw	fp,0(sp)
  80b340:	dec00204 	addi	sp,sp,8
  80b344:	f800283a 	ret

0080b348 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80b348:	defffc04 	addi	sp,sp,-16
  80b34c:	df000315 	stw	fp,12(sp)
  80b350:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b354:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80b358:	d0a70343 	ldbu	r2,-25587(gp)
  80b35c:	10803fcc 	andi	r2,r2,255
  80b360:	10800058 	cmpnei	r2,r2,1
  80b364:	1000131e 	bne	r2,zero,80b3b4 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b368:	0005303a 	rdctl	r2,status
  80b36c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b370:	e0fffe17 	ldw	r3,-8(fp)
  80b374:	00bfff84 	movi	r2,-2
  80b378:	1884703a 	and	r2,r3,r2
  80b37c:	1001703a 	wrctl	status,r2
  
  return context;
  80b380:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b384:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80b388:	d0a71103 	ldbu	r2,-25532(gp)
  80b38c:	10803fcc 	andi	r2,r2,255
  80b390:	10803fe0 	cmpeqi	r2,r2,255
  80b394:	1000031e 	bne	r2,zero,80b3a4 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80b398:	d0a71103 	ldbu	r2,-25532(gp)
  80b39c:	10800044 	addi	r2,r2,1
  80b3a0:	d0a71105 	stb	r2,-25532(gp)
  80b3a4:	e0bfff17 	ldw	r2,-4(fp)
  80b3a8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b3ac:	e0bffd17 	ldw	r2,-12(fp)
  80b3b0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80b3b4:	e037883a 	mov	sp,fp
  80b3b8:	df000017 	ldw	fp,0(sp)
  80b3bc:	dec00104 	addi	sp,sp,4
  80b3c0:	f800283a 	ret

0080b3c4 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80b3c4:	defffb04 	addi	sp,sp,-20
  80b3c8:	dfc00415 	stw	ra,16(sp)
  80b3cc:	df000315 	stw	fp,12(sp)
  80b3d0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b3d4:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80b3d8:	d0a70343 	ldbu	r2,-25587(gp)
  80b3dc:	10803fcc 	andi	r2,r2,255
  80b3e0:	10800058 	cmpnei	r2,r2,1
  80b3e4:	1000321e 	bne	r2,zero,80b4b0 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b3e8:	0005303a 	rdctl	r2,status
  80b3ec:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b3f0:	e0fffe17 	ldw	r3,-8(fp)
  80b3f4:	00bfff84 	movi	r2,-2
  80b3f8:	1884703a 	and	r2,r3,r2
  80b3fc:	1001703a 	wrctl	status,r2
  
  return context;
  80b400:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b404:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80b408:	d0a71103 	ldbu	r2,-25532(gp)
  80b40c:	10803fcc 	andi	r2,r2,255
  80b410:	1005003a 	cmpeq	r2,r2,zero
  80b414:	1000031e 	bne	r2,zero,80b424 <OSIntExit+0x60>
            OSIntNesting--;
  80b418:	d0a71103 	ldbu	r2,-25532(gp)
  80b41c:	10bfffc4 	addi	r2,r2,-1
  80b420:	d0a71105 	stb	r2,-25532(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80b424:	d0a71103 	ldbu	r2,-25532(gp)
  80b428:	10803fcc 	andi	r2,r2,255
  80b42c:	1004c03a 	cmpne	r2,r2,zero
  80b430:	10001b1e 	bne	r2,zero,80b4a0 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80b434:	d0a70303 	ldbu	r2,-25588(gp)
  80b438:	10803fcc 	andi	r2,r2,255
  80b43c:	1004c03a 	cmpne	r2,r2,zero
  80b440:	1000171e 	bne	r2,zero,80b4a0 <OSIntExit+0xdc>
                OS_SchedNew();
  80b444:	080c4e00 	call	80c4e0 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80b448:	d0a70503 	ldbu	r2,-25580(gp)
  80b44c:	d0e70543 	ldbu	r3,-25579(gp)
  80b450:	11003fcc 	andi	r4,r2,255
  80b454:	18803fcc 	andi	r2,r3,255
  80b458:	20801126 	beq	r4,r2,80b4a0 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80b45c:	d0a70503 	ldbu	r2,-25580(gp)
  80b460:	10803fcc 	andi	r2,r2,255
  80b464:	00c020b4 	movhi	r3,130
  80b468:	18c1bd04 	addi	r3,r3,1780
  80b46c:	1085883a 	add	r2,r2,r2
  80b470:	1085883a 	add	r2,r2,r2
  80b474:	10c5883a 	add	r2,r2,r3
  80b478:	10800017 	ldw	r2,0(r2)
  80b47c:	d0a70d15 	stw	r2,-25548(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80b480:	d0e70d17 	ldw	r3,-25548(gp)
  80b484:	18800e17 	ldw	r2,56(r3)
  80b488:	10800044 	addi	r2,r2,1
  80b48c:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80b490:	d0a70817 	ldw	r2,-25568(gp)
  80b494:	10800044 	addi	r2,r2,1
  80b498:	d0a70815 	stw	r2,-25568(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80b49c:	0814dd00 	call	814dd0 <OSCtxSw>
  80b4a0:	e0bfff17 	ldw	r2,-4(fp)
  80b4a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b4a8:	e0bffd17 	ldw	r2,-12(fp)
  80b4ac:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b4b0:	e037883a 	mov	sp,fp
  80b4b4:	dfc00117 	ldw	ra,4(sp)
  80b4b8:	df000017 	ldw	fp,0(sp)
  80b4bc:	dec00204 	addi	sp,sp,8
  80b4c0:	f800283a 	ret

0080b4c4 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80b4c4:	defffc04 	addi	sp,sp,-16
  80b4c8:	df000315 	stw	fp,12(sp)
  80b4cc:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b4d0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80b4d4:	d0a70343 	ldbu	r2,-25587(gp)
  80b4d8:	10803fcc 	andi	r2,r2,255
  80b4dc:	10800058 	cmpnei	r2,r2,1
  80b4e0:	1000171e 	bne	r2,zero,80b540 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b4e4:	0005303a 	rdctl	r2,status
  80b4e8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b4ec:	e0fffe17 	ldw	r3,-8(fp)
  80b4f0:	00bfff84 	movi	r2,-2
  80b4f4:	1884703a 	and	r2,r3,r2
  80b4f8:	1001703a 	wrctl	status,r2
  
  return context;
  80b4fc:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b500:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80b504:	d0a71103 	ldbu	r2,-25532(gp)
  80b508:	10803fcc 	andi	r2,r2,255
  80b50c:	1004c03a 	cmpne	r2,r2,zero
  80b510:	1000071e 	bne	r2,zero,80b530 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80b514:	d0a70303 	ldbu	r2,-25588(gp)
  80b518:	10803fcc 	andi	r2,r2,255
  80b51c:	10803fe0 	cmpeqi	r2,r2,255
  80b520:	1000031e 	bne	r2,zero,80b530 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80b524:	d0a70303 	ldbu	r2,-25588(gp)
  80b528:	10800044 	addi	r2,r2,1
  80b52c:	d0a70305 	stb	r2,-25588(gp)
  80b530:	e0bfff17 	ldw	r2,-4(fp)
  80b534:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b538:	e0bffd17 	ldw	r2,-12(fp)
  80b53c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80b540:	e037883a 	mov	sp,fp
  80b544:	df000017 	ldw	fp,0(sp)
  80b548:	dec00104 	addi	sp,sp,4
  80b54c:	f800283a 	ret

0080b550 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80b550:	defff804 	addi	sp,sp,-32
  80b554:	dfc00715 	stw	ra,28(sp)
  80b558:	df000615 	stw	fp,24(sp)
  80b55c:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80b560:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80b564:	d0a70343 	ldbu	r2,-25587(gp)
  80b568:	10803fcc 	andi	r2,r2,255
  80b56c:	10800058 	cmpnei	r2,r2,1
  80b570:	10002b1e 	bne	r2,zero,80b620 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b574:	0005303a 	rdctl	r2,status
  80b578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b57c:	e0fffe17 	ldw	r3,-8(fp)
  80b580:	00bfff84 	movi	r2,-2
  80b584:	1884703a 	and	r2,r3,r2
  80b588:	1001703a 	wrctl	status,r2
  
  return context;
  80b58c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80b590:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80b594:	d0a70303 	ldbu	r2,-25588(gp)
  80b598:	10803fcc 	andi	r2,r2,255
  80b59c:	1005003a 	cmpeq	r2,r2,zero
  80b5a0:	10001b1e 	bne	r2,zero,80b610 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80b5a4:	d0a70303 	ldbu	r2,-25588(gp)
  80b5a8:	10bfffc4 	addi	r2,r2,-1
  80b5ac:	d0a70305 	stb	r2,-25588(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80b5b0:	d0a70303 	ldbu	r2,-25588(gp)
  80b5b4:	10803fcc 	andi	r2,r2,255
  80b5b8:	1004c03a 	cmpne	r2,r2,zero
  80b5bc:	10000f1e 	bne	r2,zero,80b5fc <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80b5c0:	d0a71103 	ldbu	r2,-25532(gp)
  80b5c4:	10803fcc 	andi	r2,r2,255
  80b5c8:	1004c03a 	cmpne	r2,r2,zero
  80b5cc:	1000061e 	bne	r2,zero,80b5e8 <OSSchedUnlock+0x98>
  80b5d0:	e0bfff17 	ldw	r2,-4(fp)
  80b5d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b5d8:	e0bffd17 	ldw	r2,-12(fp)
  80b5dc:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80b5e0:	080c40c0 	call	80c40c <OS_Sched>
  80b5e4:	00000e06 	br	80b620 <OSSchedUnlock+0xd0>
  80b5e8:	e0bfff17 	ldw	r2,-4(fp)
  80b5ec:	e0bffc15 	stw	r2,-16(fp)
  80b5f0:	e0bffc17 	ldw	r2,-16(fp)
  80b5f4:	1001703a 	wrctl	status,r2
  80b5f8:	00000906 	br	80b620 <OSSchedUnlock+0xd0>
  80b5fc:	e0bfff17 	ldw	r2,-4(fp)
  80b600:	e0bffb15 	stw	r2,-20(fp)
  80b604:	e0bffb17 	ldw	r2,-20(fp)
  80b608:	1001703a 	wrctl	status,r2
  80b60c:	00000406 	br	80b620 <OSSchedUnlock+0xd0>
  80b610:	e0bfff17 	ldw	r2,-4(fp)
  80b614:	e0bffa15 	stw	r2,-24(fp)
  80b618:	e0bffa17 	ldw	r2,-24(fp)
  80b61c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80b620:	e037883a 	mov	sp,fp
  80b624:	dfc00117 	ldw	ra,4(sp)
  80b628:	df000017 	ldw	fp,0(sp)
  80b62c:	dec00204 	addi	sp,sp,8
  80b630:	f800283a 	ret

0080b634 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80b634:	defffe04 	addi	sp,sp,-8
  80b638:	dfc00115 	stw	ra,4(sp)
  80b63c:	df000015 	stw	fp,0(sp)
  80b640:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80b644:	d0a70343 	ldbu	r2,-25587(gp)
  80b648:	10803fcc 	andi	r2,r2,255
  80b64c:	1004c03a 	cmpne	r2,r2,zero
  80b650:	10000f1e 	bne	r2,zero,80b690 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80b654:	080c4e00 	call	80c4e0 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80b658:	d0a70503 	ldbu	r2,-25580(gp)
  80b65c:	d0a70545 	stb	r2,-25579(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80b660:	d0a70503 	ldbu	r2,-25580(gp)
  80b664:	10803fcc 	andi	r2,r2,255
  80b668:	00c020b4 	movhi	r3,130
  80b66c:	18c1bd04 	addi	r3,r3,1780
  80b670:	1085883a 	add	r2,r2,r2
  80b674:	1085883a 	add	r2,r2,r2
  80b678:	10c5883a 	add	r2,r2,r3
  80b67c:	10800017 	ldw	r2,0(r2)
  80b680:	d0a70d15 	stw	r2,-25548(gp)
        OSTCBCur      = OSTCBHighRdy;
  80b684:	d0a70d17 	ldw	r2,-25548(gp)
  80b688:	d0a71215 	stw	r2,-25528(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80b68c:	0814e5c0 	call	814e5c <OSStartHighRdy>
    }
}
  80b690:	e037883a 	mov	sp,fp
  80b694:	dfc00117 	ldw	ra,4(sp)
  80b698:	df000017 	ldw	fp,0(sp)
  80b69c:	dec00204 	addi	sp,sp,8
  80b6a0:	f800283a 	ret

0080b6a4 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80b6a4:	defff904 	addi	sp,sp,-28
  80b6a8:	dfc00615 	stw	ra,24(sp)
  80b6ac:	df000515 	stw	fp,20(sp)
  80b6b0:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80b6b4:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80b6b8:	01000084 	movi	r4,2
  80b6bc:	08127000 	call	812700 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6c0:	0005303a 	rdctl	r2,status
  80b6c4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b6c8:	e0fffe17 	ldw	r3,-8(fp)
  80b6cc:	00bfff84 	movi	r2,-2
  80b6d0:	1884703a 	and	r2,r3,r2
  80b6d4:	1001703a 	wrctl	status,r2
  
  return context;
  80b6d8:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80b6dc:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80b6e0:	d0270415 	stw	zero,-25584(gp)
  80b6e4:	e0bfff17 	ldw	r2,-4(fp)
  80b6e8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b6ec:	e0bffd17 	ldw	r2,-12(fp)
  80b6f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80b6f4:	01001904 	movi	r4,100
  80b6f8:	08127000 	call	812700 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b6fc:	0005303a 	rdctl	r2,status
  80b700:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b704:	e0fffc17 	ldw	r3,-16(fp)
  80b708:	00bfff84 	movi	r2,-2
  80b70c:	1884703a 	and	r2,r3,r2
  80b710:	1001703a 	wrctl	status,r2
  
  return context;
  80b714:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80b718:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80b71c:	d0a70417 	ldw	r2,-25584(gp)
  80b720:	d0a70915 	stw	r2,-25564(gp)
    OSStatRdy    = OS_TRUE;
  80b724:	00800044 	movi	r2,1
  80b728:	d0a71505 	stb	r2,-25516(gp)
  80b72c:	e0bfff17 	ldw	r2,-4(fp)
  80b730:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b734:	e0bffb17 	ldw	r2,-20(fp)
  80b738:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80b73c:	e037883a 	mov	sp,fp
  80b740:	dfc00117 	ldw	ra,4(sp)
  80b744:	df000017 	ldw	fp,0(sp)
  80b748:	dec00204 	addi	sp,sp,8
  80b74c:	f800283a 	ret

0080b750 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80b750:	defff604 	addi	sp,sp,-40
  80b754:	dfc00915 	stw	ra,36(sp)
  80b758:	df000815 	stw	fp,32(sp)
  80b75c:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80b760:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80b764:	08152280 	call	815228 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b768:	0005303a 	rdctl	r2,status
  80b76c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b770:	e0fffb17 	ldw	r3,-20(fp)
  80b774:	00bfff84 	movi	r2,-2
  80b778:	1884703a 	and	r2,r3,r2
  80b77c:	1001703a 	wrctl	status,r2
  
  return context;
  80b780:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80b784:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80b788:	d0a71317 	ldw	r2,-25524(gp)
  80b78c:	10800044 	addi	r2,r2,1
  80b790:	d0a71315 	stw	r2,-25524(gp)
  80b794:	e0bffc17 	ldw	r2,-16(fp)
  80b798:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b79c:	e0bffa17 	ldw	r2,-24(fp)
  80b7a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80b7a4:	d0a70343 	ldbu	r2,-25587(gp)
  80b7a8:	10803fcc 	andi	r2,r2,255
  80b7ac:	10800058 	cmpnei	r2,r2,1
  80b7b0:	1000721e 	bne	r2,zero,80b97c <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80b7b4:	d0a70703 	ldbu	r2,-25572(gp)
  80b7b8:	10803fcc 	andi	r2,r2,255
  80b7bc:	e0bfff15 	stw	r2,-4(fp)
  80b7c0:	e0ffff17 	ldw	r3,-4(fp)
  80b7c4:	18800060 	cmpeqi	r2,r3,1
  80b7c8:	10000a1e 	bne	r2,zero,80b7f4 <OSTimeTick+0xa4>
  80b7cc:	e0ffff17 	ldw	r3,-4(fp)
  80b7d0:	188000a0 	cmpeqi	r2,r3,2
  80b7d4:	1000091e 	bne	r2,zero,80b7fc <OSTimeTick+0xac>
  80b7d8:	e0ffff17 	ldw	r3,-4(fp)
  80b7dc:	1805003a 	cmpeq	r2,r3,zero
  80b7e0:	1000011e 	bne	r2,zero,80b7e8 <OSTimeTick+0x98>
  80b7e4:	00000a06 	br	80b810 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80b7e8:	00800044 	movi	r2,1
  80b7ec:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80b7f0:	00000a06 	br	80b81c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80b7f4:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80b7f8:	00000806 	br	80b81c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80b7fc:	00800044 	movi	r2,1
  80b800:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80b804:	00800044 	movi	r2,1
  80b808:	d0a70705 	stb	r2,-25572(gp)
                 break;
  80b80c:	00000306 	br	80b81c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80b810:	00800044 	movi	r2,1
  80b814:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80b818:	d0270705 	stb	zero,-25572(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80b81c:	e0bffd03 	ldbu	r2,-12(fp)
  80b820:	1005003a 	cmpeq	r2,r2,zero
  80b824:	1000551e 	bne	r2,zero,80b97c <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80b828:	d0a70617 	ldw	r2,-25576(gp)
  80b82c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80b830:	00004d06 	br	80b968 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80b834:	0005303a 	rdctl	r2,status
  80b838:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80b83c:	e0fff917 	ldw	r3,-28(fp)
  80b840:	00bfff84 	movi	r2,-2
  80b844:	1884703a 	and	r2,r3,r2
  80b848:	1001703a 	wrctl	status,r2
  
  return context;
  80b84c:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80b850:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80b854:	e0bffe17 	ldw	r2,-8(fp)
  80b858:	10800b8b 	ldhu	r2,46(r2)
  80b85c:	10bfffcc 	andi	r2,r2,65535
  80b860:	1005003a 	cmpeq	r2,r2,zero
  80b864:	1000391e 	bne	r2,zero,80b94c <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80b868:	e0bffe17 	ldw	r2,-8(fp)
  80b86c:	10800b8b 	ldhu	r2,46(r2)
  80b870:	10bfffc4 	addi	r2,r2,-1
  80b874:	1007883a 	mov	r3,r2
  80b878:	e0bffe17 	ldw	r2,-8(fp)
  80b87c:	10c00b8d 	sth	r3,46(r2)
  80b880:	e0bffe17 	ldw	r2,-8(fp)
  80b884:	10800b8b 	ldhu	r2,46(r2)
  80b888:	10bfffcc 	andi	r2,r2,65535
  80b88c:	1004c03a 	cmpne	r2,r2,zero
  80b890:	10002e1e 	bne	r2,zero,80b94c <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80b894:	e0bffe17 	ldw	r2,-8(fp)
  80b898:	10800c03 	ldbu	r2,48(r2)
  80b89c:	10803fcc 	andi	r2,r2,255
  80b8a0:	10800dcc 	andi	r2,r2,55
  80b8a4:	1005003a 	cmpeq	r2,r2,zero
  80b8a8:	10000b1e 	bne	r2,zero,80b8d8 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80b8ac:	e0bffe17 	ldw	r2,-8(fp)
  80b8b0:	10c00c03 	ldbu	r3,48(r2)
  80b8b4:	00bff204 	movi	r2,-56
  80b8b8:	1884703a 	and	r2,r3,r2
  80b8bc:	1007883a 	mov	r3,r2
  80b8c0:	e0bffe17 	ldw	r2,-8(fp)
  80b8c4:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80b8c8:	e0fffe17 	ldw	r3,-8(fp)
  80b8cc:	00800044 	movi	r2,1
  80b8d0:	18800c45 	stb	r2,49(r3)
  80b8d4:	00000206 	br	80b8e0 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80b8d8:	e0bffe17 	ldw	r2,-8(fp)
  80b8dc:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80b8e0:	e0bffe17 	ldw	r2,-8(fp)
  80b8e4:	10800c03 	ldbu	r2,48(r2)
  80b8e8:	10803fcc 	andi	r2,r2,255
  80b8ec:	1080020c 	andi	r2,r2,8
  80b8f0:	1004c03a 	cmpne	r2,r2,zero
  80b8f4:	1000151e 	bne	r2,zero,80b94c <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80b8f8:	e0bffe17 	ldw	r2,-8(fp)
  80b8fc:	10c00d83 	ldbu	r3,54(r2)
  80b900:	d0a70f03 	ldbu	r2,-25540(gp)
  80b904:	1884b03a 	or	r2,r3,r2
  80b908:	d0a70f05 	stb	r2,-25540(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80b90c:	e0bffe17 	ldw	r2,-8(fp)
  80b910:	10800d03 	ldbu	r2,52(r2)
  80b914:	11003fcc 	andi	r4,r2,255
  80b918:	e0bffe17 	ldw	r2,-8(fp)
  80b91c:	10800d03 	ldbu	r2,52(r2)
  80b920:	10c03fcc 	andi	r3,r2,255
  80b924:	d0a70f44 	addi	r2,gp,-25539
  80b928:	1885883a 	add	r2,r3,r2
  80b92c:	10c00003 	ldbu	r3,0(r2)
  80b930:	e0bffe17 	ldw	r2,-8(fp)
  80b934:	10800d43 	ldbu	r2,53(r2)
  80b938:	1884b03a 	or	r2,r3,r2
  80b93c:	1007883a 	mov	r3,r2
  80b940:	d0a70f44 	addi	r2,gp,-25539
  80b944:	2085883a 	add	r2,r4,r2
  80b948:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80b94c:	e0bffe17 	ldw	r2,-8(fp)
  80b950:	10800517 	ldw	r2,20(r2)
  80b954:	e0bffe15 	stw	r2,-8(fp)
  80b958:	e0bffc17 	ldw	r2,-16(fp)
  80b95c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80b960:	e0bff817 	ldw	r2,-32(fp)
  80b964:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80b968:	e0bffe17 	ldw	r2,-8(fp)
  80b96c:	10800c83 	ldbu	r2,50(r2)
  80b970:	10803fcc 	andi	r2,r2,255
  80b974:	10800518 	cmpnei	r2,r2,20
  80b978:	103fae1e 	bne	r2,zero,80b834 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80b97c:	e037883a 	mov	sp,fp
  80b980:	dfc00117 	ldw	ra,4(sp)
  80b984:	df000017 	ldw	fp,0(sp)
  80b988:	dec00204 	addi	sp,sp,8
  80b98c:	f800283a 	ret

0080b990 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80b990:	deffff04 	addi	sp,sp,-4
  80b994:	df000015 	stw	fp,0(sp)
  80b998:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80b99c:	00804784 	movi	r2,286
}
  80b9a0:	e037883a 	mov	sp,fp
  80b9a4:	df000017 	ldw	fp,0(sp)
  80b9a8:	dec00104 	addi	sp,sp,4
  80b9ac:	f800283a 	ret

0080b9b0 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80b9b0:	deffff04 	addi	sp,sp,-4
  80b9b4:	df000015 	stw	fp,0(sp)
  80b9b8:	d839883a 	mov	fp,sp
}
  80b9bc:	e037883a 	mov	sp,fp
  80b9c0:	df000017 	ldw	fp,0(sp)
  80b9c4:	dec00104 	addi	sp,sp,4
  80b9c8:	f800283a 	ret

0080b9cc <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80b9cc:	defff804 	addi	sp,sp,-32
  80b9d0:	dfc00715 	stw	ra,28(sp)
  80b9d4:	df000615 	stw	fp,24(sp)
  80b9d8:	df000604 	addi	fp,sp,24
  80b9dc:	e13ffc15 	stw	r4,-16(fp)
  80b9e0:	e17ffd15 	stw	r5,-12(fp)
  80b9e4:	e1bffe05 	stb	r6,-8(fp)
  80b9e8:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80b9ec:	e0bffc17 	ldw	r2,-16(fp)
  80b9f0:	10800283 	ldbu	r2,10(r2)
  80b9f4:	10c03fcc 	andi	r3,r2,255
  80b9f8:	00802074 	movhi	r2,129
  80b9fc:	10973c04 	addi	r2,r2,23792
  80ba00:	10c5883a 	add	r2,r2,r3
  80ba04:	10800003 	ldbu	r2,0(r2)
  80ba08:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80ba0c:	e0fffa83 	ldbu	r3,-22(fp)
  80ba10:	e0bffc17 	ldw	r2,-16(fp)
  80ba14:	1885883a 	add	r2,r3,r2
  80ba18:	10800204 	addi	r2,r2,8
  80ba1c:	108000c3 	ldbu	r2,3(r2)
  80ba20:	10c03fcc 	andi	r3,r2,255
  80ba24:	00802074 	movhi	r2,129
  80ba28:	10973c04 	addi	r2,r2,23792
  80ba2c:	10c5883a 	add	r2,r2,r3
  80ba30:	10800003 	ldbu	r2,0(r2)
  80ba34:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80ba38:	e0bffa83 	ldbu	r2,-22(fp)
  80ba3c:	100490fa 	slli	r2,r2,3
  80ba40:	1007883a 	mov	r3,r2
  80ba44:	e0bffa43 	ldbu	r2,-23(fp)
  80ba48:	1885883a 	add	r2,r3,r2
  80ba4c:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80ba50:	e0bffa03 	ldbu	r2,-24(fp)
  80ba54:	00c020b4 	movhi	r3,130
  80ba58:	18c1bd04 	addi	r3,r3,1780
  80ba5c:	1085883a 	add	r2,r2,r2
  80ba60:	1085883a 	add	r2,r2,r2
  80ba64:	10c5883a 	add	r2,r2,r3
  80ba68:	10800017 	ldw	r2,0(r2)
  80ba6c:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80ba70:	e0bffb17 	ldw	r2,-20(fp)
  80ba74:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80ba78:	e0fffb17 	ldw	r3,-20(fp)
  80ba7c:	e0bffd17 	ldw	r2,-12(fp)
  80ba80:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80ba84:	e0bffb17 	ldw	r2,-20(fp)
  80ba88:	10800c03 	ldbu	r2,48(r2)
  80ba8c:	1007883a 	mov	r3,r2
  80ba90:	e0bffe03 	ldbu	r2,-8(fp)
  80ba94:	0084303a 	nor	r2,zero,r2
  80ba98:	1884703a 	and	r2,r3,r2
  80ba9c:	1007883a 	mov	r3,r2
  80baa0:	e0bffb17 	ldw	r2,-20(fp)
  80baa4:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80baa8:	e0fffb17 	ldw	r3,-20(fp)
  80baac:	e0bfff03 	ldbu	r2,-4(fp)
  80bab0:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80bab4:	e0bffb17 	ldw	r2,-20(fp)
  80bab8:	10800c03 	ldbu	r2,48(r2)
  80babc:	10803fcc 	andi	r2,r2,255
  80bac0:	1080020c 	andi	r2,r2,8
  80bac4:	1004c03a 	cmpne	r2,r2,zero
  80bac8:	1000111e 	bne	r2,zero,80bb10 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80bacc:	e0bffb17 	ldw	r2,-20(fp)
  80bad0:	10c00d83 	ldbu	r3,54(r2)
  80bad4:	d0a70f03 	ldbu	r2,-25540(gp)
  80bad8:	1884b03a 	or	r2,r3,r2
  80badc:	d0a70f05 	stb	r2,-25540(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80bae0:	e13ffa83 	ldbu	r4,-22(fp)
  80bae4:	e0fffa83 	ldbu	r3,-22(fp)
  80bae8:	d0a70f44 	addi	r2,gp,-25539
  80baec:	1885883a 	add	r2,r3,r2
  80baf0:	10c00003 	ldbu	r3,0(r2)
  80baf4:	e0bffb17 	ldw	r2,-20(fp)
  80baf8:	10800d43 	ldbu	r2,53(r2)
  80bafc:	1884b03a 	or	r2,r3,r2
  80bb00:	1007883a 	mov	r3,r2
  80bb04:	d0a70f44 	addi	r2,gp,-25539
  80bb08:	2085883a 	add	r2,r4,r2
  80bb0c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80bb10:	e13ffb17 	ldw	r4,-20(fp)
  80bb14:	e17ffc17 	ldw	r5,-16(fp)
  80bb18:	080bdc40 	call	80bdc4 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80bb1c:	e0bffb17 	ldw	r2,-20(fp)
  80bb20:	10800817 	ldw	r2,32(r2)
  80bb24:	1005003a 	cmpeq	r2,r2,zero
  80bb28:	1000071e 	bne	r2,zero,80bb48 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80bb2c:	e0bffb17 	ldw	r2,-20(fp)
  80bb30:	11400817 	ldw	r5,32(r2)
  80bb34:	e13ffb17 	ldw	r4,-20(fp)
  80bb38:	080be7c0 	call	80be7c <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80bb3c:	e0fffb17 	ldw	r3,-20(fp)
  80bb40:	e0bffc17 	ldw	r2,-16(fp)
  80bb44:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80bb48:	e0bffa03 	ldbu	r2,-24(fp)
}
  80bb4c:	e037883a 	mov	sp,fp
  80bb50:	dfc00117 	ldw	ra,4(sp)
  80bb54:	df000017 	ldw	fp,0(sp)
  80bb58:	dec00204 	addi	sp,sp,8
  80bb5c:	f800283a 	ret

0080bb60 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80bb60:	defffd04 	addi	sp,sp,-12
  80bb64:	df000215 	stw	fp,8(sp)
  80bb68:	df000204 	addi	fp,sp,8
  80bb6c:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80bb70:	d0e71217 	ldw	r3,-25528(gp)
  80bb74:	e0bfff17 	ldw	r2,-4(fp)
  80bb78:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80bb7c:	d0a71217 	ldw	r2,-25528(gp)
  80bb80:	10800d03 	ldbu	r2,52(r2)
  80bb84:	11003fcc 	andi	r4,r2,255
  80bb88:	d0a71217 	ldw	r2,-25528(gp)
  80bb8c:	10800d03 	ldbu	r2,52(r2)
  80bb90:	10c03fcc 	andi	r3,r2,255
  80bb94:	e0bfff17 	ldw	r2,-4(fp)
  80bb98:	1885883a 	add	r2,r3,r2
  80bb9c:	10800204 	addi	r2,r2,8
  80bba0:	10c000c3 	ldbu	r3,3(r2)
  80bba4:	d0a71217 	ldw	r2,-25528(gp)
  80bba8:	10800d43 	ldbu	r2,53(r2)
  80bbac:	1884b03a 	or	r2,r3,r2
  80bbb0:	1007883a 	mov	r3,r2
  80bbb4:	e0bfff17 	ldw	r2,-4(fp)
  80bbb8:	2085883a 	add	r2,r4,r2
  80bbbc:	10800204 	addi	r2,r2,8
  80bbc0:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80bbc4:	e0bfff17 	ldw	r2,-4(fp)
  80bbc8:	10c00283 	ldbu	r3,10(r2)
  80bbcc:	d0a71217 	ldw	r2,-25528(gp)
  80bbd0:	10800d83 	ldbu	r2,54(r2)
  80bbd4:	1884b03a 	or	r2,r3,r2
  80bbd8:	1007883a 	mov	r3,r2
  80bbdc:	e0bfff17 	ldw	r2,-4(fp)
  80bbe0:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80bbe4:	d0a71217 	ldw	r2,-25528(gp)
  80bbe8:	10800d03 	ldbu	r2,52(r2)
  80bbec:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80bbf0:	e13ffe03 	ldbu	r4,-8(fp)
  80bbf4:	e0fffe03 	ldbu	r3,-8(fp)
  80bbf8:	d0a70f44 	addi	r2,gp,-25539
  80bbfc:	1885883a 	add	r2,r3,r2
  80bc00:	10800003 	ldbu	r2,0(r2)
  80bc04:	1007883a 	mov	r3,r2
  80bc08:	d0a71217 	ldw	r2,-25528(gp)
  80bc0c:	10800d43 	ldbu	r2,53(r2)
  80bc10:	0084303a 	nor	r2,zero,r2
  80bc14:	1884703a 	and	r2,r3,r2
  80bc18:	1007883a 	mov	r3,r2
  80bc1c:	d0a70f44 	addi	r2,gp,-25539
  80bc20:	2085883a 	add	r2,r4,r2
  80bc24:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80bc28:	e0fffe03 	ldbu	r3,-8(fp)
  80bc2c:	d0a70f44 	addi	r2,gp,-25539
  80bc30:	1885883a 	add	r2,r3,r2
  80bc34:	10800003 	ldbu	r2,0(r2)
  80bc38:	10803fcc 	andi	r2,r2,255
  80bc3c:	1004c03a 	cmpne	r2,r2,zero
  80bc40:	1000071e 	bne	r2,zero,80bc60 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80bc44:	d0a71217 	ldw	r2,-25528(gp)
  80bc48:	10800d83 	ldbu	r2,54(r2)
  80bc4c:	0084303a 	nor	r2,zero,r2
  80bc50:	1007883a 	mov	r3,r2
  80bc54:	d0a70f03 	ldbu	r2,-25540(gp)
  80bc58:	1884703a 	and	r2,r3,r2
  80bc5c:	d0a70f05 	stb	r2,-25540(gp)
    }
}
  80bc60:	e037883a 	mov	sp,fp
  80bc64:	df000017 	ldw	fp,0(sp)
  80bc68:	dec00104 	addi	sp,sp,4
  80bc6c:	f800283a 	ret

0080bc70 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80bc70:	defffb04 	addi	sp,sp,-20
  80bc74:	df000415 	stw	fp,16(sp)
  80bc78:	df000404 	addi	fp,sp,16
  80bc7c:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80bc80:	d0a71217 	ldw	r2,-25528(gp)
  80bc84:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80bc88:	d0e71217 	ldw	r3,-25528(gp)
  80bc8c:	e0bfff17 	ldw	r2,-4(fp)
  80bc90:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80bc94:	e0bfff17 	ldw	r2,-4(fp)
  80bc98:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80bc9c:	e0bffe17 	ldw	r2,-8(fp)
  80bca0:	10800017 	ldw	r2,0(r2)
  80bca4:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80bca8:	00002006 	br	80bd2c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80bcac:	d0a71217 	ldw	r2,-25528(gp)
  80bcb0:	10800d03 	ldbu	r2,52(r2)
  80bcb4:	11003fcc 	andi	r4,r2,255
  80bcb8:	d0a71217 	ldw	r2,-25528(gp)
  80bcbc:	10800d03 	ldbu	r2,52(r2)
  80bcc0:	10c03fcc 	andi	r3,r2,255
  80bcc4:	e0bffd17 	ldw	r2,-12(fp)
  80bcc8:	1885883a 	add	r2,r3,r2
  80bccc:	10800204 	addi	r2,r2,8
  80bcd0:	10c000c3 	ldbu	r3,3(r2)
  80bcd4:	d0a71217 	ldw	r2,-25528(gp)
  80bcd8:	10800d43 	ldbu	r2,53(r2)
  80bcdc:	1884b03a 	or	r2,r3,r2
  80bce0:	1007883a 	mov	r3,r2
  80bce4:	e0bffd17 	ldw	r2,-12(fp)
  80bce8:	2085883a 	add	r2,r4,r2
  80bcec:	10800204 	addi	r2,r2,8
  80bcf0:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80bcf4:	e0bffd17 	ldw	r2,-12(fp)
  80bcf8:	10c00283 	ldbu	r3,10(r2)
  80bcfc:	d0a71217 	ldw	r2,-25528(gp)
  80bd00:	10800d83 	ldbu	r2,54(r2)
  80bd04:	1884b03a 	or	r2,r3,r2
  80bd08:	1007883a 	mov	r3,r2
  80bd0c:	e0bffd17 	ldw	r2,-12(fp)
  80bd10:	10c00285 	stb	r3,10(r2)
        pevents++;
  80bd14:	e0bffe17 	ldw	r2,-8(fp)
  80bd18:	10800104 	addi	r2,r2,4
  80bd1c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80bd20:	e0bffe17 	ldw	r2,-8(fp)
  80bd24:	10800017 	ldw	r2,0(r2)
  80bd28:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80bd2c:	e0bffd17 	ldw	r2,-12(fp)
  80bd30:	1004c03a 	cmpne	r2,r2,zero
  80bd34:	103fdd1e 	bne	r2,zero,80bcac <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80bd38:	d0a71217 	ldw	r2,-25528(gp)
  80bd3c:	10800d03 	ldbu	r2,52(r2)
  80bd40:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80bd44:	e13ffc03 	ldbu	r4,-16(fp)
  80bd48:	e0fffc03 	ldbu	r3,-16(fp)
  80bd4c:	d0a70f44 	addi	r2,gp,-25539
  80bd50:	1885883a 	add	r2,r3,r2
  80bd54:	10800003 	ldbu	r2,0(r2)
  80bd58:	1007883a 	mov	r3,r2
  80bd5c:	d0a71217 	ldw	r2,-25528(gp)
  80bd60:	10800d43 	ldbu	r2,53(r2)
  80bd64:	0084303a 	nor	r2,zero,r2
  80bd68:	1884703a 	and	r2,r3,r2
  80bd6c:	1007883a 	mov	r3,r2
  80bd70:	d0a70f44 	addi	r2,gp,-25539
  80bd74:	2085883a 	add	r2,r4,r2
  80bd78:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80bd7c:	e0fffc03 	ldbu	r3,-16(fp)
  80bd80:	d0a70f44 	addi	r2,gp,-25539
  80bd84:	1885883a 	add	r2,r3,r2
  80bd88:	10800003 	ldbu	r2,0(r2)
  80bd8c:	10803fcc 	andi	r2,r2,255
  80bd90:	1004c03a 	cmpne	r2,r2,zero
  80bd94:	1000071e 	bne	r2,zero,80bdb4 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80bd98:	d0a71217 	ldw	r2,-25528(gp)
  80bd9c:	10800d83 	ldbu	r2,54(r2)
  80bda0:	0084303a 	nor	r2,zero,r2
  80bda4:	1007883a 	mov	r3,r2
  80bda8:	d0a70f03 	ldbu	r2,-25540(gp)
  80bdac:	1884703a 	and	r2,r3,r2
  80bdb0:	d0a70f05 	stb	r2,-25540(gp)
    }
}
  80bdb4:	e037883a 	mov	sp,fp
  80bdb8:	df000017 	ldw	fp,0(sp)
  80bdbc:	dec00104 	addi	sp,sp,4
  80bdc0:	f800283a 	ret

0080bdc4 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80bdc4:	defffc04 	addi	sp,sp,-16
  80bdc8:	df000315 	stw	fp,12(sp)
  80bdcc:	df000304 	addi	fp,sp,12
  80bdd0:	e13ffe15 	stw	r4,-8(fp)
  80bdd4:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80bdd8:	e0bffe17 	ldw	r2,-8(fp)
  80bddc:	10800d03 	ldbu	r2,52(r2)
  80bde0:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80bde4:	e13ffd03 	ldbu	r4,-12(fp)
  80bde8:	e0fffd03 	ldbu	r3,-12(fp)
  80bdec:	e0bfff17 	ldw	r2,-4(fp)
  80bdf0:	1885883a 	add	r2,r3,r2
  80bdf4:	10800204 	addi	r2,r2,8
  80bdf8:	108000c3 	ldbu	r2,3(r2)
  80bdfc:	1007883a 	mov	r3,r2
  80be00:	e0bffe17 	ldw	r2,-8(fp)
  80be04:	10800d43 	ldbu	r2,53(r2)
  80be08:	0084303a 	nor	r2,zero,r2
  80be0c:	1884703a 	and	r2,r3,r2
  80be10:	1007883a 	mov	r3,r2
  80be14:	e0bfff17 	ldw	r2,-4(fp)
  80be18:	2085883a 	add	r2,r4,r2
  80be1c:	10800204 	addi	r2,r2,8
  80be20:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80be24:	e0fffd03 	ldbu	r3,-12(fp)
  80be28:	e0bfff17 	ldw	r2,-4(fp)
  80be2c:	1885883a 	add	r2,r3,r2
  80be30:	10800204 	addi	r2,r2,8
  80be34:	108000c3 	ldbu	r2,3(r2)
  80be38:	10803fcc 	andi	r2,r2,255
  80be3c:	1004c03a 	cmpne	r2,r2,zero
  80be40:	10000a1e 	bne	r2,zero,80be6c <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80be44:	e0bfff17 	ldw	r2,-4(fp)
  80be48:	10800283 	ldbu	r2,10(r2)
  80be4c:	1007883a 	mov	r3,r2
  80be50:	e0bffe17 	ldw	r2,-8(fp)
  80be54:	10800d83 	ldbu	r2,54(r2)
  80be58:	0084303a 	nor	r2,zero,r2
  80be5c:	1884703a 	and	r2,r3,r2
  80be60:	1007883a 	mov	r3,r2
  80be64:	e0bfff17 	ldw	r2,-4(fp)
  80be68:	10c00285 	stb	r3,10(r2)
    }
}
  80be6c:	e037883a 	mov	sp,fp
  80be70:	df000017 	ldw	fp,0(sp)
  80be74:	dec00104 	addi	sp,sp,4
  80be78:	f800283a 	ret

0080be7c <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80be7c:	defffa04 	addi	sp,sp,-24
  80be80:	df000515 	stw	fp,20(sp)
  80be84:	df000504 	addi	fp,sp,20
  80be88:	e13ffe15 	stw	r4,-8(fp)
  80be8c:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80be90:	e0bffe17 	ldw	r2,-8(fp)
  80be94:	10800d03 	ldbu	r2,52(r2)
  80be98:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80be9c:	e0bffe17 	ldw	r2,-8(fp)
  80bea0:	10800d83 	ldbu	r2,54(r2)
  80bea4:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80bea8:	e0bffe17 	ldw	r2,-8(fp)
  80beac:	10800d43 	ldbu	r2,53(r2)
  80beb0:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80beb4:	e0bfff17 	ldw	r2,-4(fp)
  80beb8:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80bebc:	e0bffd17 	ldw	r2,-12(fp)
  80bec0:	10800017 	ldw	r2,0(r2)
  80bec4:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80bec8:	00002606 	br	80bf64 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80becc:	e13ffb83 	ldbu	r4,-18(fp)
  80bed0:	e0fffb83 	ldbu	r3,-18(fp)
  80bed4:	e0bffc17 	ldw	r2,-16(fp)
  80bed8:	1885883a 	add	r2,r3,r2
  80bedc:	10800204 	addi	r2,r2,8
  80bee0:	108000c3 	ldbu	r2,3(r2)
  80bee4:	1007883a 	mov	r3,r2
  80bee8:	e0bffb03 	ldbu	r2,-20(fp)
  80beec:	0084303a 	nor	r2,zero,r2
  80bef0:	1884703a 	and	r2,r3,r2
  80bef4:	1007883a 	mov	r3,r2
  80bef8:	e0bffc17 	ldw	r2,-16(fp)
  80befc:	2085883a 	add	r2,r4,r2
  80bf00:	10800204 	addi	r2,r2,8
  80bf04:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80bf08:	e0fffb83 	ldbu	r3,-18(fp)
  80bf0c:	e0bffc17 	ldw	r2,-16(fp)
  80bf10:	1885883a 	add	r2,r3,r2
  80bf14:	10800204 	addi	r2,r2,8
  80bf18:	108000c3 	ldbu	r2,3(r2)
  80bf1c:	10803fcc 	andi	r2,r2,255
  80bf20:	1004c03a 	cmpne	r2,r2,zero
  80bf24:	1000091e 	bne	r2,zero,80bf4c <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80bf28:	e0bffc17 	ldw	r2,-16(fp)
  80bf2c:	10800283 	ldbu	r2,10(r2)
  80bf30:	1007883a 	mov	r3,r2
  80bf34:	e0bffb43 	ldbu	r2,-19(fp)
  80bf38:	0084303a 	nor	r2,zero,r2
  80bf3c:	1884703a 	and	r2,r3,r2
  80bf40:	1007883a 	mov	r3,r2
  80bf44:	e0bffc17 	ldw	r2,-16(fp)
  80bf48:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80bf4c:	e0bffd17 	ldw	r2,-12(fp)
  80bf50:	10800104 	addi	r2,r2,4
  80bf54:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80bf58:	e0bffd17 	ldw	r2,-12(fp)
  80bf5c:	10800017 	ldw	r2,0(r2)
  80bf60:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80bf64:	e0bffc17 	ldw	r2,-16(fp)
  80bf68:	1004c03a 	cmpne	r2,r2,zero
  80bf6c:	103fd71e 	bne	r2,zero,80becc <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80bf70:	e037883a 	mov	sp,fp
  80bf74:	df000017 	ldw	fp,0(sp)
  80bf78:	dec00104 	addi	sp,sp,4
  80bf7c:	f800283a 	ret

0080bf80 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80bf80:	defffc04 	addi	sp,sp,-16
  80bf84:	df000315 	stw	fp,12(sp)
  80bf88:	df000304 	addi	fp,sp,12
  80bf8c:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80bf90:	e0bfff17 	ldw	r2,-4(fp)
  80bf94:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80bf98:	e0bfff17 	ldw	r2,-4(fp)
  80bf9c:	108002c4 	addi	r2,r2,11
  80bfa0:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80bfa4:	e03ffd05 	stb	zero,-12(fp)
  80bfa8:	00000806 	br	80bfcc <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80bfac:	e0bffe17 	ldw	r2,-8(fp)
  80bfb0:	10000005 	stb	zero,0(r2)
  80bfb4:	e0bffe17 	ldw	r2,-8(fp)
  80bfb8:	10800044 	addi	r2,r2,1
  80bfbc:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80bfc0:	e0bffd03 	ldbu	r2,-12(fp)
  80bfc4:	10800044 	addi	r2,r2,1
  80bfc8:	e0bffd05 	stb	r2,-12(fp)
  80bfcc:	e0bffd03 	ldbu	r2,-12(fp)
  80bfd0:	108000f0 	cmpltui	r2,r2,3
  80bfd4:	103ff51e 	bne	r2,zero,80bfac <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80bfd8:	e037883a 	mov	sp,fp
  80bfdc:	df000017 	ldw	fp,0(sp)
  80bfe0:	dec00104 	addi	sp,sp,4
  80bfe4:	f800283a 	ret

0080bfe8 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80bfe8:	defffb04 	addi	sp,sp,-20
  80bfec:	dfc00415 	stw	ra,16(sp)
  80bff0:	df000315 	stw	fp,12(sp)
  80bff4:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80bff8:	010020b4 	movhi	r4,130
  80bffc:	213da904 	addi	r4,r4,-2396
  80c000:	0142d004 	movi	r5,2880
  80c004:	080c34c0 	call	80c34c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80c008:	008020b4 	movhi	r2,130
  80c00c:	10bda904 	addi	r2,r2,-2396
  80c010:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80c014:	008020b4 	movhi	r2,130
  80c018:	10bdb504 	addi	r2,r2,-2348
  80c01c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c020:	e03fff0d 	sth	zero,-4(fp)
  80c024:	00001306 	br	80c074 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80c028:	e0bffe17 	ldw	r2,-8(fp)
  80c02c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80c030:	e0fffe17 	ldw	r3,-8(fp)
  80c034:	e0bffd17 	ldw	r2,-12(fp)
  80c038:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80c03c:	e0fffe17 	ldw	r3,-8(fp)
  80c040:	00800fc4 	movi	r2,63
  80c044:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80c048:	e0bffe17 	ldw	r2,-8(fp)
  80c04c:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80c050:	e0bffe17 	ldw	r2,-8(fp)
  80c054:	10800c04 	addi	r2,r2,48
  80c058:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80c05c:	e0bffd17 	ldw	r2,-12(fp)
  80c060:	10800c04 	addi	r2,r2,48
  80c064:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80c068:	e0bfff0b 	ldhu	r2,-4(fp)
  80c06c:	10800044 	addi	r2,r2,1
  80c070:	e0bfff0d 	sth	r2,-4(fp)
  80c074:	e0bfff0b 	ldhu	r2,-4(fp)
  80c078:	10800ef0 	cmpltui	r2,r2,59
  80c07c:	103fea1e 	bne	r2,zero,80c028 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80c080:	e0bffe17 	ldw	r2,-8(fp)
  80c084:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80c088:	e0bffe17 	ldw	r2,-8(fp)
  80c08c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80c090:	e0fffe17 	ldw	r3,-8(fp)
  80c094:	00800fc4 	movi	r2,63
  80c098:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80c09c:	e0bffe17 	ldw	r2,-8(fp)
  80c0a0:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80c0a4:	008020b4 	movhi	r2,130
  80c0a8:	10bda904 	addi	r2,r2,-2396
  80c0ac:	d0a71015 	stw	r2,-25536(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80c0b0:	e037883a 	mov	sp,fp
  80c0b4:	dfc00117 	ldw	ra,4(sp)
  80c0b8:	df000017 	ldw	fp,0(sp)
  80c0bc:	dec00204 	addi	sp,sp,8
  80c0c0:	f800283a 	ret

0080c0c4 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80c0c4:	deffff04 	addi	sp,sp,-4
  80c0c8:	df000015 	stw	fp,0(sp)
  80c0cc:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80c0d0:	d0271315 	stw	zero,-25524(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80c0d4:	d0271105 	stb	zero,-25532(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80c0d8:	d0270305 	stb	zero,-25588(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80c0dc:	d0270b45 	stb	zero,-25555(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80c0e0:	d0270345 	stb	zero,-25587(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80c0e4:	d0270815 	stw	zero,-25568(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80c0e8:	d0270415 	stw	zero,-25584(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80c0ec:	d0271615 	stw	zero,-25512(gp)
    OSIdleCtrMax  = 0L;
  80c0f0:	d0270915 	stw	zero,-25564(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80c0f4:	d0271505 	stb	zero,-25516(gp)
#endif
}
  80c0f8:	e037883a 	mov	sp,fp
  80c0fc:	df000017 	ldw	fp,0(sp)
  80c100:	dec00104 	addi	sp,sp,4
  80c104:	f800283a 	ret

0080c108 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80c108:	defffd04 	addi	sp,sp,-12
  80c10c:	df000215 	stw	fp,8(sp)
  80c110:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80c114:	d0270f05 	stb	zero,-25540(gp)
    prdytbl       = &OSRdyTbl[0];
  80c118:	d0a70f44 	addi	r2,gp,-25539
  80c11c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c120:	e03fff05 	stb	zero,-4(fp)
  80c124:	00000806 	br	80c148 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80c128:	e0bffe17 	ldw	r2,-8(fp)
  80c12c:	10000005 	stb	zero,0(r2)
  80c130:	e0bffe17 	ldw	r2,-8(fp)
  80c134:	10800044 	addi	r2,r2,1
  80c138:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80c13c:	e0bfff03 	ldbu	r2,-4(fp)
  80c140:	10800044 	addi	r2,r2,1
  80c144:	e0bfff05 	stb	r2,-4(fp)
  80c148:	e0bfff03 	ldbu	r2,-4(fp)
  80c14c:	108000f0 	cmpltui	r2,r2,3
  80c150:	103ff51e 	bne	r2,zero,80c128 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80c154:	d0270545 	stb	zero,-25579(gp)
    OSPrioHighRdy = 0;
  80c158:	d0270505 	stb	zero,-25580(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80c15c:	d0270d15 	stw	zero,-25548(gp)
    OSTCBCur      = (OS_TCB *)0;
  80c160:	d0271215 	stw	zero,-25528(gp)
}
  80c164:	e037883a 	mov	sp,fp
  80c168:	df000017 	ldw	fp,0(sp)
  80c16c:	dec00104 	addi	sp,sp,4
  80c170:	f800283a 	ret

0080c174 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80c174:	defff804 	addi	sp,sp,-32
  80c178:	dfc00715 	stw	ra,28(sp)
  80c17c:	df000615 	stw	fp,24(sp)
  80c180:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80c184:	018020b4 	movhi	r6,130
  80c188:	31bda804 	addi	r6,r6,-2400
  80c18c:	00bfffd4 	movui	r2,65535
  80c190:	d8800015 	stw	r2,0(sp)
  80c194:	008020b4 	movhi	r2,130
  80c198:	10bba904 	addi	r2,r2,-4444
  80c19c:	d8800115 	stw	r2,4(sp)
  80c1a0:	00808004 	movi	r2,512
  80c1a4:	d8800215 	stw	r2,8(sp)
  80c1a8:	d8000315 	stw	zero,12(sp)
  80c1ac:	008000c4 	movi	r2,3
  80c1b0:	d8800415 	stw	r2,16(sp)
  80c1b4:	01002074 	movhi	r4,129
  80c1b8:	21318a04 	addi	r4,r4,-14808
  80c1bc:	000b883a 	mov	r5,zero
  80c1c0:	01c00504 	movi	r7,20
  80c1c4:	08114080 	call	811408 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80c1c8:	01402074 	movhi	r5,129
  80c1cc:	29577c04 	addi	r5,r5,24048
  80c1d0:	01000504 	movi	r4,20
  80c1d4:	e1bfff04 	addi	r6,fp,-4
  80c1d8:	0811d3c0 	call	811d3c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80c1dc:	e037883a 	mov	sp,fp
  80c1e0:	dfc00117 	ldw	ra,4(sp)
  80c1e4:	df000017 	ldw	fp,0(sp)
  80c1e8:	dec00204 	addi	sp,sp,8
  80c1ec:	f800283a 	ret

0080c1f0 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80c1f0:	defff804 	addi	sp,sp,-32
  80c1f4:	dfc00715 	stw	ra,28(sp)
  80c1f8:	df000615 	stw	fp,24(sp)
  80c1fc:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80c200:	018020b4 	movhi	r6,130
  80c204:	31bb3004 	addi	r6,r6,-4928
  80c208:	00bfff94 	movui	r2,65534
  80c20c:	d8800015 	stw	r2,0(sp)
  80c210:	008020b4 	movhi	r2,130
  80c214:	10b93104 	addi	r2,r2,-6972
  80c218:	d8800115 	stw	r2,4(sp)
  80c21c:	00808004 	movi	r2,512
  80c220:	d8800215 	stw	r2,8(sp)
  80c224:	d8000315 	stw	zero,12(sp)
  80c228:	008000c4 	movi	r2,3
  80c22c:	d8800415 	stw	r2,16(sp)
  80c230:	01002074 	movhi	r4,129
  80c234:	2131a104 	addi	r4,r4,-14716
  80c238:	000b883a 	mov	r5,zero
  80c23c:	01c004c4 	movi	r7,19
  80c240:	08114080 	call	811408 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80c244:	01402074 	movhi	r5,129
  80c248:	29578004 	addi	r5,r5,24064
  80c24c:	010004c4 	movi	r4,19
  80c250:	e1bfff04 	addi	r6,fp,-4
  80c254:	0811d3c0 	call	811d3c <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80c258:	e037883a 	mov	sp,fp
  80c25c:	dfc00117 	ldw	ra,4(sp)
  80c260:	df000017 	ldw	fp,0(sp)
  80c264:	dec00204 	addi	sp,sp,8
  80c268:	f800283a 	ret

0080c26c <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80c26c:	defffb04 	addi	sp,sp,-20
  80c270:	dfc00415 	stw	ra,16(sp)
  80c274:	df000315 	stw	fp,12(sp)
  80c278:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80c27c:	010020b4 	movhi	r4,130
  80c280:	21007904 	addi	r4,r4,484
  80c284:	01414404 	movi	r5,1296
  80c288:	080c34c0 	call	80c34c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80c28c:	010020b4 	movhi	r4,130
  80c290:	2101bd04 	addi	r4,r4,1780
  80c294:	01401504 	movi	r5,84
  80c298:	080c34c0 	call	80c34c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80c29c:	008020b4 	movhi	r2,130
  80c2a0:	10807904 	addi	r2,r2,484
  80c2a4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80c2a8:	008020b4 	movhi	r2,130
  80c2ac:	10809404 	addi	r2,r2,592
  80c2b0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c2b4:	e03fff05 	stb	zero,-4(fp)
  80c2b8:	00001106 	br	80c300 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80c2bc:	e0fffe17 	ldw	r3,-8(fp)
  80c2c0:	e0bffd17 	ldw	r2,-12(fp)
  80c2c4:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80c2c8:	e0fffe17 	ldw	r3,-8(fp)
  80c2cc:	00800fc4 	movi	r2,63
  80c2d0:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c2d4:	e0bffe17 	ldw	r2,-8(fp)
  80c2d8:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80c2dc:	e0bffe17 	ldw	r2,-8(fp)
  80c2e0:	10801b04 	addi	r2,r2,108
  80c2e4:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80c2e8:	e0bffd17 	ldw	r2,-12(fp)
  80c2ec:	10801b04 	addi	r2,r2,108
  80c2f0:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80c2f4:	e0bfff03 	ldbu	r2,-4(fp)
  80c2f8:	10800044 	addi	r2,r2,1
  80c2fc:	e0bfff05 	stb	r2,-4(fp)
  80c300:	e0bfff03 	ldbu	r2,-4(fp)
  80c304:	108002f0 	cmpltui	r2,r2,11
  80c308:	103fec1e 	bne	r2,zero,80c2bc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80c30c:	e0bffe17 	ldw	r2,-8(fp)
  80c310:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80c314:	e0fffe17 	ldw	r3,-8(fp)
  80c318:	00800fc4 	movi	r2,63
  80c31c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c320:	e0bffe17 	ldw	r2,-8(fp)
  80c324:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80c328:	d0270615 	stw	zero,-25576(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80c32c:	008020b4 	movhi	r2,130
  80c330:	10807904 	addi	r2,r2,484
  80c334:	d0a70a15 	stw	r2,-25560(gp)
}
  80c338:	e037883a 	mov	sp,fp
  80c33c:	dfc00117 	ldw	ra,4(sp)
  80c340:	df000017 	ldw	fp,0(sp)
  80c344:	dec00204 	addi	sp,sp,8
  80c348:	f800283a 	ret

0080c34c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80c34c:	defffd04 	addi	sp,sp,-12
  80c350:	df000215 	stw	fp,8(sp)
  80c354:	df000204 	addi	fp,sp,8
  80c358:	e13ffe15 	stw	r4,-8(fp)
  80c35c:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80c360:	00000806 	br	80c384 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80c364:	e0bffe17 	ldw	r2,-8(fp)
  80c368:	10000005 	stb	zero,0(r2)
  80c36c:	e0bffe17 	ldw	r2,-8(fp)
  80c370:	10800044 	addi	r2,r2,1
  80c374:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c378:	e0bfff0b 	ldhu	r2,-4(fp)
  80c37c:	10bfffc4 	addi	r2,r2,-1
  80c380:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80c384:	e0bfff0b 	ldhu	r2,-4(fp)
  80c388:	1004c03a 	cmpne	r2,r2,zero
  80c38c:	103ff51e 	bne	r2,zero,80c364 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80c390:	e037883a 	mov	sp,fp
  80c394:	df000017 	ldw	fp,0(sp)
  80c398:	dec00104 	addi	sp,sp,4
  80c39c:	f800283a 	ret

0080c3a0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80c3a0:	defffc04 	addi	sp,sp,-16
  80c3a4:	df000315 	stw	fp,12(sp)
  80c3a8:	df000304 	addi	fp,sp,12
  80c3ac:	e13ffd15 	stw	r4,-12(fp)
  80c3b0:	e17ffe15 	stw	r5,-8(fp)
  80c3b4:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80c3b8:	00000d06 	br	80c3f0 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80c3bc:	e0bffe17 	ldw	r2,-8(fp)
  80c3c0:	10c00003 	ldbu	r3,0(r2)
  80c3c4:	e0bffd17 	ldw	r2,-12(fp)
  80c3c8:	10c00005 	stb	r3,0(r2)
  80c3cc:	e0bffd17 	ldw	r2,-12(fp)
  80c3d0:	10800044 	addi	r2,r2,1
  80c3d4:	e0bffd15 	stw	r2,-12(fp)
  80c3d8:	e0bffe17 	ldw	r2,-8(fp)
  80c3dc:	10800044 	addi	r2,r2,1
  80c3e0:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80c3e4:	e0bfff0b 	ldhu	r2,-4(fp)
  80c3e8:	10bfffc4 	addi	r2,r2,-1
  80c3ec:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80c3f0:	e0bfff0b 	ldhu	r2,-4(fp)
  80c3f4:	1004c03a 	cmpne	r2,r2,zero
  80c3f8:	103ff01e 	bne	r2,zero,80c3bc <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80c3fc:	e037883a 	mov	sp,fp
  80c400:	df000017 	ldw	fp,0(sp)
  80c404:	dec00104 	addi	sp,sp,4
  80c408:	f800283a 	ret

0080c40c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80c40c:	defffb04 	addi	sp,sp,-20
  80c410:	dfc00415 	stw	ra,16(sp)
  80c414:	df000315 	stw	fp,12(sp)
  80c418:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80c41c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c420:	0005303a 	rdctl	r2,status
  80c424:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c428:	e0fffe17 	ldw	r3,-8(fp)
  80c42c:	00bfff84 	movi	r2,-2
  80c430:	1884703a 	and	r2,r3,r2
  80c434:	1001703a 	wrctl	status,r2
  
  return context;
  80c438:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80c43c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80c440:	d0a71103 	ldbu	r2,-25532(gp)
  80c444:	10803fcc 	andi	r2,r2,255
  80c448:	1004c03a 	cmpne	r2,r2,zero
  80c44c:	10001b1e 	bne	r2,zero,80c4bc <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80c450:	d0a70303 	ldbu	r2,-25588(gp)
  80c454:	10803fcc 	andi	r2,r2,255
  80c458:	1004c03a 	cmpne	r2,r2,zero
  80c45c:	1000171e 	bne	r2,zero,80c4bc <OS_Sched+0xb0>
            OS_SchedNew();
  80c460:	080c4e00 	call	80c4e0 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80c464:	d0a70503 	ldbu	r2,-25580(gp)
  80c468:	d0e70543 	ldbu	r3,-25579(gp)
  80c46c:	11003fcc 	andi	r4,r2,255
  80c470:	18803fcc 	andi	r2,r3,255
  80c474:	20801126 	beq	r4,r2,80c4bc <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80c478:	d0a70503 	ldbu	r2,-25580(gp)
  80c47c:	10803fcc 	andi	r2,r2,255
  80c480:	00c020b4 	movhi	r3,130
  80c484:	18c1bd04 	addi	r3,r3,1780
  80c488:	1085883a 	add	r2,r2,r2
  80c48c:	1085883a 	add	r2,r2,r2
  80c490:	10c5883a 	add	r2,r2,r3
  80c494:	10800017 	ldw	r2,0(r2)
  80c498:	d0a70d15 	stw	r2,-25548(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80c49c:	d0e70d17 	ldw	r3,-25548(gp)
  80c4a0:	18800e17 	ldw	r2,56(r3)
  80c4a4:	10800044 	addi	r2,r2,1
  80c4a8:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80c4ac:	d0a70817 	ldw	r2,-25568(gp)
  80c4b0:	10800044 	addi	r2,r2,1
  80c4b4:	d0a70815 	stw	r2,-25568(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80c4b8:	0814dd00 	call	814dd0 <OSCtxSw>
  80c4bc:	e0bfff17 	ldw	r2,-4(fp)
  80c4c0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c4c4:	e0bffd17 	ldw	r2,-12(fp)
  80c4c8:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80c4cc:	e037883a 	mov	sp,fp
  80c4d0:	dfc00117 	ldw	ra,4(sp)
  80c4d4:	df000017 	ldw	fp,0(sp)
  80c4d8:	dec00204 	addi	sp,sp,8
  80c4dc:	f800283a 	ret

0080c4e0 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80c4e0:	defffe04 	addi	sp,sp,-8
  80c4e4:	df000115 	stw	fp,4(sp)
  80c4e8:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80c4ec:	d0a70f03 	ldbu	r2,-25540(gp)
  80c4f0:	10c03fcc 	andi	r3,r2,255
  80c4f4:	00802074 	movhi	r2,129
  80c4f8:	10973c04 	addi	r2,r2,23792
  80c4fc:	10c5883a 	add	r2,r2,r3
  80c500:	10800003 	ldbu	r2,0(r2)
  80c504:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80c508:	e0bfff03 	ldbu	r2,-4(fp)
  80c50c:	100490fa 	slli	r2,r2,3
  80c510:	1009883a 	mov	r4,r2
  80c514:	e0ffff03 	ldbu	r3,-4(fp)
  80c518:	d0a70f44 	addi	r2,gp,-25539
  80c51c:	1885883a 	add	r2,r3,r2
  80c520:	10800003 	ldbu	r2,0(r2)
  80c524:	10c03fcc 	andi	r3,r2,255
  80c528:	00802074 	movhi	r2,129
  80c52c:	10973c04 	addi	r2,r2,23792
  80c530:	10c5883a 	add	r2,r2,r3
  80c534:	10800003 	ldbu	r2,0(r2)
  80c538:	2085883a 	add	r2,r4,r2
  80c53c:	d0a70505 	stb	r2,-25580(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80c540:	e037883a 	mov	sp,fp
  80c544:	df000017 	ldw	fp,0(sp)
  80c548:	dec00104 	addi	sp,sp,4
  80c54c:	f800283a 	ret

0080c550 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80c550:	defffc04 	addi	sp,sp,-16
  80c554:	df000315 	stw	fp,12(sp)
  80c558:	df000304 	addi	fp,sp,12
  80c55c:	e13ffe15 	stw	r4,-8(fp)
  80c560:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80c564:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80c568:	00000d06 	br	80c5a0 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80c56c:	e0bfff17 	ldw	r2,-4(fp)
  80c570:	10c00003 	ldbu	r3,0(r2)
  80c574:	e0bffe17 	ldw	r2,-8(fp)
  80c578:	10c00005 	stb	r3,0(r2)
  80c57c:	e0bffe17 	ldw	r2,-8(fp)
  80c580:	10800044 	addi	r2,r2,1
  80c584:	e0bffe15 	stw	r2,-8(fp)
  80c588:	e0bfff17 	ldw	r2,-4(fp)
  80c58c:	10800044 	addi	r2,r2,1
  80c590:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80c594:	e0bffd03 	ldbu	r2,-12(fp)
  80c598:	10800044 	addi	r2,r2,1
  80c59c:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80c5a0:	e0bfff17 	ldw	r2,-4(fp)
  80c5a4:	10800003 	ldbu	r2,0(r2)
  80c5a8:	10803fcc 	andi	r2,r2,255
  80c5ac:	1004c03a 	cmpne	r2,r2,zero
  80c5b0:	103fee1e 	bne	r2,zero,80c56c <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80c5b4:	e0bffe17 	ldw	r2,-8(fp)
  80c5b8:	10000005 	stb	zero,0(r2)
    return (len);
  80c5bc:	e0bffd03 	ldbu	r2,-12(fp)
}
  80c5c0:	e037883a 	mov	sp,fp
  80c5c4:	df000017 	ldw	fp,0(sp)
  80c5c8:	dec00104 	addi	sp,sp,4
  80c5cc:	f800283a 	ret

0080c5d0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80c5d0:	defffd04 	addi	sp,sp,-12
  80c5d4:	df000215 	stw	fp,8(sp)
  80c5d8:	df000204 	addi	fp,sp,8
  80c5dc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80c5e0:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80c5e4:	00000606 	br	80c600 <OS_StrLen+0x30>
        psrc++;
  80c5e8:	e0bfff17 	ldw	r2,-4(fp)
  80c5ec:	10800044 	addi	r2,r2,1
  80c5f0:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80c5f4:	e0bffe03 	ldbu	r2,-8(fp)
  80c5f8:	10800044 	addi	r2,r2,1
  80c5fc:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80c600:	e0bfff17 	ldw	r2,-4(fp)
  80c604:	10800003 	ldbu	r2,0(r2)
  80c608:	10803fcc 	andi	r2,r2,255
  80c60c:	1004c03a 	cmpne	r2,r2,zero
  80c610:	103ff51e 	bne	r2,zero,80c5e8 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80c614:	e0bffe03 	ldbu	r2,-8(fp)
}
  80c618:	e037883a 	mov	sp,fp
  80c61c:	df000017 	ldw	fp,0(sp)
  80c620:	dec00104 	addi	sp,sp,4
  80c624:	f800283a 	ret

0080c628 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80c628:	defffa04 	addi	sp,sp,-24
  80c62c:	dfc00515 	stw	ra,20(sp)
  80c630:	df000415 	stw	fp,16(sp)
  80c634:	df000404 	addi	fp,sp,16
  80c638:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c63c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c640:	0005303a 	rdctl	r2,status
  80c644:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c648:	e0fffd17 	ldw	r3,-12(fp)
  80c64c:	00bfff84 	movi	r2,-2
  80c650:	1884703a 	and	r2,r3,r2
  80c654:	1001703a 	wrctl	status,r2
  
  return context;
  80c658:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80c65c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80c660:	d0a70417 	ldw	r2,-25584(gp)
  80c664:	10800044 	addi	r2,r2,1
  80c668:	d0a70415 	stw	r2,-25584(gp)
  80c66c:	e0bffe17 	ldw	r2,-8(fp)
  80c670:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c674:	e0bffc17 	ldw	r2,-16(fp)
  80c678:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80c67c:	081527c0 	call	81527c <OSTaskIdleHook>
    }
  80c680:	003fef06 	br	80c640 <OS_TaskIdle+0x18>

0080c684 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80c684:	defffa04 	addi	sp,sp,-24
  80c688:	dfc00515 	stw	ra,20(sp)
  80c68c:	df000415 	stw	fp,16(sp)
  80c690:	df000404 	addi	fp,sp,16
  80c694:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80c698:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80c69c:	00000206 	br	80c6a8 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80c6a0:	01003204 	movi	r4,200
  80c6a4:	08127000 	call	812700 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80c6a8:	d0a71503 	ldbu	r2,-25516(gp)
  80c6ac:	10803fcc 	andi	r2,r2,255
  80c6b0:	1005003a 	cmpeq	r2,r2,zero
  80c6b4:	103ffa1e 	bne	r2,zero,80c6a0 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80c6b8:	d1270917 	ldw	r4,-25564(gp)
  80c6bc:	01401904 	movi	r5,100
  80c6c0:	08095b40 	call	8095b4 <__udivsi3>
  80c6c4:	d0a70915 	stw	r2,-25564(gp)
    if (OSIdleCtrMax == 0L) {
  80c6c8:	d0a70917 	ldw	r2,-25564(gp)
  80c6cc:	1004c03a 	cmpne	r2,r2,zero
  80c6d0:	1000031e 	bne	r2,zero,80c6e0 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80c6d4:	d0270b05 	stb	zero,-25556(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80c6d8:	01003fc4 	movi	r4,255
  80c6dc:	08123140 	call	812314 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c6e0:	0005303a 	rdctl	r2,status
  80c6e4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c6e8:	e0fffd17 	ldw	r3,-12(fp)
  80c6ec:	00bfff84 	movi	r2,-2
  80c6f0:	1884703a 	and	r2,r3,r2
  80c6f4:	1001703a 	wrctl	status,r2
  
  return context;
  80c6f8:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80c6fc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80c700:	d0a70417 	ldw	r2,-25584(gp)
  80c704:	d0a71615 	stw	r2,-25512(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80c708:	d0270415 	stw	zero,-25584(gp)
  80c70c:	e0bffe17 	ldw	r2,-8(fp)
  80c710:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c714:	e0bffc17 	ldw	r2,-16(fp)
  80c718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80c71c:	d1271617 	ldw	r4,-25512(gp)
  80c720:	d1670917 	ldw	r5,-25564(gp)
  80c724:	08095b40 	call	8095b4 <__udivsi3>
  80c728:	1007883a 	mov	r3,r2
  80c72c:	00801904 	movi	r2,100
  80c730:	10c5c83a 	sub	r2,r2,r3
  80c734:	d0a70b05 	stb	r2,-25556(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80c738:	081520c0 	call	81520c <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80c73c:	080c74c0 	call	80c74c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80c740:	01001904 	movi	r4,100
  80c744:	08127000 	call	812700 <OSTimeDly>
    }
  80c748:	003fe506 	br	80c6e0 <OS_TaskStat+0x5c>

0080c74c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80c74c:	defffa04 	addi	sp,sp,-24
  80c750:	dfc00515 	stw	ra,20(sp)
  80c754:	df000415 	stw	fp,16(sp)
  80c758:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80c75c:	e03ffc05 	stb	zero,-16(fp)
  80c760:	00002406 	br	80c7f4 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80c764:	e13ffc03 	ldbu	r4,-16(fp)
  80c768:	e17ffe04 	addi	r5,fp,-8
  80c76c:	08121180 	call	812118 <OSTaskStkChk>
  80c770:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80c774:	e0bffc43 	ldbu	r2,-15(fp)
  80c778:	1004c03a 	cmpne	r2,r2,zero
  80c77c:	10001a1e 	bne	r2,zero,80c7e8 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80c780:	e0bffc03 	ldbu	r2,-16(fp)
  80c784:	00c020b4 	movhi	r3,130
  80c788:	18c1bd04 	addi	r3,r3,1780
  80c78c:	1085883a 	add	r2,r2,r2
  80c790:	1085883a 	add	r2,r2,r2
  80c794:	10c5883a 	add	r2,r2,r3
  80c798:	10800017 	ldw	r2,0(r2)
  80c79c:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80c7a0:	e0bffd17 	ldw	r2,-12(fp)
  80c7a4:	1005003a 	cmpeq	r2,r2,zero
  80c7a8:	10000f1e 	bne	r2,zero,80c7e8 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80c7ac:	e0bffd17 	ldw	r2,-12(fp)
  80c7b0:	10800060 	cmpeqi	r2,r2,1
  80c7b4:	10000c1e 	bne	r2,zero,80c7e8 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80c7b8:	e0bffd17 	ldw	r2,-12(fp)
  80c7bc:	10c00217 	ldw	r3,8(r2)
  80c7c0:	e0bffd17 	ldw	r2,-12(fp)
  80c7c4:	10800317 	ldw	r2,12(r2)
  80c7c8:	1085883a 	add	r2,r2,r2
  80c7cc:	1085883a 	add	r2,r2,r2
  80c7d0:	1887883a 	add	r3,r3,r2
  80c7d4:	e0bffd17 	ldw	r2,-12(fp)
  80c7d8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80c7dc:	e0ffff17 	ldw	r3,-4(fp)
  80c7e0:	e0bffd17 	ldw	r2,-12(fp)
  80c7e4:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80c7e8:	e0bffc03 	ldbu	r2,-16(fp)
  80c7ec:	10800044 	addi	r2,r2,1
  80c7f0:	e0bffc05 	stb	r2,-16(fp)
  80c7f4:	e0bffc03 	ldbu	r2,-16(fp)
  80c7f8:	10800570 	cmpltui	r2,r2,21
  80c7fc:	103fd91e 	bne	r2,zero,80c764 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80c800:	e037883a 	mov	sp,fp
  80c804:	dfc00117 	ldw	ra,4(sp)
  80c808:	df000017 	ldw	fp,0(sp)
  80c80c:	dec00204 	addi	sp,sp,8
  80c810:	f800283a 	ret

0080c814 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80c814:	defff104 	addi	sp,sp,-60
  80c818:	dfc00e15 	stw	ra,56(sp)
  80c81c:	df000d15 	stw	fp,52(sp)
  80c820:	df000d04 	addi	fp,sp,52
  80c824:	e17ffb15 	stw	r5,-20(fp)
  80c828:	e1bffc15 	stw	r6,-16(fp)
  80c82c:	e0800417 	ldw	r2,16(fp)
  80c830:	e13ffa05 	stb	r4,-24(fp)
  80c834:	e1fffd0d 	sth	r7,-12(fp)
  80c838:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80c83c:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c840:	0005303a 	rdctl	r2,status
  80c844:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c848:	e0fff717 	ldw	r3,-36(fp)
  80c84c:	00bfff84 	movi	r2,-2
  80c850:	1884703a 	and	r2,r3,r2
  80c854:	1001703a 	wrctl	status,r2
  
  return context;
  80c858:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80c85c:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80c860:	d0a70a17 	ldw	r2,-25560(gp)
  80c864:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80c868:	e0bff917 	ldw	r2,-28(fp)
  80c86c:	1005003a 	cmpeq	r2,r2,zero
  80c870:	1000941e 	bne	r2,zero,80cac4 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80c874:	e0bff917 	ldw	r2,-28(fp)
  80c878:	10800517 	ldw	r2,20(r2)
  80c87c:	d0a70a15 	stw	r2,-25560(gp)
  80c880:	e0bff817 	ldw	r2,-32(fp)
  80c884:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80c888:	e0bff617 	ldw	r2,-40(fp)
  80c88c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80c890:	e0fff917 	ldw	r3,-28(fp)
  80c894:	e0bffb17 	ldw	r2,-20(fp)
  80c898:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80c89c:	e0fff917 	ldw	r3,-28(fp)
  80c8a0:	e0bffa03 	ldbu	r2,-24(fp)
  80c8a4:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80c8a8:	e0bff917 	ldw	r2,-28(fp)
  80c8ac:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80c8b0:	e0bff917 	ldw	r2,-28(fp)
  80c8b4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80c8b8:	e0bff917 	ldw	r2,-28(fp)
  80c8bc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80c8c0:	e0fff917 	ldw	r3,-28(fp)
  80c8c4:	e0800317 	ldw	r2,12(fp)
  80c8c8:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80c8cc:	e0fff917 	ldw	r3,-28(fp)
  80c8d0:	e0800217 	ldw	r2,8(fp)
  80c8d4:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80c8d8:	e0fff917 	ldw	r3,-28(fp)
  80c8dc:	e0bffc17 	ldw	r2,-16(fp)
  80c8e0:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80c8e4:	e0fff917 	ldw	r3,-28(fp)
  80c8e8:	e0bffe0b 	ldhu	r2,-8(fp)
  80c8ec:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80c8f0:	e0fff917 	ldw	r3,-28(fp)
  80c8f4:	e0bffd0b 	ldhu	r2,-12(fp)
  80c8f8:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80c8fc:	e0bff917 	ldw	r2,-28(fp)
  80c900:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80c904:	e0bffa03 	ldbu	r2,-24(fp)
  80c908:	1004d0fa 	srli	r2,r2,3
  80c90c:	1007883a 	mov	r3,r2
  80c910:	e0bff917 	ldw	r2,-28(fp)
  80c914:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80c918:	e0bffa03 	ldbu	r2,-24(fp)
  80c91c:	108001cc 	andi	r2,r2,7
  80c920:	1007883a 	mov	r3,r2
  80c924:	e0bff917 	ldw	r2,-28(fp)
  80c928:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80c92c:	e0bff917 	ldw	r2,-28(fp)
  80c930:	10800d03 	ldbu	r2,52(r2)
  80c934:	10c03fcc 	andi	r3,r2,255
  80c938:	00800044 	movi	r2,1
  80c93c:	10c4983a 	sll	r2,r2,r3
  80c940:	1007883a 	mov	r3,r2
  80c944:	e0bff917 	ldw	r2,-28(fp)
  80c948:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80c94c:	e0bff917 	ldw	r2,-28(fp)
  80c950:	10800cc3 	ldbu	r2,51(r2)
  80c954:	10c03fcc 	andi	r3,r2,255
  80c958:	00800044 	movi	r2,1
  80c95c:	10c4983a 	sll	r2,r2,r3
  80c960:	1007883a 	mov	r3,r2
  80c964:	e0bff917 	ldw	r2,-28(fp)
  80c968:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80c96c:	e0bff917 	ldw	r2,-28(fp)
  80c970:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80c974:	e0bff917 	ldw	r2,-28(fp)
  80c978:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80c97c:	e0bff917 	ldw	r2,-28(fp)
  80c980:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80c984:	e0bff917 	ldw	r2,-28(fp)
  80c988:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80c98c:	e0bff917 	ldw	r2,-28(fp)
  80c990:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80c994:	e0bff917 	ldw	r2,-28(fp)
  80c998:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80c99c:	e0bff917 	ldw	r2,-28(fp)
  80c9a0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80c9a4:	e0bff917 	ldw	r2,-28(fp)
  80c9a8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80c9ac:	e0bff917 	ldw	r2,-28(fp)
  80c9b0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80c9b4:	e0fff917 	ldw	r3,-28(fp)
  80c9b8:	00800fc4 	movi	r2,63
  80c9bc:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80c9c0:	e0bff917 	ldw	r2,-28(fp)
  80c9c4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80c9c8:	e13ff917 	ldw	r4,-28(fp)
  80c9cc:	08152980 	call	815298 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80c9d0:	e13ff917 	ldw	r4,-28(fp)
  80c9d4:	08151b00 	call	8151b0 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80c9d8:	0005303a 	rdctl	r2,status
  80c9dc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80c9e0:	e0fff517 	ldw	r3,-44(fp)
  80c9e4:	00bfff84 	movi	r2,-2
  80c9e8:	1884703a 	and	r2,r3,r2
  80c9ec:	1001703a 	wrctl	status,r2
  
  return context;
  80c9f0:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80c9f4:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80c9f8:	e0bffa03 	ldbu	r2,-24(fp)
  80c9fc:	00c020b4 	movhi	r3,130
  80ca00:	18c1bd04 	addi	r3,r3,1780
  80ca04:	1085883a 	add	r2,r2,r2
  80ca08:	1085883a 	add	r2,r2,r2
  80ca0c:	10c7883a 	add	r3,r2,r3
  80ca10:	e0bff917 	ldw	r2,-28(fp)
  80ca14:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80ca18:	d0e70617 	ldw	r3,-25576(gp)
  80ca1c:	e0bff917 	ldw	r2,-28(fp)
  80ca20:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80ca24:	e0bff917 	ldw	r2,-28(fp)
  80ca28:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80ca2c:	d0a70617 	ldw	r2,-25576(gp)
  80ca30:	1005003a 	cmpeq	r2,r2,zero
  80ca34:	1000031e 	bne	r2,zero,80ca44 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80ca38:	d0e70617 	ldw	r3,-25576(gp)
  80ca3c:	e0bff917 	ldw	r2,-28(fp)
  80ca40:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80ca44:	e0bff917 	ldw	r2,-28(fp)
  80ca48:	d0a70615 	stw	r2,-25576(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80ca4c:	e0bff917 	ldw	r2,-28(fp)
  80ca50:	10c00d83 	ldbu	r3,54(r2)
  80ca54:	d0a70f03 	ldbu	r2,-25540(gp)
  80ca58:	1884b03a 	or	r2,r3,r2
  80ca5c:	d0a70f05 	stb	r2,-25540(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80ca60:	e0bff917 	ldw	r2,-28(fp)
  80ca64:	10800d03 	ldbu	r2,52(r2)
  80ca68:	11003fcc 	andi	r4,r2,255
  80ca6c:	e0bff917 	ldw	r2,-28(fp)
  80ca70:	10800d03 	ldbu	r2,52(r2)
  80ca74:	10c03fcc 	andi	r3,r2,255
  80ca78:	d0a70f44 	addi	r2,gp,-25539
  80ca7c:	1885883a 	add	r2,r3,r2
  80ca80:	10c00003 	ldbu	r3,0(r2)
  80ca84:	e0bff917 	ldw	r2,-28(fp)
  80ca88:	10800d43 	ldbu	r2,53(r2)
  80ca8c:	1884b03a 	or	r2,r3,r2
  80ca90:	1007883a 	mov	r3,r2
  80ca94:	d0a70f44 	addi	r2,gp,-25539
  80ca98:	2085883a 	add	r2,r4,r2
  80ca9c:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80caa0:	d0a70b43 	ldbu	r2,-25555(gp)
  80caa4:	10800044 	addi	r2,r2,1
  80caa8:	d0a70b45 	stb	r2,-25555(gp)
  80caac:	e0bff817 	ldw	r2,-32(fp)
  80cab0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cab4:	e0bff417 	ldw	r2,-48(fp)
  80cab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80cabc:	e03fff15 	stw	zero,-4(fp)
  80cac0:	00000606 	br	80cadc <OS_TCBInit+0x2c8>
  80cac4:	e0bff817 	ldw	r2,-32(fp)
  80cac8:	e0bff315 	stw	r2,-52(fp)
  80cacc:	e0bff317 	ldw	r2,-52(fp)
  80cad0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80cad4:	00801084 	movi	r2,66
  80cad8:	e0bfff15 	stw	r2,-4(fp)
  80cadc:	e0bfff17 	ldw	r2,-4(fp)
}
  80cae0:	e037883a 	mov	sp,fp
  80cae4:	dfc00117 	ldw	ra,4(sp)
  80cae8:	df000017 	ldw	fp,0(sp)
  80caec:	dec00204 	addi	sp,sp,8
  80caf0:	f800283a 	ret

0080caf4 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80caf4:	defffe04 	addi	sp,sp,-8
  80caf8:	df000115 	stw	fp,4(sp)
  80cafc:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80cb00:	d0a00f04 	addi	r2,gp,-32708
  80cb04:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80cb08:	d0a01004 	addi	r2,gp,-32704
  80cb0c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80cb10:	d0a01184 	addi	r2,gp,-32698
  80cb14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80cb18:	d0a01204 	addi	r2,gp,-32696
  80cb1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80cb20:	d0a01104 	addi	r2,gp,-32700
  80cb24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80cb28:	d0a01284 	addi	r2,gp,-32694
  80cb2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80cb30:	d0a01304 	addi	r2,gp,-32692
  80cb34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80cb38:	d0a01384 	addi	r2,gp,-32690
  80cb3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80cb40:	d0a01404 	addi	r2,gp,-32688
  80cb44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80cb48:	d0a01484 	addi	r2,gp,-32686
  80cb4c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80cb50:	d0a01504 	addi	r2,gp,-32684
  80cb54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80cb58:	d0a01584 	addi	r2,gp,-32682
  80cb5c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80cb60:	d0a01604 	addi	r2,gp,-32680
  80cb64:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80cb68:	d0a01684 	addi	r2,gp,-32678
  80cb6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80cb70:	d0a01704 	addi	r2,gp,-32676
  80cb74:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80cb78:	d0a01784 	addi	r2,gp,-32674
  80cb7c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80cb80:	d0a01804 	addi	r2,gp,-32672
  80cb84:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80cb88:	d0a01884 	addi	r2,gp,-32670
  80cb8c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80cb90:	d0a01904 	addi	r2,gp,-32668
  80cb94:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80cb98:	d0a01984 	addi	r2,gp,-32666
  80cb9c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80cba0:	d0a01a04 	addi	r2,gp,-32664
  80cba4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80cba8:	d0a01a84 	addi	r2,gp,-32662
  80cbac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80cbb0:	d0a01b04 	addi	r2,gp,-32660
  80cbb4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80cbb8:	d0a01b84 	addi	r2,gp,-32658
  80cbbc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80cbc0:	d0a01c04 	addi	r2,gp,-32656
  80cbc4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80cbc8:	d0a01c84 	addi	r2,gp,-32654
  80cbcc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80cbd0:	d0a01d04 	addi	r2,gp,-32652
  80cbd4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80cbd8:	d0a01d84 	addi	r2,gp,-32650
  80cbdc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80cbe0:	d0a01e04 	addi	r2,gp,-32648
  80cbe4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80cbe8:	d0a01e84 	addi	r2,gp,-32646
  80cbec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80cbf0:	d0a01f04 	addi	r2,gp,-32644
  80cbf4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80cbf8:	d0a01f84 	addi	r2,gp,-32642
  80cbfc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80cc00:	d0a02004 	addi	r2,gp,-32640
  80cc04:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80cc08:	d0a02084 	addi	r2,gp,-32638
  80cc0c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80cc10:	d0a02104 	addi	r2,gp,-32636
  80cc14:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80cc18:	d0a02184 	addi	r2,gp,-32634
  80cc1c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80cc20:	d0a02204 	addi	r2,gp,-32632
  80cc24:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80cc28:	d0a02284 	addi	r2,gp,-32630
  80cc2c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80cc30:	d0a02304 	addi	r2,gp,-32628
  80cc34:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80cc38:	d0a02384 	addi	r2,gp,-32626
  80cc3c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80cc40:	d0a02404 	addi	r2,gp,-32624
  80cc44:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80cc48:	d0a02484 	addi	r2,gp,-32622
  80cc4c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80cc50:	d0a02504 	addi	r2,gp,-32620
  80cc54:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80cc58:	d0a02584 	addi	r2,gp,-32618
  80cc5c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80cc60:	d0a02604 	addi	r2,gp,-32616
  80cc64:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80cc68:	d0a02b04 	addi	r2,gp,-32596
  80cc6c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80cc70:	e037883a 	mov	sp,fp
  80cc74:	df000017 	ldw	fp,0(sp)
  80cc78:	dec00104 	addi	sp,sp,4
  80cc7c:	f800283a 	ret

0080cc80 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80cc80:	defff104 	addi	sp,sp,-60
  80cc84:	df000e15 	stw	fp,56(sp)
  80cc88:	df000e04 	addi	fp,sp,56
  80cc8c:	e13ffa15 	stw	r4,-24(fp)
  80cc90:	e1fffd15 	stw	r7,-12(fp)
  80cc94:	e17ffb0d 	sth	r5,-20(fp)
  80cc98:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80cc9c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80cca0:	e0bffd17 	ldw	r2,-12(fp)
  80cca4:	1004c03a 	cmpne	r2,r2,zero
  80cca8:	1000021e 	bne	r2,zero,80ccb4 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80ccac:	e03fff15 	stw	zero,-4(fp)
  80ccb0:	0000bb06 	br	80cfa0 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80ccb4:	e0bffa17 	ldw	r2,-24(fp)
  80ccb8:	1004c03a 	cmpne	r2,r2,zero
  80ccbc:	1000051e 	bne	r2,zero,80ccd4 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ccc0:	e0fffd17 	ldw	r3,-12(fp)
  80ccc4:	00801b84 	movi	r2,110
  80ccc8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80cccc:	e03fff15 	stw	zero,-4(fp)
  80ccd0:	0000b306 	br	80cfa0 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80ccd4:	e0bffa17 	ldw	r2,-24(fp)
  80ccd8:	10800003 	ldbu	r2,0(r2)
  80ccdc:	10803fcc 	andi	r2,r2,255
  80cce0:	10800160 	cmpeqi	r2,r2,5
  80cce4:	1000051e 	bne	r2,zero,80ccfc <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80cce8:	e0fffd17 	ldw	r3,-12(fp)
  80ccec:	00800044 	movi	r2,1
  80ccf0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80ccf4:	e03fff15 	stw	zero,-4(fp)
  80ccf8:	0000a906 	br	80cfa0 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80ccfc:	e0fffc03 	ldbu	r3,-16(fp)
  80cd00:	00bfe004 	movi	r2,-128
  80cd04:	1884703a 	and	r2,r3,r2
  80cd08:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80cd0c:	e0bff943 	ldbu	r2,-27(fp)
  80cd10:	1005003a 	cmpeq	r2,r2,zero
  80cd14:	1000061e 	bne	r2,zero,80cd30 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80cd18:	e0bffc03 	ldbu	r2,-16(fp)
  80cd1c:	10801fcc 	andi	r2,r2,127
  80cd20:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80cd24:	00800044 	movi	r2,1
  80cd28:	e0bff905 	stb	r2,-28(fp)
  80cd2c:	00000106 	br	80cd34 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80cd30:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80cd34:	e0bffd17 	ldw	r2,-12(fp)
  80cd38:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cd3c:	0005303a 	rdctl	r2,status
  80cd40:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cd44:	e0fff717 	ldw	r3,-36(fp)
  80cd48:	00bfff84 	movi	r2,-2
  80cd4c:	1884703a 	and	r2,r3,r2
  80cd50:	1001703a 	wrctl	status,r2
  
  return context;
  80cd54:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80cd58:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80cd5c:	e0bffc03 	ldbu	r2,-16(fp)
  80cd60:	e0bffe15 	stw	r2,-8(fp)
  80cd64:	e0fffe17 	ldw	r3,-8(fp)
  80cd68:	18800060 	cmpeqi	r2,r3,1
  80cd6c:	1000651e 	bne	r2,zero,80cf04 <OSFlagAccept+0x284>
  80cd70:	e0fffe17 	ldw	r3,-8(fp)
  80cd74:	18800088 	cmpgei	r2,r3,2
  80cd78:	1000041e 	bne	r2,zero,80cd8c <OSFlagAccept+0x10c>
  80cd7c:	e0fffe17 	ldw	r3,-8(fp)
  80cd80:	1805003a 	cmpeq	r2,r3,zero
  80cd84:	1000421e 	bne	r2,zero,80ce90 <OSFlagAccept+0x210>
  80cd88:	00007b06 	br	80cf78 <OSFlagAccept+0x2f8>
  80cd8c:	e0fffe17 	ldw	r3,-8(fp)
  80cd90:	188000a0 	cmpeqi	r2,r3,2
  80cd94:	1000041e 	bne	r2,zero,80cda8 <OSFlagAccept+0x128>
  80cd98:	e0fffe17 	ldw	r3,-8(fp)
  80cd9c:	188000e0 	cmpeqi	r2,r3,3
  80cda0:	10001e1e 	bne	r2,zero,80ce1c <OSFlagAccept+0x19c>
  80cda4:	00007406 	br	80cf78 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80cda8:	e0bffa17 	ldw	r2,-24(fp)
  80cdac:	10c0020b 	ldhu	r3,8(r2)
  80cdb0:	e0bffb0b 	ldhu	r2,-20(fp)
  80cdb4:	1884703a 	and	r2,r3,r2
  80cdb8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80cdbc:	e0fff98b 	ldhu	r3,-26(fp)
  80cdc0:	e0bffb0b 	ldhu	r2,-20(fp)
  80cdc4:	18800d1e 	bne	r3,r2,80cdfc <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80cdc8:	e0bff903 	ldbu	r2,-28(fp)
  80cdcc:	10800058 	cmpnei	r2,r2,1
  80cdd0:	10000d1e 	bne	r2,zero,80ce08 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80cdd4:	e0bffa17 	ldw	r2,-24(fp)
  80cdd8:	1080020b 	ldhu	r2,8(r2)
  80cddc:	1007883a 	mov	r3,r2
  80cde0:	e0bff98b 	ldhu	r2,-26(fp)
  80cde4:	0084303a 	nor	r2,zero,r2
  80cde8:	1884703a 	and	r2,r3,r2
  80cdec:	1007883a 	mov	r3,r2
  80cdf0:	e0bffa17 	ldw	r2,-24(fp)
  80cdf4:	10c0020d 	sth	r3,8(r2)
  80cdf8:	00000306 	br	80ce08 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cdfc:	e0fffd17 	ldw	r3,-12(fp)
  80ce00:	00801c04 	movi	r2,112
  80ce04:	18800005 	stb	r2,0(r3)
  80ce08:	e0bff817 	ldw	r2,-32(fp)
  80ce0c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ce10:	e0bff617 	ldw	r2,-40(fp)
  80ce14:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80ce18:	00005f06 	br	80cf98 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80ce1c:	e0bffa17 	ldw	r2,-24(fp)
  80ce20:	10c0020b 	ldhu	r3,8(r2)
  80ce24:	e0bffb0b 	ldhu	r2,-20(fp)
  80ce28:	1884703a 	and	r2,r3,r2
  80ce2c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80ce30:	e0bff98b 	ldhu	r2,-26(fp)
  80ce34:	1005003a 	cmpeq	r2,r2,zero
  80ce38:	10000d1e 	bne	r2,zero,80ce70 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ce3c:	e0bff903 	ldbu	r2,-28(fp)
  80ce40:	10800058 	cmpnei	r2,r2,1
  80ce44:	10000d1e 	bne	r2,zero,80ce7c <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80ce48:	e0bffa17 	ldw	r2,-24(fp)
  80ce4c:	1080020b 	ldhu	r2,8(r2)
  80ce50:	1007883a 	mov	r3,r2
  80ce54:	e0bff98b 	ldhu	r2,-26(fp)
  80ce58:	0084303a 	nor	r2,zero,r2
  80ce5c:	1884703a 	and	r2,r3,r2
  80ce60:	1007883a 	mov	r3,r2
  80ce64:	e0bffa17 	ldw	r2,-24(fp)
  80ce68:	10c0020d 	sth	r3,8(r2)
  80ce6c:	00000306 	br	80ce7c <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80ce70:	e0fffd17 	ldw	r3,-12(fp)
  80ce74:	00801c04 	movi	r2,112
  80ce78:	18800005 	stb	r2,0(r3)
  80ce7c:	e0bff817 	ldw	r2,-32(fp)
  80ce80:	e0bff515 	stw	r2,-44(fp)
  80ce84:	e0bff517 	ldw	r2,-44(fp)
  80ce88:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80ce8c:	00004206 	br	80cf98 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80ce90:	e0bffa17 	ldw	r2,-24(fp)
  80ce94:	1080020b 	ldhu	r2,8(r2)
  80ce98:	0084303a 	nor	r2,zero,r2
  80ce9c:	1007883a 	mov	r3,r2
  80cea0:	e0bffb0b 	ldhu	r2,-20(fp)
  80cea4:	1884703a 	and	r2,r3,r2
  80cea8:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80ceac:	e0fff98b 	ldhu	r3,-26(fp)
  80ceb0:	e0bffb0b 	ldhu	r2,-20(fp)
  80ceb4:	18800b1e 	bne	r3,r2,80cee4 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80ceb8:	e0bff903 	ldbu	r2,-28(fp)
  80cebc:	10800058 	cmpnei	r2,r2,1
  80cec0:	10000b1e 	bne	r2,zero,80cef0 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80cec4:	e0bffa17 	ldw	r2,-24(fp)
  80cec8:	10c0020b 	ldhu	r3,8(r2)
  80cecc:	e0bff98b 	ldhu	r2,-26(fp)
  80ced0:	1884b03a 	or	r2,r3,r2
  80ced4:	1007883a 	mov	r3,r2
  80ced8:	e0bffa17 	ldw	r2,-24(fp)
  80cedc:	10c0020d 	sth	r3,8(r2)
  80cee0:	00000306 	br	80cef0 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cee4:	e0fffd17 	ldw	r3,-12(fp)
  80cee8:	00801c04 	movi	r2,112
  80ceec:	18800005 	stb	r2,0(r3)
  80cef0:	e0bff817 	ldw	r2,-32(fp)
  80cef4:	e0bff415 	stw	r2,-48(fp)
  80cef8:	e0bff417 	ldw	r2,-48(fp)
  80cefc:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80cf00:	00002506 	br	80cf98 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80cf04:	e0bffa17 	ldw	r2,-24(fp)
  80cf08:	1080020b 	ldhu	r2,8(r2)
  80cf0c:	0084303a 	nor	r2,zero,r2
  80cf10:	1007883a 	mov	r3,r2
  80cf14:	e0bffb0b 	ldhu	r2,-20(fp)
  80cf18:	1884703a 	and	r2,r3,r2
  80cf1c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80cf20:	e0bff98b 	ldhu	r2,-26(fp)
  80cf24:	1005003a 	cmpeq	r2,r2,zero
  80cf28:	10000b1e 	bne	r2,zero,80cf58 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80cf2c:	e0bff903 	ldbu	r2,-28(fp)
  80cf30:	10800058 	cmpnei	r2,r2,1
  80cf34:	10000b1e 	bne	r2,zero,80cf64 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80cf38:	e0bffa17 	ldw	r2,-24(fp)
  80cf3c:	10c0020b 	ldhu	r3,8(r2)
  80cf40:	e0bff98b 	ldhu	r2,-26(fp)
  80cf44:	1884b03a 	or	r2,r3,r2
  80cf48:	1007883a 	mov	r3,r2
  80cf4c:	e0bffa17 	ldw	r2,-24(fp)
  80cf50:	10c0020d 	sth	r3,8(r2)
  80cf54:	00000306 	br	80cf64 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80cf58:	e0fffd17 	ldw	r3,-12(fp)
  80cf5c:	00801c04 	movi	r2,112
  80cf60:	18800005 	stb	r2,0(r3)
  80cf64:	e0bff817 	ldw	r2,-32(fp)
  80cf68:	e0bff315 	stw	r2,-52(fp)
  80cf6c:	e0bff317 	ldw	r2,-52(fp)
  80cf70:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80cf74:	00000806 	br	80cf98 <OSFlagAccept+0x318>
  80cf78:	e0bff817 	ldw	r2,-32(fp)
  80cf7c:	e0bff215 	stw	r2,-56(fp)
  80cf80:	e0bff217 	ldw	r2,-56(fp)
  80cf84:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80cf88:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80cf8c:	e0fffd17 	ldw	r3,-12(fp)
  80cf90:	00801bc4 	movi	r2,111
  80cf94:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80cf98:	e0bff98b 	ldhu	r2,-26(fp)
  80cf9c:	e0bfff15 	stw	r2,-4(fp)
  80cfa0:	e0bfff17 	ldw	r2,-4(fp)
}
  80cfa4:	e037883a 	mov	sp,fp
  80cfa8:	df000017 	ldw	fp,0(sp)
  80cfac:	dec00104 	addi	sp,sp,4
  80cfb0:	f800283a 	ret

0080cfb4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80cfb4:	defff704 	addi	sp,sp,-36
  80cfb8:	df000815 	stw	fp,32(sp)
  80cfbc:	df000804 	addi	fp,sp,32
  80cfc0:	e17ffe15 	stw	r5,-8(fp)
  80cfc4:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80cfc8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80cfcc:	e0bffe17 	ldw	r2,-8(fp)
  80cfd0:	1004c03a 	cmpne	r2,r2,zero
  80cfd4:	1000021e 	bne	r2,zero,80cfe0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80cfd8:	e03fff15 	stw	zero,-4(fp)
  80cfdc:	00003f06 	br	80d0dc <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80cfe0:	008020b4 	movhi	r2,130
  80cfe4:	10a53604 	addi	r2,r2,-27432
  80cfe8:	10800003 	ldbu	r2,0(r2)
  80cfec:	10803fcc 	andi	r2,r2,255
  80cff0:	1005003a 	cmpeq	r2,r2,zero
  80cff4:	1000051e 	bne	r2,zero,80d00c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80cff8:	e0fffe17 	ldw	r3,-8(fp)
  80cffc:	00800404 	movi	r2,16
  80d000:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80d004:	e03fff15 	stw	zero,-4(fp)
  80d008:	00003406 	br	80d0dc <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d00c:	0005303a 	rdctl	r2,status
  80d010:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d014:	e0fffa17 	ldw	r3,-24(fp)
  80d018:	00bfff84 	movi	r2,-2
  80d01c:	1884703a 	and	r2,r3,r2
  80d020:	1001703a 	wrctl	status,r2
  
  return context;
  80d024:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d028:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80d02c:	008020b4 	movhi	r2,130
  80d030:	10a53904 	addi	r2,r2,-27420
  80d034:	10800017 	ldw	r2,0(r2)
  80d038:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80d03c:	e0bffc17 	ldw	r2,-16(fp)
  80d040:	1005003a 	cmpeq	r2,r2,zero
  80d044:	10001c1e 	bne	r2,zero,80d0b8 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80d048:	008020b4 	movhi	r2,130
  80d04c:	10a53904 	addi	r2,r2,-27420
  80d050:	10800017 	ldw	r2,0(r2)
  80d054:	10800117 	ldw	r2,4(r2)
  80d058:	1007883a 	mov	r3,r2
  80d05c:	008020b4 	movhi	r2,130
  80d060:	10a53904 	addi	r2,r2,-27420
  80d064:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80d068:	e0fffc17 	ldw	r3,-16(fp)
  80d06c:	00800144 	movi	r2,5
  80d070:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80d074:	e0fffc17 	ldw	r3,-16(fp)
  80d078:	e0bffd0b 	ldhu	r2,-12(fp)
  80d07c:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80d080:	e0bffc17 	ldw	r2,-16(fp)
  80d084:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80d088:	e0fffc17 	ldw	r3,-16(fp)
  80d08c:	00800fc4 	movi	r2,63
  80d090:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d094:	e0bffc17 	ldw	r2,-16(fp)
  80d098:	100002c5 	stb	zero,11(r2)
  80d09c:	e0bffb17 	ldw	r2,-20(fp)
  80d0a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d0a4:	e0bff917 	ldw	r2,-28(fp)
  80d0a8:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80d0ac:	e0bffe17 	ldw	r2,-8(fp)
  80d0b0:	10000005 	stb	zero,0(r2)
  80d0b4:	00000706 	br	80d0d4 <OSFlagCreate+0x120>
  80d0b8:	e0bffb17 	ldw	r2,-20(fp)
  80d0bc:	e0bff815 	stw	r2,-32(fp)
  80d0c0:	e0bff817 	ldw	r2,-32(fp)
  80d0c4:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80d0c8:	e0fffe17 	ldw	r3,-8(fp)
  80d0cc:	00801c84 	movi	r2,114
  80d0d0:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80d0d4:	e0bffc17 	ldw	r2,-16(fp)
  80d0d8:	e0bfff15 	stw	r2,-4(fp)
  80d0dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0e0:	e037883a 	mov	sp,fp
  80d0e4:	df000017 	ldw	fp,0(sp)
  80d0e8:	dec00104 	addi	sp,sp,4
  80d0ec:	f800283a 	ret

0080d0f0 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80d0f0:	defff004 	addi	sp,sp,-64
  80d0f4:	dfc00f15 	stw	ra,60(sp)
  80d0f8:	df000e15 	stw	fp,56(sp)
  80d0fc:	df000e04 	addi	fp,sp,56
  80d100:	e13ffb15 	stw	r4,-20(fp)
  80d104:	e1bffd15 	stw	r6,-12(fp)
  80d108:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d10c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d110:	e0bffd17 	ldw	r2,-12(fp)
  80d114:	1004c03a 	cmpne	r2,r2,zero
  80d118:	1000031e 	bne	r2,zero,80d128 <OSFlagDel+0x38>
        return (pgrp);
  80d11c:	e0bffb17 	ldw	r2,-20(fp)
  80d120:	e0bfff15 	stw	r2,-4(fp)
  80d124:	00009606 	br	80d380 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d128:	e0bffb17 	ldw	r2,-20(fp)
  80d12c:	1004c03a 	cmpne	r2,r2,zero
  80d130:	1000061e 	bne	r2,zero,80d14c <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d134:	e0fffd17 	ldw	r3,-12(fp)
  80d138:	00801b84 	movi	r2,110
  80d13c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d140:	e0fffb17 	ldw	r3,-20(fp)
  80d144:	e0ffff15 	stw	r3,-4(fp)
  80d148:	00008d06 	br	80d380 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d14c:	008020b4 	movhi	r2,130
  80d150:	10a53604 	addi	r2,r2,-27432
  80d154:	10800003 	ldbu	r2,0(r2)
  80d158:	10803fcc 	andi	r2,r2,255
  80d15c:	1005003a 	cmpeq	r2,r2,zero
  80d160:	1000061e 	bne	r2,zero,80d17c <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80d164:	e0fffd17 	ldw	r3,-12(fp)
  80d168:	008003c4 	movi	r2,15
  80d16c:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d170:	e0bffb17 	ldw	r2,-20(fp)
  80d174:	e0bfff15 	stw	r2,-4(fp)
  80d178:	00008106 	br	80d380 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80d17c:	e0bffb17 	ldw	r2,-20(fp)
  80d180:	10800003 	ldbu	r2,0(r2)
  80d184:	10803fcc 	andi	r2,r2,255
  80d188:	10800160 	cmpeqi	r2,r2,5
  80d18c:	1000061e 	bne	r2,zero,80d1a8 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80d190:	e0fffd17 	ldw	r3,-12(fp)
  80d194:	00800044 	movi	r2,1
  80d198:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80d19c:	e0fffb17 	ldw	r3,-20(fp)
  80d1a0:	e0ffff15 	stw	r3,-4(fp)
  80d1a4:	00007606 	br	80d380 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d1a8:	0005303a 	rdctl	r2,status
  80d1ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d1b0:	e0fff617 	ldw	r3,-40(fp)
  80d1b4:	00bfff84 	movi	r2,-2
  80d1b8:	1884703a 	and	r2,r3,r2
  80d1bc:	1001703a 	wrctl	status,r2
  
  return context;
  80d1c0:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80d1c4:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80d1c8:	e0bffb17 	ldw	r2,-20(fp)
  80d1cc:	10800117 	ldw	r2,4(r2)
  80d1d0:	1005003a 	cmpeq	r2,r2,zero
  80d1d4:	1000031e 	bne	r2,zero,80d1e4 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80d1d8:	00800044 	movi	r2,1
  80d1dc:	e0bffa05 	stb	r2,-24(fp)
  80d1e0:	00000106 	br	80d1e8 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80d1e4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80d1e8:	e0bffc03 	ldbu	r2,-16(fp)
  80d1ec:	e0bffe15 	stw	r2,-8(fp)
  80d1f0:	e0fffe17 	ldw	r3,-8(fp)
  80d1f4:	1805003a 	cmpeq	r2,r3,zero
  80d1f8:	1000041e 	bne	r2,zero,80d20c <OSFlagDel+0x11c>
  80d1fc:	e0fffe17 	ldw	r3,-8(fp)
  80d200:	18800060 	cmpeqi	r2,r3,1
  80d204:	1000281e 	bne	r2,zero,80d2a8 <OSFlagDel+0x1b8>
  80d208:	00005206 	br	80d354 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80d20c:	e0bffa03 	ldbu	r2,-24(fp)
  80d210:	1004c03a 	cmpne	r2,r2,zero
  80d214:	10001a1e 	bne	r2,zero,80d280 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80d218:	e0fffb17 	ldw	r3,-20(fp)
  80d21c:	00800fc4 	movi	r2,63
  80d220:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d224:	e0bffb17 	ldw	r2,-20(fp)
  80d228:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d22c:	e0bffb17 	ldw	r2,-20(fp)
  80d230:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80d234:	008020b4 	movhi	r2,130
  80d238:	10a53904 	addi	r2,r2,-27420
  80d23c:	10c00017 	ldw	r3,0(r2)
  80d240:	e0bffb17 	ldw	r2,-20(fp)
  80d244:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d248:	e0bffb17 	ldw	r2,-20(fp)
  80d24c:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80d250:	00c020b4 	movhi	r3,130
  80d254:	18e53904 	addi	r3,r3,-27420
  80d258:	e0bffb17 	ldw	r2,-20(fp)
  80d25c:	18800015 	stw	r2,0(r3)
  80d260:	e0bff717 	ldw	r2,-36(fp)
  80d264:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d268:	e0bff517 	ldw	r2,-44(fp)
  80d26c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80d270:	e0bffd17 	ldw	r2,-12(fp)
  80d274:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80d278:	e03ff815 	stw	zero,-32(fp)
  80d27c:	00003e06 	br	80d378 <OSFlagDel+0x288>
  80d280:	e0bff717 	ldw	r2,-36(fp)
  80d284:	e0bff415 	stw	r2,-48(fp)
  80d288:	e0bff417 	ldw	r2,-48(fp)
  80d28c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80d290:	e0fffd17 	ldw	r3,-12(fp)
  80d294:	00801244 	movi	r2,73
  80d298:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80d29c:	e0bffb17 	ldw	r2,-20(fp)
  80d2a0:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80d2a4:	00003406 	br	80d378 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80d2a8:	e0bffb17 	ldw	r2,-20(fp)
  80d2ac:	10800117 	ldw	r2,4(r2)
  80d2b0:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d2b4:	00000606 	br	80d2d0 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80d2b8:	e13ff917 	ldw	r4,-28(fp)
  80d2bc:	000b883a 	mov	r5,zero
  80d2c0:	080e4000 	call	80e400 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80d2c4:	e0bff917 	ldw	r2,-28(fp)
  80d2c8:	10800017 	ldw	r2,0(r2)
  80d2cc:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80d2d0:	e0bff917 	ldw	r2,-28(fp)
  80d2d4:	1004c03a 	cmpne	r2,r2,zero
  80d2d8:	103ff71e 	bne	r2,zero,80d2b8 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80d2dc:	e0fffb17 	ldw	r3,-20(fp)
  80d2e0:	00800fc4 	movi	r2,63
  80d2e4:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80d2e8:	e0bffb17 	ldw	r2,-20(fp)
  80d2ec:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80d2f0:	e0bffb17 	ldw	r2,-20(fp)
  80d2f4:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80d2f8:	008020b4 	movhi	r2,130
  80d2fc:	10a53904 	addi	r2,r2,-27420
  80d300:	10c00017 	ldw	r3,0(r2)
  80d304:	e0bffb17 	ldw	r2,-20(fp)
  80d308:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80d30c:	e0bffb17 	ldw	r2,-20(fp)
  80d310:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80d314:	00c020b4 	movhi	r3,130
  80d318:	18e53904 	addi	r3,r3,-27420
  80d31c:	e0bffb17 	ldw	r2,-20(fp)
  80d320:	18800015 	stw	r2,0(r3)
  80d324:	e0bff717 	ldw	r2,-36(fp)
  80d328:	e0bff315 	stw	r2,-52(fp)
  80d32c:	e0bff317 	ldw	r2,-52(fp)
  80d330:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80d334:	e0bffa03 	ldbu	r2,-24(fp)
  80d338:	10800058 	cmpnei	r2,r2,1
  80d33c:	1000011e 	bne	r2,zero,80d344 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80d340:	080c40c0 	call	80c40c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80d344:	e0bffd17 	ldw	r2,-12(fp)
  80d348:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80d34c:	e03ff815 	stw	zero,-32(fp)
             break;
  80d350:	00000906 	br	80d378 <OSFlagDel+0x288>
  80d354:	e0bff717 	ldw	r2,-36(fp)
  80d358:	e0bff215 	stw	r2,-56(fp)
  80d35c:	e0bff217 	ldw	r2,-56(fp)
  80d360:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80d364:	e0fffd17 	ldw	r3,-12(fp)
  80d368:	008001c4 	movi	r2,7
  80d36c:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80d370:	e0bffb17 	ldw	r2,-20(fp)
  80d374:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80d378:	e0bff817 	ldw	r2,-32(fp)
  80d37c:	e0bfff15 	stw	r2,-4(fp)
  80d380:	e0bfff17 	ldw	r2,-4(fp)
}
  80d384:	e037883a 	mov	sp,fp
  80d388:	dfc00117 	ldw	ra,4(sp)
  80d38c:	df000017 	ldw	fp,0(sp)
  80d390:	dec00204 	addi	sp,sp,8
  80d394:	f800283a 	ret

0080d398 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d398:	defff504 	addi	sp,sp,-44
  80d39c:	dfc00a15 	stw	ra,40(sp)
  80d3a0:	df000915 	stw	fp,36(sp)
  80d3a4:	df000904 	addi	fp,sp,36
  80d3a8:	e13ffc15 	stw	r4,-16(fp)
  80d3ac:	e17ffd15 	stw	r5,-12(fp)
  80d3b0:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d3b4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d3b8:	e0bffe17 	ldw	r2,-8(fp)
  80d3bc:	1004c03a 	cmpne	r2,r2,zero
  80d3c0:	1000021e 	bne	r2,zero,80d3cc <OSFlagNameGet+0x34>
        return (0);
  80d3c4:	e03fff15 	stw	zero,-4(fp)
  80d3c8:	00003e06 	br	80d4c4 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d3cc:	e0bffc17 	ldw	r2,-16(fp)
  80d3d0:	1004c03a 	cmpne	r2,r2,zero
  80d3d4:	1000051e 	bne	r2,zero,80d3ec <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d3d8:	e0fffe17 	ldw	r3,-8(fp)
  80d3dc:	00801b84 	movi	r2,110
  80d3e0:	18800005 	stb	r2,0(r3)
        return (0);
  80d3e4:	e03fff15 	stw	zero,-4(fp)
  80d3e8:	00003606 	br	80d4c4 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d3ec:	e0bffd17 	ldw	r2,-12(fp)
  80d3f0:	1004c03a 	cmpne	r2,r2,zero
  80d3f4:	1000051e 	bne	r2,zero,80d40c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80d3f8:	e0fffe17 	ldw	r3,-8(fp)
  80d3fc:	00800304 	movi	r2,12
  80d400:	18800005 	stb	r2,0(r3)
        return (0);
  80d404:	e03fff15 	stw	zero,-4(fp)
  80d408:	00002e06 	br	80d4c4 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d40c:	008020b4 	movhi	r2,130
  80d410:	10a53604 	addi	r2,r2,-27432
  80d414:	10800003 	ldbu	r2,0(r2)
  80d418:	10803fcc 	andi	r2,r2,255
  80d41c:	1005003a 	cmpeq	r2,r2,zero
  80d420:	1000051e 	bne	r2,zero,80d438 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80d424:	e0fffe17 	ldw	r3,-8(fp)
  80d428:	00800444 	movi	r2,17
  80d42c:	18800005 	stb	r2,0(r3)
        return (0);
  80d430:	e03fff15 	stw	zero,-4(fp)
  80d434:	00002306 	br	80d4c4 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d438:	0005303a 	rdctl	r2,status
  80d43c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d440:	e0fff917 	ldw	r3,-28(fp)
  80d444:	00bfff84 	movi	r2,-2
  80d448:	1884703a 	and	r2,r3,r2
  80d44c:	1001703a 	wrctl	status,r2
  
  return context;
  80d450:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80d454:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d458:	e0bffc17 	ldw	r2,-16(fp)
  80d45c:	10800003 	ldbu	r2,0(r2)
  80d460:	10803fcc 	andi	r2,r2,255
  80d464:	10800160 	cmpeqi	r2,r2,5
  80d468:	1000091e 	bne	r2,zero,80d490 <OSFlagNameGet+0xf8>
  80d46c:	e0bffa17 	ldw	r2,-24(fp)
  80d470:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d474:	e0bff817 	ldw	r2,-32(fp)
  80d478:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d47c:	e0fffe17 	ldw	r3,-8(fp)
  80d480:	00800044 	movi	r2,1
  80d484:	18800005 	stb	r2,0(r3)
        return (0);
  80d488:	e03fff15 	stw	zero,-4(fp)
  80d48c:	00000d06 	br	80d4c4 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80d490:	e0bffc17 	ldw	r2,-16(fp)
  80d494:	11400284 	addi	r5,r2,10
  80d498:	e13ffd17 	ldw	r4,-12(fp)
  80d49c:	080c5500 	call	80c550 <OS_StrCopy>
  80d4a0:	e0bffb05 	stb	r2,-20(fp)
  80d4a4:	e0bffa17 	ldw	r2,-24(fp)
  80d4a8:	e0bff715 	stw	r2,-36(fp)
  80d4ac:	e0bff717 	ldw	r2,-36(fp)
  80d4b0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d4b4:	e0bffe17 	ldw	r2,-8(fp)
  80d4b8:	10000005 	stb	zero,0(r2)
    return (len);
  80d4bc:	e0bffb03 	ldbu	r2,-20(fp)
  80d4c0:	e0bfff15 	stw	r2,-4(fp)
  80d4c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80d4c8:	e037883a 	mov	sp,fp
  80d4cc:	dfc00117 	ldw	ra,4(sp)
  80d4d0:	df000017 	ldw	fp,0(sp)
  80d4d4:	dec00204 	addi	sp,sp,8
  80d4d8:	f800283a 	ret

0080d4dc <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80d4dc:	defff504 	addi	sp,sp,-44
  80d4e0:	dfc00a15 	stw	ra,40(sp)
  80d4e4:	df000915 	stw	fp,36(sp)
  80d4e8:	df000904 	addi	fp,sp,36
  80d4ec:	e13ffd15 	stw	r4,-12(fp)
  80d4f0:	e17ffe15 	stw	r5,-8(fp)
  80d4f4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d4f8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d4fc:	e0bfff17 	ldw	r2,-4(fp)
  80d500:	1005003a 	cmpeq	r2,r2,zero
  80d504:	1000451e 	bne	r2,zero,80d61c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80d508:	e0bffd17 	ldw	r2,-12(fp)
  80d50c:	1004c03a 	cmpne	r2,r2,zero
  80d510:	1000041e 	bne	r2,zero,80d524 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d514:	e0ffff17 	ldw	r3,-4(fp)
  80d518:	00801b84 	movi	r2,110
  80d51c:	18800005 	stb	r2,0(r3)
        return;
  80d520:	00003e06 	br	80d61c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d524:	e0bffe17 	ldw	r2,-8(fp)
  80d528:	1004c03a 	cmpne	r2,r2,zero
  80d52c:	1000041e 	bne	r2,zero,80d540 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80d530:	e0ffff17 	ldw	r3,-4(fp)
  80d534:	00800304 	movi	r2,12
  80d538:	18800005 	stb	r2,0(r3)
        return;
  80d53c:	00003706 	br	80d61c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d540:	008020b4 	movhi	r2,130
  80d544:	10a53604 	addi	r2,r2,-27432
  80d548:	10800003 	ldbu	r2,0(r2)
  80d54c:	10803fcc 	andi	r2,r2,255
  80d550:	1005003a 	cmpeq	r2,r2,zero
  80d554:	1000041e 	bne	r2,zero,80d568 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80d558:	e0ffff17 	ldw	r3,-4(fp)
  80d55c:	00800484 	movi	r2,18
  80d560:	18800005 	stb	r2,0(r3)
        return;
  80d564:	00002d06 	br	80d61c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d568:	0005303a 	rdctl	r2,status
  80d56c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d570:	e0fffa17 	ldw	r3,-24(fp)
  80d574:	00bfff84 	movi	r2,-2
  80d578:	1884703a 	and	r2,r3,r2
  80d57c:	1001703a 	wrctl	status,r2
  
  return context;
  80d580:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80d584:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80d588:	e0bffd17 	ldw	r2,-12(fp)
  80d58c:	10800003 	ldbu	r2,0(r2)
  80d590:	10803fcc 	andi	r2,r2,255
  80d594:	10800160 	cmpeqi	r2,r2,5
  80d598:	1000081e 	bne	r2,zero,80d5bc <OSFlagNameSet+0xe0>
  80d59c:	e0bffb17 	ldw	r2,-20(fp)
  80d5a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5a4:	e0bff917 	ldw	r2,-28(fp)
  80d5a8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80d5ac:	e0ffff17 	ldw	r3,-4(fp)
  80d5b0:	00800044 	movi	r2,1
  80d5b4:	18800005 	stb	r2,0(r3)
        return;
  80d5b8:	00001806 	br	80d61c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80d5bc:	e13ffe17 	ldw	r4,-8(fp)
  80d5c0:	080c5d00 	call	80c5d0 <OS_StrLen>
  80d5c4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80d5c8:	e0bffc03 	ldbu	r2,-16(fp)
  80d5cc:	10800830 	cmpltui	r2,r2,32
  80d5d0:	1000081e 	bne	r2,zero,80d5f4 <OSFlagNameSet+0x118>
  80d5d4:	e0bffb17 	ldw	r2,-20(fp)
  80d5d8:	e0bff815 	stw	r2,-32(fp)
  80d5dc:	e0bff817 	ldw	r2,-32(fp)
  80d5e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80d5e4:	e0ffff17 	ldw	r3,-4(fp)
  80d5e8:	00801cc4 	movi	r2,115
  80d5ec:	18800005 	stb	r2,0(r3)
        return;
  80d5f0:	00000a06 	br	80d61c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80d5f4:	e0bffd17 	ldw	r2,-12(fp)
  80d5f8:	11000284 	addi	r4,r2,10
  80d5fc:	e17ffe17 	ldw	r5,-8(fp)
  80d600:	080c5500 	call	80c550 <OS_StrCopy>
  80d604:	e0bffb17 	ldw	r2,-20(fp)
  80d608:	e0bff715 	stw	r2,-36(fp)
  80d60c:	e0bff717 	ldw	r2,-36(fp)
  80d610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d614:	e0bfff17 	ldw	r2,-4(fp)
  80d618:	10000005 	stb	zero,0(r2)
    return;
}
  80d61c:	e037883a 	mov	sp,fp
  80d620:	dfc00117 	ldw	ra,4(sp)
  80d624:	df000017 	ldw	fp,0(sp)
  80d628:	dec00204 	addi	sp,sp,8
  80d62c:	f800283a 	ret

0080d630 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  80d630:	deffe004 	addi	sp,sp,-128
  80d634:	dfc01f15 	stw	ra,124(sp)
  80d638:	df001e15 	stw	fp,120(sp)
  80d63c:	df001e04 	addi	fp,sp,120
  80d640:	e13ff915 	stw	r4,-28(fp)
  80d644:	e17ffa0d 	sth	r5,-24(fp)
  80d648:	e1bffb05 	stb	r6,-20(fp)
  80d64c:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80d650:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80d654:	e0800217 	ldw	r2,8(fp)
  80d658:	1004c03a 	cmpne	r2,r2,zero
  80d65c:	1000021e 	bne	r2,zero,80d668 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  80d660:	e03fff15 	stw	zero,-4(fp)
  80d664:	00017d06 	br	80dc5c <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80d668:	e0bff917 	ldw	r2,-28(fp)
  80d66c:	1004c03a 	cmpne	r2,r2,zero
  80d670:	1000051e 	bne	r2,zero,80d688 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80d674:	e0c00217 	ldw	r3,8(fp)
  80d678:	00801b84 	movi	r2,110
  80d67c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d680:	e03fff15 	stw	zero,-4(fp)
  80d684:	00017506 	br	80dc5c <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80d688:	008020b4 	movhi	r2,130
  80d68c:	10a53604 	addi	r2,r2,-27432
  80d690:	10800003 	ldbu	r2,0(r2)
  80d694:	10803fcc 	andi	r2,r2,255
  80d698:	1005003a 	cmpeq	r2,r2,zero
  80d69c:	1000051e 	bne	r2,zero,80d6b4 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  80d6a0:	e0c00217 	ldw	r3,8(fp)
  80d6a4:	00800084 	movi	r2,2
  80d6a8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d6ac:	e03fff15 	stw	zero,-4(fp)
  80d6b0:	00016a06 	br	80dc5c <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  80d6b4:	008020b4 	movhi	r2,130
  80d6b8:	10a52804 	addi	r2,r2,-27488
  80d6bc:	10800003 	ldbu	r2,0(r2)
  80d6c0:	10803fcc 	andi	r2,r2,255
  80d6c4:	1005003a 	cmpeq	r2,r2,zero
  80d6c8:	1000051e 	bne	r2,zero,80d6e0 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  80d6cc:	e0c00217 	ldw	r3,8(fp)
  80d6d0:	00800344 	movi	r2,13
  80d6d4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d6d8:	e03fff15 	stw	zero,-4(fp)
  80d6dc:	00015f06 	br	80dc5c <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80d6e0:	e0bff917 	ldw	r2,-28(fp)
  80d6e4:	10800003 	ldbu	r2,0(r2)
  80d6e8:	10803fcc 	andi	r2,r2,255
  80d6ec:	10800160 	cmpeqi	r2,r2,5
  80d6f0:	1000051e 	bne	r2,zero,80d708 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  80d6f4:	e0c00217 	ldw	r3,8(fp)
  80d6f8:	00800044 	movi	r2,1
  80d6fc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80d700:	e03fff15 	stw	zero,-4(fp)
  80d704:	00015506 	br	80dc5c <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80d708:	e0fffb03 	ldbu	r3,-20(fp)
  80d70c:	00bfe004 	movi	r2,-128
  80d710:	1884703a 	and	r2,r3,r2
  80d714:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  80d718:	e0bff283 	ldbu	r2,-54(fp)
  80d71c:	1005003a 	cmpeq	r2,r2,zero
  80d720:	1000071e 	bne	r2,zero,80d740 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  80d724:	00c01fc4 	movi	r3,127
  80d728:	e0bffb03 	ldbu	r2,-20(fp)
  80d72c:	10c4703a 	and	r2,r2,r3
  80d730:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  80d734:	00800044 	movi	r2,1
  80d738:	e0bff205 	stb	r2,-56(fp)
  80d73c:	00000106 	br	80d744 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  80d740:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d744:	0005303a 	rdctl	r2,status
  80d748:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d74c:	e0fff017 	ldw	r3,-64(fp)
  80d750:	00bfff84 	movi	r2,-2
  80d754:	1884703a 	and	r2,r3,r2
  80d758:	1001703a 	wrctl	status,r2
  
  return context;
  80d75c:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80d760:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  80d764:	e0bffb03 	ldbu	r2,-20(fp)
  80d768:	e0bffe15 	stw	r2,-8(fp)
  80d76c:	e0fffe17 	ldw	r3,-8(fp)
  80d770:	18800060 	cmpeqi	r2,r3,1
  80d774:	1000981e 	bne	r2,zero,80d9d8 <OSFlagPend+0x3a8>
  80d778:	e0fffe17 	ldw	r3,-8(fp)
  80d77c:	18800088 	cmpgei	r2,r3,2
  80d780:	1000041e 	bne	r2,zero,80d794 <OSFlagPend+0x164>
  80d784:	e0fffe17 	ldw	r3,-8(fp)
  80d788:	1805003a 	cmpeq	r2,r3,zero
  80d78c:	1000641e 	bne	r2,zero,80d920 <OSFlagPend+0x2f0>
  80d790:	0000bf06 	br	80da90 <OSFlagPend+0x460>
  80d794:	e0fffe17 	ldw	r3,-8(fp)
  80d798:	188000a0 	cmpeqi	r2,r3,2
  80d79c:	1000041e 	bne	r2,zero,80d7b0 <OSFlagPend+0x180>
  80d7a0:	e0fffe17 	ldw	r3,-8(fp)
  80d7a4:	188000e0 	cmpeqi	r2,r3,3
  80d7a8:	10002f1e 	bne	r2,zero,80d868 <OSFlagPend+0x238>
  80d7ac:	0000b806 	br	80da90 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  80d7b0:	e0bff917 	ldw	r2,-28(fp)
  80d7b4:	10c0020b 	ldhu	r3,8(r2)
  80d7b8:	e0bffa0b 	ldhu	r2,-24(fp)
  80d7bc:	1884703a 	and	r2,r3,r2
  80d7c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d7c4:	e0fff30b 	ldhu	r3,-52(fp)
  80d7c8:	e0bffa0b 	ldhu	r2,-24(fp)
  80d7cc:	18801a1e 	bne	r3,r2,80d838 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d7d0:	e0bff203 	ldbu	r2,-56(fp)
  80d7d4:	10800058 	cmpnei	r2,r2,1
  80d7d8:	1000091e 	bne	r2,zero,80d800 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80d7dc:	e0bff917 	ldw	r2,-28(fp)
  80d7e0:	1080020b 	ldhu	r2,8(r2)
  80d7e4:	1007883a 	mov	r3,r2
  80d7e8:	e0bff30b 	ldhu	r2,-52(fp)
  80d7ec:	0084303a 	nor	r2,zero,r2
  80d7f0:	1884703a 	and	r2,r3,r2
  80d7f4:	1007883a 	mov	r3,r2
  80d7f8:	e0bff917 	ldw	r2,-28(fp)
  80d7fc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80d800:	008020b4 	movhi	r2,130
  80d804:	10a53704 	addi	r2,r2,-27428
  80d808:	10c00017 	ldw	r3,0(r2)
  80d80c:	e0bff30b 	ldhu	r2,-52(fp)
  80d810:	18800b0d 	sth	r2,44(r3)
  80d814:	e0bff117 	ldw	r2,-60(fp)
  80d818:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d81c:	e0bfef17 	ldw	r2,-68(fp)
  80d820:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80d824:	e0800217 	ldw	r2,8(fp)
  80d828:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80d82c:	e0bff30b 	ldhu	r2,-52(fp)
  80d830:	e0bfff15 	stw	r2,-4(fp)
  80d834:	00010906 	br	80dc5c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80d838:	e1bffa0b 	ldhu	r6,-24(fp)
  80d83c:	e1fffb03 	ldbu	r7,-20(fp)
  80d840:	e0bffc0b 	ldhu	r2,-16(fp)
  80d844:	e17ff404 	addi	r5,fp,-48
  80d848:	d8800015 	stw	r2,0(sp)
  80d84c:	e13ff917 	ldw	r4,-28(fp)
  80d850:	080e1580 	call	80e158 <OS_FlagBlock>
  80d854:	e0bff117 	ldw	r2,-60(fp)
  80d858:	e0bfee15 	stw	r2,-72(fp)
  80d85c:	e0bfee17 	ldw	r2,-72(fp)
  80d860:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80d864:	00009506 	br	80dabc <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  80d868:	e0bff917 	ldw	r2,-28(fp)
  80d86c:	10c0020b 	ldhu	r3,8(r2)
  80d870:	e0bffa0b 	ldhu	r2,-24(fp)
  80d874:	1884703a 	and	r2,r3,r2
  80d878:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80d87c:	e0bff30b 	ldhu	r2,-52(fp)
  80d880:	1005003a 	cmpeq	r2,r2,zero
  80d884:	10001a1e 	bne	r2,zero,80d8f0 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d888:	e0bff203 	ldbu	r2,-56(fp)
  80d88c:	10800058 	cmpnei	r2,r2,1
  80d890:	1000091e 	bne	r2,zero,80d8b8 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80d894:	e0bff917 	ldw	r2,-28(fp)
  80d898:	1080020b 	ldhu	r2,8(r2)
  80d89c:	1007883a 	mov	r3,r2
  80d8a0:	e0bff30b 	ldhu	r2,-52(fp)
  80d8a4:	0084303a 	nor	r2,zero,r2
  80d8a8:	1884703a 	and	r2,r3,r2
  80d8ac:	1007883a 	mov	r3,r2
  80d8b0:	e0bff917 	ldw	r2,-28(fp)
  80d8b4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80d8b8:	008020b4 	movhi	r2,130
  80d8bc:	10a53704 	addi	r2,r2,-27428
  80d8c0:	10c00017 	ldw	r3,0(r2)
  80d8c4:	e0bff30b 	ldhu	r2,-52(fp)
  80d8c8:	18800b0d 	sth	r2,44(r3)
  80d8cc:	e0bff117 	ldw	r2,-60(fp)
  80d8d0:	e0bfed15 	stw	r2,-76(fp)
  80d8d4:	e0bfed17 	ldw	r2,-76(fp)
  80d8d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80d8dc:	e0800217 	ldw	r2,8(fp)
  80d8e0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80d8e4:	e0fff30b 	ldhu	r3,-52(fp)
  80d8e8:	e0ffff15 	stw	r3,-4(fp)
  80d8ec:	0000db06 	br	80dc5c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80d8f0:	e1bffa0b 	ldhu	r6,-24(fp)
  80d8f4:	e1fffb03 	ldbu	r7,-20(fp)
  80d8f8:	e0bffc0b 	ldhu	r2,-16(fp)
  80d8fc:	e17ff404 	addi	r5,fp,-48
  80d900:	d8800015 	stw	r2,0(sp)
  80d904:	e13ff917 	ldw	r4,-28(fp)
  80d908:	080e1580 	call	80e158 <OS_FlagBlock>
  80d90c:	e0bff117 	ldw	r2,-60(fp)
  80d910:	e0bfec15 	stw	r2,-80(fp)
  80d914:	e0bfec17 	ldw	r2,-80(fp)
  80d918:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80d91c:	00006706 	br	80dabc <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80d920:	e0bff917 	ldw	r2,-28(fp)
  80d924:	1080020b 	ldhu	r2,8(r2)
  80d928:	0084303a 	nor	r2,zero,r2
  80d92c:	1007883a 	mov	r3,r2
  80d930:	e0bffa0b 	ldhu	r2,-24(fp)
  80d934:	1884703a 	and	r2,r3,r2
  80d938:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80d93c:	e0fff30b 	ldhu	r3,-52(fp)
  80d940:	e0bffa0b 	ldhu	r2,-24(fp)
  80d944:	1880181e 	bne	r3,r2,80d9a8 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80d948:	e0bff203 	ldbu	r2,-56(fp)
  80d94c:	10800058 	cmpnei	r2,r2,1
  80d950:	1000071e 	bne	r2,zero,80d970 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80d954:	e0bff917 	ldw	r2,-28(fp)
  80d958:	10c0020b 	ldhu	r3,8(r2)
  80d95c:	e0bff30b 	ldhu	r2,-52(fp)
  80d960:	1884b03a 	or	r2,r3,r2
  80d964:	1007883a 	mov	r3,r2
  80d968:	e0bff917 	ldw	r2,-28(fp)
  80d96c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80d970:	008020b4 	movhi	r2,130
  80d974:	10a53704 	addi	r2,r2,-27428
  80d978:	10c00017 	ldw	r3,0(r2)
  80d97c:	e0bff30b 	ldhu	r2,-52(fp)
  80d980:	18800b0d 	sth	r2,44(r3)
  80d984:	e0bff117 	ldw	r2,-60(fp)
  80d988:	e0bfeb15 	stw	r2,-84(fp)
  80d98c:	e0bfeb17 	ldw	r2,-84(fp)
  80d990:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80d994:	e0800217 	ldw	r2,8(fp)
  80d998:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80d99c:	e0bff30b 	ldhu	r2,-52(fp)
  80d9a0:	e0bfff15 	stw	r2,-4(fp)
  80d9a4:	0000ad06 	br	80dc5c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80d9a8:	e1bffa0b 	ldhu	r6,-24(fp)
  80d9ac:	e1fffb03 	ldbu	r7,-20(fp)
  80d9b0:	e0bffc0b 	ldhu	r2,-16(fp)
  80d9b4:	e17ff404 	addi	r5,fp,-48
  80d9b8:	d8800015 	stw	r2,0(sp)
  80d9bc:	e13ff917 	ldw	r4,-28(fp)
  80d9c0:	080e1580 	call	80e158 <OS_FlagBlock>
  80d9c4:	e0bff117 	ldw	r2,-60(fp)
  80d9c8:	e0bfea15 	stw	r2,-88(fp)
  80d9cc:	e0bfea17 	ldw	r2,-88(fp)
  80d9d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80d9d4:	00003906 	br	80dabc <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80d9d8:	e0bff917 	ldw	r2,-28(fp)
  80d9dc:	1080020b 	ldhu	r2,8(r2)
  80d9e0:	0084303a 	nor	r2,zero,r2
  80d9e4:	1007883a 	mov	r3,r2
  80d9e8:	e0bffa0b 	ldhu	r2,-24(fp)
  80d9ec:	1884703a 	and	r2,r3,r2
  80d9f0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80d9f4:	e0bff30b 	ldhu	r2,-52(fp)
  80d9f8:	1005003a 	cmpeq	r2,r2,zero
  80d9fc:	1000181e 	bne	r2,zero,80da60 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80da00:	e0bff203 	ldbu	r2,-56(fp)
  80da04:	10800058 	cmpnei	r2,r2,1
  80da08:	1000071e 	bne	r2,zero,80da28 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80da0c:	e0bff917 	ldw	r2,-28(fp)
  80da10:	10c0020b 	ldhu	r3,8(r2)
  80da14:	e0bff30b 	ldhu	r2,-52(fp)
  80da18:	1884b03a 	or	r2,r3,r2
  80da1c:	1007883a 	mov	r3,r2
  80da20:	e0bff917 	ldw	r2,-28(fp)
  80da24:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  80da28:	008020b4 	movhi	r2,130
  80da2c:	10a53704 	addi	r2,r2,-27428
  80da30:	10c00017 	ldw	r3,0(r2)
  80da34:	e0bff30b 	ldhu	r2,-52(fp)
  80da38:	18800b0d 	sth	r2,44(r3)
  80da3c:	e0bff117 	ldw	r2,-60(fp)
  80da40:	e0bfe915 	stw	r2,-92(fp)
  80da44:	e0bfe917 	ldw	r2,-92(fp)
  80da48:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  80da4c:	e0800217 	ldw	r2,8(fp)
  80da50:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  80da54:	e0fff30b 	ldhu	r3,-52(fp)
  80da58:	e0ffff15 	stw	r3,-4(fp)
  80da5c:	00007f06 	br	80dc5c <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  80da60:	e1bffa0b 	ldhu	r6,-24(fp)
  80da64:	e1fffb03 	ldbu	r7,-20(fp)
  80da68:	e0bffc0b 	ldhu	r2,-16(fp)
  80da6c:	e17ff404 	addi	r5,fp,-48
  80da70:	d8800015 	stw	r2,0(sp)
  80da74:	e13ff917 	ldw	r4,-28(fp)
  80da78:	080e1580 	call	80e158 <OS_FlagBlock>
  80da7c:	e0bff117 	ldw	r2,-60(fp)
  80da80:	e0bfe815 	stw	r2,-96(fp)
  80da84:	e0bfe817 	ldw	r2,-96(fp)
  80da88:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  80da8c:	00000b06 	br	80dabc <OSFlagPend+0x48c>
  80da90:	e0bff117 	ldw	r2,-60(fp)
  80da94:	e0bfe715 	stw	r2,-100(fp)
  80da98:	e0bfe717 	ldw	r2,-100(fp)
  80da9c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80daa0:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  80daa4:	e0c00217 	ldw	r3,8(fp)
  80daa8:	00801bc4 	movi	r2,111
  80daac:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  80dab0:	e0bff30b 	ldhu	r2,-52(fp)
  80dab4:	e0bfff15 	stw	r2,-4(fp)
  80dab8:	00006806 	br	80dc5c <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  80dabc:	080c40c0 	call	80c40c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dac0:	0005303a 	rdctl	r2,status
  80dac4:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dac8:	e0ffe617 	ldw	r3,-104(fp)
  80dacc:	00bfff84 	movi	r2,-2
  80dad0:	1884703a 	and	r2,r3,r2
  80dad4:	1001703a 	wrctl	status,r2
  
  return context;
  80dad8:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  80dadc:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  80dae0:	008020b4 	movhi	r2,130
  80dae4:	10a53704 	addi	r2,r2,-27428
  80dae8:	10800017 	ldw	r2,0(r2)
  80daec:	10800c43 	ldbu	r2,49(r2)
  80daf0:	10803fcc 	andi	r2,r2,255
  80daf4:	1005003a 	cmpeq	r2,r2,zero
  80daf8:	1000221e 	bne	r2,zero,80db84 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  80dafc:	008020b4 	movhi	r2,130
  80db00:	10a53704 	addi	r2,r2,-27428
  80db04:	10800017 	ldw	r2,0(r2)
  80db08:	10800c43 	ldbu	r2,49(r2)
  80db0c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80db10:	008020b4 	movhi	r2,130
  80db14:	10a53704 	addi	r2,r2,-27428
  80db18:	10800017 	ldw	r2,0(r2)
  80db1c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  80db20:	e13ff404 	addi	r4,fp,-48
  80db24:	080e5100 	call	80e510 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  80db28:	008020b4 	movhi	r2,130
  80db2c:	10a53704 	addi	r2,r2,-27428
  80db30:	10800017 	ldw	r2,0(r2)
  80db34:	10000c05 	stb	zero,48(r2)
  80db38:	e0bff117 	ldw	r2,-60(fp)
  80db3c:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80db40:	e0bfe517 	ldw	r2,-108(fp)
  80db44:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  80db48:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  80db4c:	e0bff243 	ldbu	r2,-55(fp)
  80db50:	108000a0 	cmpeqi	r2,r2,2
  80db54:	1000011e 	bne	r2,zero,80db5c <OSFlagPend+0x52c>
  80db58:	00000406 	br	80db6c <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  80db5c:	e0c00217 	ldw	r3,8(fp)
  80db60:	00800384 	movi	r2,14
  80db64:	18800005 	stb	r2,0(r3)
                 break;
  80db68:	00000306 	br	80db78 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  80db6c:	e0c00217 	ldw	r3,8(fp)
  80db70:	00800284 	movi	r2,10
  80db74:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  80db78:	e0fff30b 	ldhu	r3,-52(fp)
  80db7c:	e0ffff15 	stw	r3,-4(fp)
  80db80:	00003606 	br	80dc5c <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  80db84:	008020b4 	movhi	r2,130
  80db88:	10a53704 	addi	r2,r2,-27428
  80db8c:	10800017 	ldw	r2,0(r2)
  80db90:	10800b0b 	ldhu	r2,44(r2)
  80db94:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  80db98:	e0bff203 	ldbu	r2,-56(fp)
  80db9c:	10800058 	cmpnei	r2,r2,1
  80dba0:	1000261e 	bne	r2,zero,80dc3c <OSFlagPend+0x60c>
        switch (wait_type) {
  80dba4:	e0bffb03 	ldbu	r2,-20(fp)
  80dba8:	e0bffd15 	stw	r2,-12(fp)
  80dbac:	e0fffd17 	ldw	r3,-12(fp)
  80dbb0:	1804803a 	cmplt	r2,r3,zero
  80dbb4:	1000181e 	bne	r2,zero,80dc18 <OSFlagPend+0x5e8>
  80dbb8:	e0fffd17 	ldw	r3,-12(fp)
  80dbbc:	18800090 	cmplti	r2,r3,2
  80dbc0:	10000d1e 	bne	r2,zero,80dbf8 <OSFlagPend+0x5c8>
  80dbc4:	e0fffd17 	ldw	r3,-12(fp)
  80dbc8:	18800108 	cmpgei	r2,r3,4
  80dbcc:	1000121e 	bne	r2,zero,80dc18 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  80dbd0:	e0bff917 	ldw	r2,-28(fp)
  80dbd4:	1080020b 	ldhu	r2,8(r2)
  80dbd8:	1007883a 	mov	r3,r2
  80dbdc:	e0bff30b 	ldhu	r2,-52(fp)
  80dbe0:	0084303a 	nor	r2,zero,r2
  80dbe4:	1884703a 	and	r2,r3,r2
  80dbe8:	1007883a 	mov	r3,r2
  80dbec:	e0bff917 	ldw	r2,-28(fp)
  80dbf0:	10c0020d 	sth	r3,8(r2)
                 break;
  80dbf4:	00001106 	br	80dc3c <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  80dbf8:	e0bff917 	ldw	r2,-28(fp)
  80dbfc:	10c0020b 	ldhu	r3,8(r2)
  80dc00:	e0bff30b 	ldhu	r2,-52(fp)
  80dc04:	1884b03a 	or	r2,r3,r2
  80dc08:	1007883a 	mov	r3,r2
  80dc0c:	e0bff917 	ldw	r2,-28(fp)
  80dc10:	10c0020d 	sth	r3,8(r2)
                 break;
  80dc14:	00000906 	br	80dc3c <OSFlagPend+0x60c>
  80dc18:	e0bff117 	ldw	r2,-60(fp)
  80dc1c:	e0bfe415 	stw	r2,-112(fp)
  80dc20:	e0bfe417 	ldw	r2,-112(fp)
  80dc24:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80dc28:	e0c00217 	ldw	r3,8(fp)
  80dc2c:	00801bc4 	movi	r2,111
  80dc30:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80dc34:	e03fff15 	stw	zero,-4(fp)
  80dc38:	00000806 	br	80dc5c <OSFlagPend+0x62c>
  80dc3c:	e0bff117 	ldw	r2,-60(fp)
  80dc40:	e0bfe315 	stw	r2,-116(fp)
  80dc44:	e0bfe317 	ldw	r2,-116(fp)
  80dc48:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  80dc4c:	e0800217 	ldw	r2,8(fp)
  80dc50:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  80dc54:	e0bff30b 	ldhu	r2,-52(fp)
  80dc58:	e0bfff15 	stw	r2,-4(fp)
  80dc5c:	e0bfff17 	ldw	r2,-4(fp)
}
  80dc60:	e037883a 	mov	sp,fp
  80dc64:	dfc00117 	ldw	ra,4(sp)
  80dc68:	df000017 	ldw	fp,0(sp)
  80dc6c:	dec00204 	addi	sp,sp,8
  80dc70:	f800283a 	ret

0080dc74 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  80dc74:	defffb04 	addi	sp,sp,-20
  80dc78:	df000415 	stw	fp,16(sp)
  80dc7c:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80dc80:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dc84:	0005303a 	rdctl	r2,status
  80dc88:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dc8c:	e0fffd17 	ldw	r3,-12(fp)
  80dc90:	00bfff84 	movi	r2,-2
  80dc94:	1884703a 	and	r2,r3,r2
  80dc98:	1001703a 	wrctl	status,r2
  
  return context;
  80dc9c:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  80dca0:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  80dca4:	008020b4 	movhi	r2,130
  80dca8:	10a53704 	addi	r2,r2,-27428
  80dcac:	10800017 	ldw	r2,0(r2)
  80dcb0:	10800b0b 	ldhu	r2,44(r2)
  80dcb4:	e0bfff0d 	sth	r2,-4(fp)
  80dcb8:	e0bffe17 	ldw	r2,-8(fp)
  80dcbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dcc0:	e0bffc17 	ldw	r2,-16(fp)
  80dcc4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  80dcc8:	e0bfff0b 	ldhu	r2,-4(fp)
}
  80dccc:	e037883a 	mov	sp,fp
  80dcd0:	df000017 	ldw	fp,0(sp)
  80dcd4:	dec00104 	addi	sp,sp,4
  80dcd8:	f800283a 	ret

0080dcdc <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  80dcdc:	deffed04 	addi	sp,sp,-76
  80dce0:	dfc01215 	stw	ra,72(sp)
  80dce4:	df001115 	stw	fp,68(sp)
  80dce8:	df001104 	addi	fp,sp,68
  80dcec:	e13ff915 	stw	r4,-28(fp)
  80dcf0:	e1fffc15 	stw	r7,-16(fp)
  80dcf4:	e17ffa0d 	sth	r5,-24(fp)
  80dcf8:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  80dcfc:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  80dd00:	e0bffc17 	ldw	r2,-16(fp)
  80dd04:	1004c03a 	cmpne	r2,r2,zero
  80dd08:	1000021e 	bne	r2,zero,80dd14 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  80dd0c:	e03fff15 	stw	zero,-4(fp)
  80dd10:	0000d606 	br	80e06c <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  80dd14:	e0bff917 	ldw	r2,-28(fp)
  80dd18:	1004c03a 	cmpne	r2,r2,zero
  80dd1c:	1000051e 	bne	r2,zero,80dd34 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80dd20:	e0fffc17 	ldw	r3,-16(fp)
  80dd24:	00801b84 	movi	r2,110
  80dd28:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dd2c:	e03fff15 	stw	zero,-4(fp)
  80dd30:	0000ce06 	br	80e06c <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  80dd34:	e0bff917 	ldw	r2,-28(fp)
  80dd38:	10800003 	ldbu	r2,0(r2)
  80dd3c:	10803fcc 	andi	r2,r2,255
  80dd40:	10800160 	cmpeqi	r2,r2,5
  80dd44:	1000051e 	bne	r2,zero,80dd5c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  80dd48:	e0fffc17 	ldw	r3,-16(fp)
  80dd4c:	00800044 	movi	r2,1
  80dd50:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80dd54:	e03fff15 	stw	zero,-4(fp)
  80dd58:	0000c406 	br	80e06c <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd5c:	0005303a 	rdctl	r2,status
  80dd60:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd64:	e0fff417 	ldw	r3,-48(fp)
  80dd68:	00bfff84 	movi	r2,-2
  80dd6c:	1884703a 	and	r2,r3,r2
  80dd70:	1001703a 	wrctl	status,r2
  
  return context;
  80dd74:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  80dd78:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  80dd7c:	e0bffb03 	ldbu	r2,-20(fp)
  80dd80:	e0bffe15 	stw	r2,-8(fp)
  80dd84:	e0fffe17 	ldw	r3,-8(fp)
  80dd88:	1805003a 	cmpeq	r2,r3,zero
  80dd8c:	1000041e 	bne	r2,zero,80dda0 <OSFlagPost+0xc4>
  80dd90:	e0fffe17 	ldw	r3,-8(fp)
  80dd94:	18800060 	cmpeqi	r2,r3,1
  80dd98:	10000b1e 	bne	r2,zero,80ddc8 <OSFlagPost+0xec>
  80dd9c:	00001206 	br	80dde8 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  80dda0:	e0bff917 	ldw	r2,-28(fp)
  80dda4:	1080020b 	ldhu	r2,8(r2)
  80dda8:	1007883a 	mov	r3,r2
  80ddac:	e0bffa0b 	ldhu	r2,-24(fp)
  80ddb0:	0084303a 	nor	r2,zero,r2
  80ddb4:	1884703a 	and	r2,r3,r2
  80ddb8:	1007883a 	mov	r3,r2
  80ddbc:	e0bff917 	ldw	r2,-28(fp)
  80ddc0:	10c0020d 	sth	r3,8(r2)
             break;
  80ddc4:	00001106 	br	80de0c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  80ddc8:	e0bff917 	ldw	r2,-28(fp)
  80ddcc:	10c0020b 	ldhu	r3,8(r2)
  80ddd0:	e0bffa0b 	ldhu	r2,-24(fp)
  80ddd4:	1884b03a 	or	r2,r3,r2
  80ddd8:	1007883a 	mov	r3,r2
  80dddc:	e0bff917 	ldw	r2,-28(fp)
  80dde0:	10c0020d 	sth	r3,8(r2)
             break;
  80dde4:	00000906 	br	80de0c <OSFlagPost+0x130>
  80dde8:	e0bff517 	ldw	r2,-44(fp)
  80ddec:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddf0:	e0bff317 	ldw	r2,-52(fp)
  80ddf4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  80ddf8:	e0fffc17 	ldw	r3,-16(fp)
  80ddfc:	00801c44 	movi	r2,113
  80de00:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  80de04:	e03fff15 	stw	zero,-4(fp)
  80de08:	00009806 	br	80e06c <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  80de0c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80de10:	e0bff917 	ldw	r2,-28(fp)
  80de14:	10800117 	ldw	r2,4(r2)
  80de18:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80de1c:	00007506 	br	80dff4 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  80de20:	e0bff817 	ldw	r2,-32(fp)
  80de24:	10800483 	ldbu	r2,18(r2)
  80de28:	10803fcc 	andi	r2,r2,255
  80de2c:	e0bffd15 	stw	r2,-12(fp)
  80de30:	e0fffd17 	ldw	r3,-12(fp)
  80de34:	18800060 	cmpeqi	r2,r3,1
  80de38:	10004d1e 	bne	r2,zero,80df70 <OSFlagPost+0x294>
  80de3c:	e0fffd17 	ldw	r3,-12(fp)
  80de40:	18800088 	cmpgei	r2,r3,2
  80de44:	1000041e 	bne	r2,zero,80de58 <OSFlagPost+0x17c>
  80de48:	e0fffd17 	ldw	r3,-12(fp)
  80de4c:	1805003a 	cmpeq	r2,r3,zero
  80de50:	1000301e 	bne	r2,zero,80df14 <OSFlagPost+0x238>
  80de54:	00005b06 	br	80dfc4 <OSFlagPost+0x2e8>
  80de58:	e0fffd17 	ldw	r3,-12(fp)
  80de5c:	188000a0 	cmpeqi	r2,r3,2
  80de60:	1000041e 	bne	r2,zero,80de74 <OSFlagPost+0x198>
  80de64:	e0fffd17 	ldw	r3,-12(fp)
  80de68:	188000e0 	cmpeqi	r2,r3,3
  80de6c:	1000161e 	bne	r2,zero,80dec8 <OSFlagPost+0x1ec>
  80de70:	00005406 	br	80dfc4 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80de74:	e0bff917 	ldw	r2,-28(fp)
  80de78:	10c0020b 	ldhu	r3,8(r2)
  80de7c:	e0bff817 	ldw	r2,-32(fp)
  80de80:	1080040b 	ldhu	r2,16(r2)
  80de84:	1884703a 	and	r2,r3,r2
  80de88:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80de8c:	e0bff817 	ldw	r2,-32(fp)
  80de90:	1080040b 	ldhu	r2,16(r2)
  80de94:	10ffffcc 	andi	r3,r2,65535
  80de98:	e0bff68b 	ldhu	r2,-38(fp)
  80de9c:	1880521e 	bne	r3,r2,80dfe8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80dea0:	e17ff68b 	ldhu	r5,-38(fp)
  80dea4:	e13ff817 	ldw	r4,-32(fp)
  80dea8:	080e4000 	call	80e400 <OS_FlagTaskRdy>
  80deac:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80deb0:	e0bff603 	ldbu	r2,-40(fp)
  80deb4:	10800058 	cmpnei	r2,r2,1
  80deb8:	10004b1e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80debc:	00800044 	movi	r2,1
  80dec0:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80dec4:	00004806 	br	80dfe8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80dec8:	e0bff917 	ldw	r2,-28(fp)
  80decc:	10c0020b 	ldhu	r3,8(r2)
  80ded0:	e0bff817 	ldw	r2,-32(fp)
  80ded4:	1080040b 	ldhu	r2,16(r2)
  80ded8:	1884703a 	and	r2,r3,r2
  80dedc:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80dee0:	e0bff68b 	ldhu	r2,-38(fp)
  80dee4:	1005003a 	cmpeq	r2,r2,zero
  80dee8:	10003f1e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80deec:	e17ff68b 	ldhu	r5,-38(fp)
  80def0:	e13ff817 	ldw	r4,-32(fp)
  80def4:	080e4000 	call	80e400 <OS_FlagTaskRdy>
  80def8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80defc:	e0bff603 	ldbu	r2,-40(fp)
  80df00:	10800058 	cmpnei	r2,r2,1
  80df04:	1000381e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80df08:	00800044 	movi	r2,1
  80df0c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80df10:	00003506 	br	80dfe8 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80df14:	e0bff917 	ldw	r2,-28(fp)
  80df18:	1080020b 	ldhu	r2,8(r2)
  80df1c:	0084303a 	nor	r2,zero,r2
  80df20:	1007883a 	mov	r3,r2
  80df24:	e0bff817 	ldw	r2,-32(fp)
  80df28:	1080040b 	ldhu	r2,16(r2)
  80df2c:	1884703a 	and	r2,r3,r2
  80df30:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  80df34:	e0bff817 	ldw	r2,-32(fp)
  80df38:	1080040b 	ldhu	r2,16(r2)
  80df3c:	10ffffcc 	andi	r3,r2,65535
  80df40:	e0bff68b 	ldhu	r2,-38(fp)
  80df44:	1880281e 	bne	r3,r2,80dfe8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80df48:	e17ff68b 	ldhu	r5,-38(fp)
  80df4c:	e13ff817 	ldw	r4,-32(fp)
  80df50:	080e4000 	call	80e400 <OS_FlagTaskRdy>
  80df54:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80df58:	e0bff603 	ldbu	r2,-40(fp)
  80df5c:	10800058 	cmpnei	r2,r2,1
  80df60:	1000211e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80df64:	00800044 	movi	r2,1
  80df68:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80df6c:	00001e06 	br	80dfe8 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  80df70:	e0bff917 	ldw	r2,-28(fp)
  80df74:	1080020b 	ldhu	r2,8(r2)
  80df78:	0084303a 	nor	r2,zero,r2
  80df7c:	1007883a 	mov	r3,r2
  80df80:	e0bff817 	ldw	r2,-32(fp)
  80df84:	1080040b 	ldhu	r2,16(r2)
  80df88:	1884703a 	and	r2,r3,r2
  80df8c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  80df90:	e0bff68b 	ldhu	r2,-38(fp)
  80df94:	1005003a 	cmpeq	r2,r2,zero
  80df98:	1000131e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  80df9c:	e17ff68b 	ldhu	r5,-38(fp)
  80dfa0:	e13ff817 	ldw	r4,-32(fp)
  80dfa4:	080e4000 	call	80e400 <OS_FlagTaskRdy>
  80dfa8:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  80dfac:	e0bff603 	ldbu	r2,-40(fp)
  80dfb0:	10800058 	cmpnei	r2,r2,1
  80dfb4:	10000c1e 	bne	r2,zero,80dfe8 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  80dfb8:	00800044 	movi	r2,1
  80dfbc:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  80dfc0:	00000906 	br	80dfe8 <OSFlagPost+0x30c>
  80dfc4:	e0bff517 	ldw	r2,-44(fp)
  80dfc8:	e0bff215 	stw	r2,-56(fp)
  80dfcc:	e0bff217 	ldw	r2,-56(fp)
  80dfd0:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  80dfd4:	e0fffc17 	ldw	r3,-16(fp)
  80dfd8:	00801bc4 	movi	r2,111
  80dfdc:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  80dfe0:	e03fff15 	stw	zero,-4(fp)
  80dfe4:	00002106 	br	80e06c <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  80dfe8:	e0bff817 	ldw	r2,-32(fp)
  80dfec:	10800017 	ldw	r2,0(r2)
  80dff0:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  80dff4:	e0bff817 	ldw	r2,-32(fp)
  80dff8:	1004c03a 	cmpne	r2,r2,zero
  80dffc:	103f881e 	bne	r2,zero,80de20 <OSFlagPost+0x144>
  80e000:	e0bff517 	ldw	r2,-44(fp)
  80e004:	e0bff115 	stw	r2,-60(fp)
  80e008:	e0bff117 	ldw	r2,-60(fp)
  80e00c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  80e010:	e0bff783 	ldbu	r2,-34(fp)
  80e014:	10800058 	cmpnei	r2,r2,1
  80e018:	1000011e 	bne	r2,zero,80e020 <OSFlagPost+0x344>
        OS_Sched();
  80e01c:	080c40c0 	call	80c40c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e020:	0005303a 	rdctl	r2,status
  80e024:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e028:	e0fff017 	ldw	r3,-64(fp)
  80e02c:	00bfff84 	movi	r2,-2
  80e030:	1884703a 	and	r2,r3,r2
  80e034:	1001703a 	wrctl	status,r2
  
  return context;
  80e038:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  80e03c:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  80e040:	e0bff917 	ldw	r2,-28(fp)
  80e044:	1080020b 	ldhu	r2,8(r2)
  80e048:	e0bff70d 	sth	r2,-36(fp)
  80e04c:	e0bff517 	ldw	r2,-44(fp)
  80e050:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e054:	e0bfef17 	ldw	r2,-68(fp)
  80e058:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  80e05c:	e0bffc17 	ldw	r2,-16(fp)
  80e060:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  80e064:	e0bff70b 	ldhu	r2,-36(fp)
  80e068:	e0bfff15 	stw	r2,-4(fp)
  80e06c:	e0bfff17 	ldw	r2,-4(fp)
}
  80e070:	e037883a 	mov	sp,fp
  80e074:	dfc00117 	ldw	ra,4(sp)
  80e078:	df000017 	ldw	fp,0(sp)
  80e07c:	dec00204 	addi	sp,sp,8
  80e080:	f800283a 	ret

0080e084 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  80e084:	defff804 	addi	sp,sp,-32
  80e088:	df000715 	stw	fp,28(sp)
  80e08c:	df000704 	addi	fp,sp,28
  80e090:	e13ffd15 	stw	r4,-12(fp)
  80e094:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  80e098:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  80e09c:	e0bffe17 	ldw	r2,-8(fp)
  80e0a0:	1004c03a 	cmpne	r2,r2,zero
  80e0a4:	1000021e 	bne	r2,zero,80e0b0 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  80e0a8:	e03fff15 	stw	zero,-4(fp)
  80e0ac:	00002506 	br	80e144 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  80e0b0:	e0bffd17 	ldw	r2,-12(fp)
  80e0b4:	1004c03a 	cmpne	r2,r2,zero
  80e0b8:	1000051e 	bne	r2,zero,80e0d0 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80e0bc:	e0fffe17 	ldw	r3,-8(fp)
  80e0c0:	00801b84 	movi	r2,110
  80e0c4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e0c8:	e03fff15 	stw	zero,-4(fp)
  80e0cc:	00001d06 	br	80e144 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  80e0d0:	e0bffd17 	ldw	r2,-12(fp)
  80e0d4:	10800003 	ldbu	r2,0(r2)
  80e0d8:	10803fcc 	andi	r2,r2,255
  80e0dc:	10800160 	cmpeqi	r2,r2,5
  80e0e0:	1000051e 	bne	r2,zero,80e0f8 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80e0e4:	e0fffe17 	ldw	r3,-8(fp)
  80e0e8:	00800044 	movi	r2,1
  80e0ec:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80e0f0:	e03fff15 	stw	zero,-4(fp)
  80e0f4:	00001306 	br	80e144 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0f8:	0005303a 	rdctl	r2,status
  80e0fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e100:	e0fffa17 	ldw	r3,-24(fp)
  80e104:	00bfff84 	movi	r2,-2
  80e108:	1884703a 	and	r2,r3,r2
  80e10c:	1001703a 	wrctl	status,r2
  
  return context;
  80e110:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80e114:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  80e118:	e0bffd17 	ldw	r2,-12(fp)
  80e11c:	1080020b 	ldhu	r2,8(r2)
  80e120:	e0bffc0d 	sth	r2,-16(fp)
  80e124:	e0bffb17 	ldw	r2,-20(fp)
  80e128:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e12c:	e0bff917 	ldw	r2,-28(fp)
  80e130:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e134:	e0bffe17 	ldw	r2,-8(fp)
  80e138:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  80e13c:	e0bffc0b 	ldhu	r2,-16(fp)
  80e140:	e0bfff15 	stw	r2,-4(fp)
  80e144:	e0bfff17 	ldw	r2,-4(fp)
}
  80e148:	e037883a 	mov	sp,fp
  80e14c:	df000017 	ldw	fp,0(sp)
  80e150:	dec00104 	addi	sp,sp,4
  80e154:	f800283a 	ret

0080e158 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  80e158:	defff804 	addi	sp,sp,-32
  80e15c:	df000715 	stw	fp,28(sp)
  80e160:	df000704 	addi	fp,sp,28
  80e164:	e13ffb15 	stw	r4,-20(fp)
  80e168:	e17ffc15 	stw	r5,-16(fp)
  80e16c:	e0800117 	ldw	r2,4(fp)
  80e170:	e1bffd0d 	sth	r6,-12(fp)
  80e174:	e1fffe05 	stb	r7,-8(fp)
  80e178:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  80e17c:	008020b4 	movhi	r2,130
  80e180:	10a53704 	addi	r2,r2,-27428
  80e184:	10c00017 	ldw	r3,0(r2)
  80e188:	008020b4 	movhi	r2,130
  80e18c:	10a53704 	addi	r2,r2,-27428
  80e190:	10800017 	ldw	r2,0(r2)
  80e194:	10800c03 	ldbu	r2,48(r2)
  80e198:	10800814 	ori	r2,r2,32
  80e19c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  80e1a0:	008020b4 	movhi	r2,130
  80e1a4:	10a53704 	addi	r2,r2,-27428
  80e1a8:	10800017 	ldw	r2,0(r2)
  80e1ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  80e1b0:	008020b4 	movhi	r2,130
  80e1b4:	10a53704 	addi	r2,r2,-27428
  80e1b8:	10c00017 	ldw	r3,0(r2)
  80e1bc:	e0bfff0b 	ldhu	r2,-4(fp)
  80e1c0:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  80e1c4:	008020b4 	movhi	r2,130
  80e1c8:	10a53704 	addi	r2,r2,-27428
  80e1cc:	10c00017 	ldw	r3,0(r2)
  80e1d0:	e0bffc17 	ldw	r2,-16(fp)
  80e1d4:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  80e1d8:	e0fffc17 	ldw	r3,-16(fp)
  80e1dc:	e0bffd0b 	ldhu	r2,-12(fp)
  80e1e0:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  80e1e4:	e0fffc17 	ldw	r3,-16(fp)
  80e1e8:	e0bffe03 	ldbu	r2,-8(fp)
  80e1ec:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  80e1f0:	008020b4 	movhi	r2,130
  80e1f4:	10a53704 	addi	r2,r2,-27428
  80e1f8:	10c00017 	ldw	r3,0(r2)
  80e1fc:	e0bffc17 	ldw	r2,-16(fp)
  80e200:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  80e204:	e0bffb17 	ldw	r2,-20(fp)
  80e208:	10c00117 	ldw	r3,4(r2)
  80e20c:	e0bffc17 	ldw	r2,-16(fp)
  80e210:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  80e214:	e0bffc17 	ldw	r2,-16(fp)
  80e218:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  80e21c:	e0fffc17 	ldw	r3,-16(fp)
  80e220:	e0bffb17 	ldw	r2,-20(fp)
  80e224:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80e228:	e0bffb17 	ldw	r2,-20(fp)
  80e22c:	10800117 	ldw	r2,4(r2)
  80e230:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  80e234:	e0bffa17 	ldw	r2,-24(fp)
  80e238:	1005003a 	cmpeq	r2,r2,zero
  80e23c:	1000031e 	bne	r2,zero,80e24c <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  80e240:	e0fffa17 	ldw	r3,-24(fp)
  80e244:	e0bffc17 	ldw	r2,-16(fp)
  80e248:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  80e24c:	e0fffb17 	ldw	r3,-20(fp)
  80e250:	e0bffc17 	ldw	r2,-16(fp)
  80e254:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  80e258:	008020b4 	movhi	r2,130
  80e25c:	10a53704 	addi	r2,r2,-27428
  80e260:	10800017 	ldw	r2,0(r2)
  80e264:	10800d03 	ldbu	r2,52(r2)
  80e268:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  80e26c:	e13ff903 	ldbu	r4,-28(fp)
  80e270:	e0fff903 	ldbu	r3,-28(fp)
  80e274:	008020b4 	movhi	r2,130
  80e278:	10a53444 	addi	r2,r2,-27439
  80e27c:	10c5883a 	add	r2,r2,r3
  80e280:	10800003 	ldbu	r2,0(r2)
  80e284:	1007883a 	mov	r3,r2
  80e288:	008020b4 	movhi	r2,130
  80e28c:	10a53704 	addi	r2,r2,-27428
  80e290:	10800017 	ldw	r2,0(r2)
  80e294:	10800d43 	ldbu	r2,53(r2)
  80e298:	0084303a 	nor	r2,zero,r2
  80e29c:	1884703a 	and	r2,r3,r2
  80e2a0:	1007883a 	mov	r3,r2
  80e2a4:	008020b4 	movhi	r2,130
  80e2a8:	10a53444 	addi	r2,r2,-27439
  80e2ac:	1105883a 	add	r2,r2,r4
  80e2b0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  80e2b4:	e0fff903 	ldbu	r3,-28(fp)
  80e2b8:	008020b4 	movhi	r2,130
  80e2bc:	10a53444 	addi	r2,r2,-27439
  80e2c0:	10c5883a 	add	r2,r2,r3
  80e2c4:	10800003 	ldbu	r2,0(r2)
  80e2c8:	10803fcc 	andi	r2,r2,255
  80e2cc:	1004c03a 	cmpne	r2,r2,zero
  80e2d0:	10000e1e 	bne	r2,zero,80e30c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  80e2d4:	008020b4 	movhi	r2,130
  80e2d8:	10a53704 	addi	r2,r2,-27428
  80e2dc:	10800017 	ldw	r2,0(r2)
  80e2e0:	10800d83 	ldbu	r2,54(r2)
  80e2e4:	0084303a 	nor	r2,zero,r2
  80e2e8:	1007883a 	mov	r3,r2
  80e2ec:	008020b4 	movhi	r2,130
  80e2f0:	10a53404 	addi	r2,r2,-27440
  80e2f4:	10800003 	ldbu	r2,0(r2)
  80e2f8:	1884703a 	and	r2,r3,r2
  80e2fc:	1007883a 	mov	r3,r2
  80e300:	008020b4 	movhi	r2,130
  80e304:	10a53404 	addi	r2,r2,-27440
  80e308:	10c00005 	stb	r3,0(r2)
    }
}
  80e30c:	e037883a 	mov	sp,fp
  80e310:	df000017 	ldw	fp,0(sp)
  80e314:	dec00104 	addi	sp,sp,4
  80e318:	f800283a 	ret

0080e31c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  80e31c:	defffb04 	addi	sp,sp,-20
  80e320:	dfc00415 	stw	ra,16(sp)
  80e324:	df000315 	stw	fp,12(sp)
  80e328:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  80e32c:	010020b4 	movhi	r4,130
  80e330:	21354904 	addi	r4,r4,-10972
  80e334:	0140dc04 	movi	r5,880
  80e338:	080c34c0 	call	80c34c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  80e33c:	008020b4 	movhi	r2,130
  80e340:	10b54904 	addi	r2,r2,-10972
  80e344:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  80e348:	008020b4 	movhi	r2,130
  80e34c:	10b55404 	addi	r2,r2,-10928
  80e350:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e354:	e03fff0d 	sth	zero,-4(fp)
  80e358:	00001306 	br	80e3a8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e35c:	e0bffe17 	ldw	r2,-8(fp)
  80e360:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  80e364:	e0fffe17 	ldw	r3,-8(fp)
  80e368:	e0bffd17 	ldw	r2,-12(fp)
  80e36c:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  80e370:	e0fffe17 	ldw	r3,-8(fp)
  80e374:	00800fc4 	movi	r2,63
  80e378:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e37c:	e0bffe17 	ldw	r2,-8(fp)
  80e380:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  80e384:	e0bffe17 	ldw	r2,-8(fp)
  80e388:	10800b04 	addi	r2,r2,44
  80e38c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  80e390:	e0bffd17 	ldw	r2,-12(fp)
  80e394:	10800b04 	addi	r2,r2,44
  80e398:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  80e39c:	e0bfff0b 	ldhu	r2,-4(fp)
  80e3a0:	10800044 	addi	r2,r2,1
  80e3a4:	e0bfff0d 	sth	r2,-4(fp)
  80e3a8:	e0bfff0b 	ldhu	r2,-4(fp)
  80e3ac:	108004f0 	cmpltui	r2,r2,19
  80e3b0:	103fea1e 	bne	r2,zero,80e35c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80e3b4:	e0bffe17 	ldw	r2,-8(fp)
  80e3b8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  80e3bc:	e0bffe17 	ldw	r2,-8(fp)
  80e3c0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  80e3c4:	e0fffe17 	ldw	r3,-8(fp)
  80e3c8:	00800fc4 	movi	r2,63
  80e3cc:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  80e3d0:	e0bffe17 	ldw	r2,-8(fp)
  80e3d4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  80e3d8:	00c020b4 	movhi	r3,130
  80e3dc:	18e53904 	addi	r3,r3,-27420
  80e3e0:	008020b4 	movhi	r2,130
  80e3e4:	10b54904 	addi	r2,r2,-10972
  80e3e8:	18800015 	stw	r2,0(r3)
#endif
}
  80e3ec:	e037883a 	mov	sp,fp
  80e3f0:	dfc00117 	ldw	ra,4(sp)
  80e3f4:	df000017 	ldw	fp,0(sp)
  80e3f8:	dec00204 	addi	sp,sp,8
  80e3fc:	f800283a 	ret

0080e400 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  80e400:	defffa04 	addi	sp,sp,-24
  80e404:	dfc00515 	stw	ra,20(sp)
  80e408:	df000415 	stw	fp,16(sp)
  80e40c:	df000404 	addi	fp,sp,16
  80e410:	e13ffe15 	stw	r4,-8(fp)
  80e414:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  80e418:	e0bffe17 	ldw	r2,-8(fp)
  80e41c:	10800217 	ldw	r2,8(r2)
  80e420:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  80e424:	e0bffd17 	ldw	r2,-12(fp)
  80e428:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  80e42c:	e0fffd17 	ldw	r3,-12(fp)
  80e430:	e0bfff0b 	ldhu	r2,-4(fp)
  80e434:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  80e438:	e0bffd17 	ldw	r2,-12(fp)
  80e43c:	10c00c03 	ldbu	r3,48(r2)
  80e440:	00bff7c4 	movi	r2,-33
  80e444:	1884703a 	and	r2,r3,r2
  80e448:	1007883a 	mov	r3,r2
  80e44c:	e0bffd17 	ldw	r2,-12(fp)
  80e450:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  80e454:	e0bffd17 	ldw	r2,-12(fp)
  80e458:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  80e45c:	e0bffd17 	ldw	r2,-12(fp)
  80e460:	10800c03 	ldbu	r2,48(r2)
  80e464:	10803fcc 	andi	r2,r2,255
  80e468:	1004c03a 	cmpne	r2,r2,zero
  80e46c:	10001f1e 	bne	r2,zero,80e4ec <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  80e470:	e0bffd17 	ldw	r2,-12(fp)
  80e474:	10c00d83 	ldbu	r3,54(r2)
  80e478:	008020b4 	movhi	r2,130
  80e47c:	10a53404 	addi	r2,r2,-27440
  80e480:	10800003 	ldbu	r2,0(r2)
  80e484:	1884b03a 	or	r2,r3,r2
  80e488:	1007883a 	mov	r3,r2
  80e48c:	008020b4 	movhi	r2,130
  80e490:	10a53404 	addi	r2,r2,-27440
  80e494:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e498:	e0bffd17 	ldw	r2,-12(fp)
  80e49c:	10800d03 	ldbu	r2,52(r2)
  80e4a0:	11003fcc 	andi	r4,r2,255
  80e4a4:	e0bffd17 	ldw	r2,-12(fp)
  80e4a8:	10800d03 	ldbu	r2,52(r2)
  80e4ac:	10c03fcc 	andi	r3,r2,255
  80e4b0:	008020b4 	movhi	r2,130
  80e4b4:	10a53444 	addi	r2,r2,-27439
  80e4b8:	10c5883a 	add	r2,r2,r3
  80e4bc:	10c00003 	ldbu	r3,0(r2)
  80e4c0:	e0bffd17 	ldw	r2,-12(fp)
  80e4c4:	10800d43 	ldbu	r2,53(r2)
  80e4c8:	1884b03a 	or	r2,r3,r2
  80e4cc:	1007883a 	mov	r3,r2
  80e4d0:	008020b4 	movhi	r2,130
  80e4d4:	10a53444 	addi	r2,r2,-27439
  80e4d8:	1105883a 	add	r2,r2,r4
  80e4dc:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  80e4e0:	00800044 	movi	r2,1
  80e4e4:	e0bffc05 	stb	r2,-16(fp)
  80e4e8:	00000106 	br	80e4f0 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  80e4ec:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  80e4f0:	e13ffe17 	ldw	r4,-8(fp)
  80e4f4:	080e5100 	call	80e510 <OS_FlagUnlink>
    return (sched);
  80e4f8:	e0bffc03 	ldbu	r2,-16(fp)
}
  80e4fc:	e037883a 	mov	sp,fp
  80e500:	dfc00117 	ldw	ra,4(sp)
  80e504:	df000017 	ldw	fp,0(sp)
  80e508:	dec00204 	addi	sp,sp,8
  80e50c:	f800283a 	ret

0080e510 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  80e510:	defffa04 	addi	sp,sp,-24
  80e514:	df000515 	stw	fp,20(sp)
  80e518:	df000504 	addi	fp,sp,20
  80e51c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  80e520:	e0bfff17 	ldw	r2,-4(fp)
  80e524:	10800117 	ldw	r2,4(r2)
  80e528:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80e52c:	e0bfff17 	ldw	r2,-4(fp)
  80e530:	10800017 	ldw	r2,0(r2)
  80e534:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  80e538:	e0bffc17 	ldw	r2,-16(fp)
  80e53c:	1004c03a 	cmpne	r2,r2,zero
  80e540:	10000c1e 	bne	r2,zero,80e574 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  80e544:	e0bfff17 	ldw	r2,-4(fp)
  80e548:	10800317 	ldw	r2,12(r2)
  80e54c:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  80e550:	e0fffd17 	ldw	r3,-12(fp)
  80e554:	e0bffb17 	ldw	r2,-20(fp)
  80e558:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  80e55c:	e0bffb17 	ldw	r2,-20(fp)
  80e560:	1005003a 	cmpeq	r2,r2,zero
  80e564:	10000c1e 	bne	r2,zero,80e598 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  80e568:	e0bffb17 	ldw	r2,-20(fp)
  80e56c:	10000115 	stw	zero,4(r2)
  80e570:	00000906 	br	80e598 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  80e574:	e0fffc17 	ldw	r3,-16(fp)
  80e578:	e0bffb17 	ldw	r2,-20(fp)
  80e57c:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  80e580:	e0bffb17 	ldw	r2,-20(fp)
  80e584:	1005003a 	cmpeq	r2,r2,zero
  80e588:	1000031e 	bne	r2,zero,80e598 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  80e58c:	e0fffb17 	ldw	r3,-20(fp)
  80e590:	e0bffc17 	ldw	r2,-16(fp)
  80e594:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  80e598:	e0bfff17 	ldw	r2,-4(fp)
  80e59c:	10800217 	ldw	r2,8(r2)
  80e5a0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  80e5a4:	e0bffe17 	ldw	r2,-8(fp)
  80e5a8:	10000a15 	stw	zero,40(r2)
#endif
}
  80e5ac:	e037883a 	mov	sp,fp
  80e5b0:	df000017 	ldw	fp,0(sp)
  80e5b4:	dec00104 	addi	sp,sp,4
  80e5b8:	f800283a 	ret

0080e5bc <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  80e5bc:	defff304 	addi	sp,sp,-52
  80e5c0:	df000c15 	stw	fp,48(sp)
  80e5c4:	df000c04 	addi	fp,sp,48
  80e5c8:	e13ffb15 	stw	r4,-20(fp)
  80e5cc:	e17ffc15 	stw	r5,-16(fp)
  80e5d0:	e1bffd15 	stw	r6,-12(fp)
  80e5d4:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e5d8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e5dc:	e0bffe17 	ldw	r2,-8(fp)
  80e5e0:	1004c03a 	cmpne	r2,r2,zero
  80e5e4:	1000021e 	bne	r2,zero,80e5f0 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  80e5e8:	e03fff15 	stw	zero,-4(fp)
  80e5ec:	00007506 	br	80e7c4 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  80e5f0:	e0bffb17 	ldw	r2,-20(fp)
  80e5f4:	1004c03a 	cmpne	r2,r2,zero
  80e5f8:	1000051e 	bne	r2,zero,80e610 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80e5fc:	e0fffe17 	ldw	r3,-8(fp)
  80e600:	00801884 	movi	r2,98
  80e604:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e608:	e03fff15 	stw	zero,-4(fp)
  80e60c:	00006d06 	br	80e7c4 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  80e610:	e0bffb17 	ldw	r2,-20(fp)
  80e614:	108000cc 	andi	r2,r2,3
  80e618:	1005003a 	cmpeq	r2,r2,zero
  80e61c:	1000051e 	bne	r2,zero,80e634 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  80e620:	e0fffe17 	ldw	r3,-8(fp)
  80e624:	00801884 	movi	r2,98
  80e628:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e62c:	e03fff15 	stw	zero,-4(fp)
  80e630:	00006406 	br	80e7c4 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  80e634:	e0bffc17 	ldw	r2,-16(fp)
  80e638:	108000a8 	cmpgeui	r2,r2,2
  80e63c:	1000051e 	bne	r2,zero,80e654 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  80e640:	e0fffe17 	ldw	r3,-8(fp)
  80e644:	008016c4 	movi	r2,91
  80e648:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e64c:	e03fff15 	stw	zero,-4(fp)
  80e650:	00005c06 	br	80e7c4 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  80e654:	e0bffd17 	ldw	r2,-12(fp)
  80e658:	10800128 	cmpgeui	r2,r2,4
  80e65c:	1000051e 	bne	r2,zero,80e674 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  80e660:	e0fffe17 	ldw	r3,-8(fp)
  80e664:	00801704 	movi	r2,92
  80e668:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e66c:	e03fff15 	stw	zero,-4(fp)
  80e670:	00005406 	br	80e7c4 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e674:	0005303a 	rdctl	r2,status
  80e678:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e67c:	e0fff517 	ldw	r3,-44(fp)
  80e680:	00bfff84 	movi	r2,-2
  80e684:	1884703a 	and	r2,r3,r2
  80e688:	1001703a 	wrctl	status,r2
  
  return context;
  80e68c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e690:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  80e694:	008020b4 	movhi	r2,130
  80e698:	10a53104 	addi	r2,r2,-27452
  80e69c:	10800017 	ldw	r2,0(r2)
  80e6a0:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  80e6a4:	008020b4 	movhi	r2,130
  80e6a8:	10a53104 	addi	r2,r2,-27452
  80e6ac:	10800017 	ldw	r2,0(r2)
  80e6b0:	1005003a 	cmpeq	r2,r2,zero
  80e6b4:	1000081e 	bne	r2,zero,80e6d8 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  80e6b8:	008020b4 	movhi	r2,130
  80e6bc:	10a53104 	addi	r2,r2,-27452
  80e6c0:	10800017 	ldw	r2,0(r2)
  80e6c4:	10800117 	ldw	r2,4(r2)
  80e6c8:	1007883a 	mov	r3,r2
  80e6cc:	008020b4 	movhi	r2,130
  80e6d0:	10a53104 	addi	r2,r2,-27452
  80e6d4:	10c00015 	stw	r3,0(r2)
  80e6d8:	e0bff617 	ldw	r2,-40(fp)
  80e6dc:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e6e0:	e0bff417 	ldw	r2,-48(fp)
  80e6e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  80e6e8:	e0bffa17 	ldw	r2,-24(fp)
  80e6ec:	1004c03a 	cmpne	r2,r2,zero
  80e6f0:	1000051e 	bne	r2,zero,80e708 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  80e6f4:	e0fffe17 	ldw	r3,-8(fp)
  80e6f8:	00801684 	movi	r2,90
  80e6fc:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  80e700:	e03fff15 	stw	zero,-4(fp)
  80e704:	00002f06 	br	80e7c4 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  80e708:	e0bffb17 	ldw	r2,-20(fp)
  80e70c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  80e710:	e0bffb17 	ldw	r2,-20(fp)
  80e714:	1007883a 	mov	r3,r2
  80e718:	e0bffd17 	ldw	r2,-12(fp)
  80e71c:	1885883a 	add	r2,r3,r2
  80e720:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  80e724:	e03ff715 	stw	zero,-36(fp)
  80e728:	00000d06 	br	80e760 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  80e72c:	e0fff817 	ldw	r3,-32(fp)
  80e730:	e0bff917 	ldw	r2,-28(fp)
  80e734:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  80e738:	e0bff917 	ldw	r2,-28(fp)
  80e73c:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  80e740:	e0bff917 	ldw	r2,-28(fp)
  80e744:	1007883a 	mov	r3,r2
  80e748:	e0bffd17 	ldw	r2,-12(fp)
  80e74c:	1885883a 	add	r2,r3,r2
  80e750:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  80e754:	e0bff717 	ldw	r2,-36(fp)
  80e758:	10800044 	addi	r2,r2,1
  80e75c:	e0bff715 	stw	r2,-36(fp)
  80e760:	e0bffc17 	ldw	r2,-16(fp)
  80e764:	10ffffc4 	addi	r3,r2,-1
  80e768:	e0bff717 	ldw	r2,-36(fp)
  80e76c:	10ffef36 	bltu	r2,r3,80e72c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  80e770:	e0bff817 	ldw	r2,-32(fp)
  80e774:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  80e778:	e0fffa17 	ldw	r3,-24(fp)
  80e77c:	e0bffb17 	ldw	r2,-20(fp)
  80e780:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  80e784:	e0fffa17 	ldw	r3,-24(fp)
  80e788:	e0bffb17 	ldw	r2,-20(fp)
  80e78c:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  80e790:	e0fffa17 	ldw	r3,-24(fp)
  80e794:	e0bffc17 	ldw	r2,-16(fp)
  80e798:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  80e79c:	e0fffa17 	ldw	r3,-24(fp)
  80e7a0:	e0bffc17 	ldw	r2,-16(fp)
  80e7a4:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  80e7a8:	e0fffa17 	ldw	r3,-24(fp)
  80e7ac:	e0bffd17 	ldw	r2,-12(fp)
  80e7b0:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  80e7b4:	e0bffe17 	ldw	r2,-8(fp)
  80e7b8:	10000005 	stb	zero,0(r2)
    return (pmem);
  80e7bc:	e0bffa17 	ldw	r2,-24(fp)
  80e7c0:	e0bfff15 	stw	r2,-4(fp)
  80e7c4:	e0bfff17 	ldw	r2,-4(fp)
}
  80e7c8:	e037883a 	mov	sp,fp
  80e7cc:	df000017 	ldw	fp,0(sp)
  80e7d0:	dec00104 	addi	sp,sp,4
  80e7d4:	f800283a 	ret

0080e7d8 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  80e7d8:	defff704 	addi	sp,sp,-36
  80e7dc:	df000815 	stw	fp,32(sp)
  80e7e0:	df000804 	addi	fp,sp,32
  80e7e4:	e13ffd15 	stw	r4,-12(fp)
  80e7e8:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80e7ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  80e7f0:	e0bffe17 	ldw	r2,-8(fp)
  80e7f4:	1004c03a 	cmpne	r2,r2,zero
  80e7f8:	1000021e 	bne	r2,zero,80e804 <OSMemGet+0x2c>
        return ((void *)0);
  80e7fc:	e03fff15 	stw	zero,-4(fp)
  80e800:	00003106 	br	80e8c8 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  80e804:	e0bffd17 	ldw	r2,-12(fp)
  80e808:	1004c03a 	cmpne	r2,r2,zero
  80e80c:	1000051e 	bne	r2,zero,80e824 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80e810:	e0fffe17 	ldw	r3,-8(fp)
  80e814:	00801804 	movi	r2,96
  80e818:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80e81c:	e03fff15 	stw	zero,-4(fp)
  80e820:	00002906 	br	80e8c8 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e824:	0005303a 	rdctl	r2,status
  80e828:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e82c:	e0fffa17 	ldw	r3,-24(fp)
  80e830:	00bfff84 	movi	r2,-2
  80e834:	1884703a 	and	r2,r3,r2
  80e838:	1001703a 	wrctl	status,r2
  
  return context;
  80e83c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80e840:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  80e844:	e0bffd17 	ldw	r2,-12(fp)
  80e848:	10800417 	ldw	r2,16(r2)
  80e84c:	1005003a 	cmpeq	r2,r2,zero
  80e850:	1000151e 	bne	r2,zero,80e8a8 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  80e854:	e0bffd17 	ldw	r2,-12(fp)
  80e858:	10800117 	ldw	r2,4(r2)
  80e85c:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  80e860:	e0bffc17 	ldw	r2,-16(fp)
  80e864:	10c00017 	ldw	r3,0(r2)
  80e868:	e0bffd17 	ldw	r2,-12(fp)
  80e86c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  80e870:	e0bffd17 	ldw	r2,-12(fp)
  80e874:	10800417 	ldw	r2,16(r2)
  80e878:	10ffffc4 	addi	r3,r2,-1
  80e87c:	e0bffd17 	ldw	r2,-12(fp)
  80e880:	10c00415 	stw	r3,16(r2)
  80e884:	e0bffb17 	ldw	r2,-20(fp)
  80e888:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e88c:	e0bff917 	ldw	r2,-28(fp)
  80e890:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  80e894:	e0bffe17 	ldw	r2,-8(fp)
  80e898:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  80e89c:	e0bffc17 	ldw	r2,-16(fp)
  80e8a0:	e0bfff15 	stw	r2,-4(fp)
  80e8a4:	00000806 	br	80e8c8 <OSMemGet+0xf0>
  80e8a8:	e0bffb17 	ldw	r2,-20(fp)
  80e8ac:	e0bff815 	stw	r2,-32(fp)
  80e8b0:	e0bff817 	ldw	r2,-32(fp)
  80e8b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  80e8b8:	e0fffe17 	ldw	r3,-8(fp)
  80e8bc:	00801744 	movi	r2,93
  80e8c0:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  80e8c4:	e03fff15 	stw	zero,-4(fp)
  80e8c8:	e0bfff17 	ldw	r2,-4(fp)
}
  80e8cc:	e037883a 	mov	sp,fp
  80e8d0:	df000017 	ldw	fp,0(sp)
  80e8d4:	dec00104 	addi	sp,sp,4
  80e8d8:	f800283a 	ret

0080e8dc <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80e8dc:	defff604 	addi	sp,sp,-40
  80e8e0:	dfc00915 	stw	ra,36(sp)
  80e8e4:	df000815 	stw	fp,32(sp)
  80e8e8:	df000804 	addi	fp,sp,32
  80e8ec:	e13ffc15 	stw	r4,-16(fp)
  80e8f0:	e17ffd15 	stw	r5,-12(fp)
  80e8f4:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e8f8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80e8fc:	e0bffe17 	ldw	r2,-8(fp)
  80e900:	1004c03a 	cmpne	r2,r2,zero
  80e904:	1000021e 	bne	r2,zero,80e910 <OSMemNameGet+0x34>
        return (0);
  80e908:	e03fff15 	stw	zero,-4(fp)
  80e90c:	00003006 	br	80e9d0 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80e910:	e0bffc17 	ldw	r2,-16(fp)
  80e914:	1004c03a 	cmpne	r2,r2,zero
  80e918:	1000051e 	bne	r2,zero,80e930 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80e91c:	e0fffe17 	ldw	r3,-8(fp)
  80e920:	00801804 	movi	r2,96
  80e924:	18800005 	stb	r2,0(r3)
        return (0);
  80e928:	e03fff15 	stw	zero,-4(fp)
  80e92c:	00002806 	br	80e9d0 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80e930:	e0bffd17 	ldw	r2,-12(fp)
  80e934:	1004c03a 	cmpne	r2,r2,zero
  80e938:	1000051e 	bne	r2,zero,80e950 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80e93c:	e0fffe17 	ldw	r3,-8(fp)
  80e940:	00800304 	movi	r2,12
  80e944:	18800005 	stb	r2,0(r3)
        return (0);
  80e948:	e03fff15 	stw	zero,-4(fp)
  80e94c:	00002006 	br	80e9d0 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80e950:	008020b4 	movhi	r2,130
  80e954:	10a53604 	addi	r2,r2,-27432
  80e958:	10800003 	ldbu	r2,0(r2)
  80e95c:	10803fcc 	andi	r2,r2,255
  80e960:	1005003a 	cmpeq	r2,r2,zero
  80e964:	1000051e 	bne	r2,zero,80e97c <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80e968:	e0fffe17 	ldw	r3,-8(fp)
  80e96c:	00800444 	movi	r2,17
  80e970:	18800005 	stb	r2,0(r3)
        return (0);
  80e974:	e03fff15 	stw	zero,-4(fp)
  80e978:	00001506 	br	80e9d0 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e97c:	0005303a 	rdctl	r2,status
  80e980:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e984:	e0fff917 	ldw	r3,-28(fp)
  80e988:	00bfff84 	movi	r2,-2
  80e98c:	1884703a 	and	r2,r3,r2
  80e990:	1001703a 	wrctl	status,r2
  
  return context;
  80e994:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80e998:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  80e99c:	e0bffc17 	ldw	r2,-16(fp)
  80e9a0:	11400504 	addi	r5,r2,20
  80e9a4:	e13ffd17 	ldw	r4,-12(fp)
  80e9a8:	080c5500 	call	80c550 <OS_StrCopy>
  80e9ac:	e0bffb05 	stb	r2,-20(fp)
  80e9b0:	e0bffa17 	ldw	r2,-24(fp)
  80e9b4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e9b8:	e0bff817 	ldw	r2,-32(fp)
  80e9bc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80e9c0:	e0bffe17 	ldw	r2,-8(fp)
  80e9c4:	10000005 	stb	zero,0(r2)
    return (len);
  80e9c8:	e0bffb03 	ldbu	r2,-20(fp)
  80e9cc:	e0bfff15 	stw	r2,-4(fp)
  80e9d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80e9d4:	e037883a 	mov	sp,fp
  80e9d8:	dfc00117 	ldw	ra,4(sp)
  80e9dc:	df000017 	ldw	fp,0(sp)
  80e9e0:	dec00204 	addi	sp,sp,8
  80e9e4:	f800283a 	ret

0080e9e8 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  80e9e8:	defff604 	addi	sp,sp,-40
  80e9ec:	dfc00915 	stw	ra,36(sp)
  80e9f0:	df000815 	stw	fp,32(sp)
  80e9f4:	df000804 	addi	fp,sp,32
  80e9f8:	e13ffd15 	stw	r4,-12(fp)
  80e9fc:	e17ffe15 	stw	r5,-8(fp)
  80ea00:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ea04:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ea08:	e0bfff17 	ldw	r2,-4(fp)
  80ea0c:	1005003a 	cmpeq	r2,r2,zero
  80ea10:	1000381e 	bne	r2,zero,80eaf4 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  80ea14:	e0bffd17 	ldw	r2,-12(fp)
  80ea18:	1004c03a 	cmpne	r2,r2,zero
  80ea1c:	1000041e 	bne	r2,zero,80ea30 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  80ea20:	e0ffff17 	ldw	r3,-4(fp)
  80ea24:	00801804 	movi	r2,96
  80ea28:	18800005 	stb	r2,0(r3)
        return;
  80ea2c:	00003106 	br	80eaf4 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ea30:	e0bffe17 	ldw	r2,-8(fp)
  80ea34:	1004c03a 	cmpne	r2,r2,zero
  80ea38:	1000041e 	bne	r2,zero,80ea4c <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ea3c:	e0ffff17 	ldw	r3,-4(fp)
  80ea40:	00800304 	movi	r2,12
  80ea44:	18800005 	stb	r2,0(r3)
        return;
  80ea48:	00002a06 	br	80eaf4 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ea4c:	008020b4 	movhi	r2,130
  80ea50:	10a53604 	addi	r2,r2,-27432
  80ea54:	10800003 	ldbu	r2,0(r2)
  80ea58:	10803fcc 	andi	r2,r2,255
  80ea5c:	1005003a 	cmpeq	r2,r2,zero
  80ea60:	1000041e 	bne	r2,zero,80ea74 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80ea64:	e0ffff17 	ldw	r3,-4(fp)
  80ea68:	00800484 	movi	r2,18
  80ea6c:	18800005 	stb	r2,0(r3)
        return;
  80ea70:	00002006 	br	80eaf4 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ea74:	0005303a 	rdctl	r2,status
  80ea78:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ea7c:	e0fffa17 	ldw	r3,-24(fp)
  80ea80:	00bfff84 	movi	r2,-2
  80ea84:	1884703a 	and	r2,r3,r2
  80ea88:	1001703a 	wrctl	status,r2
  
  return context;
  80ea8c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ea90:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80ea94:	e13ffe17 	ldw	r4,-8(fp)
  80ea98:	080c5d00 	call	80c5d0 <OS_StrLen>
  80ea9c:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  80eaa0:	e0bffc03 	ldbu	r2,-16(fp)
  80eaa4:	10800830 	cmpltui	r2,r2,32
  80eaa8:	1000081e 	bne	r2,zero,80eacc <OSMemNameSet+0xe4>
  80eaac:	e0bffb17 	ldw	r2,-20(fp)
  80eab0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eab4:	e0bff917 	ldw	r2,-28(fp)
  80eab8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  80eabc:	e0ffff17 	ldw	r3,-4(fp)
  80eac0:	008018c4 	movi	r2,99
  80eac4:	18800005 	stb	r2,0(r3)
        return;
  80eac8:	00000a06 	br	80eaf4 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  80eacc:	e0bffd17 	ldw	r2,-12(fp)
  80ead0:	11000504 	addi	r4,r2,20
  80ead4:	e17ffe17 	ldw	r5,-8(fp)
  80ead8:	080c5500 	call	80c550 <OS_StrCopy>
  80eadc:	e0bffb17 	ldw	r2,-20(fp)
  80eae0:	e0bff815 	stw	r2,-32(fp)
  80eae4:	e0bff817 	ldw	r2,-32(fp)
  80eae8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80eaec:	e0bfff17 	ldw	r2,-4(fp)
  80eaf0:	10000005 	stb	zero,0(r2)
}
  80eaf4:	e037883a 	mov	sp,fp
  80eaf8:	dfc00117 	ldw	ra,4(sp)
  80eafc:	df000017 	ldw	fp,0(sp)
  80eb00:	dec00204 	addi	sp,sp,8
  80eb04:	f800283a 	ret

0080eb08 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  80eb08:	defff804 	addi	sp,sp,-32
  80eb0c:	df000715 	stw	fp,28(sp)
  80eb10:	df000704 	addi	fp,sp,28
  80eb14:	e13ffd15 	stw	r4,-12(fp)
  80eb18:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80eb1c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80eb20:	e0bffd17 	ldw	r2,-12(fp)
  80eb24:	1004c03a 	cmpne	r2,r2,zero
  80eb28:	1000031e 	bne	r2,zero,80eb38 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80eb2c:	00801804 	movi	r2,96
  80eb30:	e0bfff15 	stw	r2,-4(fp)
  80eb34:	00002b06 	br	80ebe4 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  80eb38:	e0bffe17 	ldw	r2,-8(fp)
  80eb3c:	1004c03a 	cmpne	r2,r2,zero
  80eb40:	1000031e 	bne	r2,zero,80eb50 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  80eb44:	008017c4 	movi	r2,95
  80eb48:	e0bfff15 	stw	r2,-4(fp)
  80eb4c:	00002506 	br	80ebe4 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb50:	0005303a 	rdctl	r2,status
  80eb54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb58:	e0fffb17 	ldw	r3,-20(fp)
  80eb5c:	00bfff84 	movi	r2,-2
  80eb60:	1884703a 	and	r2,r3,r2
  80eb64:	1001703a 	wrctl	status,r2
  
  return context;
  80eb68:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80eb6c:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  80eb70:	e0bffd17 	ldw	r2,-12(fp)
  80eb74:	10c00417 	ldw	r3,16(r2)
  80eb78:	e0bffd17 	ldw	r2,-12(fp)
  80eb7c:	10800317 	ldw	r2,12(r2)
  80eb80:	18800736 	bltu	r3,r2,80eba0 <OSMemPut+0x98>
  80eb84:	e0bffc17 	ldw	r2,-16(fp)
  80eb88:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eb8c:	e0bffa17 	ldw	r2,-24(fp)
  80eb90:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  80eb94:	00801784 	movi	r2,94
  80eb98:	e0bfff15 	stw	r2,-4(fp)
  80eb9c:	00001106 	br	80ebe4 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  80eba0:	e0fffe17 	ldw	r3,-8(fp)
  80eba4:	e0bffd17 	ldw	r2,-12(fp)
  80eba8:	10800117 	ldw	r2,4(r2)
  80ebac:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  80ebb0:	e0fffd17 	ldw	r3,-12(fp)
  80ebb4:	e0bffe17 	ldw	r2,-8(fp)
  80ebb8:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  80ebbc:	e0bffd17 	ldw	r2,-12(fp)
  80ebc0:	10800417 	ldw	r2,16(r2)
  80ebc4:	10c00044 	addi	r3,r2,1
  80ebc8:	e0bffd17 	ldw	r2,-12(fp)
  80ebcc:	10c00415 	stw	r3,16(r2)
  80ebd0:	e0bffc17 	ldw	r2,-16(fp)
  80ebd4:	e0bff915 	stw	r2,-28(fp)
  80ebd8:	e0bff917 	ldw	r2,-28(fp)
  80ebdc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  80ebe0:	e03fff15 	stw	zero,-4(fp)
  80ebe4:	e0bfff17 	ldw	r2,-4(fp)
}
  80ebe8:	e037883a 	mov	sp,fp
  80ebec:	df000017 	ldw	fp,0(sp)
  80ebf0:	dec00104 	addi	sp,sp,4
  80ebf4:	f800283a 	ret

0080ebf8 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  80ebf8:	defff904 	addi	sp,sp,-28
  80ebfc:	df000615 	stw	fp,24(sp)
  80ec00:	df000604 	addi	fp,sp,24
  80ec04:	e13ffd15 	stw	r4,-12(fp)
  80ec08:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ec0c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  80ec10:	e0bffd17 	ldw	r2,-12(fp)
  80ec14:	1004c03a 	cmpne	r2,r2,zero
  80ec18:	1000031e 	bne	r2,zero,80ec28 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  80ec1c:	00801804 	movi	r2,96
  80ec20:	e0bfff15 	stw	r2,-4(fp)
  80ec24:	00002e06 	br	80ece0 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  80ec28:	e0bffe17 	ldw	r2,-8(fp)
  80ec2c:	1004c03a 	cmpne	r2,r2,zero
  80ec30:	1000031e 	bne	r2,zero,80ec40 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  80ec34:	00801844 	movi	r2,97
  80ec38:	e0bfff15 	stw	r2,-4(fp)
  80ec3c:	00002806 	br	80ece0 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ec40:	0005303a 	rdctl	r2,status
  80ec44:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ec48:	e0fffb17 	ldw	r3,-20(fp)
  80ec4c:	00bfff84 	movi	r2,-2
  80ec50:	1884703a 	and	r2,r3,r2
  80ec54:	1001703a 	wrctl	status,r2
  
  return context;
  80ec58:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80ec5c:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  80ec60:	e0bffd17 	ldw	r2,-12(fp)
  80ec64:	10c00017 	ldw	r3,0(r2)
  80ec68:	e0bffe17 	ldw	r2,-8(fp)
  80ec6c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  80ec70:	e0bffd17 	ldw	r2,-12(fp)
  80ec74:	10c00117 	ldw	r3,4(r2)
  80ec78:	e0bffe17 	ldw	r2,-8(fp)
  80ec7c:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  80ec80:	e0bffd17 	ldw	r2,-12(fp)
  80ec84:	10c00217 	ldw	r3,8(r2)
  80ec88:	e0bffe17 	ldw	r2,-8(fp)
  80ec8c:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  80ec90:	e0bffd17 	ldw	r2,-12(fp)
  80ec94:	10c00317 	ldw	r3,12(r2)
  80ec98:	e0bffe17 	ldw	r2,-8(fp)
  80ec9c:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  80eca0:	e0bffd17 	ldw	r2,-12(fp)
  80eca4:	10c00417 	ldw	r3,16(r2)
  80eca8:	e0bffe17 	ldw	r2,-8(fp)
  80ecac:	10c00415 	stw	r3,16(r2)
  80ecb0:	e0bffc17 	ldw	r2,-16(fp)
  80ecb4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ecb8:	e0bffa17 	ldw	r2,-24(fp)
  80ecbc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  80ecc0:	e0bffe17 	ldw	r2,-8(fp)
  80ecc4:	10c00317 	ldw	r3,12(r2)
  80ecc8:	e0bffe17 	ldw	r2,-8(fp)
  80eccc:	10800417 	ldw	r2,16(r2)
  80ecd0:	1887c83a 	sub	r3,r3,r2
  80ecd4:	e0bffe17 	ldw	r2,-8(fp)
  80ecd8:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  80ecdc:	e03fff15 	stw	zero,-4(fp)
  80ece0:	e0bfff17 	ldw	r2,-4(fp)
}
  80ece4:	e037883a 	mov	sp,fp
  80ece8:	df000017 	ldw	fp,0(sp)
  80ecec:	dec00104 	addi	sp,sp,4
  80ecf0:	f800283a 	ret

0080ecf4 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  80ecf4:	defffc04 	addi	sp,sp,-16
  80ecf8:	dfc00315 	stw	ra,12(sp)
  80ecfc:	df000215 	stw	fp,8(sp)
  80ed00:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  80ed04:	010020b4 	movhi	r4,130
  80ed08:	21362504 	addi	r4,r4,-10092
  80ed0c:	01430c04 	movi	r5,3120
  80ed10:	080c34c0 	call	80c34c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  80ed14:	008020b4 	movhi	r2,130
  80ed18:	10b62504 	addi	r2,r2,-10092
  80ed1c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80ed20:	e03ffe0d 	sth	zero,-8(fp)
  80ed24:	00001306 	br	80ed74 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  80ed28:	e0bffe0b 	ldhu	r2,-8(fp)
  80ed2c:	10800d24 	muli	r2,r2,52
  80ed30:	1007883a 	mov	r3,r2
  80ed34:	008020b4 	movhi	r2,130
  80ed38:	10b63204 	addi	r2,r2,-10040
  80ed3c:	1887883a 	add	r3,r3,r2
  80ed40:	e0bfff17 	ldw	r2,-4(fp)
  80ed44:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  80ed48:	e0ffff17 	ldw	r3,-4(fp)
  80ed4c:	00800fc4 	movi	r2,63
  80ed50:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  80ed54:	e0bfff17 	ldw	r2,-4(fp)
  80ed58:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  80ed5c:	e0bfff17 	ldw	r2,-4(fp)
  80ed60:	10800d04 	addi	r2,r2,52
  80ed64:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  80ed68:	e0bffe0b 	ldhu	r2,-8(fp)
  80ed6c:	10800044 	addi	r2,r2,1
  80ed70:	e0bffe0d 	sth	r2,-8(fp)
  80ed74:	e0bffe0b 	ldhu	r2,-8(fp)
  80ed78:	10800ef0 	cmpltui	r2,r2,59
  80ed7c:	103fea1e 	bne	r2,zero,80ed28 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  80ed80:	e0bfff17 	ldw	r2,-4(fp)
  80ed84:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  80ed88:	e0ffff17 	ldw	r3,-4(fp)
  80ed8c:	00800fc4 	movi	r2,63
  80ed90:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  80ed94:	e0bfff17 	ldw	r2,-4(fp)
  80ed98:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  80ed9c:	00c020b4 	movhi	r3,130
  80eda0:	18e53104 	addi	r3,r3,-27452
  80eda4:	008020b4 	movhi	r2,130
  80eda8:	10b62504 	addi	r2,r2,-10092
  80edac:	18800015 	stw	r2,0(r3)
#endif
}
  80edb0:	e037883a 	mov	sp,fp
  80edb4:	dfc00117 	ldw	ra,4(sp)
  80edb8:	df000017 	ldw	fp,0(sp)
  80edbc:	dec00204 	addi	sp,sp,8
  80edc0:	f800283a 	ret

0080edc4 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  80edc4:	defff704 	addi	sp,sp,-36
  80edc8:	df000815 	stw	fp,32(sp)
  80edcc:	df000804 	addi	fp,sp,32
  80edd0:	e13ffd15 	stw	r4,-12(fp)
  80edd4:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80edd8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80eddc:	e0bffe17 	ldw	r2,-8(fp)
  80ede0:	1004c03a 	cmpne	r2,r2,zero
  80ede4:	1000021e 	bne	r2,zero,80edf0 <OSQAccept+0x2c>
        return ((void *)0);
  80ede8:	e03fff15 	stw	zero,-4(fp)
  80edec:	00004506 	br	80ef04 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80edf0:	e0bffd17 	ldw	r2,-12(fp)
  80edf4:	1004c03a 	cmpne	r2,r2,zero
  80edf8:	1000051e 	bne	r2,zero,80ee10 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  80edfc:	e0fffe17 	ldw	r3,-8(fp)
  80ee00:	00800104 	movi	r2,4
  80ee04:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80ee08:	e03fff15 	stw	zero,-4(fp)
  80ee0c:	00003d06 	br	80ef04 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80ee10:	e0bffd17 	ldw	r2,-12(fp)
  80ee14:	10800003 	ldbu	r2,0(r2)
  80ee18:	10803fcc 	andi	r2,r2,255
  80ee1c:	108000a0 	cmpeqi	r2,r2,2
  80ee20:	1000051e 	bne	r2,zero,80ee38 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  80ee24:	e0fffe17 	ldw	r3,-8(fp)
  80ee28:	00800044 	movi	r2,1
  80ee2c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80ee30:	e03fff15 	stw	zero,-4(fp)
  80ee34:	00003306 	br	80ef04 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee38:	0005303a 	rdctl	r2,status
  80ee3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee40:	e0fff917 	ldw	r3,-28(fp)
  80ee44:	00bfff84 	movi	r2,-2
  80ee48:	1884703a 	and	r2,r3,r2
  80ee4c:	1001703a 	wrctl	status,r2
  
  return context;
  80ee50:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ee54:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80ee58:	e0bffd17 	ldw	r2,-12(fp)
  80ee5c:	10800117 	ldw	r2,4(r2)
  80ee60:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80ee64:	e0bffb17 	ldw	r2,-20(fp)
  80ee68:	1080058b 	ldhu	r2,22(r2)
  80ee6c:	10bfffcc 	andi	r2,r2,65535
  80ee70:	1005003a 	cmpeq	r2,r2,zero
  80ee74:	1000191e 	bne	r2,zero,80eedc <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80ee78:	e0bffb17 	ldw	r2,-20(fp)
  80ee7c:	10c00417 	ldw	r3,16(r2)
  80ee80:	18800017 	ldw	r2,0(r3)
  80ee84:	e0bffc15 	stw	r2,-16(fp)
  80ee88:	18c00104 	addi	r3,r3,4
  80ee8c:	e0bffb17 	ldw	r2,-20(fp)
  80ee90:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80ee94:	e0bffb17 	ldw	r2,-20(fp)
  80ee98:	1080058b 	ldhu	r2,22(r2)
  80ee9c:	10bfffc4 	addi	r2,r2,-1
  80eea0:	1007883a 	mov	r3,r2
  80eea4:	e0bffb17 	ldw	r2,-20(fp)
  80eea8:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80eeac:	e0bffb17 	ldw	r2,-20(fp)
  80eeb0:	10c00417 	ldw	r3,16(r2)
  80eeb4:	e0bffb17 	ldw	r2,-20(fp)
  80eeb8:	10800217 	ldw	r2,8(r2)
  80eebc:	1880041e 	bne	r3,r2,80eed0 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  80eec0:	e0bffb17 	ldw	r2,-20(fp)
  80eec4:	10c00117 	ldw	r3,4(r2)
  80eec8:	e0bffb17 	ldw	r2,-20(fp)
  80eecc:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  80eed0:	e0bffe17 	ldw	r2,-8(fp)
  80eed4:	10000005 	stb	zero,0(r2)
  80eed8:	00000406 	br	80eeec <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  80eedc:	e0fffe17 	ldw	r3,-8(fp)
  80eee0:	008007c4 	movi	r2,31
  80eee4:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  80eee8:	e03ffc15 	stw	zero,-16(fp)
  80eeec:	e0bffa17 	ldw	r2,-24(fp)
  80eef0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eef4:	e0bff817 	ldw	r2,-32(fp)
  80eef8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  80eefc:	e0bffc17 	ldw	r2,-16(fp)
  80ef00:	e0bfff15 	stw	r2,-4(fp)
  80ef04:	e0bfff17 	ldw	r2,-4(fp)
}
  80ef08:	e037883a 	mov	sp,fp
  80ef0c:	df000017 	ldw	fp,0(sp)
  80ef10:	dec00104 	addi	sp,sp,4
  80ef14:	f800283a 	ret

0080ef18 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  80ef18:	defff304 	addi	sp,sp,-52
  80ef1c:	dfc00c15 	stw	ra,48(sp)
  80ef20:	df000b15 	stw	fp,44(sp)
  80ef24:	df000b04 	addi	fp,sp,44
  80ef28:	e13ffd15 	stw	r4,-12(fp)
  80ef2c:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ef30:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80ef34:	008020b4 	movhi	r2,130
  80ef38:	10a53604 	addi	r2,r2,-27432
  80ef3c:	10800003 	ldbu	r2,0(r2)
  80ef40:	10803fcc 	andi	r2,r2,255
  80ef44:	1005003a 	cmpeq	r2,r2,zero
  80ef48:	1000021e 	bne	r2,zero,80ef54 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  80ef4c:	e03fff15 	stw	zero,-4(fp)
  80ef50:	00007006 	br	80f114 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ef54:	0005303a 	rdctl	r2,status
  80ef58:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ef5c:	e0fff917 	ldw	r3,-28(fp)
  80ef60:	00bfff84 	movi	r2,-2
  80ef64:	1884703a 	and	r2,r3,r2
  80ef68:	1001703a 	wrctl	status,r2
  
  return context;
  80ef6c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80ef70:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  80ef74:	008020b4 	movhi	r2,130
  80ef78:	10a53504 	addi	r2,r2,-27436
  80ef7c:	10800017 	ldw	r2,0(r2)
  80ef80:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  80ef84:	008020b4 	movhi	r2,130
  80ef88:	10a53504 	addi	r2,r2,-27436
  80ef8c:	10800017 	ldw	r2,0(r2)
  80ef90:	1005003a 	cmpeq	r2,r2,zero
  80ef94:	1000081e 	bne	r2,zero,80efb8 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  80ef98:	008020b4 	movhi	r2,130
  80ef9c:	10a53504 	addi	r2,r2,-27436
  80efa0:	10800017 	ldw	r2,0(r2)
  80efa4:	10800117 	ldw	r2,4(r2)
  80efa8:	1007883a 	mov	r3,r2
  80efac:	008020b4 	movhi	r2,130
  80efb0:	10a53504 	addi	r2,r2,-27436
  80efb4:	10c00015 	stw	r3,0(r2)
  80efb8:	e0bffa17 	ldw	r2,-24(fp)
  80efbc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80efc0:	e0bff817 	ldw	r2,-32(fp)
  80efc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  80efc8:	e0bffc17 	ldw	r2,-16(fp)
  80efcc:	1005003a 	cmpeq	r2,r2,zero
  80efd0:	10004e1e 	bne	r2,zero,80f10c <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80efd4:	0005303a 	rdctl	r2,status
  80efd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80efdc:	e0fff717 	ldw	r3,-36(fp)
  80efe0:	00bfff84 	movi	r2,-2
  80efe4:	1884703a 	and	r2,r3,r2
  80efe8:	1001703a 	wrctl	status,r2
  
  return context;
  80efec:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  80eff0:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  80eff4:	008020b4 	movhi	r2,130
  80eff8:	10a53304 	addi	r2,r2,-27444
  80effc:	10800017 	ldw	r2,0(r2)
  80f000:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  80f004:	e0bffb17 	ldw	r2,-20(fp)
  80f008:	1005003a 	cmpeq	r2,r2,zero
  80f00c:	1000311e 	bne	r2,zero,80f0d4 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  80f010:	008020b4 	movhi	r2,130
  80f014:	10a53304 	addi	r2,r2,-27444
  80f018:	10800017 	ldw	r2,0(r2)
  80f01c:	10c00017 	ldw	r3,0(r2)
  80f020:	008020b4 	movhi	r2,130
  80f024:	10a53304 	addi	r2,r2,-27444
  80f028:	10c00015 	stw	r3,0(r2)
  80f02c:	e0bffa17 	ldw	r2,-24(fp)
  80f030:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f034:	e0bff617 	ldw	r2,-40(fp)
  80f038:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  80f03c:	e0fffb17 	ldw	r3,-20(fp)
  80f040:	e0bffd17 	ldw	r2,-12(fp)
  80f044:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  80f048:	e0bffe0b 	ldhu	r2,-8(fp)
  80f04c:	1085883a 	add	r2,r2,r2
  80f050:	1085883a 	add	r2,r2,r2
  80f054:	1007883a 	mov	r3,r2
  80f058:	e0bffd17 	ldw	r2,-12(fp)
  80f05c:	1887883a 	add	r3,r3,r2
  80f060:	e0bffb17 	ldw	r2,-20(fp)
  80f064:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  80f068:	e0fffb17 	ldw	r3,-20(fp)
  80f06c:	e0bffd17 	ldw	r2,-12(fp)
  80f070:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  80f074:	e0fffb17 	ldw	r3,-20(fp)
  80f078:	e0bffd17 	ldw	r2,-12(fp)
  80f07c:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  80f080:	e0fffb17 	ldw	r3,-20(fp)
  80f084:	e0bffe0b 	ldhu	r2,-8(fp)
  80f088:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  80f08c:	e0bffb17 	ldw	r2,-20(fp)
  80f090:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  80f094:	e0fffc17 	ldw	r3,-16(fp)
  80f098:	00800084 	movi	r2,2
  80f09c:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  80f0a0:	e0bffc17 	ldw	r2,-16(fp)
  80f0a4:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  80f0a8:	e0fffc17 	ldw	r3,-16(fp)
  80f0ac:	e0bffb17 	ldw	r2,-20(fp)
  80f0b0:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  80f0b4:	e0fffc17 	ldw	r3,-16(fp)
  80f0b8:	00800fc4 	movi	r2,63
  80f0bc:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  80f0c0:	e0bffc17 	ldw	r2,-16(fp)
  80f0c4:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  80f0c8:	e13ffc17 	ldw	r4,-16(fp)
  80f0cc:	080bf800 	call	80bf80 <OS_EventWaitListInit>
  80f0d0:	00000e06 	br	80f10c <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  80f0d4:	008020b4 	movhi	r2,130
  80f0d8:	10a53504 	addi	r2,r2,-27436
  80f0dc:	10c00017 	ldw	r3,0(r2)
  80f0e0:	e0bffc17 	ldw	r2,-16(fp)
  80f0e4:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  80f0e8:	00c020b4 	movhi	r3,130
  80f0ec:	18e53504 	addi	r3,r3,-27436
  80f0f0:	e0bffc17 	ldw	r2,-16(fp)
  80f0f4:	18800015 	stw	r2,0(r3)
  80f0f8:	e0bffa17 	ldw	r2,-24(fp)
  80f0fc:	e0bff515 	stw	r2,-44(fp)
  80f100:	e0bff517 	ldw	r2,-44(fp)
  80f104:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  80f108:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  80f10c:	e0bffc17 	ldw	r2,-16(fp)
  80f110:	e0bfff15 	stw	r2,-4(fp)
  80f114:	e0bfff17 	ldw	r2,-4(fp)
}
  80f118:	e037883a 	mov	sp,fp
  80f11c:	dfc00117 	ldw	ra,4(sp)
  80f120:	df000017 	ldw	fp,0(sp)
  80f124:	dec00204 	addi	sp,sp,8
  80f128:	f800283a 	ret

0080f12c <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80f12c:	defff004 	addi	sp,sp,-64
  80f130:	dfc00f15 	stw	ra,60(sp)
  80f134:	df000e15 	stw	fp,56(sp)
  80f138:	df000e04 	addi	fp,sp,56
  80f13c:	e13ffb15 	stw	r4,-20(fp)
  80f140:	e1bffd15 	stw	r6,-12(fp)
  80f144:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f148:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f14c:	e0bffd17 	ldw	r2,-12(fp)
  80f150:	1004c03a 	cmpne	r2,r2,zero
  80f154:	1000031e 	bne	r2,zero,80f164 <OSQDel+0x38>
        return (pevent);
  80f158:	e0bffb17 	ldw	r2,-20(fp)
  80f15c:	e0bfff15 	stw	r2,-4(fp)
  80f160:	0000ac06 	br	80f414 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80f164:	e0bffb17 	ldw	r2,-20(fp)
  80f168:	1004c03a 	cmpne	r2,r2,zero
  80f16c:	1000061e 	bne	r2,zero,80f188 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  80f170:	e0fffd17 	ldw	r3,-12(fp)
  80f174:	00800104 	movi	r2,4
  80f178:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f17c:	e0fffb17 	ldw	r3,-20(fp)
  80f180:	e0ffff15 	stw	r3,-4(fp)
  80f184:	0000a306 	br	80f414 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80f188:	e0bffb17 	ldw	r2,-20(fp)
  80f18c:	10800003 	ldbu	r2,0(r2)
  80f190:	10803fcc 	andi	r2,r2,255
  80f194:	108000a0 	cmpeqi	r2,r2,2
  80f198:	1000061e 	bne	r2,zero,80f1b4 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  80f19c:	e0fffd17 	ldw	r3,-12(fp)
  80f1a0:	00800044 	movi	r2,1
  80f1a4:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f1a8:	e0bffb17 	ldw	r2,-20(fp)
  80f1ac:	e0bfff15 	stw	r2,-4(fp)
  80f1b0:	00009806 	br	80f414 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80f1b4:	008020b4 	movhi	r2,130
  80f1b8:	10a53604 	addi	r2,r2,-27432
  80f1bc:	10800003 	ldbu	r2,0(r2)
  80f1c0:	10803fcc 	andi	r2,r2,255
  80f1c4:	1005003a 	cmpeq	r2,r2,zero
  80f1c8:	1000061e 	bne	r2,zero,80f1e4 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80f1cc:	e0fffd17 	ldw	r3,-12(fp)
  80f1d0:	008003c4 	movi	r2,15
  80f1d4:	18800005 	stb	r2,0(r3)
        return (pevent);
  80f1d8:	e0fffb17 	ldw	r3,-20(fp)
  80f1dc:	e0ffff15 	stw	r3,-4(fp)
  80f1e0:	00008c06 	br	80f414 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f1e4:	0005303a 	rdctl	r2,status
  80f1e8:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f1ec:	e0fff617 	ldw	r3,-40(fp)
  80f1f0:	00bfff84 	movi	r2,-2
  80f1f4:	1884703a 	and	r2,r3,r2
  80f1f8:	1001703a 	wrctl	status,r2
  
  return context;
  80f1fc:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80f200:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  80f204:	e0bffb17 	ldw	r2,-20(fp)
  80f208:	10800283 	ldbu	r2,10(r2)
  80f20c:	10803fcc 	andi	r2,r2,255
  80f210:	1005003a 	cmpeq	r2,r2,zero
  80f214:	1000031e 	bne	r2,zero,80f224 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80f218:	00800044 	movi	r2,1
  80f21c:	e0bffa05 	stb	r2,-24(fp)
  80f220:	00000106 	br	80f228 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80f224:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80f228:	e0bffc03 	ldbu	r2,-16(fp)
  80f22c:	e0bffe15 	stw	r2,-8(fp)
  80f230:	e0fffe17 	ldw	r3,-8(fp)
  80f234:	1805003a 	cmpeq	r2,r3,zero
  80f238:	1000041e 	bne	r2,zero,80f24c <OSQDel+0x120>
  80f23c:	e0fffe17 	ldw	r3,-8(fp)
  80f240:	18800060 	cmpeqi	r2,r3,1
  80f244:	1000391e 	bne	r2,zero,80f32c <OSQDel+0x200>
  80f248:	00006706 	br	80f3e8 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  80f24c:	e0bffa03 	ldbu	r2,-24(fp)
  80f250:	1004c03a 	cmpne	r2,r2,zero
  80f254:	1000261e 	bne	r2,zero,80f2f0 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  80f258:	e0fffb17 	ldw	r3,-20(fp)
  80f25c:	00800fc4 	movi	r2,63
  80f260:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  80f264:	e0bffb17 	ldw	r2,-20(fp)
  80f268:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  80f26c:	e0bffb17 	ldw	r2,-20(fp)
  80f270:	10800117 	ldw	r2,4(r2)
  80f274:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  80f278:	008020b4 	movhi	r2,130
  80f27c:	10a53304 	addi	r2,r2,-27444
  80f280:	10c00017 	ldw	r3,0(r2)
  80f284:	e0bff817 	ldw	r2,-32(fp)
  80f288:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  80f28c:	00c020b4 	movhi	r3,130
  80f290:	18e53304 	addi	r3,r3,-27444
  80f294:	e0bff817 	ldw	r2,-32(fp)
  80f298:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f29c:	e0bffb17 	ldw	r2,-20(fp)
  80f2a0:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  80f2a4:	008020b4 	movhi	r2,130
  80f2a8:	10a53504 	addi	r2,r2,-27436
  80f2ac:	10c00017 	ldw	r3,0(r2)
  80f2b0:	e0bffb17 	ldw	r2,-20(fp)
  80f2b4:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  80f2b8:	e0bffb17 	ldw	r2,-20(fp)
  80f2bc:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  80f2c0:	00c020b4 	movhi	r3,130
  80f2c4:	18e53504 	addi	r3,r3,-27436
  80f2c8:	e0bffb17 	ldw	r2,-20(fp)
  80f2cc:	18800015 	stw	r2,0(r3)
  80f2d0:	e0bff717 	ldw	r2,-36(fp)
  80f2d4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f2d8:	e0bff517 	ldw	r2,-44(fp)
  80f2dc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  80f2e0:	e0bffd17 	ldw	r2,-12(fp)
  80f2e4:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  80f2e8:	e03ff915 	stw	zero,-28(fp)
  80f2ec:	00004706 	br	80f40c <OSQDel+0x2e0>
  80f2f0:	e0bff717 	ldw	r2,-36(fp)
  80f2f4:	e0bff415 	stw	r2,-48(fp)
  80f2f8:	e0bff417 	ldw	r2,-48(fp)
  80f2fc:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  80f300:	e0fffd17 	ldw	r3,-12(fp)
  80f304:	00801244 	movi	r2,73
  80f308:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  80f30c:	e0bffb17 	ldw	r2,-20(fp)
  80f310:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  80f314:	00003d06 	br	80f40c <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  80f318:	e13ffb17 	ldw	r4,-20(fp)
  80f31c:	000b883a 	mov	r5,zero
  80f320:	01800104 	movi	r6,4
  80f324:	000f883a 	mov	r7,zero
  80f328:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  80f32c:	e0bffb17 	ldw	r2,-20(fp)
  80f330:	10800283 	ldbu	r2,10(r2)
  80f334:	10803fcc 	andi	r2,r2,255
  80f338:	1004c03a 	cmpne	r2,r2,zero
  80f33c:	103ff61e 	bne	r2,zero,80f318 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  80f340:	e0fffb17 	ldw	r3,-20(fp)
  80f344:	00800fc4 	movi	r2,63
  80f348:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  80f34c:	e0bffb17 	ldw	r2,-20(fp)
  80f350:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  80f354:	e0bffb17 	ldw	r2,-20(fp)
  80f358:	10800117 	ldw	r2,4(r2)
  80f35c:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  80f360:	008020b4 	movhi	r2,130
  80f364:	10a53304 	addi	r2,r2,-27444
  80f368:	10c00017 	ldw	r3,0(r2)
  80f36c:	e0bff817 	ldw	r2,-32(fp)
  80f370:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  80f374:	00c020b4 	movhi	r3,130
  80f378:	18e53304 	addi	r3,r3,-27444
  80f37c:	e0bff817 	ldw	r2,-32(fp)
  80f380:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80f384:	e0bffb17 	ldw	r2,-20(fp)
  80f388:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  80f38c:	008020b4 	movhi	r2,130
  80f390:	10a53504 	addi	r2,r2,-27436
  80f394:	10c00017 	ldw	r3,0(r2)
  80f398:	e0bffb17 	ldw	r2,-20(fp)
  80f39c:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  80f3a0:	e0bffb17 	ldw	r2,-20(fp)
  80f3a4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  80f3a8:	00c020b4 	movhi	r3,130
  80f3ac:	18e53504 	addi	r3,r3,-27436
  80f3b0:	e0bffb17 	ldw	r2,-20(fp)
  80f3b4:	18800015 	stw	r2,0(r3)
  80f3b8:	e0bff717 	ldw	r2,-36(fp)
  80f3bc:	e0bff315 	stw	r2,-52(fp)
  80f3c0:	e0bff317 	ldw	r2,-52(fp)
  80f3c4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80f3c8:	e0bffa03 	ldbu	r2,-24(fp)
  80f3cc:	10800058 	cmpnei	r2,r2,1
  80f3d0:	1000011e 	bne	r2,zero,80f3d8 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80f3d4:	080c40c0 	call	80c40c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  80f3d8:	e0bffd17 	ldw	r2,-12(fp)
  80f3dc:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  80f3e0:	e03ff915 	stw	zero,-28(fp)
             break;
  80f3e4:	00000906 	br	80f40c <OSQDel+0x2e0>
  80f3e8:	e0bff717 	ldw	r2,-36(fp)
  80f3ec:	e0bff215 	stw	r2,-56(fp)
  80f3f0:	e0bff217 	ldw	r2,-56(fp)
  80f3f4:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  80f3f8:	e0fffd17 	ldw	r3,-12(fp)
  80f3fc:	008001c4 	movi	r2,7
  80f400:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  80f404:	e0bffb17 	ldw	r2,-20(fp)
  80f408:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  80f40c:	e0bff917 	ldw	r2,-28(fp)
  80f410:	e0bfff15 	stw	r2,-4(fp)
  80f414:	e0bfff17 	ldw	r2,-4(fp)
}
  80f418:	e037883a 	mov	sp,fp
  80f41c:	dfc00117 	ldw	ra,4(sp)
  80f420:	df000017 	ldw	fp,0(sp)
  80f424:	dec00204 	addi	sp,sp,8
  80f428:	f800283a 	ret

0080f42c <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  80f42c:	defff904 	addi	sp,sp,-28
  80f430:	df000615 	stw	fp,24(sp)
  80f434:	df000604 	addi	fp,sp,24
  80f438:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80f43c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80f440:	e0bffe17 	ldw	r2,-8(fp)
  80f444:	1004c03a 	cmpne	r2,r2,zero
  80f448:	1000031e 	bne	r2,zero,80f458 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  80f44c:	00800104 	movi	r2,4
  80f450:	e0bfff15 	stw	r2,-4(fp)
  80f454:	00002206 	br	80f4e0 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80f458:	e0bffe17 	ldw	r2,-8(fp)
  80f45c:	10800003 	ldbu	r2,0(r2)
  80f460:	10803fcc 	andi	r2,r2,255
  80f464:	108000a0 	cmpeqi	r2,r2,2
  80f468:	1000031e 	bne	r2,zero,80f478 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  80f46c:	00800044 	movi	r2,1
  80f470:	e0bfff15 	stw	r2,-4(fp)
  80f474:	00001a06 	br	80f4e0 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f478:	0005303a 	rdctl	r2,status
  80f47c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f480:	e0fffb17 	ldw	r3,-20(fp)
  80f484:	00bfff84 	movi	r2,-2
  80f488:	1884703a 	and	r2,r3,r2
  80f48c:	1001703a 	wrctl	status,r2
  
  return context;
  80f490:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  80f494:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  80f498:	e0bffe17 	ldw	r2,-8(fp)
  80f49c:	10800117 	ldw	r2,4(r2)
  80f4a0:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  80f4a4:	e0bffd17 	ldw	r2,-12(fp)
  80f4a8:	10c00117 	ldw	r3,4(r2)
  80f4ac:	e0bffd17 	ldw	r2,-12(fp)
  80f4b0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  80f4b4:	e0bffd17 	ldw	r2,-12(fp)
  80f4b8:	10c00117 	ldw	r3,4(r2)
  80f4bc:	e0bffd17 	ldw	r2,-12(fp)
  80f4c0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  80f4c4:	e0bffd17 	ldw	r2,-12(fp)
  80f4c8:	1000058d 	sth	zero,22(r2)
  80f4cc:	e0bffc17 	ldw	r2,-16(fp)
  80f4d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4d4:	e0bffa17 	ldw	r2,-24(fp)
  80f4d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80f4dc:	e03fff15 	stw	zero,-4(fp)
  80f4e0:	e0bfff17 	ldw	r2,-4(fp)
}
  80f4e4:	e037883a 	mov	sp,fp
  80f4e8:	df000017 	ldw	fp,0(sp)
  80f4ec:	dec00104 	addi	sp,sp,4
  80f4f0:	f800283a 	ret

0080f4f4 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  80f4f4:	defff104 	addi	sp,sp,-60
  80f4f8:	dfc00e15 	stw	ra,56(sp)
  80f4fc:	df000d15 	stw	fp,52(sp)
  80f500:	df000d04 	addi	fp,sp,52
  80f504:	e13ffb15 	stw	r4,-20(fp)
  80f508:	e1bffd15 	stw	r6,-12(fp)
  80f50c:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f510:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80f514:	e0bffd17 	ldw	r2,-12(fp)
  80f518:	1004c03a 	cmpne	r2,r2,zero
  80f51c:	1000021e 	bne	r2,zero,80f528 <OSQPend+0x34>
        return ((void *)0);
  80f520:	e03fff15 	stw	zero,-4(fp)
  80f524:	0000b506 	br	80f7fc <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  80f528:	e0bffb17 	ldw	r2,-20(fp)
  80f52c:	1004c03a 	cmpne	r2,r2,zero
  80f530:	1000051e 	bne	r2,zero,80f548 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80f534:	e0fffd17 	ldw	r3,-12(fp)
  80f538:	00800104 	movi	r2,4
  80f53c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f540:	e03fff15 	stw	zero,-4(fp)
  80f544:	0000ad06 	br	80f7fc <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  80f548:	e0bffb17 	ldw	r2,-20(fp)
  80f54c:	10800003 	ldbu	r2,0(r2)
  80f550:	10803fcc 	andi	r2,r2,255
  80f554:	108000a0 	cmpeqi	r2,r2,2
  80f558:	1000051e 	bne	r2,zero,80f570 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f55c:	e0fffd17 	ldw	r3,-12(fp)
  80f560:	00800044 	movi	r2,1
  80f564:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f568:	e03fff15 	stw	zero,-4(fp)
  80f56c:	0000a306 	br	80f7fc <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  80f570:	008020b4 	movhi	r2,130
  80f574:	10a53604 	addi	r2,r2,-27432
  80f578:	10800003 	ldbu	r2,0(r2)
  80f57c:	10803fcc 	andi	r2,r2,255
  80f580:	1005003a 	cmpeq	r2,r2,zero
  80f584:	1000051e 	bne	r2,zero,80f59c <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  80f588:	e0fffd17 	ldw	r3,-12(fp)
  80f58c:	00800084 	movi	r2,2
  80f590:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f594:	e03fff15 	stw	zero,-4(fp)
  80f598:	00009806 	br	80f7fc <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  80f59c:	008020b4 	movhi	r2,130
  80f5a0:	10a52804 	addi	r2,r2,-27488
  80f5a4:	10800003 	ldbu	r2,0(r2)
  80f5a8:	10803fcc 	andi	r2,r2,255
  80f5ac:	1005003a 	cmpeq	r2,r2,zero
  80f5b0:	1000051e 	bne	r2,zero,80f5c8 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  80f5b4:	e0fffd17 	ldw	r3,-12(fp)
  80f5b8:	00800344 	movi	r2,13
  80f5bc:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  80f5c0:	e03fff15 	stw	zero,-4(fp)
  80f5c4:	00008d06 	br	80f7fc <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f5c8:	0005303a 	rdctl	r2,status
  80f5cc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f5d0:	e0fff717 	ldw	r3,-36(fp)
  80f5d4:	00bfff84 	movi	r2,-2
  80f5d8:	1884703a 	and	r2,r3,r2
  80f5dc:	1001703a 	wrctl	status,r2
  
  return context;
  80f5e0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80f5e4:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  80f5e8:	e0bffb17 	ldw	r2,-20(fp)
  80f5ec:	10800117 	ldw	r2,4(r2)
  80f5f0:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  80f5f4:	e0bff917 	ldw	r2,-28(fp)
  80f5f8:	1080058b 	ldhu	r2,22(r2)
  80f5fc:	10bfffcc 	andi	r2,r2,65535
  80f600:	1005003a 	cmpeq	r2,r2,zero
  80f604:	10001f1e 	bne	r2,zero,80f684 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  80f608:	e0bff917 	ldw	r2,-28(fp)
  80f60c:	10c00417 	ldw	r3,16(r2)
  80f610:	18800017 	ldw	r2,0(r3)
  80f614:	e0bffa15 	stw	r2,-24(fp)
  80f618:	18c00104 	addi	r3,r3,4
  80f61c:	e0bff917 	ldw	r2,-28(fp)
  80f620:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  80f624:	e0bff917 	ldw	r2,-28(fp)
  80f628:	1080058b 	ldhu	r2,22(r2)
  80f62c:	10bfffc4 	addi	r2,r2,-1
  80f630:	1007883a 	mov	r3,r2
  80f634:	e0bff917 	ldw	r2,-28(fp)
  80f638:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  80f63c:	e0bff917 	ldw	r2,-28(fp)
  80f640:	10c00417 	ldw	r3,16(r2)
  80f644:	e0bff917 	ldw	r2,-28(fp)
  80f648:	10800217 	ldw	r2,8(r2)
  80f64c:	1880041e 	bne	r3,r2,80f660 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  80f650:	e0bff917 	ldw	r2,-28(fp)
  80f654:	10c00117 	ldw	r3,4(r2)
  80f658:	e0bff917 	ldw	r2,-28(fp)
  80f65c:	10c00415 	stw	r3,16(r2)
  80f660:	e0bff817 	ldw	r2,-32(fp)
  80f664:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f668:	e0bff617 	ldw	r2,-40(fp)
  80f66c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  80f670:	e0bffd17 	ldw	r2,-12(fp)
  80f674:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  80f678:	e0bffa17 	ldw	r2,-24(fp)
  80f67c:	e0bfff15 	stw	r2,-4(fp)
  80f680:	00005e06 	br	80f7fc <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  80f684:	008020b4 	movhi	r2,130
  80f688:	10a53704 	addi	r2,r2,-27428
  80f68c:	10c00017 	ldw	r3,0(r2)
  80f690:	008020b4 	movhi	r2,130
  80f694:	10a53704 	addi	r2,r2,-27428
  80f698:	10800017 	ldw	r2,0(r2)
  80f69c:	10800c03 	ldbu	r2,48(r2)
  80f6a0:	10800114 	ori	r2,r2,4
  80f6a4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80f6a8:	008020b4 	movhi	r2,130
  80f6ac:	10a53704 	addi	r2,r2,-27428
  80f6b0:	10800017 	ldw	r2,0(r2)
  80f6b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  80f6b8:	008020b4 	movhi	r2,130
  80f6bc:	10a53704 	addi	r2,r2,-27428
  80f6c0:	10c00017 	ldw	r3,0(r2)
  80f6c4:	e0bffc0b 	ldhu	r2,-16(fp)
  80f6c8:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  80f6cc:	e13ffb17 	ldw	r4,-20(fp)
  80f6d0:	080bb600 	call	80bb60 <OS_EventTaskWait>
  80f6d4:	e0bff817 	ldw	r2,-32(fp)
  80f6d8:	e0bff515 	stw	r2,-44(fp)
  80f6dc:	e0bff517 	ldw	r2,-44(fp)
  80f6e0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  80f6e4:	080c40c0 	call	80c40c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6e8:	0005303a 	rdctl	r2,status
  80f6ec:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6f0:	e0fff417 	ldw	r3,-48(fp)
  80f6f4:	00bfff84 	movi	r2,-2
  80f6f8:	1884703a 	and	r2,r3,r2
  80f6fc:	1001703a 	wrctl	status,r2
  
  return context;
  80f700:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  80f704:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  80f708:	008020b4 	movhi	r2,130
  80f70c:	10a53704 	addi	r2,r2,-27428
  80f710:	10800017 	ldw	r2,0(r2)
  80f714:	10800c43 	ldbu	r2,49(r2)
  80f718:	10803fcc 	andi	r2,r2,255
  80f71c:	e0bffe15 	stw	r2,-8(fp)
  80f720:	e0fffe17 	ldw	r3,-8(fp)
  80f724:	1805003a 	cmpeq	r2,r3,zero
  80f728:	1000041e 	bne	r2,zero,80f73c <OSQPend+0x248>
  80f72c:	e0fffe17 	ldw	r3,-8(fp)
  80f730:	188000a0 	cmpeqi	r2,r3,2
  80f734:	1000091e 	bne	r2,zero,80f75c <OSQPend+0x268>
  80f738:	00000d06 	br	80f770 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  80f73c:	008020b4 	movhi	r2,130
  80f740:	10a53704 	addi	r2,r2,-27428
  80f744:	10800017 	ldw	r2,0(r2)
  80f748:	10800917 	ldw	r2,36(r2)
  80f74c:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  80f750:	e0bffd17 	ldw	r2,-12(fp)
  80f754:	10000005 	stb	zero,0(r2)
             break;
  80f758:	00000e06 	br	80f794 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  80f75c:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  80f760:	e0fffd17 	ldw	r3,-12(fp)
  80f764:	00800384 	movi	r2,14
  80f768:	18800005 	stb	r2,0(r3)
             break;
  80f76c:	00000906 	br	80f794 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  80f770:	008020b4 	movhi	r2,130
  80f774:	10a53704 	addi	r2,r2,-27428
  80f778:	11000017 	ldw	r4,0(r2)
  80f77c:	e17ffb17 	ldw	r5,-20(fp)
  80f780:	080bdc40 	call	80bdc4 <OS_EventTaskRemove>
             pmsg = (void *)0;
  80f784:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  80f788:	e0fffd17 	ldw	r3,-12(fp)
  80f78c:	00800284 	movi	r2,10
  80f790:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  80f794:	008020b4 	movhi	r2,130
  80f798:	10a53704 	addi	r2,r2,-27428
  80f79c:	10800017 	ldw	r2,0(r2)
  80f7a0:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  80f7a4:	008020b4 	movhi	r2,130
  80f7a8:	10a53704 	addi	r2,r2,-27428
  80f7ac:	10800017 	ldw	r2,0(r2)
  80f7b0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  80f7b4:	008020b4 	movhi	r2,130
  80f7b8:	10a53704 	addi	r2,r2,-27428
  80f7bc:	10800017 	ldw	r2,0(r2)
  80f7c0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80f7c4:	008020b4 	movhi	r2,130
  80f7c8:	10a53704 	addi	r2,r2,-27428
  80f7cc:	10800017 	ldw	r2,0(r2)
  80f7d0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  80f7d4:	008020b4 	movhi	r2,130
  80f7d8:	10a53704 	addi	r2,r2,-27428
  80f7dc:	10800017 	ldw	r2,0(r2)
  80f7e0:	10000915 	stw	zero,36(r2)
  80f7e4:	e0bff817 	ldw	r2,-32(fp)
  80f7e8:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7ec:	e0bff317 	ldw	r2,-52(fp)
  80f7f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  80f7f4:	e0bffa17 	ldw	r2,-24(fp)
  80f7f8:	e0bfff15 	stw	r2,-4(fp)
  80f7fc:	e0bfff17 	ldw	r2,-4(fp)
}
  80f800:	e037883a 	mov	sp,fp
  80f804:	dfc00117 	ldw	ra,4(sp)
  80f808:	df000017 	ldw	fp,0(sp)
  80f80c:	dec00204 	addi	sp,sp,8
  80f810:	f800283a 	ret

0080f814 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  80f814:	defff504 	addi	sp,sp,-44
  80f818:	dfc00a15 	stw	ra,40(sp)
  80f81c:	df000915 	stw	fp,36(sp)
  80f820:	df000904 	addi	fp,sp,36
  80f824:	e13ffc15 	stw	r4,-16(fp)
  80f828:	e1bffe15 	stw	r6,-8(fp)
  80f82c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f830:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f834:	e0bffe17 	ldw	r2,-8(fp)
  80f838:	1004c03a 	cmpne	r2,r2,zero
  80f83c:	1000021e 	bne	r2,zero,80f848 <OSQPendAbort+0x34>
        return (0);
  80f840:	e03fff15 	stw	zero,-4(fp)
  80f844:	00004c06 	br	80f978 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  80f848:	e0bffc17 	ldw	r2,-16(fp)
  80f84c:	1004c03a 	cmpne	r2,r2,zero
  80f850:	1000051e 	bne	r2,zero,80f868 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80f854:	e0fffe17 	ldw	r3,-8(fp)
  80f858:	00800104 	movi	r2,4
  80f85c:	18800005 	stb	r2,0(r3)
        return (0);
  80f860:	e03fff15 	stw	zero,-4(fp)
  80f864:	00004406 	br	80f978 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  80f868:	e0bffc17 	ldw	r2,-16(fp)
  80f86c:	10800003 	ldbu	r2,0(r2)
  80f870:	10803fcc 	andi	r2,r2,255
  80f874:	108000a0 	cmpeqi	r2,r2,2
  80f878:	1000051e 	bne	r2,zero,80f890 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f87c:	e0fffe17 	ldw	r3,-8(fp)
  80f880:	00800044 	movi	r2,1
  80f884:	18800005 	stb	r2,0(r3)
        return (0);
  80f888:	e03fff15 	stw	zero,-4(fp)
  80f88c:	00003a06 	br	80f978 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f890:	0005303a 	rdctl	r2,status
  80f894:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f898:	e0fff917 	ldw	r3,-28(fp)
  80f89c:	00bfff84 	movi	r2,-2
  80f8a0:	1884703a 	and	r2,r3,r2
  80f8a4:	1001703a 	wrctl	status,r2
  
  return context;
  80f8a8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80f8ac:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  80f8b0:	e0bffc17 	ldw	r2,-16(fp)
  80f8b4:	10800283 	ldbu	r2,10(r2)
  80f8b8:	10803fcc 	andi	r2,r2,255
  80f8bc:	1005003a 	cmpeq	r2,r2,zero
  80f8c0:	1000261e 	bne	r2,zero,80f95c <OSQPendAbort+0x148>
        nbr_tasks = 0;
  80f8c4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  80f8c8:	e0bffd03 	ldbu	r2,-12(fp)
  80f8cc:	10800060 	cmpeqi	r2,r2,1
  80f8d0:	1000091e 	bne	r2,zero,80f8f8 <OSQPendAbort+0xe4>
  80f8d4:	00000e06 	br	80f910 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80f8d8:	e13ffc17 	ldw	r4,-16(fp)
  80f8dc:	000b883a 	mov	r5,zero
  80f8e0:	01800104 	movi	r6,4
  80f8e4:	01c00084 	movi	r7,2
  80f8e8:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                     nbr_tasks++;
  80f8ec:	e0bffb03 	ldbu	r2,-20(fp)
  80f8f0:	10800044 	addi	r2,r2,1
  80f8f4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  80f8f8:	e0bffc17 	ldw	r2,-16(fp)
  80f8fc:	10800283 	ldbu	r2,10(r2)
  80f900:	10803fcc 	andi	r2,r2,255
  80f904:	1004c03a 	cmpne	r2,r2,zero
  80f908:	103ff31e 	bne	r2,zero,80f8d8 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  80f90c:	00000806 	br	80f930 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  80f910:	e13ffc17 	ldw	r4,-16(fp)
  80f914:	000b883a 	mov	r5,zero
  80f918:	01800104 	movi	r6,4
  80f91c:	01c00084 	movi	r7,2
  80f920:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                 nbr_tasks++;
  80f924:	e0bffb03 	ldbu	r2,-20(fp)
  80f928:	10800044 	addi	r2,r2,1
  80f92c:	e0bffb05 	stb	r2,-20(fp)
  80f930:	e0bffa17 	ldw	r2,-24(fp)
  80f934:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f938:	e0bff817 	ldw	r2,-32(fp)
  80f93c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  80f940:	080c40c0 	call	80c40c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  80f944:	e0fffe17 	ldw	r3,-8(fp)
  80f948:	00800384 	movi	r2,14
  80f94c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  80f950:	e0bffb03 	ldbu	r2,-20(fp)
  80f954:	e0bfff15 	stw	r2,-4(fp)
  80f958:	00000706 	br	80f978 <OSQPendAbort+0x164>
  80f95c:	e0bffa17 	ldw	r2,-24(fp)
  80f960:	e0bff715 	stw	r2,-36(fp)
  80f964:	e0bff717 	ldw	r2,-36(fp)
  80f968:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80f96c:	e0bffe17 	ldw	r2,-8(fp)
  80f970:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  80f974:	e03fff15 	stw	zero,-4(fp)
  80f978:	e0bfff17 	ldw	r2,-4(fp)
}
  80f97c:	e037883a 	mov	sp,fp
  80f980:	dfc00117 	ldw	ra,4(sp)
  80f984:	df000017 	ldw	fp,0(sp)
  80f988:	dec00204 	addi	sp,sp,8
  80f98c:	f800283a 	ret

0080f990 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  80f990:	defff504 	addi	sp,sp,-44
  80f994:	dfc00a15 	stw	ra,40(sp)
  80f998:	df000915 	stw	fp,36(sp)
  80f99c:	df000904 	addi	fp,sp,36
  80f9a0:	e13ffd15 	stw	r4,-12(fp)
  80f9a4:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80f9a8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80f9ac:	e0bffd17 	ldw	r2,-12(fp)
  80f9b0:	1004c03a 	cmpne	r2,r2,zero
  80f9b4:	1000031e 	bne	r2,zero,80f9c4 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  80f9b8:	00800104 	movi	r2,4
  80f9bc:	e0bfff15 	stw	r2,-4(fp)
  80f9c0:	00004d06 	br	80faf8 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80f9c4:	e0bffd17 	ldw	r2,-12(fp)
  80f9c8:	10800003 	ldbu	r2,0(r2)
  80f9cc:	10803fcc 	andi	r2,r2,255
  80f9d0:	108000a0 	cmpeqi	r2,r2,2
  80f9d4:	1000031e 	bne	r2,zero,80f9e4 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  80f9d8:	00800044 	movi	r2,1
  80f9dc:	e0bfff15 	stw	r2,-4(fp)
  80f9e0:	00004506 	br	80faf8 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f9e4:	0005303a 	rdctl	r2,status
  80f9e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f9ec:	e0fffa17 	ldw	r3,-24(fp)
  80f9f0:	00bfff84 	movi	r2,-2
  80f9f4:	1884703a 	and	r2,r3,r2
  80f9f8:	1001703a 	wrctl	status,r2
  
  return context;
  80f9fc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fa00:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  80fa04:	e0bffd17 	ldw	r2,-12(fp)
  80fa08:	10800283 	ldbu	r2,10(r2)
  80fa0c:	10803fcc 	andi	r2,r2,255
  80fa10:	1005003a 	cmpeq	r2,r2,zero
  80fa14:	10000c1e 	bne	r2,zero,80fa48 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fa18:	e13ffd17 	ldw	r4,-12(fp)
  80fa1c:	e17ffe17 	ldw	r5,-8(fp)
  80fa20:	01800104 	movi	r6,4
  80fa24:	000f883a 	mov	r7,zero
  80fa28:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
  80fa2c:	e0bffb17 	ldw	r2,-20(fp)
  80fa30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fa34:	e0bff917 	ldw	r2,-28(fp)
  80fa38:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  80fa3c:	080c40c0 	call	80c40c <OS_Sched>
        return (OS_ERR_NONE);
  80fa40:	e03fff15 	stw	zero,-4(fp)
  80fa44:	00002c06 	br	80faf8 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  80fa48:	e0bffd17 	ldw	r2,-12(fp)
  80fa4c:	10800117 	ldw	r2,4(r2)
  80fa50:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  80fa54:	e0bffc17 	ldw	r2,-16(fp)
  80fa58:	10c0058b 	ldhu	r3,22(r2)
  80fa5c:	e0bffc17 	ldw	r2,-16(fp)
  80fa60:	1080050b 	ldhu	r2,20(r2)
  80fa64:	18ffffcc 	andi	r3,r3,65535
  80fa68:	10bfffcc 	andi	r2,r2,65535
  80fa6c:	18800736 	bltu	r3,r2,80fa8c <OSQPost+0xfc>
  80fa70:	e0bffb17 	ldw	r2,-20(fp)
  80fa74:	e0bff815 	stw	r2,-32(fp)
  80fa78:	e0bff817 	ldw	r2,-32(fp)
  80fa7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fa80:	00800784 	movi	r2,30
  80fa84:	e0bfff15 	stw	r2,-4(fp)
  80fa88:	00001b06 	br	80faf8 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  80fa8c:	e0bffc17 	ldw	r2,-16(fp)
  80fa90:	10c00317 	ldw	r3,12(r2)
  80fa94:	e0bffe17 	ldw	r2,-8(fp)
  80fa98:	18800015 	stw	r2,0(r3)
  80fa9c:	18c00104 	addi	r3,r3,4
  80faa0:	e0bffc17 	ldw	r2,-16(fp)
  80faa4:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  80faa8:	e0bffc17 	ldw	r2,-16(fp)
  80faac:	1080058b 	ldhu	r2,22(r2)
  80fab0:	10800044 	addi	r2,r2,1
  80fab4:	1007883a 	mov	r3,r2
  80fab8:	e0bffc17 	ldw	r2,-16(fp)
  80fabc:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  80fac0:	e0bffc17 	ldw	r2,-16(fp)
  80fac4:	10c00317 	ldw	r3,12(r2)
  80fac8:	e0bffc17 	ldw	r2,-16(fp)
  80facc:	10800217 	ldw	r2,8(r2)
  80fad0:	1880041e 	bne	r3,r2,80fae4 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  80fad4:	e0bffc17 	ldw	r2,-16(fp)
  80fad8:	10c00117 	ldw	r3,4(r2)
  80fadc:	e0bffc17 	ldw	r2,-16(fp)
  80fae0:	10c00315 	stw	r3,12(r2)
  80fae4:	e0bffb17 	ldw	r2,-20(fp)
  80fae8:	e0bff715 	stw	r2,-36(fp)
  80faec:	e0bff717 	ldw	r2,-36(fp)
  80faf0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80faf4:	e03fff15 	stw	zero,-4(fp)
  80faf8:	e0bfff17 	ldw	r2,-4(fp)
}
  80fafc:	e037883a 	mov	sp,fp
  80fb00:	dfc00117 	ldw	ra,4(sp)
  80fb04:	df000017 	ldw	fp,0(sp)
  80fb08:	dec00204 	addi	sp,sp,8
  80fb0c:	f800283a 	ret

0080fb10 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  80fb10:	defff504 	addi	sp,sp,-44
  80fb14:	dfc00a15 	stw	ra,40(sp)
  80fb18:	df000915 	stw	fp,36(sp)
  80fb1c:	df000904 	addi	fp,sp,36
  80fb20:	e13ffd15 	stw	r4,-12(fp)
  80fb24:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fb28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80fb2c:	e0bffd17 	ldw	r2,-12(fp)
  80fb30:	1004c03a 	cmpne	r2,r2,zero
  80fb34:	1000031e 	bne	r2,zero,80fb44 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  80fb38:	00800104 	movi	r2,4
  80fb3c:	e0bfff15 	stw	r2,-4(fp)
  80fb40:	00004f06 	br	80fc80 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80fb44:	e0bffd17 	ldw	r2,-12(fp)
  80fb48:	10800003 	ldbu	r2,0(r2)
  80fb4c:	10803fcc 	andi	r2,r2,255
  80fb50:	108000a0 	cmpeqi	r2,r2,2
  80fb54:	1000031e 	bne	r2,zero,80fb64 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  80fb58:	00800044 	movi	r2,1
  80fb5c:	e0bfff15 	stw	r2,-4(fp)
  80fb60:	00004706 	br	80fc80 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fb64:	0005303a 	rdctl	r2,status
  80fb68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fb6c:	e0fffa17 	ldw	r3,-24(fp)
  80fb70:	00bfff84 	movi	r2,-2
  80fb74:	1884703a 	and	r2,r3,r2
  80fb78:	1001703a 	wrctl	status,r2
  
  return context;
  80fb7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fb80:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  80fb84:	e0bffd17 	ldw	r2,-12(fp)
  80fb88:	10800283 	ldbu	r2,10(r2)
  80fb8c:	10803fcc 	andi	r2,r2,255
  80fb90:	1005003a 	cmpeq	r2,r2,zero
  80fb94:	10000c1e 	bne	r2,zero,80fbc8 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fb98:	e13ffd17 	ldw	r4,-12(fp)
  80fb9c:	e17ffe17 	ldw	r5,-8(fp)
  80fba0:	01800104 	movi	r6,4
  80fba4:	000f883a 	mov	r7,zero
  80fba8:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
  80fbac:	e0bffb17 	ldw	r2,-20(fp)
  80fbb0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fbb4:	e0bff917 	ldw	r2,-28(fp)
  80fbb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  80fbbc:	080c40c0 	call	80c40c <OS_Sched>
        return (OS_ERR_NONE);
  80fbc0:	e03fff15 	stw	zero,-4(fp)
  80fbc4:	00002e06 	br	80fc80 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80fbc8:	e0bffd17 	ldw	r2,-12(fp)
  80fbcc:	10800117 	ldw	r2,4(r2)
  80fbd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80fbd4:	e0bffc17 	ldw	r2,-16(fp)
  80fbd8:	10c0058b 	ldhu	r3,22(r2)
  80fbdc:	e0bffc17 	ldw	r2,-16(fp)
  80fbe0:	1080050b 	ldhu	r2,20(r2)
  80fbe4:	18ffffcc 	andi	r3,r3,65535
  80fbe8:	10bfffcc 	andi	r2,r2,65535
  80fbec:	18800736 	bltu	r3,r2,80fc0c <OSQPostFront+0xfc>
  80fbf0:	e0bffb17 	ldw	r2,-20(fp)
  80fbf4:	e0bff815 	stw	r2,-32(fp)
  80fbf8:	e0bff817 	ldw	r2,-32(fp)
  80fbfc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fc00:	00800784 	movi	r2,30
  80fc04:	e0bfff15 	stw	r2,-4(fp)
  80fc08:	00001d06 	br	80fc80 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  80fc0c:	e0bffc17 	ldw	r2,-16(fp)
  80fc10:	10c00417 	ldw	r3,16(r2)
  80fc14:	e0bffc17 	ldw	r2,-16(fp)
  80fc18:	10800117 	ldw	r2,4(r2)
  80fc1c:	1880041e 	bne	r3,r2,80fc30 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  80fc20:	e0bffc17 	ldw	r2,-16(fp)
  80fc24:	10c00217 	ldw	r3,8(r2)
  80fc28:	e0bffc17 	ldw	r2,-16(fp)
  80fc2c:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  80fc30:	e0bffc17 	ldw	r2,-16(fp)
  80fc34:	10800417 	ldw	r2,16(r2)
  80fc38:	10ffff04 	addi	r3,r2,-4
  80fc3c:	e0bffc17 	ldw	r2,-16(fp)
  80fc40:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  80fc44:	e0bffc17 	ldw	r2,-16(fp)
  80fc48:	10c00417 	ldw	r3,16(r2)
  80fc4c:	e0bffe17 	ldw	r2,-8(fp)
  80fc50:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80fc54:	e0bffc17 	ldw	r2,-16(fp)
  80fc58:	1080058b 	ldhu	r2,22(r2)
  80fc5c:	10800044 	addi	r2,r2,1
  80fc60:	1007883a 	mov	r3,r2
  80fc64:	e0bffc17 	ldw	r2,-16(fp)
  80fc68:	10c0058d 	sth	r3,22(r2)
  80fc6c:	e0bffb17 	ldw	r2,-20(fp)
  80fc70:	e0bff715 	stw	r2,-36(fp)
  80fc74:	e0bff717 	ldw	r2,-36(fp)
  80fc78:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80fc7c:	e03fff15 	stw	zero,-4(fp)
  80fc80:	e0bfff17 	ldw	r2,-4(fp)
}
  80fc84:	e037883a 	mov	sp,fp
  80fc88:	dfc00117 	ldw	ra,4(sp)
  80fc8c:	df000017 	ldw	fp,0(sp)
  80fc90:	dec00204 	addi	sp,sp,8
  80fc94:	f800283a 	ret

0080fc98 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  80fc98:	defff404 	addi	sp,sp,-48
  80fc9c:	dfc00b15 	stw	ra,44(sp)
  80fca0:	df000a15 	stw	fp,40(sp)
  80fca4:	df000a04 	addi	fp,sp,40
  80fca8:	e13ffc15 	stw	r4,-16(fp)
  80fcac:	e17ffd15 	stw	r5,-12(fp)
  80fcb0:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  80fcb4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  80fcb8:	e0bffc17 	ldw	r2,-16(fp)
  80fcbc:	1004c03a 	cmpne	r2,r2,zero
  80fcc0:	1000031e 	bne	r2,zero,80fcd0 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  80fcc4:	00800104 	movi	r2,4
  80fcc8:	e0bfff15 	stw	r2,-4(fp)
  80fccc:	00007906 	br	80feb4 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  80fcd0:	e0bffc17 	ldw	r2,-16(fp)
  80fcd4:	10800003 	ldbu	r2,0(r2)
  80fcd8:	10803fcc 	andi	r2,r2,255
  80fcdc:	108000a0 	cmpeqi	r2,r2,2
  80fce0:	1000031e 	bne	r2,zero,80fcf0 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  80fce4:	00800044 	movi	r2,1
  80fce8:	e0bfff15 	stw	r2,-4(fp)
  80fcec:	00007106 	br	80feb4 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fcf0:	0005303a 	rdctl	r2,status
  80fcf4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fcf8:	e0fff917 	ldw	r3,-28(fp)
  80fcfc:	00bfff84 	movi	r2,-2
  80fd00:	1884703a 	and	r2,r3,r2
  80fd04:	1001703a 	wrctl	status,r2
  
  return context;
  80fd08:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80fd0c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  80fd10:	e0bffc17 	ldw	r2,-16(fp)
  80fd14:	10800283 	ldbu	r2,10(r2)
  80fd18:	10803fcc 	andi	r2,r2,255
  80fd1c:	1005003a 	cmpeq	r2,r2,zero
  80fd20:	1000211e 	bne	r2,zero,80fda8 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  80fd24:	e0bffe03 	ldbu	r2,-8(fp)
  80fd28:	1080004c 	andi	r2,r2,1
  80fd2c:	10803fcc 	andi	r2,r2,255
  80fd30:	1005003a 	cmpeq	r2,r2,zero
  80fd34:	10000c1e 	bne	r2,zero,80fd68 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80fd38:	00000506 	br	80fd50 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fd3c:	e13ffc17 	ldw	r4,-16(fp)
  80fd40:	e17ffd17 	ldw	r5,-12(fp)
  80fd44:	01800104 	movi	r6,4
  80fd48:	000f883a 	mov	r7,zero
  80fd4c:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  80fd50:	e0bffc17 	ldw	r2,-16(fp)
  80fd54:	10800283 	ldbu	r2,10(r2)
  80fd58:	10803fcc 	andi	r2,r2,255
  80fd5c:	1004c03a 	cmpne	r2,r2,zero
  80fd60:	103ff61e 	bne	r2,zero,80fd3c <OSQPostOpt+0xa4>
  80fd64:	00000506 	br	80fd7c <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  80fd68:	e13ffc17 	ldw	r4,-16(fp)
  80fd6c:	e17ffd17 	ldw	r5,-12(fp)
  80fd70:	01800104 	movi	r6,4
  80fd74:	000f883a 	mov	r7,zero
  80fd78:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
  80fd7c:	e0bffa17 	ldw	r2,-24(fp)
  80fd80:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fd84:	e0bff817 	ldw	r2,-32(fp)
  80fd88:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  80fd8c:	e0bffe03 	ldbu	r2,-8(fp)
  80fd90:	1080010c 	andi	r2,r2,4
  80fd94:	1004c03a 	cmpne	r2,r2,zero
  80fd98:	1000011e 	bne	r2,zero,80fda0 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  80fd9c:	080c40c0 	call	80c40c <OS_Sched>
        }
        return (OS_ERR_NONE);
  80fda0:	e03fff15 	stw	zero,-4(fp)
  80fda4:	00004306 	br	80feb4 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  80fda8:	e0bffc17 	ldw	r2,-16(fp)
  80fdac:	10800117 	ldw	r2,4(r2)
  80fdb0:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  80fdb4:	e0bffb17 	ldw	r2,-20(fp)
  80fdb8:	10c0058b 	ldhu	r3,22(r2)
  80fdbc:	e0bffb17 	ldw	r2,-20(fp)
  80fdc0:	1080050b 	ldhu	r2,20(r2)
  80fdc4:	18ffffcc 	andi	r3,r3,65535
  80fdc8:	10bfffcc 	andi	r2,r2,65535
  80fdcc:	18800736 	bltu	r3,r2,80fdec <OSQPostOpt+0x154>
  80fdd0:	e0bffa17 	ldw	r2,-24(fp)
  80fdd4:	e0bff715 	stw	r2,-36(fp)
  80fdd8:	e0bff717 	ldw	r2,-36(fp)
  80fddc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  80fde0:	00800784 	movi	r2,30
  80fde4:	e0bfff15 	stw	r2,-4(fp)
  80fde8:	00003206 	br	80feb4 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  80fdec:	e0bffe03 	ldbu	r2,-8(fp)
  80fdf0:	1080008c 	andi	r2,r2,2
  80fdf4:	1005003a 	cmpeq	r2,r2,zero
  80fdf8:	1000131e 	bne	r2,zero,80fe48 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  80fdfc:	e0bffb17 	ldw	r2,-20(fp)
  80fe00:	10c00417 	ldw	r3,16(r2)
  80fe04:	e0bffb17 	ldw	r2,-20(fp)
  80fe08:	10800117 	ldw	r2,4(r2)
  80fe0c:	1880041e 	bne	r3,r2,80fe20 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  80fe10:	e0bffb17 	ldw	r2,-20(fp)
  80fe14:	10c00217 	ldw	r3,8(r2)
  80fe18:	e0bffb17 	ldw	r2,-20(fp)
  80fe1c:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  80fe20:	e0bffb17 	ldw	r2,-20(fp)
  80fe24:	10800417 	ldw	r2,16(r2)
  80fe28:	10ffff04 	addi	r3,r2,-4
  80fe2c:	e0bffb17 	ldw	r2,-20(fp)
  80fe30:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  80fe34:	e0bffb17 	ldw	r2,-20(fp)
  80fe38:	10c00417 	ldw	r3,16(r2)
  80fe3c:	e0bffd17 	ldw	r2,-12(fp)
  80fe40:	18800015 	stw	r2,0(r3)
  80fe44:	00001006 	br	80fe88 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  80fe48:	e0bffb17 	ldw	r2,-20(fp)
  80fe4c:	10c00317 	ldw	r3,12(r2)
  80fe50:	e0bffd17 	ldw	r2,-12(fp)
  80fe54:	18800015 	stw	r2,0(r3)
  80fe58:	18c00104 	addi	r3,r3,4
  80fe5c:	e0bffb17 	ldw	r2,-20(fp)
  80fe60:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  80fe64:	e0bffb17 	ldw	r2,-20(fp)
  80fe68:	10c00317 	ldw	r3,12(r2)
  80fe6c:	e0bffb17 	ldw	r2,-20(fp)
  80fe70:	10800217 	ldw	r2,8(r2)
  80fe74:	1880041e 	bne	r3,r2,80fe88 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  80fe78:	e0bffb17 	ldw	r2,-20(fp)
  80fe7c:	10c00117 	ldw	r3,4(r2)
  80fe80:	e0bffb17 	ldw	r2,-20(fp)
  80fe84:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  80fe88:	e0bffb17 	ldw	r2,-20(fp)
  80fe8c:	1080058b 	ldhu	r2,22(r2)
  80fe90:	10800044 	addi	r2,r2,1
  80fe94:	1007883a 	mov	r3,r2
  80fe98:	e0bffb17 	ldw	r2,-20(fp)
  80fe9c:	10c0058d 	sth	r3,22(r2)
  80fea0:	e0bffa17 	ldw	r2,-24(fp)
  80fea4:	e0bff615 	stw	r2,-40(fp)
  80fea8:	e0bff617 	ldw	r2,-40(fp)
  80feac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  80feb0:	e03fff15 	stw	zero,-4(fp)
  80feb4:	e0bfff17 	ldw	r2,-4(fp)
}
  80feb8:	e037883a 	mov	sp,fp
  80febc:	dfc00117 	ldw	ra,4(sp)
  80fec0:	df000017 	ldw	fp,0(sp)
  80fec4:	dec00204 	addi	sp,sp,8
  80fec8:	f800283a 	ret

0080fecc <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  80fecc:	defff504 	addi	sp,sp,-44
  80fed0:	df000a15 	stw	fp,40(sp)
  80fed4:	df000a04 	addi	fp,sp,40
  80fed8:	e13ffd15 	stw	r4,-12(fp)
  80fedc:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80fee0:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  80fee4:	e0bffd17 	ldw	r2,-12(fp)
  80fee8:	1004c03a 	cmpne	r2,r2,zero
  80feec:	1000031e 	bne	r2,zero,80fefc <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  80fef0:	00800104 	movi	r2,4
  80fef4:	e0bfff15 	stw	r2,-4(fp)
  80fef8:	00004f06 	br	810038 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  80fefc:	e0bffe17 	ldw	r2,-8(fp)
  80ff00:	1004c03a 	cmpne	r2,r2,zero
  80ff04:	1000031e 	bne	r2,zero,80ff14 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  80ff08:	00800244 	movi	r2,9
  80ff0c:	e0bfff15 	stw	r2,-4(fp)
  80ff10:	00004906 	br	810038 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  80ff14:	e0bffd17 	ldw	r2,-12(fp)
  80ff18:	10800003 	ldbu	r2,0(r2)
  80ff1c:	10803fcc 	andi	r2,r2,255
  80ff20:	108000a0 	cmpeqi	r2,r2,2
  80ff24:	1000031e 	bne	r2,zero,80ff34 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  80ff28:	00800044 	movi	r2,1
  80ff2c:	e0bfff15 	stw	r2,-4(fp)
  80ff30:	00004106 	br	810038 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff34:	0005303a 	rdctl	r2,status
  80ff38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff3c:	e0fff717 	ldw	r3,-36(fp)
  80ff40:	00bfff84 	movi	r2,-2
  80ff44:	1884703a 	and	r2,r3,r2
  80ff48:	1001703a 	wrctl	status,r2
  
  return context;
  80ff4c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  80ff50:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  80ff54:	e0bffd17 	ldw	r2,-12(fp)
  80ff58:	10c00283 	ldbu	r3,10(r2)
  80ff5c:	e0bffe17 	ldw	r2,-8(fp)
  80ff60:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  80ff64:	e0bffd17 	ldw	r2,-12(fp)
  80ff68:	108002c4 	addi	r2,r2,11
  80ff6c:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  80ff70:	e0bffe17 	ldw	r2,-8(fp)
  80ff74:	10800204 	addi	r2,r2,8
  80ff78:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80ff7c:	e03ffb05 	stb	zero,-20(fp)
  80ff80:	00000d06 	br	80ffb8 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  80ff84:	e0bffa17 	ldw	r2,-24(fp)
  80ff88:	10c00003 	ldbu	r3,0(r2)
  80ff8c:	e0bff917 	ldw	r2,-28(fp)
  80ff90:	10c00005 	stb	r3,0(r2)
  80ff94:	e0bff917 	ldw	r2,-28(fp)
  80ff98:	10800044 	addi	r2,r2,1
  80ff9c:	e0bff915 	stw	r2,-28(fp)
  80ffa0:	e0bffa17 	ldw	r2,-24(fp)
  80ffa4:	10800044 	addi	r2,r2,1
  80ffa8:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80ffac:	e0bffb03 	ldbu	r2,-20(fp)
  80ffb0:	10800044 	addi	r2,r2,1
  80ffb4:	e0bffb05 	stb	r2,-20(fp)
  80ffb8:	e0bffb03 	ldbu	r2,-20(fp)
  80ffbc:	108000f0 	cmpltui	r2,r2,3
  80ffc0:	103ff01e 	bne	r2,zero,80ff84 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  80ffc4:	e0bffd17 	ldw	r2,-12(fp)
  80ffc8:	10800117 	ldw	r2,4(r2)
  80ffcc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  80ffd0:	e0bffc17 	ldw	r2,-16(fp)
  80ffd4:	1080058b 	ldhu	r2,22(r2)
  80ffd8:	10bfffcc 	andi	r2,r2,65535
  80ffdc:	1005003a 	cmpeq	r2,r2,zero
  80ffe0:	1000061e 	bne	r2,zero,80fffc <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  80ffe4:	e0bffc17 	ldw	r2,-16(fp)
  80ffe8:	10800417 	ldw	r2,16(r2)
  80ffec:	10c00017 	ldw	r3,0(r2)
  80fff0:	e0bffe17 	ldw	r2,-8(fp)
  80fff4:	10c00015 	stw	r3,0(r2)
  80fff8:	00000206 	br	810004 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  80fffc:	e0bffe17 	ldw	r2,-8(fp)
  810000:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  810004:	e0bffc17 	ldw	r2,-16(fp)
  810008:	10c0058b 	ldhu	r3,22(r2)
  81000c:	e0bffe17 	ldw	r2,-8(fp)
  810010:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  810014:	e0bffc17 	ldw	r2,-16(fp)
  810018:	10c0050b 	ldhu	r3,20(r2)
  81001c:	e0bffe17 	ldw	r2,-8(fp)
  810020:	10c0018d 	sth	r3,6(r2)
  810024:	e0bff817 	ldw	r2,-32(fp)
  810028:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81002c:	e0bff617 	ldw	r2,-40(fp)
  810030:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810034:	e03fff15 	stw	zero,-4(fp)
  810038:	e0bfff17 	ldw	r2,-4(fp)
}
  81003c:	e037883a 	mov	sp,fp
  810040:	df000017 	ldw	fp,0(sp)
  810044:	dec00104 	addi	sp,sp,4
  810048:	f800283a 	ret

0081004c <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  81004c:	defffb04 	addi	sp,sp,-20
  810050:	dfc00415 	stw	ra,16(sp)
  810054:	df000315 	stw	fp,12(sp)
  810058:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  81005c:	010020b4 	movhi	r4,130
  810060:	213b3104 	addi	r4,r4,-4924
  810064:	01407804 	movi	r5,480
  810068:	080c34c0 	call	80c34c <OS_MemClr>
    pq1 = &OSQTbl[0];
  81006c:	008020b4 	movhi	r2,130
  810070:	10bb3104 	addi	r2,r2,-4924
  810074:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  810078:	008020b4 	movhi	r2,130
  81007c:	10bb3704 	addi	r2,r2,-4900
  810080:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  810084:	e03fff0d 	sth	zero,-4(fp)
  810088:	00000c06 	br	8100bc <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  81008c:	e0fffe17 	ldw	r3,-8(fp)
  810090:	e0bffd17 	ldw	r2,-12(fp)
  810094:	18800015 	stw	r2,0(r3)
        pq1++;
  810098:	e0bffe17 	ldw	r2,-8(fp)
  81009c:	10800604 	addi	r2,r2,24
  8100a0:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  8100a4:	e0bffd17 	ldw	r2,-12(fp)
  8100a8:	10800604 	addi	r2,r2,24
  8100ac:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  8100b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8100b4:	10800044 	addi	r2,r2,1
  8100b8:	e0bfff0d 	sth	r2,-4(fp)
  8100bc:	e0bfff0b 	ldhu	r2,-4(fp)
  8100c0:	108004f0 	cmpltui	r2,r2,19
  8100c4:	103ff11e 	bne	r2,zero,81008c <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  8100c8:	e0bffe17 	ldw	r2,-8(fp)
  8100cc:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  8100d0:	00c020b4 	movhi	r3,130
  8100d4:	18e53304 	addi	r3,r3,-27444
  8100d8:	008020b4 	movhi	r2,130
  8100dc:	10bb3104 	addi	r2,r2,-4924
  8100e0:	18800015 	stw	r2,0(r3)
#endif
}
  8100e4:	e037883a 	mov	sp,fp
  8100e8:	dfc00117 	ldw	ra,4(sp)
  8100ec:	df000017 	ldw	fp,0(sp)
  8100f0:	dec00204 	addi	sp,sp,8
  8100f4:	f800283a 	ret

008100f8 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  8100f8:	defff904 	addi	sp,sp,-28
  8100fc:	df000615 	stw	fp,24(sp)
  810100:	df000604 	addi	fp,sp,24
  810104:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810108:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81010c:	e0bffe17 	ldw	r2,-8(fp)
  810110:	1004c03a 	cmpne	r2,r2,zero
  810114:	1000021e 	bne	r2,zero,810120 <OSSemAccept+0x28>
        return (0);
  810118:	e03fff15 	stw	zero,-4(fp)
  81011c:	00002106 	br	8101a4 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810120:	e0bffe17 	ldw	r2,-8(fp)
  810124:	10800003 	ldbu	r2,0(r2)
  810128:	10803fcc 	andi	r2,r2,255
  81012c:	108000e0 	cmpeqi	r2,r2,3
  810130:	1000021e 	bne	r2,zero,81013c <OSSemAccept+0x44>
        return (0);
  810134:	e03fff15 	stw	zero,-4(fp)
  810138:	00001a06 	br	8101a4 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81013c:	0005303a 	rdctl	r2,status
  810140:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810144:	e0fffb17 	ldw	r3,-20(fp)
  810148:	00bfff84 	movi	r2,-2
  81014c:	1884703a 	and	r2,r3,r2
  810150:	1001703a 	wrctl	status,r2
  
  return context;
  810154:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810158:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  81015c:	e0bffe17 	ldw	r2,-8(fp)
  810160:	1080020b 	ldhu	r2,8(r2)
  810164:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  810168:	e0bffd0b 	ldhu	r2,-12(fp)
  81016c:	1005003a 	cmpeq	r2,r2,zero
  810170:	1000061e 	bne	r2,zero,81018c <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  810174:	e0bffe17 	ldw	r2,-8(fp)
  810178:	1080020b 	ldhu	r2,8(r2)
  81017c:	10bfffc4 	addi	r2,r2,-1
  810180:	1007883a 	mov	r3,r2
  810184:	e0bffe17 	ldw	r2,-8(fp)
  810188:	10c0020d 	sth	r3,8(r2)
  81018c:	e0bffc17 	ldw	r2,-16(fp)
  810190:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810194:	e0bffa17 	ldw	r2,-24(fp)
  810198:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  81019c:	e0bffd0b 	ldhu	r2,-12(fp)
  8101a0:	e0bfff15 	stw	r2,-4(fp)
  8101a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8101a8:	e037883a 	mov	sp,fp
  8101ac:	df000017 	ldw	fp,0(sp)
  8101b0:	dec00104 	addi	sp,sp,4
  8101b4:	f800283a 	ret

008101b8 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  8101b8:	defff804 	addi	sp,sp,-32
  8101bc:	dfc00715 	stw	ra,28(sp)
  8101c0:	df000615 	stw	fp,24(sp)
  8101c4:	df000604 	addi	fp,sp,24
  8101c8:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8101cc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  8101d0:	008020b4 	movhi	r2,130
  8101d4:	10a53604 	addi	r2,r2,-27432
  8101d8:	10800003 	ldbu	r2,0(r2)
  8101dc:	10803fcc 	andi	r2,r2,255
  8101e0:	1005003a 	cmpeq	r2,r2,zero
  8101e4:	1000021e 	bne	r2,zero,8101f0 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  8101e8:	e03fff15 	stw	zero,-4(fp)
  8101ec:	00003106 	br	8102b4 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8101f0:	0005303a 	rdctl	r2,status
  8101f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8101f8:	e0fffb17 	ldw	r3,-20(fp)
  8101fc:	00bfff84 	movi	r2,-2
  810200:	1884703a 	and	r2,r3,r2
  810204:	1001703a 	wrctl	status,r2
  
  return context;
  810208:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81020c:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  810210:	008020b4 	movhi	r2,130
  810214:	10a53504 	addi	r2,r2,-27436
  810218:	10800017 	ldw	r2,0(r2)
  81021c:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  810220:	008020b4 	movhi	r2,130
  810224:	10a53504 	addi	r2,r2,-27436
  810228:	10800017 	ldw	r2,0(r2)
  81022c:	1005003a 	cmpeq	r2,r2,zero
  810230:	1000081e 	bne	r2,zero,810254 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  810234:	008020b4 	movhi	r2,130
  810238:	10a53504 	addi	r2,r2,-27436
  81023c:	10800017 	ldw	r2,0(r2)
  810240:	10800117 	ldw	r2,4(r2)
  810244:	1007883a 	mov	r3,r2
  810248:	008020b4 	movhi	r2,130
  81024c:	10a53504 	addi	r2,r2,-27436
  810250:	10c00015 	stw	r3,0(r2)
  810254:	e0bffc17 	ldw	r2,-16(fp)
  810258:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81025c:	e0bffa17 	ldw	r2,-24(fp)
  810260:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  810264:	e0bffd17 	ldw	r2,-12(fp)
  810268:	1005003a 	cmpeq	r2,r2,zero
  81026c:	10000f1e 	bne	r2,zero,8102ac <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  810270:	e0fffd17 	ldw	r3,-12(fp)
  810274:	008000c4 	movi	r2,3
  810278:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  81027c:	e0fffd17 	ldw	r3,-12(fp)
  810280:	e0bffe0b 	ldhu	r2,-8(fp)
  810284:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  810288:	e0bffd17 	ldw	r2,-12(fp)
  81028c:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  810290:	e0fffd17 	ldw	r3,-12(fp)
  810294:	00800fc4 	movi	r2,63
  810298:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  81029c:	e0bffd17 	ldw	r2,-12(fp)
  8102a0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  8102a4:	e13ffd17 	ldw	r4,-12(fp)
  8102a8:	080bf800 	call	80bf80 <OS_EventWaitListInit>
    }
    return (pevent);
  8102ac:	e0bffd17 	ldw	r2,-12(fp)
  8102b0:	e0bfff15 	stw	r2,-4(fp)
  8102b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8102b8:	e037883a 	mov	sp,fp
  8102bc:	dfc00117 	ldw	ra,4(sp)
  8102c0:	df000017 	ldw	fp,0(sp)
  8102c4:	dec00204 	addi	sp,sp,8
  8102c8:	f800283a 	ret

008102cc <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8102cc:	defff104 	addi	sp,sp,-60
  8102d0:	dfc00e15 	stw	ra,56(sp)
  8102d4:	df000d15 	stw	fp,52(sp)
  8102d8:	df000d04 	addi	fp,sp,52
  8102dc:	e13ffb15 	stw	r4,-20(fp)
  8102e0:	e1bffd15 	stw	r6,-12(fp)
  8102e4:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8102e8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  8102ec:	e0bffd17 	ldw	r2,-12(fp)
  8102f0:	1004c03a 	cmpne	r2,r2,zero
  8102f4:	1000031e 	bne	r2,zero,810304 <OSSemDel+0x38>
        return (pevent);
  8102f8:	e0bffb17 	ldw	r2,-20(fp)
  8102fc:	e0bfff15 	stw	r2,-4(fp)
  810300:	00009406 	br	810554 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810304:	e0bffb17 	ldw	r2,-20(fp)
  810308:	1004c03a 	cmpne	r2,r2,zero
  81030c:	1000061e 	bne	r2,zero,810328 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  810310:	e0fffd17 	ldw	r3,-12(fp)
  810314:	00800104 	movi	r2,4
  810318:	18800005 	stb	r2,0(r3)
        return (pevent);
  81031c:	e0fffb17 	ldw	r3,-20(fp)
  810320:	e0ffff15 	stw	r3,-4(fp)
  810324:	00008b06 	br	810554 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  810328:	e0bffb17 	ldw	r2,-20(fp)
  81032c:	10800003 	ldbu	r2,0(r2)
  810330:	10803fcc 	andi	r2,r2,255
  810334:	108000e0 	cmpeqi	r2,r2,3
  810338:	1000061e 	bne	r2,zero,810354 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  81033c:	e0fffd17 	ldw	r3,-12(fp)
  810340:	00800044 	movi	r2,1
  810344:	18800005 	stb	r2,0(r3)
        return (pevent);
  810348:	e0bffb17 	ldw	r2,-20(fp)
  81034c:	e0bfff15 	stw	r2,-4(fp)
  810350:	00008006 	br	810554 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810354:	008020b4 	movhi	r2,130
  810358:	10a53604 	addi	r2,r2,-27432
  81035c:	10800003 	ldbu	r2,0(r2)
  810360:	10803fcc 	andi	r2,r2,255
  810364:	1005003a 	cmpeq	r2,r2,zero
  810368:	1000061e 	bne	r2,zero,810384 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  81036c:	e0fffd17 	ldw	r3,-12(fp)
  810370:	008003c4 	movi	r2,15
  810374:	18800005 	stb	r2,0(r3)
        return (pevent);
  810378:	e0fffb17 	ldw	r3,-20(fp)
  81037c:	e0ffff15 	stw	r3,-4(fp)
  810380:	00007406 	br	810554 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810384:	0005303a 	rdctl	r2,status
  810388:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81038c:	e0fff717 	ldw	r3,-36(fp)
  810390:	00bfff84 	movi	r2,-2
  810394:	1884703a 	and	r2,r3,r2
  810398:	1001703a 	wrctl	status,r2
  
  return context;
  81039c:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  8103a0:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  8103a4:	e0bffb17 	ldw	r2,-20(fp)
  8103a8:	10800283 	ldbu	r2,10(r2)
  8103ac:	10803fcc 	andi	r2,r2,255
  8103b0:	1005003a 	cmpeq	r2,r2,zero
  8103b4:	1000031e 	bne	r2,zero,8103c4 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  8103b8:	00800044 	movi	r2,1
  8103bc:	e0bffa05 	stb	r2,-24(fp)
  8103c0:	00000106 	br	8103c8 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  8103c4:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  8103c8:	e0bffc03 	ldbu	r2,-16(fp)
  8103cc:	e0bffe15 	stw	r2,-8(fp)
  8103d0:	e0fffe17 	ldw	r3,-8(fp)
  8103d4:	1805003a 	cmpeq	r2,r3,zero
  8103d8:	1000041e 	bne	r2,zero,8103ec <OSSemDel+0x120>
  8103dc:	e0fffe17 	ldw	r3,-8(fp)
  8103e0:	18800060 	cmpeqi	r2,r3,1
  8103e4:	10002d1e 	bne	r2,zero,81049c <OSSemDel+0x1d0>
  8103e8:	00004f06 	br	810528 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  8103ec:	e0bffa03 	ldbu	r2,-24(fp)
  8103f0:	1004c03a 	cmpne	r2,r2,zero
  8103f4:	10001a1e 	bne	r2,zero,810460 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  8103f8:	e0fffb17 	ldw	r3,-20(fp)
  8103fc:	00800fc4 	movi	r2,63
  810400:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  810404:	e0bffb17 	ldw	r2,-20(fp)
  810408:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  81040c:	e0bffb17 	ldw	r2,-20(fp)
  810410:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  810414:	008020b4 	movhi	r2,130
  810418:	10a53504 	addi	r2,r2,-27436
  81041c:	10c00017 	ldw	r3,0(r2)
  810420:	e0bffb17 	ldw	r2,-20(fp)
  810424:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  810428:	e0bffb17 	ldw	r2,-20(fp)
  81042c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  810430:	00c020b4 	movhi	r3,130
  810434:	18e53504 	addi	r3,r3,-27436
  810438:	e0bffb17 	ldw	r2,-20(fp)
  81043c:	18800015 	stw	r2,0(r3)
  810440:	e0bff817 	ldw	r2,-32(fp)
  810444:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810448:	e0bff617 	ldw	r2,-40(fp)
  81044c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  810450:	e0bffd17 	ldw	r2,-12(fp)
  810454:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  810458:	e03ff915 	stw	zero,-28(fp)
  81045c:	00003b06 	br	81054c <OSSemDel+0x280>
  810460:	e0bff817 	ldw	r2,-32(fp)
  810464:	e0bff515 	stw	r2,-44(fp)
  810468:	e0bff517 	ldw	r2,-44(fp)
  81046c:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  810470:	e0fffd17 	ldw	r3,-12(fp)
  810474:	00801244 	movi	r2,73
  810478:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  81047c:	e0bffb17 	ldw	r2,-20(fp)
  810480:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  810484:	00003106 	br	81054c <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  810488:	e13ffb17 	ldw	r4,-20(fp)
  81048c:	000b883a 	mov	r5,zero
  810490:	01800044 	movi	r6,1
  810494:	000f883a 	mov	r7,zero
  810498:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  81049c:	e0bffb17 	ldw	r2,-20(fp)
  8104a0:	10800283 	ldbu	r2,10(r2)
  8104a4:	10803fcc 	andi	r2,r2,255
  8104a8:	1004c03a 	cmpne	r2,r2,zero
  8104ac:	103ff61e 	bne	r2,zero,810488 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  8104b0:	e0fffb17 	ldw	r3,-20(fp)
  8104b4:	00800fc4 	movi	r2,63
  8104b8:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  8104bc:	e0bffb17 	ldw	r2,-20(fp)
  8104c0:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  8104c4:	e0bffb17 	ldw	r2,-20(fp)
  8104c8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  8104cc:	008020b4 	movhi	r2,130
  8104d0:	10a53504 	addi	r2,r2,-27436
  8104d4:	10c00017 	ldw	r3,0(r2)
  8104d8:	e0bffb17 	ldw	r2,-20(fp)
  8104dc:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  8104e0:	e0bffb17 	ldw	r2,-20(fp)
  8104e4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  8104e8:	00c020b4 	movhi	r3,130
  8104ec:	18e53504 	addi	r3,r3,-27436
  8104f0:	e0bffb17 	ldw	r2,-20(fp)
  8104f4:	18800015 	stw	r2,0(r3)
  8104f8:	e0bff817 	ldw	r2,-32(fp)
  8104fc:	e0bff415 	stw	r2,-48(fp)
  810500:	e0bff417 	ldw	r2,-48(fp)
  810504:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  810508:	e0bffa03 	ldbu	r2,-24(fp)
  81050c:	10800058 	cmpnei	r2,r2,1
  810510:	1000011e 	bne	r2,zero,810518 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  810514:	080c40c0 	call	80c40c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  810518:	e0bffd17 	ldw	r2,-12(fp)
  81051c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  810520:	e03ff915 	stw	zero,-28(fp)
             break;
  810524:	00000906 	br	81054c <OSSemDel+0x280>
  810528:	e0bff817 	ldw	r2,-32(fp)
  81052c:	e0bff315 	stw	r2,-52(fp)
  810530:	e0bff317 	ldw	r2,-52(fp)
  810534:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  810538:	e0fffd17 	ldw	r3,-12(fp)
  81053c:	008001c4 	movi	r2,7
  810540:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  810544:	e0bffb17 	ldw	r2,-20(fp)
  810548:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  81054c:	e0bff917 	ldw	r2,-28(fp)
  810550:	e0bfff15 	stw	r2,-4(fp)
  810554:	e0bfff17 	ldw	r2,-4(fp)
}
  810558:	e037883a 	mov	sp,fp
  81055c:	dfc00117 	ldw	ra,4(sp)
  810560:	df000017 	ldw	fp,0(sp)
  810564:	dec00204 	addi	sp,sp,8
  810568:	f800283a 	ret

0081056c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  81056c:	defff404 	addi	sp,sp,-48
  810570:	dfc00b15 	stw	ra,44(sp)
  810574:	df000a15 	stw	fp,40(sp)
  810578:	df000a04 	addi	fp,sp,40
  81057c:	e13ffc15 	stw	r4,-16(fp)
  810580:	e1bffe15 	stw	r6,-8(fp)
  810584:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810588:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  81058c:	e0bffe17 	ldw	r2,-8(fp)
  810590:	1005003a 	cmpeq	r2,r2,zero
  810594:	10008f1e 	bne	r2,zero,8107d4 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810598:	e0bffc17 	ldw	r2,-16(fp)
  81059c:	1004c03a 	cmpne	r2,r2,zero
  8105a0:	1000041e 	bne	r2,zero,8105b4 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  8105a4:	e0fffe17 	ldw	r3,-8(fp)
  8105a8:	00800104 	movi	r2,4
  8105ac:	18800005 	stb	r2,0(r3)
        return;
  8105b0:	00008806 	br	8107d4 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8105b4:	e0bffc17 	ldw	r2,-16(fp)
  8105b8:	10800003 	ldbu	r2,0(r2)
  8105bc:	10803fcc 	andi	r2,r2,255
  8105c0:	108000e0 	cmpeqi	r2,r2,3
  8105c4:	1000041e 	bne	r2,zero,8105d8 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  8105c8:	e0fffe17 	ldw	r3,-8(fp)
  8105cc:	00800044 	movi	r2,1
  8105d0:	18800005 	stb	r2,0(r3)
        return;
  8105d4:	00007f06 	br	8107d4 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  8105d8:	008020b4 	movhi	r2,130
  8105dc:	10a53604 	addi	r2,r2,-27432
  8105e0:	10800003 	ldbu	r2,0(r2)
  8105e4:	10803fcc 	andi	r2,r2,255
  8105e8:	1005003a 	cmpeq	r2,r2,zero
  8105ec:	1000041e 	bne	r2,zero,810600 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  8105f0:	e0fffe17 	ldw	r3,-8(fp)
  8105f4:	00800084 	movi	r2,2
  8105f8:	18800005 	stb	r2,0(r3)
        return;
  8105fc:	00007506 	br	8107d4 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  810600:	008020b4 	movhi	r2,130
  810604:	10a52804 	addi	r2,r2,-27488
  810608:	10800003 	ldbu	r2,0(r2)
  81060c:	10803fcc 	andi	r2,r2,255
  810610:	1005003a 	cmpeq	r2,r2,zero
  810614:	1000041e 	bne	r2,zero,810628 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  810618:	e0fffe17 	ldw	r3,-8(fp)
  81061c:	00800344 	movi	r2,13
  810620:	18800005 	stb	r2,0(r3)
        return;
  810624:	00006b06 	br	8107d4 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810628:	0005303a 	rdctl	r2,status
  81062c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810630:	e0fffa17 	ldw	r3,-24(fp)
  810634:	00bfff84 	movi	r2,-2
  810638:	1884703a 	and	r2,r3,r2
  81063c:	1001703a 	wrctl	status,r2
  
  return context;
  810640:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810644:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  810648:	e0bffc17 	ldw	r2,-16(fp)
  81064c:	1080020b 	ldhu	r2,8(r2)
  810650:	10bfffcc 	andi	r2,r2,65535
  810654:	1005003a 	cmpeq	r2,r2,zero
  810658:	10000d1e 	bne	r2,zero,810690 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  81065c:	e0bffc17 	ldw	r2,-16(fp)
  810660:	1080020b 	ldhu	r2,8(r2)
  810664:	10bfffc4 	addi	r2,r2,-1
  810668:	1007883a 	mov	r3,r2
  81066c:	e0bffc17 	ldw	r2,-16(fp)
  810670:	10c0020d 	sth	r3,8(r2)
  810674:	e0bffb17 	ldw	r2,-20(fp)
  810678:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81067c:	e0bff917 	ldw	r2,-28(fp)
  810680:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  810684:	e0bffe17 	ldw	r2,-8(fp)
  810688:	10000005 	stb	zero,0(r2)
        return;
  81068c:	00005106 	br	8107d4 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  810690:	008020b4 	movhi	r2,130
  810694:	10a53704 	addi	r2,r2,-27428
  810698:	10c00017 	ldw	r3,0(r2)
  81069c:	008020b4 	movhi	r2,130
  8106a0:	10a53704 	addi	r2,r2,-27428
  8106a4:	10800017 	ldw	r2,0(r2)
  8106a8:	10800c03 	ldbu	r2,48(r2)
  8106ac:	10800054 	ori	r2,r2,1
  8106b0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8106b4:	008020b4 	movhi	r2,130
  8106b8:	10a53704 	addi	r2,r2,-27428
  8106bc:	10800017 	ldw	r2,0(r2)
  8106c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8106c4:	008020b4 	movhi	r2,130
  8106c8:	10a53704 	addi	r2,r2,-27428
  8106cc:	10c00017 	ldw	r3,0(r2)
  8106d0:	e0bffd0b 	ldhu	r2,-12(fp)
  8106d4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8106d8:	e13ffc17 	ldw	r4,-16(fp)
  8106dc:	080bb600 	call	80bb60 <OS_EventTaskWait>
  8106e0:	e0bffb17 	ldw	r2,-20(fp)
  8106e4:	e0bff815 	stw	r2,-32(fp)
  8106e8:	e0bff817 	ldw	r2,-32(fp)
  8106ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8106f0:	080c40c0 	call	80c40c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8106f4:	0005303a 	rdctl	r2,status
  8106f8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8106fc:	e0fff717 	ldw	r3,-36(fp)
  810700:	00bfff84 	movi	r2,-2
  810704:	1884703a 	and	r2,r3,r2
  810708:	1001703a 	wrctl	status,r2
  
  return context;
  81070c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  810710:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  810714:	008020b4 	movhi	r2,130
  810718:	10a53704 	addi	r2,r2,-27428
  81071c:	10800017 	ldw	r2,0(r2)
  810720:	10800c43 	ldbu	r2,49(r2)
  810724:	10803fcc 	andi	r2,r2,255
  810728:	e0bfff15 	stw	r2,-4(fp)
  81072c:	e0ffff17 	ldw	r3,-4(fp)
  810730:	1805003a 	cmpeq	r2,r3,zero
  810734:	1000041e 	bne	r2,zero,810748 <OSSemPend+0x1dc>
  810738:	e0ffff17 	ldw	r3,-4(fp)
  81073c:	188000a0 	cmpeqi	r2,r3,2
  810740:	1000041e 	bne	r2,zero,810754 <OSSemPend+0x1e8>
  810744:	00000706 	br	810764 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  810748:	e0bffe17 	ldw	r2,-8(fp)
  81074c:	10000005 	stb	zero,0(r2)
             break;
  810750:	00000c06 	br	810784 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  810754:	e0fffe17 	ldw	r3,-8(fp)
  810758:	00800384 	movi	r2,14
  81075c:	18800005 	stb	r2,0(r3)
             break;
  810760:	00000806 	br	810784 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  810764:	008020b4 	movhi	r2,130
  810768:	10a53704 	addi	r2,r2,-27428
  81076c:	11000017 	ldw	r4,0(r2)
  810770:	e17ffc17 	ldw	r5,-16(fp)
  810774:	080bdc40 	call	80bdc4 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  810778:	e0fffe17 	ldw	r3,-8(fp)
  81077c:	00800284 	movi	r2,10
  810780:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  810784:	008020b4 	movhi	r2,130
  810788:	10a53704 	addi	r2,r2,-27428
  81078c:	10800017 	ldw	r2,0(r2)
  810790:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  810794:	008020b4 	movhi	r2,130
  810798:	10a53704 	addi	r2,r2,-27428
  81079c:	10800017 	ldw	r2,0(r2)
  8107a0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8107a4:	008020b4 	movhi	r2,130
  8107a8:	10a53704 	addi	r2,r2,-27428
  8107ac:	10800017 	ldw	r2,0(r2)
  8107b0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8107b4:	008020b4 	movhi	r2,130
  8107b8:	10a53704 	addi	r2,r2,-27428
  8107bc:	10800017 	ldw	r2,0(r2)
  8107c0:	10000815 	stw	zero,32(r2)
  8107c4:	e0bffb17 	ldw	r2,-20(fp)
  8107c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107cc:	e0bff617 	ldw	r2,-40(fp)
  8107d0:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8107d4:	e037883a 	mov	sp,fp
  8107d8:	dfc00117 	ldw	ra,4(sp)
  8107dc:	df000017 	ldw	fp,0(sp)
  8107e0:	dec00204 	addi	sp,sp,8
  8107e4:	f800283a 	ret

008107e8 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8107e8:	defff504 	addi	sp,sp,-44
  8107ec:	dfc00a15 	stw	ra,40(sp)
  8107f0:	df000915 	stw	fp,36(sp)
  8107f4:	df000904 	addi	fp,sp,36
  8107f8:	e13ffc15 	stw	r4,-16(fp)
  8107fc:	e1bffe15 	stw	r6,-8(fp)
  810800:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810804:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810808:	e0bffe17 	ldw	r2,-8(fp)
  81080c:	1004c03a 	cmpne	r2,r2,zero
  810810:	1000021e 	bne	r2,zero,81081c <OSSemPendAbort+0x34>
        return (0);
  810814:	e03fff15 	stw	zero,-4(fp)
  810818:	00004c06 	br	81094c <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81081c:	e0bffc17 	ldw	r2,-16(fp)
  810820:	1004c03a 	cmpne	r2,r2,zero
  810824:	1000051e 	bne	r2,zero,81083c <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  810828:	e0fffe17 	ldw	r3,-8(fp)
  81082c:	00800104 	movi	r2,4
  810830:	18800005 	stb	r2,0(r3)
        return (0);
  810834:	e03fff15 	stw	zero,-4(fp)
  810838:	00004406 	br	81094c <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81083c:	e0bffc17 	ldw	r2,-16(fp)
  810840:	10800003 	ldbu	r2,0(r2)
  810844:	10803fcc 	andi	r2,r2,255
  810848:	108000e0 	cmpeqi	r2,r2,3
  81084c:	1000051e 	bne	r2,zero,810864 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  810850:	e0fffe17 	ldw	r3,-8(fp)
  810854:	00800044 	movi	r2,1
  810858:	18800005 	stb	r2,0(r3)
        return (0);
  81085c:	e03fff15 	stw	zero,-4(fp)
  810860:	00003a06 	br	81094c <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810864:	0005303a 	rdctl	r2,status
  810868:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81086c:	e0fff917 	ldw	r3,-28(fp)
  810870:	00bfff84 	movi	r2,-2
  810874:	1884703a 	and	r2,r3,r2
  810878:	1001703a 	wrctl	status,r2
  
  return context;
  81087c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  810880:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  810884:	e0bffc17 	ldw	r2,-16(fp)
  810888:	10800283 	ldbu	r2,10(r2)
  81088c:	10803fcc 	andi	r2,r2,255
  810890:	1005003a 	cmpeq	r2,r2,zero
  810894:	1000261e 	bne	r2,zero,810930 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  810898:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  81089c:	e0bffd03 	ldbu	r2,-12(fp)
  8108a0:	10800060 	cmpeqi	r2,r2,1
  8108a4:	1000091e 	bne	r2,zero,8108cc <OSSemPendAbort+0xe4>
  8108a8:	00000e06 	br	8108e4 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8108ac:	e13ffc17 	ldw	r4,-16(fp)
  8108b0:	000b883a 	mov	r5,zero
  8108b4:	01800044 	movi	r6,1
  8108b8:	01c00084 	movi	r7,2
  8108bc:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                     nbr_tasks++;
  8108c0:	e0bffb03 	ldbu	r2,-20(fp)
  8108c4:	10800044 	addi	r2,r2,1
  8108c8:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8108cc:	e0bffc17 	ldw	r2,-16(fp)
  8108d0:	10800283 	ldbu	r2,10(r2)
  8108d4:	10803fcc 	andi	r2,r2,255
  8108d8:	1004c03a 	cmpne	r2,r2,zero
  8108dc:	103ff31e 	bne	r2,zero,8108ac <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8108e0:	00000806 	br	810904 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8108e4:	e13ffc17 	ldw	r4,-16(fp)
  8108e8:	000b883a 	mov	r5,zero
  8108ec:	01800044 	movi	r6,1
  8108f0:	01c00084 	movi	r7,2
  8108f4:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
                 nbr_tasks++;
  8108f8:	e0bffb03 	ldbu	r2,-20(fp)
  8108fc:	10800044 	addi	r2,r2,1
  810900:	e0bffb05 	stb	r2,-20(fp)
  810904:	e0bffa17 	ldw	r2,-24(fp)
  810908:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81090c:	e0bff817 	ldw	r2,-32(fp)
  810910:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810914:	080c40c0 	call	80c40c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  810918:	e0fffe17 	ldw	r3,-8(fp)
  81091c:	00800384 	movi	r2,14
  810920:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  810924:	e0bffb03 	ldbu	r2,-20(fp)
  810928:	e0bfff15 	stw	r2,-4(fp)
  81092c:	00000706 	br	81094c <OSSemPendAbort+0x164>
  810930:	e0bffa17 	ldw	r2,-24(fp)
  810934:	e0bff715 	stw	r2,-36(fp)
  810938:	e0bff717 	ldw	r2,-36(fp)
  81093c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810940:	e0bffe17 	ldw	r2,-8(fp)
  810944:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  810948:	e03fff15 	stw	zero,-4(fp)
  81094c:	e0bfff17 	ldw	r2,-4(fp)
}
  810950:	e037883a 	mov	sp,fp
  810954:	dfc00117 	ldw	ra,4(sp)
  810958:	df000017 	ldw	fp,0(sp)
  81095c:	dec00204 	addi	sp,sp,8
  810960:	f800283a 	ret

00810964 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  810964:	defff704 	addi	sp,sp,-36
  810968:	dfc00815 	stw	ra,32(sp)
  81096c:	df000715 	stw	fp,28(sp)
  810970:	df000704 	addi	fp,sp,28
  810974:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810978:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  81097c:	e0bffe17 	ldw	r2,-8(fp)
  810980:	1004c03a 	cmpne	r2,r2,zero
  810984:	1000031e 	bne	r2,zero,810994 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  810988:	00800104 	movi	r2,4
  81098c:	e0bfff15 	stw	r2,-4(fp)
  810990:	00003806 	br	810a74 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810994:	e0bffe17 	ldw	r2,-8(fp)
  810998:	10800003 	ldbu	r2,0(r2)
  81099c:	10803fcc 	andi	r2,r2,255
  8109a0:	108000e0 	cmpeqi	r2,r2,3
  8109a4:	1000031e 	bne	r2,zero,8109b4 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  8109a8:	00800044 	movi	r2,1
  8109ac:	e0bfff15 	stw	r2,-4(fp)
  8109b0:	00003006 	br	810a74 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8109b4:	0005303a 	rdctl	r2,status
  8109b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8109bc:	e0fffc17 	ldw	r3,-16(fp)
  8109c0:	00bfff84 	movi	r2,-2
  8109c4:	1884703a 	and	r2,r3,r2
  8109c8:	1001703a 	wrctl	status,r2
  
  return context;
  8109cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8109d0:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8109d4:	e0bffe17 	ldw	r2,-8(fp)
  8109d8:	10800283 	ldbu	r2,10(r2)
  8109dc:	10803fcc 	andi	r2,r2,255
  8109e0:	1005003a 	cmpeq	r2,r2,zero
  8109e4:	10000c1e 	bne	r2,zero,810a18 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8109e8:	e13ffe17 	ldw	r4,-8(fp)
  8109ec:	000b883a 	mov	r5,zero
  8109f0:	01800044 	movi	r6,1
  8109f4:	000f883a 	mov	r7,zero
  8109f8:	080b9cc0 	call	80b9cc <OS_EventTaskRdy>
  8109fc:	e0bffd17 	ldw	r2,-12(fp)
  810a00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a04:	e0bffb17 	ldw	r2,-20(fp)
  810a08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  810a0c:	080c40c0 	call	80c40c <OS_Sched>
        return (OS_ERR_NONE);
  810a10:	e03fff15 	stw	zero,-4(fp)
  810a14:	00001706 	br	810a74 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  810a18:	e0bffe17 	ldw	r2,-8(fp)
  810a1c:	1080020b 	ldhu	r2,8(r2)
  810a20:	10ffffcc 	andi	r3,r2,65535
  810a24:	00bfffd4 	movui	r2,65535
  810a28:	18800c26 	beq	r3,r2,810a5c <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  810a2c:	e0bffe17 	ldw	r2,-8(fp)
  810a30:	1080020b 	ldhu	r2,8(r2)
  810a34:	10800044 	addi	r2,r2,1
  810a38:	1007883a 	mov	r3,r2
  810a3c:	e0bffe17 	ldw	r2,-8(fp)
  810a40:	10c0020d 	sth	r3,8(r2)
  810a44:	e0bffd17 	ldw	r2,-12(fp)
  810a48:	e0bffa15 	stw	r2,-24(fp)
  810a4c:	e0bffa17 	ldw	r2,-24(fp)
  810a50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  810a54:	e03fff15 	stw	zero,-4(fp)
  810a58:	00000606 	br	810a74 <OSSemPost+0x110>
  810a5c:	e0bffd17 	ldw	r2,-12(fp)
  810a60:	e0bff915 	stw	r2,-28(fp)
  810a64:	e0bff917 	ldw	r2,-28(fp)
  810a68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  810a6c:	00800c84 	movi	r2,50
  810a70:	e0bfff15 	stw	r2,-4(fp)
  810a74:	e0bfff17 	ldw	r2,-4(fp)
}
  810a78:	e037883a 	mov	sp,fp
  810a7c:	dfc00117 	ldw	ra,4(sp)
  810a80:	df000017 	ldw	fp,0(sp)
  810a84:	dec00204 	addi	sp,sp,8
  810a88:	f800283a 	ret

00810a8c <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  810a8c:	defff604 	addi	sp,sp,-40
  810a90:	df000915 	stw	fp,36(sp)
  810a94:	df000904 	addi	fp,sp,36
  810a98:	e13ffd15 	stw	r4,-12(fp)
  810a9c:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  810aa0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  810aa4:	e0bffd17 	ldw	r2,-12(fp)
  810aa8:	1004c03a 	cmpne	r2,r2,zero
  810aac:	1000031e 	bne	r2,zero,810abc <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  810ab0:	00800104 	movi	r2,4
  810ab4:	e0bfff15 	stw	r2,-4(fp)
  810ab8:	00003b06 	br	810ba8 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  810abc:	e0bffe17 	ldw	r2,-8(fp)
  810ac0:	1004c03a 	cmpne	r2,r2,zero
  810ac4:	1000031e 	bne	r2,zero,810ad4 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  810ac8:	00800244 	movi	r2,9
  810acc:	e0bfff15 	stw	r2,-4(fp)
  810ad0:	00003506 	br	810ba8 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  810ad4:	e0bffd17 	ldw	r2,-12(fp)
  810ad8:	10800003 	ldbu	r2,0(r2)
  810adc:	10803fcc 	andi	r2,r2,255
  810ae0:	108000e0 	cmpeqi	r2,r2,3
  810ae4:	1000031e 	bne	r2,zero,810af4 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  810ae8:	00800044 	movi	r2,1
  810aec:	e0bfff15 	stw	r2,-4(fp)
  810af0:	00002d06 	br	810ba8 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810af4:	0005303a 	rdctl	r2,status
  810af8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810afc:	e0fff817 	ldw	r3,-32(fp)
  810b00:	00bfff84 	movi	r2,-2
  810b04:	1884703a 	and	r2,r3,r2
  810b08:	1001703a 	wrctl	status,r2
  
  return context;
  810b0c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  810b10:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  810b14:	e0bffd17 	ldw	r2,-12(fp)
  810b18:	10c00283 	ldbu	r3,10(r2)
  810b1c:	e0bffe17 	ldw	r2,-8(fp)
  810b20:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  810b24:	e0bffd17 	ldw	r2,-12(fp)
  810b28:	108002c4 	addi	r2,r2,11
  810b2c:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  810b30:	e0bffe17 	ldw	r2,-8(fp)
  810b34:	10800084 	addi	r2,r2,2
  810b38:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810b3c:	e03ffa05 	stb	zero,-24(fp)
  810b40:	00000d06 	br	810b78 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  810b44:	e0bffc17 	ldw	r2,-16(fp)
  810b48:	10c00003 	ldbu	r3,0(r2)
  810b4c:	e0bffb17 	ldw	r2,-20(fp)
  810b50:	10c00005 	stb	r3,0(r2)
  810b54:	e0bffb17 	ldw	r2,-20(fp)
  810b58:	10800044 	addi	r2,r2,1
  810b5c:	e0bffb15 	stw	r2,-20(fp)
  810b60:	e0bffc17 	ldw	r2,-16(fp)
  810b64:	10800044 	addi	r2,r2,1
  810b68:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  810b6c:	e0bffa03 	ldbu	r2,-24(fp)
  810b70:	10800044 	addi	r2,r2,1
  810b74:	e0bffa05 	stb	r2,-24(fp)
  810b78:	e0bffa03 	ldbu	r2,-24(fp)
  810b7c:	108000f0 	cmpltui	r2,r2,3
  810b80:	103ff01e 	bne	r2,zero,810b44 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  810b84:	e0bffd17 	ldw	r2,-12(fp)
  810b88:	10c0020b 	ldhu	r3,8(r2)
  810b8c:	e0bffe17 	ldw	r2,-8(fp)
  810b90:	10c0000d 	sth	r3,0(r2)
  810b94:	e0bff917 	ldw	r2,-28(fp)
  810b98:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b9c:	e0bff717 	ldw	r2,-36(fp)
  810ba0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  810ba4:	e03fff15 	stw	zero,-4(fp)
  810ba8:	e0bfff17 	ldw	r2,-4(fp)
}
  810bac:	e037883a 	mov	sp,fp
  810bb0:	df000017 	ldw	fp,0(sp)
  810bb4:	dec00104 	addi	sp,sp,4
  810bb8:	f800283a 	ret

00810bbc <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  810bbc:	defff904 	addi	sp,sp,-28
  810bc0:	df000615 	stw	fp,24(sp)
  810bc4:	df000604 	addi	fp,sp,24
  810bc8:	e13ffd15 	stw	r4,-12(fp)
  810bcc:	e1bfff15 	stw	r6,-4(fp)
  810bd0:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810bd4:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810bd8:	e0bfff17 	ldw	r2,-4(fp)
  810bdc:	1005003a 	cmpeq	r2,r2,zero
  810be0:	1000331e 	bne	r2,zero,810cb0 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  810be4:	e0bffd17 	ldw	r2,-12(fp)
  810be8:	1004c03a 	cmpne	r2,r2,zero
  810bec:	1000041e 	bne	r2,zero,810c00 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  810bf0:	e0ffff17 	ldw	r3,-4(fp)
  810bf4:	00800104 	movi	r2,4
  810bf8:	18800005 	stb	r2,0(r3)
        return;
  810bfc:	00002c06 	br	810cb0 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  810c00:	e0bffd17 	ldw	r2,-12(fp)
  810c04:	10800003 	ldbu	r2,0(r2)
  810c08:	10803fcc 	andi	r2,r2,255
  810c0c:	108000e0 	cmpeqi	r2,r2,3
  810c10:	1000041e 	bne	r2,zero,810c24 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  810c14:	e0ffff17 	ldw	r3,-4(fp)
  810c18:	00800044 	movi	r2,1
  810c1c:	18800005 	stb	r2,0(r3)
        return;
  810c20:	00002306 	br	810cb0 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810c24:	0005303a 	rdctl	r2,status
  810c28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810c2c:	e0fffb17 	ldw	r3,-20(fp)
  810c30:	00bfff84 	movi	r2,-2
  810c34:	1884703a 	and	r2,r3,r2
  810c38:	1001703a 	wrctl	status,r2
  
  return context;
  810c3c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  810c40:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  810c44:	e0bfff17 	ldw	r2,-4(fp)
  810c48:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  810c4c:	e0bffd17 	ldw	r2,-12(fp)
  810c50:	1080020b 	ldhu	r2,8(r2)
  810c54:	10bfffcc 	andi	r2,r2,65535
  810c58:	1005003a 	cmpeq	r2,r2,zero
  810c5c:	1000041e 	bne	r2,zero,810c70 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  810c60:	e0fffd17 	ldw	r3,-12(fp)
  810c64:	e0bffe0b 	ldhu	r2,-8(fp)
  810c68:	1880020d 	sth	r2,8(r3)
  810c6c:	00000c06 	br	810ca0 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  810c70:	e0bffd17 	ldw	r2,-12(fp)
  810c74:	10800283 	ldbu	r2,10(r2)
  810c78:	10803fcc 	andi	r2,r2,255
  810c7c:	1004c03a 	cmpne	r2,r2,zero
  810c80:	1000041e 	bne	r2,zero,810c94 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  810c84:	e0fffd17 	ldw	r3,-12(fp)
  810c88:	e0bffe0b 	ldhu	r2,-8(fp)
  810c8c:	1880020d 	sth	r2,8(r3)
  810c90:	00000306 	br	810ca0 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  810c94:	e0ffff17 	ldw	r3,-4(fp)
  810c98:	00801244 	movi	r2,73
  810c9c:	18800005 	stb	r2,0(r3)
  810ca0:	e0bffc17 	ldw	r2,-16(fp)
  810ca4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810ca8:	e0bffa17 	ldw	r2,-24(fp)
  810cac:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  810cb0:	e037883a 	mov	sp,fp
  810cb4:	df000017 	ldw	fp,0(sp)
  810cb8:	dec00104 	addi	sp,sp,4
  810cbc:	f800283a 	ret

00810cc0 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  810cc0:	defff004 	addi	sp,sp,-64
  810cc4:	dfc00f15 	stw	ra,60(sp)
  810cc8:	df000e15 	stw	fp,56(sp)
  810ccc:	df000e04 	addi	fp,sp,56
  810cd0:	e13ffd05 	stb	r4,-12(fp)
  810cd4:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  810cd8:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  810cdc:	e0bffd03 	ldbu	r2,-12(fp)
  810ce0:	10800530 	cmpltui	r2,r2,20
  810ce4:	1000061e 	bne	r2,zero,810d00 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  810ce8:	e0bffd03 	ldbu	r2,-12(fp)
  810cec:	10803fe0 	cmpeqi	r2,r2,255
  810cf0:	1000031e 	bne	r2,zero,810d00 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  810cf4:	00800a84 	movi	r2,42
  810cf8:	e0bfff15 	stw	r2,-4(fp)
  810cfc:	00014706 	br	81121c <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  810d00:	e0bffe03 	ldbu	r2,-8(fp)
  810d04:	10800530 	cmpltui	r2,r2,20
  810d08:	1000031e 	bne	r2,zero,810d18 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  810d0c:	00800a84 	movi	r2,42
  810d10:	e0bfff15 	stw	r2,-4(fp)
  810d14:	00014106 	br	81121c <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810d18:	0005303a 	rdctl	r2,status
  810d1c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810d20:	e0fff617 	ldw	r3,-40(fp)
  810d24:	00bfff84 	movi	r2,-2
  810d28:	1884703a 	and	r2,r3,r2
  810d2c:	1001703a 	wrctl	status,r2
  
  return context;
  810d30:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  810d34:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  810d38:	e0bffe03 	ldbu	r2,-8(fp)
  810d3c:	00c020b4 	movhi	r3,130
  810d40:	18c1bd04 	addi	r3,r3,1780
  810d44:	1085883a 	add	r2,r2,r2
  810d48:	1085883a 	add	r2,r2,r2
  810d4c:	10c5883a 	add	r2,r2,r3
  810d50:	10800017 	ldw	r2,0(r2)
  810d54:	1005003a 	cmpeq	r2,r2,zero
  810d58:	1000071e 	bne	r2,zero,810d78 <OSTaskChangePrio+0xb8>
  810d5c:	e0bff717 	ldw	r2,-36(fp)
  810d60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810d64:	e0bff517 	ldw	r2,-44(fp)
  810d68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  810d6c:	00800a04 	movi	r2,40
  810d70:	e0bfff15 	stw	r2,-4(fp)
  810d74:	00012906 	br	81121c <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  810d78:	e0bffd03 	ldbu	r2,-12(fp)
  810d7c:	10803fd8 	cmpnei	r2,r2,255
  810d80:	1000051e 	bne	r2,zero,810d98 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  810d84:	008020b4 	movhi	r2,130
  810d88:	10a53704 	addi	r2,r2,-27428
  810d8c:	10800017 	ldw	r2,0(r2)
  810d90:	10800c83 	ldbu	r2,50(r2)
  810d94:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  810d98:	e0bffd03 	ldbu	r2,-12(fp)
  810d9c:	00c020b4 	movhi	r3,130
  810da0:	18c1bd04 	addi	r3,r3,1780
  810da4:	1085883a 	add	r2,r2,r2
  810da8:	1085883a 	add	r2,r2,r2
  810dac:	10c5883a 	add	r2,r2,r3
  810db0:	10800017 	ldw	r2,0(r2)
  810db4:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  810db8:	e0bffa17 	ldw	r2,-24(fp)
  810dbc:	1004c03a 	cmpne	r2,r2,zero
  810dc0:	1000071e 	bne	r2,zero,810de0 <OSTaskChangePrio+0x120>
  810dc4:	e0bff717 	ldw	r2,-36(fp)
  810dc8:	e0bff415 	stw	r2,-48(fp)
  810dcc:	e0bff417 	ldw	r2,-48(fp)
  810dd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  810dd4:	00800a44 	movi	r2,41
  810dd8:	e0bfff15 	stw	r2,-4(fp)
  810ddc:	00010f06 	br	81121c <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  810de0:	e0bffa17 	ldw	r2,-24(fp)
  810de4:	10800058 	cmpnei	r2,r2,1
  810de8:	1000071e 	bne	r2,zero,810e08 <OSTaskChangePrio+0x148>
  810dec:	e0bff717 	ldw	r2,-36(fp)
  810df0:	e0bff315 	stw	r2,-52(fp)
  810df4:	e0bff317 	ldw	r2,-52(fp)
  810df8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  810dfc:	008010c4 	movi	r2,67
  810e00:	e0bfff15 	stw	r2,-4(fp)
  810e04:	00010506 	br	81121c <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  810e08:	e0bffe03 	ldbu	r2,-8(fp)
  810e0c:	1004d0fa 	srli	r2,r2,3
  810e10:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  810e14:	e0bffe03 	ldbu	r2,-8(fp)
  810e18:	108001cc 	andi	r2,r2,7
  810e1c:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  810e20:	e0fff983 	ldbu	r3,-26(fp)
  810e24:	00800044 	movi	r2,1
  810e28:	10c4983a 	sll	r2,r2,r3
  810e2c:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  810e30:	e0fff943 	ldbu	r3,-27(fp)
  810e34:	00800044 	movi	r2,1
  810e38:	10c4983a 	sll	r2,r2,r3
  810e3c:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  810e40:	e0bffd03 	ldbu	r2,-12(fp)
  810e44:	00c020b4 	movhi	r3,130
  810e48:	18c1bd04 	addi	r3,r3,1780
  810e4c:	1085883a 	add	r2,r2,r2
  810e50:	1085883a 	add	r2,r2,r2
  810e54:	10c5883a 	add	r2,r2,r3
  810e58:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  810e5c:	e0bffe03 	ldbu	r2,-8(fp)
  810e60:	00c020b4 	movhi	r3,130
  810e64:	18c1bd04 	addi	r3,r3,1780
  810e68:	1085883a 	add	r2,r2,r2
  810e6c:	1085883a 	add	r2,r2,r2
  810e70:	10c7883a 	add	r3,r2,r3
  810e74:	e0bffa17 	ldw	r2,-24(fp)
  810e78:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  810e7c:	e0bffa17 	ldw	r2,-24(fp)
  810e80:	10800d03 	ldbu	r2,52(r2)
  810e84:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  810e88:	e0bffa17 	ldw	r2,-24(fp)
  810e8c:	10800d83 	ldbu	r2,54(r2)
  810e90:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  810e94:	e0bffa17 	ldw	r2,-24(fp)
  810e98:	10800d43 	ldbu	r2,53(r2)
  810e9c:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  810ea0:	e0fff903 	ldbu	r3,-28(fp)
  810ea4:	008020b4 	movhi	r2,130
  810ea8:	10a53444 	addi	r2,r2,-27439
  810eac:	10c5883a 	add	r2,r2,r3
  810eb0:	10c00003 	ldbu	r3,0(r2)
  810eb4:	e0bff803 	ldbu	r2,-32(fp)
  810eb8:	1884703a 	and	r2,r3,r2
  810ebc:	10803fcc 	andi	r2,r2,255
  810ec0:	1005003a 	cmpeq	r2,r2,zero
  810ec4:	1000381e 	bne	r2,zero,810fa8 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  810ec8:	e13ff903 	ldbu	r4,-28(fp)
  810ecc:	e0fff903 	ldbu	r3,-28(fp)
  810ed0:	008020b4 	movhi	r2,130
  810ed4:	10a53444 	addi	r2,r2,-27439
  810ed8:	10c5883a 	add	r2,r2,r3
  810edc:	10800003 	ldbu	r2,0(r2)
  810ee0:	1007883a 	mov	r3,r2
  810ee4:	e0bff803 	ldbu	r2,-32(fp)
  810ee8:	0084303a 	nor	r2,zero,r2
  810eec:	1884703a 	and	r2,r3,r2
  810ef0:	1007883a 	mov	r3,r2
  810ef4:	008020b4 	movhi	r2,130
  810ef8:	10a53444 	addi	r2,r2,-27439
  810efc:	1105883a 	add	r2,r2,r4
  810f00:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  810f04:	e0fff903 	ldbu	r3,-28(fp)
  810f08:	008020b4 	movhi	r2,130
  810f0c:	10a53444 	addi	r2,r2,-27439
  810f10:	10c5883a 	add	r2,r2,r3
  810f14:	10800003 	ldbu	r2,0(r2)
  810f18:	10803fcc 	andi	r2,r2,255
  810f1c:	1004c03a 	cmpne	r2,r2,zero
  810f20:	10000b1e 	bne	r2,zero,810f50 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  810f24:	e0bff843 	ldbu	r2,-31(fp)
  810f28:	0084303a 	nor	r2,zero,r2
  810f2c:	1007883a 	mov	r3,r2
  810f30:	008020b4 	movhi	r2,130
  810f34:	10a53404 	addi	r2,r2,-27440
  810f38:	10800003 	ldbu	r2,0(r2)
  810f3c:	1884703a 	and	r2,r3,r2
  810f40:	1007883a 	mov	r3,r2
  810f44:	008020b4 	movhi	r2,130
  810f48:	10a53404 	addi	r2,r2,-27440
  810f4c:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  810f50:	008020b4 	movhi	r2,130
  810f54:	10a53404 	addi	r2,r2,-27440
  810f58:	10c00003 	ldbu	r3,0(r2)
  810f5c:	e0bff8c3 	ldbu	r2,-29(fp)
  810f60:	1884b03a 	or	r2,r3,r2
  810f64:	1007883a 	mov	r3,r2
  810f68:	008020b4 	movhi	r2,130
  810f6c:	10a53404 	addi	r2,r2,-27440
  810f70:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  810f74:	e13ff983 	ldbu	r4,-26(fp)
  810f78:	e0fff983 	ldbu	r3,-26(fp)
  810f7c:	008020b4 	movhi	r2,130
  810f80:	10a53444 	addi	r2,r2,-27439
  810f84:	10c5883a 	add	r2,r2,r3
  810f88:	10c00003 	ldbu	r3,0(r2)
  810f8c:	e0bff883 	ldbu	r2,-30(fp)
  810f90:	1884b03a 	or	r2,r3,r2
  810f94:	1007883a 	mov	r3,r2
  810f98:	008020b4 	movhi	r2,130
  810f9c:	10a53444 	addi	r2,r2,-27439
  810fa0:	1105883a 	add	r2,r2,r4
  810fa4:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  810fa8:	e0bffa17 	ldw	r2,-24(fp)
  810fac:	10800717 	ldw	r2,28(r2)
  810fb0:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  810fb4:	e0bffc17 	ldw	r2,-16(fp)
  810fb8:	1005003a 	cmpeq	r2,r2,zero
  810fbc:	1000341e 	bne	r2,zero,811090 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  810fc0:	e13ff903 	ldbu	r4,-28(fp)
  810fc4:	e0fff903 	ldbu	r3,-28(fp)
  810fc8:	e0bffc17 	ldw	r2,-16(fp)
  810fcc:	1885883a 	add	r2,r3,r2
  810fd0:	10800204 	addi	r2,r2,8
  810fd4:	108000c3 	ldbu	r2,3(r2)
  810fd8:	1007883a 	mov	r3,r2
  810fdc:	e0bff803 	ldbu	r2,-32(fp)
  810fe0:	0084303a 	nor	r2,zero,r2
  810fe4:	1884703a 	and	r2,r3,r2
  810fe8:	1007883a 	mov	r3,r2
  810fec:	e0bffc17 	ldw	r2,-16(fp)
  810ff0:	2085883a 	add	r2,r4,r2
  810ff4:	10800204 	addi	r2,r2,8
  810ff8:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  810ffc:	e0fff903 	ldbu	r3,-28(fp)
  811000:	e0bffc17 	ldw	r2,-16(fp)
  811004:	1885883a 	add	r2,r3,r2
  811008:	10800204 	addi	r2,r2,8
  81100c:	108000c3 	ldbu	r2,3(r2)
  811010:	10803fcc 	andi	r2,r2,255
  811014:	1004c03a 	cmpne	r2,r2,zero
  811018:	1000091e 	bne	r2,zero,811040 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  81101c:	e0bffc17 	ldw	r2,-16(fp)
  811020:	10800283 	ldbu	r2,10(r2)
  811024:	1007883a 	mov	r3,r2
  811028:	e0bff843 	ldbu	r2,-31(fp)
  81102c:	0084303a 	nor	r2,zero,r2
  811030:	1884703a 	and	r2,r3,r2
  811034:	1007883a 	mov	r3,r2
  811038:	e0bffc17 	ldw	r2,-16(fp)
  81103c:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  811040:	e0bffc17 	ldw	r2,-16(fp)
  811044:	10c00283 	ldbu	r3,10(r2)
  811048:	e0bff8c3 	ldbu	r2,-29(fp)
  81104c:	1884b03a 	or	r2,r3,r2
  811050:	1007883a 	mov	r3,r2
  811054:	e0bffc17 	ldw	r2,-16(fp)
  811058:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  81105c:	e13ff983 	ldbu	r4,-26(fp)
  811060:	e0fff983 	ldbu	r3,-26(fp)
  811064:	e0bffc17 	ldw	r2,-16(fp)
  811068:	1885883a 	add	r2,r3,r2
  81106c:	10800204 	addi	r2,r2,8
  811070:	10c000c3 	ldbu	r3,3(r2)
  811074:	e0bff883 	ldbu	r2,-30(fp)
  811078:	1884b03a 	or	r2,r3,r2
  81107c:	1007883a 	mov	r3,r2
  811080:	e0bffc17 	ldw	r2,-16(fp)
  811084:	2085883a 	add	r2,r4,r2
  811088:	10800204 	addi	r2,r2,8
  81108c:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  811090:	e0bffa17 	ldw	r2,-24(fp)
  811094:	10800817 	ldw	r2,32(r2)
  811098:	1005003a 	cmpeq	r2,r2,zero
  81109c:	1000441e 	bne	r2,zero,8111b0 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  8110a0:	e0bffa17 	ldw	r2,-24(fp)
  8110a4:	10800817 	ldw	r2,32(r2)
  8110a8:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  8110ac:	e0bffb17 	ldw	r2,-20(fp)
  8110b0:	10800017 	ldw	r2,0(r2)
  8110b4:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  8110b8:	00003a06 	br	8111a4 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  8110bc:	e13ff903 	ldbu	r4,-28(fp)
  8110c0:	e0fff903 	ldbu	r3,-28(fp)
  8110c4:	e0bffc17 	ldw	r2,-16(fp)
  8110c8:	1885883a 	add	r2,r3,r2
  8110cc:	10800204 	addi	r2,r2,8
  8110d0:	108000c3 	ldbu	r2,3(r2)
  8110d4:	1007883a 	mov	r3,r2
  8110d8:	e0bff803 	ldbu	r2,-32(fp)
  8110dc:	0084303a 	nor	r2,zero,r2
  8110e0:	1884703a 	and	r2,r3,r2
  8110e4:	1007883a 	mov	r3,r2
  8110e8:	e0bffc17 	ldw	r2,-16(fp)
  8110ec:	2085883a 	add	r2,r4,r2
  8110f0:	10800204 	addi	r2,r2,8
  8110f4:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  8110f8:	e0fff903 	ldbu	r3,-28(fp)
  8110fc:	e0bffc17 	ldw	r2,-16(fp)
  811100:	1885883a 	add	r2,r3,r2
  811104:	10800204 	addi	r2,r2,8
  811108:	108000c3 	ldbu	r2,3(r2)
  81110c:	10803fcc 	andi	r2,r2,255
  811110:	1004c03a 	cmpne	r2,r2,zero
  811114:	1000091e 	bne	r2,zero,81113c <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  811118:	e0bffc17 	ldw	r2,-16(fp)
  81111c:	10800283 	ldbu	r2,10(r2)
  811120:	1007883a 	mov	r3,r2
  811124:	e0bff843 	ldbu	r2,-31(fp)
  811128:	0084303a 	nor	r2,zero,r2
  81112c:	1884703a 	and	r2,r3,r2
  811130:	1007883a 	mov	r3,r2
  811134:	e0bffc17 	ldw	r2,-16(fp)
  811138:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  81113c:	e0bffc17 	ldw	r2,-16(fp)
  811140:	10c00283 	ldbu	r3,10(r2)
  811144:	e0bff8c3 	ldbu	r2,-29(fp)
  811148:	1884b03a 	or	r2,r3,r2
  81114c:	1007883a 	mov	r3,r2
  811150:	e0bffc17 	ldw	r2,-16(fp)
  811154:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  811158:	e13ff983 	ldbu	r4,-26(fp)
  81115c:	e0fff983 	ldbu	r3,-26(fp)
  811160:	e0bffc17 	ldw	r2,-16(fp)
  811164:	1885883a 	add	r2,r3,r2
  811168:	10800204 	addi	r2,r2,8
  81116c:	10c000c3 	ldbu	r3,3(r2)
  811170:	e0bff883 	ldbu	r2,-30(fp)
  811174:	1884b03a 	or	r2,r3,r2
  811178:	1007883a 	mov	r3,r2
  81117c:	e0bffc17 	ldw	r2,-16(fp)
  811180:	2085883a 	add	r2,r4,r2
  811184:	10800204 	addi	r2,r2,8
  811188:	10c000c5 	stb	r3,3(r2)
            pevents++;
  81118c:	e0bffb17 	ldw	r2,-20(fp)
  811190:	10800104 	addi	r2,r2,4
  811194:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  811198:	e0bffb17 	ldw	r2,-20(fp)
  81119c:	10800017 	ldw	r2,0(r2)
  8111a0:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  8111a4:	e0bffc17 	ldw	r2,-16(fp)
  8111a8:	1004c03a 	cmpne	r2,r2,zero
  8111ac:	103fc31e 	bne	r2,zero,8110bc <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  8111b0:	e0fffa17 	ldw	r3,-24(fp)
  8111b4:	e0bffe03 	ldbu	r2,-8(fp)
  8111b8:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  8111bc:	e0fffa17 	ldw	r3,-24(fp)
  8111c0:	e0bff983 	ldbu	r2,-26(fp)
  8111c4:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  8111c8:	e0fffa17 	ldw	r3,-24(fp)
  8111cc:	e0bff943 	ldbu	r2,-27(fp)
  8111d0:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  8111d4:	e0fffa17 	ldw	r3,-24(fp)
  8111d8:	e0bff8c3 	ldbu	r2,-29(fp)
  8111dc:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  8111e0:	e0fffa17 	ldw	r3,-24(fp)
  8111e4:	e0bff883 	ldbu	r2,-30(fp)
  8111e8:	18800d45 	stb	r2,53(r3)
  8111ec:	e0bff717 	ldw	r2,-36(fp)
  8111f0:	e0bff215 	stw	r2,-56(fp)
  8111f4:	e0bff217 	ldw	r2,-56(fp)
  8111f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8111fc:	008020b4 	movhi	r2,130
  811200:	10a52844 	addi	r2,r2,-27487
  811204:	10800003 	ldbu	r2,0(r2)
  811208:	10803fcc 	andi	r2,r2,255
  81120c:	10800058 	cmpnei	r2,r2,1
  811210:	1000011e 	bne	r2,zero,811218 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  811214:	080c40c0 	call	80c40c <OS_Sched>
    }
    return (OS_ERR_NONE);
  811218:	e03fff15 	stw	zero,-4(fp)
  81121c:	e0bfff17 	ldw	r2,-4(fp)
}
  811220:	e037883a 	mov	sp,fp
  811224:	dfc00117 	ldw	ra,4(sp)
  811228:	df000017 	ldw	fp,0(sp)
  81122c:	dec00204 	addi	sp,sp,8
  811230:	f800283a 	ret

00811234 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  811234:	deffed04 	addi	sp,sp,-76
  811238:	dfc01215 	stw	ra,72(sp)
  81123c:	df001115 	stw	fp,68(sp)
  811240:	df001104 	addi	fp,sp,68
  811244:	e13ffb15 	stw	r4,-20(fp)
  811248:	e17ffc15 	stw	r5,-16(fp)
  81124c:	e1bffd15 	stw	r6,-12(fp)
  811250:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  811254:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  811258:	e0bffe03 	ldbu	r2,-8(fp)
  81125c:	10800570 	cmpltui	r2,r2,21
  811260:	1000031e 	bne	r2,zero,811270 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  811264:	00800a84 	movi	r2,42
  811268:	e0bfff15 	stw	r2,-4(fp)
  81126c:	00006006 	br	8113f0 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811270:	0005303a 	rdctl	r2,status
  811274:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811278:	e0fff717 	ldw	r3,-36(fp)
  81127c:	00bfff84 	movi	r2,-2
  811280:	1884703a 	and	r2,r3,r2
  811284:	1001703a 	wrctl	status,r2
  
  return context;
  811288:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  81128c:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811290:	008020b4 	movhi	r2,130
  811294:	10a53604 	addi	r2,r2,-27432
  811298:	10800003 	ldbu	r2,0(r2)
  81129c:	10803fcc 	andi	r2,r2,255
  8112a0:	1005003a 	cmpeq	r2,r2,zero
  8112a4:	1000071e 	bne	r2,zero,8112c4 <OSTaskCreate+0x90>
  8112a8:	e0bff817 	ldw	r2,-32(fp)
  8112ac:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8112b0:	e0bff617 	ldw	r2,-40(fp)
  8112b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  8112b8:	00800f04 	movi	r2,60
  8112bc:	e0bfff15 	stw	r2,-4(fp)
  8112c0:	00004b06 	br	8113f0 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8112c4:	e0bffe03 	ldbu	r2,-8(fp)
  8112c8:	00c020b4 	movhi	r3,130
  8112cc:	18c1bd04 	addi	r3,r3,1780
  8112d0:	1085883a 	add	r2,r2,r2
  8112d4:	1085883a 	add	r2,r2,r2
  8112d8:	10c5883a 	add	r2,r2,r3
  8112dc:	10800017 	ldw	r2,0(r2)
  8112e0:	1004c03a 	cmpne	r2,r2,zero
  8112e4:	10003c1e 	bne	r2,zero,8113d8 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8112e8:	e0bffe03 	ldbu	r2,-8(fp)
  8112ec:	00c020b4 	movhi	r3,130
  8112f0:	18c1bd04 	addi	r3,r3,1780
  8112f4:	1085883a 	add	r2,r2,r2
  8112f8:	1085883a 	add	r2,r2,r2
  8112fc:	10c7883a 	add	r3,r2,r3
  811300:	00800044 	movi	r2,1
  811304:	18800015 	stw	r2,0(r3)
  811308:	e0bff817 	ldw	r2,-32(fp)
  81130c:	e0bff515 	stw	r2,-44(fp)
  811310:	e0bff517 	ldw	r2,-44(fp)
  811314:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  811318:	e13ffb17 	ldw	r4,-20(fp)
  81131c:	e17ffc17 	ldw	r5,-16(fp)
  811320:	e1bffd17 	ldw	r6,-12(fp)
  811324:	000f883a 	mov	r7,zero
  811328:	0814ea00 	call	814ea0 <OSTaskStkInit>
  81132c:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  811330:	e13ffe03 	ldbu	r4,-8(fp)
  811334:	d8000015 	stw	zero,0(sp)
  811338:	d8000115 	stw	zero,4(sp)
  81133c:	d8000215 	stw	zero,8(sp)
  811340:	e17ffa17 	ldw	r5,-24(fp)
  811344:	000d883a 	mov	r6,zero
  811348:	000f883a 	mov	r7,zero
  81134c:	080c8140 	call	80c814 <OS_TCBInit>
  811350:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  811354:	e0bff903 	ldbu	r2,-28(fp)
  811358:	1004c03a 	cmpne	r2,r2,zero
  81135c:	1000081e 	bne	r2,zero,811380 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  811360:	008020b4 	movhi	r2,130
  811364:	10a52844 	addi	r2,r2,-27487
  811368:	10800003 	ldbu	r2,0(r2)
  81136c:	10803fcc 	andi	r2,r2,255
  811370:	10800058 	cmpnei	r2,r2,1
  811374:	1000151e 	bne	r2,zero,8113cc <OSTaskCreate+0x198>
                OS_Sched();
  811378:	080c40c0 	call	80c40c <OS_Sched>
  81137c:	00001306 	br	8113cc <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811380:	0005303a 	rdctl	r2,status
  811384:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811388:	e0fff417 	ldw	r3,-48(fp)
  81138c:	00bfff84 	movi	r2,-2
  811390:	1884703a 	and	r2,r3,r2
  811394:	1001703a 	wrctl	status,r2
  
  return context;
  811398:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81139c:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  8113a0:	e0bffe03 	ldbu	r2,-8(fp)
  8113a4:	00c020b4 	movhi	r3,130
  8113a8:	18c1bd04 	addi	r3,r3,1780
  8113ac:	1085883a 	add	r2,r2,r2
  8113b0:	1085883a 	add	r2,r2,r2
  8113b4:	10c5883a 	add	r2,r2,r3
  8113b8:	10000015 	stw	zero,0(r2)
  8113bc:	e0bff817 	ldw	r2,-32(fp)
  8113c0:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113c4:	e0bff317 	ldw	r2,-52(fp)
  8113c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8113cc:	e0bff903 	ldbu	r2,-28(fp)
  8113d0:	e0bfff15 	stw	r2,-4(fp)
  8113d4:	00000606 	br	8113f0 <OSTaskCreate+0x1bc>
  8113d8:	e0bff817 	ldw	r2,-32(fp)
  8113dc:	e0bff215 	stw	r2,-56(fp)
  8113e0:	e0bff217 	ldw	r2,-56(fp)
  8113e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8113e8:	00800a04 	movi	r2,40
  8113ec:	e0bfff15 	stw	r2,-4(fp)
  8113f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8113f4:	e037883a 	mov	sp,fp
  8113f8:	dfc00117 	ldw	ra,4(sp)
  8113fc:	df000017 	ldw	fp,0(sp)
  811400:	dec00204 	addi	sp,sp,8
  811404:	f800283a 	ret

00811408 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  811408:	deffeb04 	addi	sp,sp,-84
  81140c:	dfc01415 	stw	ra,80(sp)
  811410:	df001315 	stw	fp,76(sp)
  811414:	df001304 	addi	fp,sp,76
  811418:	e13ff915 	stw	r4,-28(fp)
  81141c:	e17ffa15 	stw	r5,-24(fp)
  811420:	e1bffb15 	stw	r6,-20(fp)
  811424:	e0800217 	ldw	r2,8(fp)
  811428:	e0c00617 	ldw	r3,24(fp)
  81142c:	e1fffc05 	stb	r7,-16(fp)
  811430:	e0bffd0d 	sth	r2,-12(fp)
  811434:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  811438:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  81143c:	e0bffc03 	ldbu	r2,-16(fp)
  811440:	10800570 	cmpltui	r2,r2,21
  811444:	1000031e 	bne	r2,zero,811454 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  811448:	00800a84 	movi	r2,42
  81144c:	e0bfff15 	stw	r2,-4(fp)
  811450:	00006706 	br	8115f0 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811454:	0005303a 	rdctl	r2,status
  811458:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81145c:	e0fff517 	ldw	r3,-44(fp)
  811460:	00bfff84 	movi	r2,-2
  811464:	1884703a 	and	r2,r3,r2
  811468:	1001703a 	wrctl	status,r2
  
  return context;
  81146c:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811470:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  811474:	008020b4 	movhi	r2,130
  811478:	10a53604 	addi	r2,r2,-27432
  81147c:	10800003 	ldbu	r2,0(r2)
  811480:	10803fcc 	andi	r2,r2,255
  811484:	1005003a 	cmpeq	r2,r2,zero
  811488:	1000071e 	bne	r2,zero,8114a8 <OSTaskCreateExt+0xa0>
  81148c:	e0bff617 	ldw	r2,-40(fp)
  811490:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811494:	e0bff417 	ldw	r2,-48(fp)
  811498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  81149c:	00800f04 	movi	r2,60
  8114a0:	e0bfff15 	stw	r2,-4(fp)
  8114a4:	00005206 	br	8115f0 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  8114a8:	e0bffc03 	ldbu	r2,-16(fp)
  8114ac:	00c020b4 	movhi	r3,130
  8114b0:	18c1bd04 	addi	r3,r3,1780
  8114b4:	1085883a 	add	r2,r2,r2
  8114b8:	1085883a 	add	r2,r2,r2
  8114bc:	10c5883a 	add	r2,r2,r3
  8114c0:	10800017 	ldw	r2,0(r2)
  8114c4:	1004c03a 	cmpne	r2,r2,zero
  8114c8:	1000431e 	bne	r2,zero,8115d8 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  8114cc:	e0bffc03 	ldbu	r2,-16(fp)
  8114d0:	00c020b4 	movhi	r3,130
  8114d4:	18c1bd04 	addi	r3,r3,1780
  8114d8:	1085883a 	add	r2,r2,r2
  8114dc:	1085883a 	add	r2,r2,r2
  8114e0:	10c7883a 	add	r3,r2,r3
  8114e4:	00800044 	movi	r2,1
  8114e8:	18800015 	stw	r2,0(r3)
  8114ec:	e0bff617 	ldw	r2,-40(fp)
  8114f0:	e0bff315 	stw	r2,-52(fp)
  8114f4:	e0bff317 	ldw	r2,-52(fp)
  8114f8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  8114fc:	e1bffe0b 	ldhu	r6,-8(fp)
  811500:	e1000317 	ldw	r4,12(fp)
  811504:	e1400417 	ldw	r5,16(fp)
  811508:	08126840 	call	812684 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  81150c:	e1fffe0b 	ldhu	r7,-8(fp)
  811510:	e13ff917 	ldw	r4,-28(fp)
  811514:	e17ffa17 	ldw	r5,-24(fp)
  811518:	e1bffb17 	ldw	r6,-20(fp)
  81151c:	0814ea00 	call	814ea0 <OSTaskStkInit>
  811520:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  811524:	e13ffc03 	ldbu	r4,-16(fp)
  811528:	e1fffd0b 	ldhu	r7,-12(fp)
  81152c:	e0fffe0b 	ldhu	r3,-8(fp)
  811530:	e0800417 	ldw	r2,16(fp)
  811534:	d8800015 	stw	r2,0(sp)
  811538:	e0800517 	ldw	r2,20(fp)
  81153c:	d8800115 	stw	r2,4(sp)
  811540:	d8c00215 	stw	r3,8(sp)
  811544:	e17ff817 	ldw	r5,-32(fp)
  811548:	e1800317 	ldw	r6,12(fp)
  81154c:	080c8140 	call	80c814 <OS_TCBInit>
  811550:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  811554:	e0bff703 	ldbu	r2,-36(fp)
  811558:	1004c03a 	cmpne	r2,r2,zero
  81155c:	1000081e 	bne	r2,zero,811580 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  811560:	008020b4 	movhi	r2,130
  811564:	10a52844 	addi	r2,r2,-27487
  811568:	10800003 	ldbu	r2,0(r2)
  81156c:	10803fcc 	andi	r2,r2,255
  811570:	10800058 	cmpnei	r2,r2,1
  811574:	1000151e 	bne	r2,zero,8115cc <OSTaskCreateExt+0x1c4>
                OS_Sched();
  811578:	080c40c0 	call	80c40c <OS_Sched>
  81157c:	00001306 	br	8115cc <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811580:	0005303a 	rdctl	r2,status
  811584:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811588:	e0fff217 	ldw	r3,-56(fp)
  81158c:	00bfff84 	movi	r2,-2
  811590:	1884703a 	and	r2,r3,r2
  811594:	1001703a 	wrctl	status,r2
  
  return context;
  811598:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  81159c:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  8115a0:	e0bffc03 	ldbu	r2,-16(fp)
  8115a4:	00c020b4 	movhi	r3,130
  8115a8:	18c1bd04 	addi	r3,r3,1780
  8115ac:	1085883a 	add	r2,r2,r2
  8115b0:	1085883a 	add	r2,r2,r2
  8115b4:	10c5883a 	add	r2,r2,r3
  8115b8:	10000015 	stw	zero,0(r2)
  8115bc:	e0bff617 	ldw	r2,-40(fp)
  8115c0:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8115c4:	e0bff117 	ldw	r2,-60(fp)
  8115c8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  8115cc:	e0bff703 	ldbu	r2,-36(fp)
  8115d0:	e0bfff15 	stw	r2,-4(fp)
  8115d4:	00000606 	br	8115f0 <OSTaskCreateExt+0x1e8>
  8115d8:	e0bff617 	ldw	r2,-40(fp)
  8115dc:	e0bff015 	stw	r2,-64(fp)
  8115e0:	e0bff017 	ldw	r2,-64(fp)
  8115e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  8115e8:	00800a04 	movi	r2,40
  8115ec:	e0bfff15 	stw	r2,-4(fp)
  8115f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8115f4:	e037883a 	mov	sp,fp
  8115f8:	dfc00117 	ldw	ra,4(sp)
  8115fc:	df000017 	ldw	fp,0(sp)
  811600:	dec00204 	addi	sp,sp,8
  811604:	f800283a 	ret

00811608 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  811608:	defff304 	addi	sp,sp,-52
  81160c:	dfc00c15 	stw	ra,48(sp)
  811610:	df000b15 	stw	fp,44(sp)
  811614:	df000b04 	addi	fp,sp,44
  811618:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  81161c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  811620:	008020b4 	movhi	r2,130
  811624:	10a53604 	addi	r2,r2,-27432
  811628:	10800003 	ldbu	r2,0(r2)
  81162c:	10803fcc 	andi	r2,r2,255
  811630:	1005003a 	cmpeq	r2,r2,zero
  811634:	1000031e 	bne	r2,zero,811644 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  811638:	00801004 	movi	r2,64
  81163c:	e0bfff15 	stw	r2,-4(fp)
  811640:	0000ee06 	br	8119fc <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  811644:	e0bffe03 	ldbu	r2,-8(fp)
  811648:	10800518 	cmpnei	r2,r2,20
  81164c:	1000031e 	bne	r2,zero,81165c <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  811650:	00800f84 	movi	r2,62
  811654:	e0bfff15 	stw	r2,-4(fp)
  811658:	0000e806 	br	8119fc <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  81165c:	e0bffe03 	ldbu	r2,-8(fp)
  811660:	10800530 	cmpltui	r2,r2,20
  811664:	1000061e 	bne	r2,zero,811680 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  811668:	e0bffe03 	ldbu	r2,-8(fp)
  81166c:	10803fe0 	cmpeqi	r2,r2,255
  811670:	1000031e 	bne	r2,zero,811680 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  811674:	00800a84 	movi	r2,42
  811678:	e0bfff15 	stw	r2,-4(fp)
  81167c:	0000df06 	br	8119fc <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811680:	0005303a 	rdctl	r2,status
  811684:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811688:	e0fffa17 	ldw	r3,-24(fp)
  81168c:	00bfff84 	movi	r2,-2
  811690:	1884703a 	and	r2,r3,r2
  811694:	1001703a 	wrctl	status,r2
  
  return context;
  811698:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  81169c:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8116a0:	e0bffe03 	ldbu	r2,-8(fp)
  8116a4:	10803fd8 	cmpnei	r2,r2,255
  8116a8:	1000051e 	bne	r2,zero,8116c0 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8116ac:	008020b4 	movhi	r2,130
  8116b0:	10a53704 	addi	r2,r2,-27428
  8116b4:	10800017 	ldw	r2,0(r2)
  8116b8:	10800c83 	ldbu	r2,50(r2)
  8116bc:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8116c0:	e0bffe03 	ldbu	r2,-8(fp)
  8116c4:	00c020b4 	movhi	r3,130
  8116c8:	18c1bd04 	addi	r3,r3,1780
  8116cc:	1085883a 	add	r2,r2,r2
  8116d0:	1085883a 	add	r2,r2,r2
  8116d4:	10c5883a 	add	r2,r2,r3
  8116d8:	10800017 	ldw	r2,0(r2)
  8116dc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  8116e0:	e0bffc17 	ldw	r2,-16(fp)
  8116e4:	1004c03a 	cmpne	r2,r2,zero
  8116e8:	1000071e 	bne	r2,zero,811708 <OSTaskDel+0x100>
  8116ec:	e0bffb17 	ldw	r2,-20(fp)
  8116f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116f4:	e0bff917 	ldw	r2,-28(fp)
  8116f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8116fc:	008010c4 	movi	r2,67
  811700:	e0bfff15 	stw	r2,-4(fp)
  811704:	0000bd06 	br	8119fc <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  811708:	e0bffc17 	ldw	r2,-16(fp)
  81170c:	10800058 	cmpnei	r2,r2,1
  811710:	1000071e 	bne	r2,zero,811730 <OSTaskDel+0x128>
  811714:	e0bffb17 	ldw	r2,-20(fp)
  811718:	e0bff815 	stw	r2,-32(fp)
  81171c:	e0bff817 	ldw	r2,-32(fp)
  811720:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811724:	00800f44 	movi	r2,61
  811728:	e0bfff15 	stw	r2,-4(fp)
  81172c:	0000b306 	br	8119fc <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  811730:	e0bffc17 	ldw	r2,-16(fp)
  811734:	10800d03 	ldbu	r2,52(r2)
  811738:	11003fcc 	andi	r4,r2,255
  81173c:	e0bffc17 	ldw	r2,-16(fp)
  811740:	10800d03 	ldbu	r2,52(r2)
  811744:	10c03fcc 	andi	r3,r2,255
  811748:	008020b4 	movhi	r2,130
  81174c:	10a53444 	addi	r2,r2,-27439
  811750:	10c5883a 	add	r2,r2,r3
  811754:	10800003 	ldbu	r2,0(r2)
  811758:	1007883a 	mov	r3,r2
  81175c:	e0bffc17 	ldw	r2,-16(fp)
  811760:	10800d43 	ldbu	r2,53(r2)
  811764:	0084303a 	nor	r2,zero,r2
  811768:	1884703a 	and	r2,r3,r2
  81176c:	1007883a 	mov	r3,r2
  811770:	008020b4 	movhi	r2,130
  811774:	10a53444 	addi	r2,r2,-27439
  811778:	1105883a 	add	r2,r2,r4
  81177c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  811780:	e0bffc17 	ldw	r2,-16(fp)
  811784:	10800d03 	ldbu	r2,52(r2)
  811788:	10c03fcc 	andi	r3,r2,255
  81178c:	008020b4 	movhi	r2,130
  811790:	10a53444 	addi	r2,r2,-27439
  811794:	10c5883a 	add	r2,r2,r3
  811798:	10800003 	ldbu	r2,0(r2)
  81179c:	10803fcc 	andi	r2,r2,255
  8117a0:	1004c03a 	cmpne	r2,r2,zero
  8117a4:	10000c1e 	bne	r2,zero,8117d8 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  8117a8:	e0bffc17 	ldw	r2,-16(fp)
  8117ac:	10800d83 	ldbu	r2,54(r2)
  8117b0:	0084303a 	nor	r2,zero,r2
  8117b4:	1007883a 	mov	r3,r2
  8117b8:	008020b4 	movhi	r2,130
  8117bc:	10a53404 	addi	r2,r2,-27440
  8117c0:	10800003 	ldbu	r2,0(r2)
  8117c4:	1884703a 	and	r2,r3,r2
  8117c8:	1007883a 	mov	r3,r2
  8117cc:	008020b4 	movhi	r2,130
  8117d0:	10a53404 	addi	r2,r2,-27440
  8117d4:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8117d8:	e0bffc17 	ldw	r2,-16(fp)
  8117dc:	10800717 	ldw	r2,28(r2)
  8117e0:	1005003a 	cmpeq	r2,r2,zero
  8117e4:	1000041e 	bne	r2,zero,8117f8 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8117e8:	e0bffc17 	ldw	r2,-16(fp)
  8117ec:	11400717 	ldw	r5,28(r2)
  8117f0:	e13ffc17 	ldw	r4,-16(fp)
  8117f4:	080bdc40 	call	80bdc4 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  8117f8:	e0bffc17 	ldw	r2,-16(fp)
  8117fc:	10800817 	ldw	r2,32(r2)
  811800:	1005003a 	cmpeq	r2,r2,zero
  811804:	1000041e 	bne	r2,zero,811818 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  811808:	e0bffc17 	ldw	r2,-16(fp)
  81180c:	11400817 	ldw	r5,32(r2)
  811810:	e13ffc17 	ldw	r4,-16(fp)
  811814:	080be7c0 	call	80be7c <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  811818:	e0bffc17 	ldw	r2,-16(fp)
  81181c:	10800a17 	ldw	r2,40(r2)
  811820:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  811824:	e0bffd17 	ldw	r2,-12(fp)
  811828:	1005003a 	cmpeq	r2,r2,zero
  81182c:	1000021e 	bne	r2,zero,811838 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  811830:	e13ffd17 	ldw	r4,-12(fp)
  811834:	080e5100 	call	80e510 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  811838:	e0bffc17 	ldw	r2,-16(fp)
  81183c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  811840:	e0bffc17 	ldw	r2,-16(fp)
  811844:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  811848:	e0bffc17 	ldw	r2,-16(fp)
  81184c:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  811850:	008020b4 	movhi	r2,130
  811854:	10a52804 	addi	r2,r2,-27488
  811858:	10800003 	ldbu	r2,0(r2)
  81185c:	10803fcc 	andi	r2,r2,255
  811860:	10803fe0 	cmpeqi	r2,r2,255
  811864:	1000081e 	bne	r2,zero,811888 <OSTaskDel+0x280>
        OSLockNesting++;
  811868:	008020b4 	movhi	r2,130
  81186c:	10a52804 	addi	r2,r2,-27488
  811870:	10800003 	ldbu	r2,0(r2)
  811874:	10800044 	addi	r2,r2,1
  811878:	1007883a 	mov	r3,r2
  81187c:	008020b4 	movhi	r2,130
  811880:	10a52804 	addi	r2,r2,-27488
  811884:	10c00005 	stb	r3,0(r2)
  811888:	e0bffb17 	ldw	r2,-20(fp)
  81188c:	e0bff715 	stw	r2,-36(fp)
  811890:	e0bff717 	ldw	r2,-36(fp)
  811894:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  811898:	080b9b00 	call	80b9b0 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81189c:	0005303a 	rdctl	r2,status
  8118a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8118a4:	e0fff617 	ldw	r3,-40(fp)
  8118a8:	00bfff84 	movi	r2,-2
  8118ac:	1884703a 	and	r2,r3,r2
  8118b0:	1001703a 	wrctl	status,r2
  
  return context;
  8118b4:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8118b8:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8118bc:	008020b4 	movhi	r2,130
  8118c0:	10a52804 	addi	r2,r2,-27488
  8118c4:	10800003 	ldbu	r2,0(r2)
  8118c8:	10803fcc 	andi	r2,r2,255
  8118cc:	1005003a 	cmpeq	r2,r2,zero
  8118d0:	1000081e 	bne	r2,zero,8118f4 <OSTaskDel+0x2ec>
        OSLockNesting--;
  8118d4:	008020b4 	movhi	r2,130
  8118d8:	10a52804 	addi	r2,r2,-27488
  8118dc:	10800003 	ldbu	r2,0(r2)
  8118e0:	10bfffc4 	addi	r2,r2,-1
  8118e4:	1007883a 	mov	r3,r2
  8118e8:	008020b4 	movhi	r2,130
  8118ec:	10a52804 	addi	r2,r2,-27488
  8118f0:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  8118f4:	e13ffc17 	ldw	r4,-16(fp)
  8118f8:	08151d00 	call	8151d0 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  8118fc:	008020b4 	movhi	r2,130
  811900:	10a53044 	addi	r2,r2,-27455
  811904:	10800003 	ldbu	r2,0(r2)
  811908:	10bfffc4 	addi	r2,r2,-1
  81190c:	1007883a 	mov	r3,r2
  811910:	008020b4 	movhi	r2,130
  811914:	10a53044 	addi	r2,r2,-27455
  811918:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  81191c:	e0bffe03 	ldbu	r2,-8(fp)
  811920:	00c020b4 	movhi	r3,130
  811924:	18c1bd04 	addi	r3,r3,1780
  811928:	1085883a 	add	r2,r2,r2
  81192c:	1085883a 	add	r2,r2,r2
  811930:	10c5883a 	add	r2,r2,r3
  811934:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  811938:	e0bffc17 	ldw	r2,-16(fp)
  81193c:	10800617 	ldw	r2,24(r2)
  811940:	1004c03a 	cmpne	r2,r2,zero
  811944:	1000091e 	bne	r2,zero,81196c <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  811948:	e0bffc17 	ldw	r2,-16(fp)
  81194c:	10800517 	ldw	r2,20(r2)
  811950:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  811954:	e0bffc17 	ldw	r2,-16(fp)
  811958:	10c00517 	ldw	r3,20(r2)
  81195c:	008020b4 	movhi	r2,130
  811960:	10a52b04 	addi	r2,r2,-27476
  811964:	10c00015 	stw	r3,0(r2)
  811968:	00000a06 	br	811994 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  81196c:	e0bffc17 	ldw	r2,-16(fp)
  811970:	10c00617 	ldw	r3,24(r2)
  811974:	e0bffc17 	ldw	r2,-16(fp)
  811978:	10800517 	ldw	r2,20(r2)
  81197c:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  811980:	e0bffc17 	ldw	r2,-16(fp)
  811984:	10c00517 	ldw	r3,20(r2)
  811988:	e0bffc17 	ldw	r2,-16(fp)
  81198c:	10800617 	ldw	r2,24(r2)
  811990:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  811994:	008020b4 	movhi	r2,130
  811998:	10a52f04 	addi	r2,r2,-27460
  81199c:	10c00017 	ldw	r3,0(r2)
  8119a0:	e0bffc17 	ldw	r2,-16(fp)
  8119a4:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  8119a8:	00c020b4 	movhi	r3,130
  8119ac:	18e52f04 	addi	r3,r3,-27460
  8119b0:	e0bffc17 	ldw	r2,-16(fp)
  8119b4:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  8119b8:	e0fffc17 	ldw	r3,-16(fp)
  8119bc:	00800fc4 	movi	r2,63
  8119c0:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8119c4:	e0bffc17 	ldw	r2,-16(fp)
  8119c8:	10001345 	stb	zero,77(r2)
  8119cc:	e0bffb17 	ldw	r2,-20(fp)
  8119d0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119d4:	e0bff517 	ldw	r2,-44(fp)
  8119d8:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8119dc:	008020b4 	movhi	r2,130
  8119e0:	10a52844 	addi	r2,r2,-27487
  8119e4:	10800003 	ldbu	r2,0(r2)
  8119e8:	10803fcc 	andi	r2,r2,255
  8119ec:	10800058 	cmpnei	r2,r2,1
  8119f0:	1000011e 	bne	r2,zero,8119f8 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  8119f4:	080c40c0 	call	80c40c <OS_Sched>
    }
    return (OS_ERR_NONE);
  8119f8:	e03fff15 	stw	zero,-4(fp)
  8119fc:	e0bfff17 	ldw	r2,-4(fp)
}
  811a00:	e037883a 	mov	sp,fp
  811a04:	dfc00117 	ldw	ra,4(sp)
  811a08:	df000017 	ldw	fp,0(sp)
  811a0c:	dec00204 	addi	sp,sp,8
  811a10:	f800283a 	ret

00811a14 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  811a14:	defff404 	addi	sp,sp,-48
  811a18:	df000b15 	stw	fp,44(sp)
  811a1c:	df000b04 	addi	fp,sp,44
  811a20:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811a24:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  811a28:	e0bffe03 	ldbu	r2,-8(fp)
  811a2c:	10800518 	cmpnei	r2,r2,20
  811a30:	1000031e 	bne	r2,zero,811a40 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  811a34:	00800f84 	movi	r2,62
  811a38:	e0bfff15 	stw	r2,-4(fp)
  811a3c:	00004c06 	br	811b70 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  811a40:	e0bffe03 	ldbu	r2,-8(fp)
  811a44:	10800530 	cmpltui	r2,r2,20
  811a48:	1000061e 	bne	r2,zero,811a64 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  811a4c:	e0bffe03 	ldbu	r2,-8(fp)
  811a50:	10803fe0 	cmpeqi	r2,r2,255
  811a54:	1000031e 	bne	r2,zero,811a64 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  811a58:	00800a84 	movi	r2,42
  811a5c:	e0bfff15 	stw	r2,-4(fp)
  811a60:	00004306 	br	811b70 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  811a64:	e0bffe03 	ldbu	r2,-8(fp)
  811a68:	10803fd8 	cmpnei	r2,r2,255
  811a6c:	1000141e 	bne	r2,zero,811ac0 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811a70:	0005303a 	rdctl	r2,status
  811a74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811a78:	e0fffa17 	ldw	r3,-24(fp)
  811a7c:	00bfff84 	movi	r2,-2
  811a80:	1884703a 	and	r2,r3,r2
  811a84:	1001703a 	wrctl	status,r2
  
  return context;
  811a88:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  811a8c:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  811a90:	008020b4 	movhi	r2,130
  811a94:	10a53704 	addi	r2,r2,-27428
  811a98:	10800017 	ldw	r2,0(r2)
  811a9c:	10800dc3 	ldbu	r2,55(r2)
  811aa0:	e0bffd05 	stb	r2,-12(fp)
  811aa4:	e0bffb17 	ldw	r2,-20(fp)
  811aa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811aac:	e0bff917 	ldw	r2,-28(fp)
  811ab0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  811ab4:	e0bffd03 	ldbu	r2,-12(fp)
  811ab8:	e0bfff15 	stw	r2,-4(fp)
  811abc:	00002c06 	br	811b70 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811ac0:	0005303a 	rdctl	r2,status
  811ac4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ac8:	e0fff817 	ldw	r3,-32(fp)
  811acc:	00bfff84 	movi	r2,-2
  811ad0:	1884703a 	and	r2,r3,r2
  811ad4:	1001703a 	wrctl	status,r2
  
  return context;
  811ad8:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  811adc:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  811ae0:	e0bffe03 	ldbu	r2,-8(fp)
  811ae4:	00c020b4 	movhi	r3,130
  811ae8:	18c1bd04 	addi	r3,r3,1780
  811aec:	1085883a 	add	r2,r2,r2
  811af0:	1085883a 	add	r2,r2,r2
  811af4:	10c5883a 	add	r2,r2,r3
  811af8:	10800017 	ldw	r2,0(r2)
  811afc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  811b00:	e0bffc17 	ldw	r2,-16(fp)
  811b04:	1004c03a 	cmpne	r2,r2,zero
  811b08:	1000071e 	bne	r2,zero,811b28 <OSTaskDelReq+0x114>
  811b0c:	e0bffb17 	ldw	r2,-20(fp)
  811b10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811b14:	e0bff717 	ldw	r2,-36(fp)
  811b18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  811b1c:	008010c4 	movi	r2,67
  811b20:	e0bfff15 	stw	r2,-4(fp)
  811b24:	00001206 	br	811b70 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  811b28:	e0bffc17 	ldw	r2,-16(fp)
  811b2c:	10800058 	cmpnei	r2,r2,1
  811b30:	1000071e 	bne	r2,zero,811b50 <OSTaskDelReq+0x13c>
  811b34:	e0bffb17 	ldw	r2,-20(fp)
  811b38:	e0bff615 	stw	r2,-40(fp)
  811b3c:	e0bff617 	ldw	r2,-40(fp)
  811b40:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  811b44:	00800f44 	movi	r2,61
  811b48:	e0bfff15 	stw	r2,-4(fp)
  811b4c:	00000806 	br	811b70 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  811b50:	e0fffc17 	ldw	r3,-16(fp)
  811b54:	00800fc4 	movi	r2,63
  811b58:	18800dc5 	stb	r2,55(r3)
  811b5c:	e0bffb17 	ldw	r2,-20(fp)
  811b60:	e0bff515 	stw	r2,-44(fp)
  811b64:	e0bff517 	ldw	r2,-44(fp)
  811b68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811b6c:	e03fff15 	stw	zero,-4(fp)
  811b70:	e0bfff17 	ldw	r2,-4(fp)
}
  811b74:	e037883a 	mov	sp,fp
  811b78:	df000017 	ldw	fp,0(sp)
  811b7c:	dec00104 	addi	sp,sp,4
  811b80:	f800283a 	ret

00811b84 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  811b84:	defff304 	addi	sp,sp,-52
  811b88:	dfc00c15 	stw	ra,48(sp)
  811b8c:	df000b15 	stw	fp,44(sp)
  811b90:	df000b04 	addi	fp,sp,44
  811b94:	e17ffd15 	stw	r5,-12(fp)
  811b98:	e1bffe15 	stw	r6,-8(fp)
  811b9c:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  811ba0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  811ba4:	e0bffe17 	ldw	r2,-8(fp)
  811ba8:	1004c03a 	cmpne	r2,r2,zero
  811bac:	1000021e 	bne	r2,zero,811bb8 <OSTaskNameGet+0x34>
        return (0);
  811bb0:	e03fff15 	stw	zero,-4(fp)
  811bb4:	00005b06 	br	811d24 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  811bb8:	e0bffc03 	ldbu	r2,-16(fp)
  811bbc:	10800570 	cmpltui	r2,r2,21
  811bc0:	1000081e 	bne	r2,zero,811be4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  811bc4:	e0bffc03 	ldbu	r2,-16(fp)
  811bc8:	10803fe0 	cmpeqi	r2,r2,255
  811bcc:	1000051e 	bne	r2,zero,811be4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  811bd0:	e0fffe17 	ldw	r3,-8(fp)
  811bd4:	00800a84 	movi	r2,42
  811bd8:	18800005 	stb	r2,0(r3)
            return (0);
  811bdc:	e03fff15 	stw	zero,-4(fp)
  811be0:	00005006 	br	811d24 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  811be4:	e0bffd17 	ldw	r2,-12(fp)
  811be8:	1004c03a 	cmpne	r2,r2,zero
  811bec:	1000051e 	bne	r2,zero,811c04 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  811bf0:	e0fffe17 	ldw	r3,-8(fp)
  811bf4:	00800304 	movi	r2,12
  811bf8:	18800005 	stb	r2,0(r3)
        return (0);
  811bfc:	e03fff15 	stw	zero,-4(fp)
  811c00:	00004806 	br	811d24 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  811c04:	008020b4 	movhi	r2,130
  811c08:	10a53604 	addi	r2,r2,-27432
  811c0c:	10800003 	ldbu	r2,0(r2)
  811c10:	10803fcc 	andi	r2,r2,255
  811c14:	1005003a 	cmpeq	r2,r2,zero
  811c18:	1000051e 	bne	r2,zero,811c30 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  811c1c:	e0fffe17 	ldw	r3,-8(fp)
  811c20:	00800444 	movi	r2,17
  811c24:	18800005 	stb	r2,0(r3)
        return (0);
  811c28:	e03fff15 	stw	zero,-4(fp)
  811c2c:	00003d06 	br	811d24 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811c30:	0005303a 	rdctl	r2,status
  811c34:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811c38:	e0fff817 	ldw	r3,-32(fp)
  811c3c:	00bfff84 	movi	r2,-2
  811c40:	1884703a 	and	r2,r3,r2
  811c44:	1001703a 	wrctl	status,r2
  
  return context;
  811c48:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  811c4c:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  811c50:	e0bffc03 	ldbu	r2,-16(fp)
  811c54:	10803fd8 	cmpnei	r2,r2,255
  811c58:	1000051e 	bne	r2,zero,811c70 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  811c5c:	008020b4 	movhi	r2,130
  811c60:	10a53704 	addi	r2,r2,-27428
  811c64:	10800017 	ldw	r2,0(r2)
  811c68:	10800c83 	ldbu	r2,50(r2)
  811c6c:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811c70:	e0bffc03 	ldbu	r2,-16(fp)
  811c74:	00c020b4 	movhi	r3,130
  811c78:	18c1bd04 	addi	r3,r3,1780
  811c7c:	1085883a 	add	r2,r2,r2
  811c80:	1085883a 	add	r2,r2,r2
  811c84:	10c5883a 	add	r2,r2,r3
  811c88:	10800017 	ldw	r2,0(r2)
  811c8c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  811c90:	e0bffb17 	ldw	r2,-20(fp)
  811c94:	1004c03a 	cmpne	r2,r2,zero
  811c98:	1000091e 	bne	r2,zero,811cc0 <OSTaskNameGet+0x13c>
  811c9c:	e0bff917 	ldw	r2,-28(fp)
  811ca0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ca4:	e0bff717 	ldw	r2,-36(fp)
  811ca8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811cac:	e0fffe17 	ldw	r3,-8(fp)
  811cb0:	008010c4 	movi	r2,67
  811cb4:	18800005 	stb	r2,0(r3)
        return (0);
  811cb8:	e03fff15 	stw	zero,-4(fp)
  811cbc:	00001906 	br	811d24 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  811cc0:	e0bffb17 	ldw	r2,-20(fp)
  811cc4:	10800058 	cmpnei	r2,r2,1
  811cc8:	1000091e 	bne	r2,zero,811cf0 <OSTaskNameGet+0x16c>
  811ccc:	e0bff917 	ldw	r2,-28(fp)
  811cd0:	e0bff615 	stw	r2,-40(fp)
  811cd4:	e0bff617 	ldw	r2,-40(fp)
  811cd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811cdc:	e0fffe17 	ldw	r3,-8(fp)
  811ce0:	008010c4 	movi	r2,67
  811ce4:	18800005 	stb	r2,0(r3)
        return (0);
  811ce8:	e03fff15 	stw	zero,-4(fp)
  811cec:	00000d06 	br	811d24 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  811cf0:	e0bffb17 	ldw	r2,-20(fp)
  811cf4:	11401304 	addi	r5,r2,76
  811cf8:	e13ffd17 	ldw	r4,-12(fp)
  811cfc:	080c5500 	call	80c550 <OS_StrCopy>
  811d00:	e0bffa05 	stb	r2,-24(fp)
  811d04:	e0bff917 	ldw	r2,-28(fp)
  811d08:	e0bff515 	stw	r2,-44(fp)
  811d0c:	e0bff517 	ldw	r2,-44(fp)
  811d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811d14:	e0bffe17 	ldw	r2,-8(fp)
  811d18:	10000005 	stb	zero,0(r2)
    return (len);
  811d1c:	e0bffa03 	ldbu	r2,-24(fp)
  811d20:	e0bfff15 	stw	r2,-4(fp)
  811d24:	e0bfff17 	ldw	r2,-4(fp)
}
  811d28:	e037883a 	mov	sp,fp
  811d2c:	dfc00117 	ldw	ra,4(sp)
  811d30:	df000017 	ldw	fp,0(sp)
  811d34:	dec00204 	addi	sp,sp,8
  811d38:	f800283a 	ret

00811d3c <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  811d3c:	defff304 	addi	sp,sp,-52
  811d40:	dfc00c15 	stw	ra,48(sp)
  811d44:	df000b15 	stw	fp,44(sp)
  811d48:	df000b04 	addi	fp,sp,44
  811d4c:	e17ffe15 	stw	r5,-8(fp)
  811d50:	e1bfff15 	stw	r6,-4(fp)
  811d54:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  811d58:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  811d5c:	e0bfff17 	ldw	r2,-4(fp)
  811d60:	1005003a 	cmpeq	r2,r2,zero
  811d64:	1000611e 	bne	r2,zero,811eec <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  811d68:	e0bffd03 	ldbu	r2,-12(fp)
  811d6c:	10800570 	cmpltui	r2,r2,21
  811d70:	1000071e 	bne	r2,zero,811d90 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  811d74:	e0bffd03 	ldbu	r2,-12(fp)
  811d78:	10803fe0 	cmpeqi	r2,r2,255
  811d7c:	1000041e 	bne	r2,zero,811d90 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  811d80:	e0ffff17 	ldw	r3,-4(fp)
  811d84:	00800a84 	movi	r2,42
  811d88:	18800005 	stb	r2,0(r3)
            return;
  811d8c:	00005706 	br	811eec <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  811d90:	e0bffe17 	ldw	r2,-8(fp)
  811d94:	1004c03a 	cmpne	r2,r2,zero
  811d98:	1000041e 	bne	r2,zero,811dac <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  811d9c:	e0ffff17 	ldw	r3,-4(fp)
  811da0:	00800304 	movi	r2,12
  811da4:	18800005 	stb	r2,0(r3)
        return;
  811da8:	00005006 	br	811eec <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  811dac:	008020b4 	movhi	r2,130
  811db0:	10a53604 	addi	r2,r2,-27432
  811db4:	10800003 	ldbu	r2,0(r2)
  811db8:	10803fcc 	andi	r2,r2,255
  811dbc:	1005003a 	cmpeq	r2,r2,zero
  811dc0:	1000041e 	bne	r2,zero,811dd4 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  811dc4:	e0ffff17 	ldw	r3,-4(fp)
  811dc8:	00800484 	movi	r2,18
  811dcc:	18800005 	stb	r2,0(r3)
        return;
  811dd0:	00004606 	br	811eec <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811dd4:	0005303a 	rdctl	r2,status
  811dd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811ddc:	e0fff917 	ldw	r3,-28(fp)
  811de0:	00bfff84 	movi	r2,-2
  811de4:	1884703a 	and	r2,r3,r2
  811de8:	1001703a 	wrctl	status,r2
  
  return context;
  811dec:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811df0:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  811df4:	e0bffd03 	ldbu	r2,-12(fp)
  811df8:	10803fd8 	cmpnei	r2,r2,255
  811dfc:	1000051e 	bne	r2,zero,811e14 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  811e00:	008020b4 	movhi	r2,130
  811e04:	10a53704 	addi	r2,r2,-27428
  811e08:	10800017 	ldw	r2,0(r2)
  811e0c:	10800c83 	ldbu	r2,50(r2)
  811e10:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  811e14:	e0bffd03 	ldbu	r2,-12(fp)
  811e18:	00c020b4 	movhi	r3,130
  811e1c:	18c1bd04 	addi	r3,r3,1780
  811e20:	1085883a 	add	r2,r2,r2
  811e24:	1085883a 	add	r2,r2,r2
  811e28:	10c5883a 	add	r2,r2,r3
  811e2c:	10800017 	ldw	r2,0(r2)
  811e30:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  811e34:	e0bffb17 	ldw	r2,-20(fp)
  811e38:	1004c03a 	cmpne	r2,r2,zero
  811e3c:	1000081e 	bne	r2,zero,811e60 <OSTaskNameSet+0x124>
  811e40:	e0bffa17 	ldw	r2,-24(fp)
  811e44:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811e48:	e0bff817 	ldw	r2,-32(fp)
  811e4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811e50:	e0ffff17 	ldw	r3,-4(fp)
  811e54:	008010c4 	movi	r2,67
  811e58:	18800005 	stb	r2,0(r3)
        return;
  811e5c:	00002306 	br	811eec <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  811e60:	e0bffb17 	ldw	r2,-20(fp)
  811e64:	10800058 	cmpnei	r2,r2,1
  811e68:	1000081e 	bne	r2,zero,811e8c <OSTaskNameSet+0x150>
  811e6c:	e0bffa17 	ldw	r2,-24(fp)
  811e70:	e0bff715 	stw	r2,-36(fp)
  811e74:	e0bff717 	ldw	r2,-36(fp)
  811e78:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  811e7c:	e0ffff17 	ldw	r3,-4(fp)
  811e80:	008010c4 	movi	r2,67
  811e84:	18800005 	stb	r2,0(r3)
        return;
  811e88:	00001806 	br	811eec <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  811e8c:	e13ffe17 	ldw	r4,-8(fp)
  811e90:	080c5d00 	call	80c5d0 <OS_StrLen>
  811e94:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  811e98:	e0bffc03 	ldbu	r2,-16(fp)
  811e9c:	10800830 	cmpltui	r2,r2,32
  811ea0:	1000081e 	bne	r2,zero,811ec4 <OSTaskNameSet+0x188>
  811ea4:	e0bffa17 	ldw	r2,-24(fp)
  811ea8:	e0bff615 	stw	r2,-40(fp)
  811eac:	e0bff617 	ldw	r2,-40(fp)
  811eb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  811eb4:	e0ffff17 	ldw	r3,-4(fp)
  811eb8:	00801044 	movi	r2,65
  811ebc:	18800005 	stb	r2,0(r3)
        return;
  811ec0:	00000a06 	br	811eec <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  811ec4:	e0bffb17 	ldw	r2,-20(fp)
  811ec8:	11001304 	addi	r4,r2,76
  811ecc:	e17ffe17 	ldw	r5,-8(fp)
  811ed0:	080c5500 	call	80c550 <OS_StrCopy>
  811ed4:	e0bffa17 	ldw	r2,-24(fp)
  811ed8:	e0bff515 	stw	r2,-44(fp)
  811edc:	e0bff517 	ldw	r2,-44(fp)
  811ee0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  811ee4:	e0bfff17 	ldw	r2,-4(fp)
  811ee8:	10000005 	stb	zero,0(r2)
}
  811eec:	e037883a 	mov	sp,fp
  811ef0:	dfc00117 	ldw	ra,4(sp)
  811ef4:	df000017 	ldw	fp,0(sp)
  811ef8:	dec00204 	addi	sp,sp,8
  811efc:	f800283a 	ret

00811f00 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  811f00:	defff304 	addi	sp,sp,-52
  811f04:	dfc00c15 	stw	ra,48(sp)
  811f08:	df000b15 	stw	fp,44(sp)
  811f0c:	df000b04 	addi	fp,sp,44
  811f10:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  811f14:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  811f18:	e0bffe03 	ldbu	r2,-8(fp)
  811f1c:	10800530 	cmpltui	r2,r2,20
  811f20:	1000031e 	bne	r2,zero,811f30 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  811f24:	00800a84 	movi	r2,42
  811f28:	e0bfff15 	stw	r2,-4(fp)
  811f2c:	00007406 	br	812100 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811f30:	0005303a 	rdctl	r2,status
  811f34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811f38:	e0fffb17 	ldw	r3,-20(fp)
  811f3c:	00bfff84 	movi	r2,-2
  811f40:	1884703a 	and	r2,r3,r2
  811f44:	1001703a 	wrctl	status,r2
  
  return context;
  811f48:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811f4c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  811f50:	e0bffe03 	ldbu	r2,-8(fp)
  811f54:	00c020b4 	movhi	r3,130
  811f58:	18c1bd04 	addi	r3,r3,1780
  811f5c:	1085883a 	add	r2,r2,r2
  811f60:	1085883a 	add	r2,r2,r2
  811f64:	10c5883a 	add	r2,r2,r3
  811f68:	10800017 	ldw	r2,0(r2)
  811f6c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  811f70:	e0bffd17 	ldw	r2,-12(fp)
  811f74:	1004c03a 	cmpne	r2,r2,zero
  811f78:	1000071e 	bne	r2,zero,811f98 <OSTaskResume+0x98>
  811f7c:	e0bffc17 	ldw	r2,-16(fp)
  811f80:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811f84:	e0bffa17 	ldw	r2,-24(fp)
  811f88:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  811f8c:	00801184 	movi	r2,70
  811f90:	e0bfff15 	stw	r2,-4(fp)
  811f94:	00005a06 	br	812100 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  811f98:	e0bffd17 	ldw	r2,-12(fp)
  811f9c:	10800058 	cmpnei	r2,r2,1
  811fa0:	1000071e 	bne	r2,zero,811fc0 <OSTaskResume+0xc0>
  811fa4:	e0bffc17 	ldw	r2,-16(fp)
  811fa8:	e0bff915 	stw	r2,-28(fp)
  811fac:	e0bff917 	ldw	r2,-28(fp)
  811fb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  811fb4:	008010c4 	movi	r2,67
  811fb8:	e0bfff15 	stw	r2,-4(fp)
  811fbc:	00005006 	br	812100 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  811fc0:	e0bffd17 	ldw	r2,-12(fp)
  811fc4:	10800c03 	ldbu	r2,48(r2)
  811fc8:	10803fcc 	andi	r2,r2,255
  811fcc:	1080020c 	andi	r2,r2,8
  811fd0:	1005003a 	cmpeq	r2,r2,zero
  811fd4:	1000441e 	bne	r2,zero,8120e8 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  811fd8:	e0bffd17 	ldw	r2,-12(fp)
  811fdc:	10c00c03 	ldbu	r3,48(r2)
  811fe0:	00bffdc4 	movi	r2,-9
  811fe4:	1884703a 	and	r2,r3,r2
  811fe8:	1007883a 	mov	r3,r2
  811fec:	e0bffd17 	ldw	r2,-12(fp)
  811ff0:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  811ff4:	e0bffd17 	ldw	r2,-12(fp)
  811ff8:	10800c03 	ldbu	r2,48(r2)
  811ffc:	10803fcc 	andi	r2,r2,255
  812000:	1004c03a 	cmpne	r2,r2,zero
  812004:	1000321e 	bne	r2,zero,8120d0 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  812008:	e0bffd17 	ldw	r2,-12(fp)
  81200c:	10800b8b 	ldhu	r2,46(r2)
  812010:	10bfffcc 	andi	r2,r2,65535
  812014:	1004c03a 	cmpne	r2,r2,zero
  812018:	1000281e 	bne	r2,zero,8120bc <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  81201c:	e0bffd17 	ldw	r2,-12(fp)
  812020:	10c00d83 	ldbu	r3,54(r2)
  812024:	008020b4 	movhi	r2,130
  812028:	10a53404 	addi	r2,r2,-27440
  81202c:	10800003 	ldbu	r2,0(r2)
  812030:	1884b03a 	or	r2,r3,r2
  812034:	1007883a 	mov	r3,r2
  812038:	008020b4 	movhi	r2,130
  81203c:	10a53404 	addi	r2,r2,-27440
  812040:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812044:	e0bffd17 	ldw	r2,-12(fp)
  812048:	10800d03 	ldbu	r2,52(r2)
  81204c:	11003fcc 	andi	r4,r2,255
  812050:	e0bffd17 	ldw	r2,-12(fp)
  812054:	10800d03 	ldbu	r2,52(r2)
  812058:	10c03fcc 	andi	r3,r2,255
  81205c:	008020b4 	movhi	r2,130
  812060:	10a53444 	addi	r2,r2,-27439
  812064:	10c5883a 	add	r2,r2,r3
  812068:	10c00003 	ldbu	r3,0(r2)
  81206c:	e0bffd17 	ldw	r2,-12(fp)
  812070:	10800d43 	ldbu	r2,53(r2)
  812074:	1884b03a 	or	r2,r3,r2
  812078:	1007883a 	mov	r3,r2
  81207c:	008020b4 	movhi	r2,130
  812080:	10a53444 	addi	r2,r2,-27439
  812084:	1105883a 	add	r2,r2,r4
  812088:	10c00005 	stb	r3,0(r2)
  81208c:	e0bffc17 	ldw	r2,-16(fp)
  812090:	e0bff815 	stw	r2,-32(fp)
  812094:	e0bff817 	ldw	r2,-32(fp)
  812098:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  81209c:	008020b4 	movhi	r2,130
  8120a0:	10a52844 	addi	r2,r2,-27487
  8120a4:	10800003 	ldbu	r2,0(r2)
  8120a8:	10803fcc 	andi	r2,r2,255
  8120ac:	10800058 	cmpnei	r2,r2,1
  8120b0:	10000b1e 	bne	r2,zero,8120e0 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  8120b4:	080c40c0 	call	80c40c <OS_Sched>
  8120b8:	00000906 	br	8120e0 <OSTaskResume+0x1e0>
  8120bc:	e0bffc17 	ldw	r2,-16(fp)
  8120c0:	e0bff715 	stw	r2,-36(fp)
  8120c4:	e0bff717 	ldw	r2,-36(fp)
  8120c8:	1001703a 	wrctl	status,r2
  8120cc:	00000406 	br	8120e0 <OSTaskResume+0x1e0>
  8120d0:	e0bffc17 	ldw	r2,-16(fp)
  8120d4:	e0bff615 	stw	r2,-40(fp)
  8120d8:	e0bff617 	ldw	r2,-40(fp)
  8120dc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  8120e0:	e03fff15 	stw	zero,-4(fp)
  8120e4:	00000606 	br	812100 <OSTaskResume+0x200>
  8120e8:	e0bffc17 	ldw	r2,-16(fp)
  8120ec:	e0bff515 	stw	r2,-44(fp)
  8120f0:	e0bff517 	ldw	r2,-44(fp)
  8120f4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  8120f8:	00801104 	movi	r2,68
  8120fc:	e0bfff15 	stw	r2,-4(fp)
  812100:	e0bfff17 	ldw	r2,-4(fp)
}
  812104:	e037883a 	mov	sp,fp
  812108:	dfc00117 	ldw	ra,4(sp)
  81210c:	df000017 	ldw	fp,0(sp)
  812110:	dec00204 	addi	sp,sp,8
  812114:	f800283a 	ret

00812118 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  812118:	defff204 	addi	sp,sp,-56
  81211c:	df000d15 	stw	fp,52(sp)
  812120:	df000d04 	addi	fp,sp,52
  812124:	e17ffe15 	stw	r5,-8(fp)
  812128:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  81212c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  812130:	e0bffd03 	ldbu	r2,-12(fp)
  812134:	10800570 	cmpltui	r2,r2,21
  812138:	1000061e 	bne	r2,zero,812154 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  81213c:	e0bffd03 	ldbu	r2,-12(fp)
  812140:	10803fe0 	cmpeqi	r2,r2,255
  812144:	1000031e 	bne	r2,zero,812154 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  812148:	00800a84 	movi	r2,42
  81214c:	e0bfff15 	stw	r2,-4(fp)
  812150:	00006b06 	br	812300 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  812154:	e0bffe17 	ldw	r2,-8(fp)
  812158:	1004c03a 	cmpne	r2,r2,zero
  81215c:	1000031e 	bne	r2,zero,81216c <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  812160:	00800244 	movi	r2,9
  812164:	e0bfff15 	stw	r2,-4(fp)
  812168:	00006506 	br	812300 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  81216c:	e0bffe17 	ldw	r2,-8(fp)
  812170:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  812174:	e0bffe17 	ldw	r2,-8(fp)
  812178:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81217c:	0005303a 	rdctl	r2,status
  812180:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812184:	e0fff717 	ldw	r3,-36(fp)
  812188:	00bfff84 	movi	r2,-2
  81218c:	1884703a 	and	r2,r3,r2
  812190:	1001703a 	wrctl	status,r2
  
  return context;
  812194:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  812198:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  81219c:	e0bffd03 	ldbu	r2,-12(fp)
  8121a0:	10803fd8 	cmpnei	r2,r2,255
  8121a4:	1000051e 	bne	r2,zero,8121bc <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  8121a8:	008020b4 	movhi	r2,130
  8121ac:	10a53704 	addi	r2,r2,-27428
  8121b0:	10800017 	ldw	r2,0(r2)
  8121b4:	10800c83 	ldbu	r2,50(r2)
  8121b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8121bc:	e0bffd03 	ldbu	r2,-12(fp)
  8121c0:	00c020b4 	movhi	r3,130
  8121c4:	18c1bd04 	addi	r3,r3,1780
  8121c8:	1085883a 	add	r2,r2,r2
  8121cc:	1085883a 	add	r2,r2,r2
  8121d0:	10c5883a 	add	r2,r2,r3
  8121d4:	10800017 	ldw	r2,0(r2)
  8121d8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  8121dc:	e0bffc17 	ldw	r2,-16(fp)
  8121e0:	1004c03a 	cmpne	r2,r2,zero
  8121e4:	1000071e 	bne	r2,zero,812204 <OSTaskStkChk+0xec>
  8121e8:	e0bff817 	ldw	r2,-32(fp)
  8121ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121f0:	e0bff617 	ldw	r2,-40(fp)
  8121f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8121f8:	008010c4 	movi	r2,67
  8121fc:	e0bfff15 	stw	r2,-4(fp)
  812200:	00003f06 	br	812300 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812204:	e0bffc17 	ldw	r2,-16(fp)
  812208:	10800058 	cmpnei	r2,r2,1
  81220c:	1000071e 	bne	r2,zero,81222c <OSTaskStkChk+0x114>
  812210:	e0bff817 	ldw	r2,-32(fp)
  812214:	e0bff515 	stw	r2,-44(fp)
  812218:	e0bff517 	ldw	r2,-44(fp)
  81221c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812220:	008010c4 	movi	r2,67
  812224:	e0bfff15 	stw	r2,-4(fp)
  812228:	00003506 	br	812300 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  81222c:	e0bffc17 	ldw	r2,-16(fp)
  812230:	1080040b 	ldhu	r2,16(r2)
  812234:	10bfffcc 	andi	r2,r2,65535
  812238:	1080004c 	andi	r2,r2,1
  81223c:	1004c03a 	cmpne	r2,r2,zero
  812240:	1000071e 	bne	r2,zero,812260 <OSTaskStkChk+0x148>
  812244:	e0bff817 	ldw	r2,-32(fp)
  812248:	e0bff415 	stw	r2,-48(fp)
  81224c:	e0bff417 	ldw	r2,-48(fp)
  812250:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  812254:	00801144 	movi	r2,69
  812258:	e0bfff15 	stw	r2,-4(fp)
  81225c:	00002806 	br	812300 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  812260:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  812264:	e0bffc17 	ldw	r2,-16(fp)
  812268:	10800317 	ldw	r2,12(r2)
  81226c:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  812270:	e0bffc17 	ldw	r2,-16(fp)
  812274:	10800217 	ldw	r2,8(r2)
  812278:	e0bffb15 	stw	r2,-20(fp)
  81227c:	e0bff817 	ldw	r2,-32(fp)
  812280:	e0bff315 	stw	r2,-52(fp)
  812284:	e0bff317 	ldw	r2,-52(fp)
  812288:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81228c:	00000306 	br	81229c <OSTaskStkChk+0x184>
        nfree++;
  812290:	e0bffa17 	ldw	r2,-24(fp)
  812294:	10800044 	addi	r2,r2,1
  812298:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  81229c:	e0bffb17 	ldw	r2,-20(fp)
  8122a0:	10800017 	ldw	r2,0(r2)
  8122a4:	1005003a 	cmpeq	r2,r2,zero
  8122a8:	1007883a 	mov	r3,r2
  8122ac:	e0bffb17 	ldw	r2,-20(fp)
  8122b0:	10800104 	addi	r2,r2,4
  8122b4:	e0bffb15 	stw	r2,-20(fp)
  8122b8:	18803fcc 	andi	r2,r3,255
  8122bc:	1004c03a 	cmpne	r2,r2,zero
  8122c0:	103ff31e 	bne	r2,zero,812290 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  8122c4:	e0bffa17 	ldw	r2,-24(fp)
  8122c8:	1085883a 	add	r2,r2,r2
  8122cc:	1085883a 	add	r2,r2,r2
  8122d0:	1007883a 	mov	r3,r2
  8122d4:	e0bffe17 	ldw	r2,-8(fp)
  8122d8:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  8122dc:	e0fff917 	ldw	r3,-28(fp)
  8122e0:	e0bffa17 	ldw	r2,-24(fp)
  8122e4:	1885c83a 	sub	r2,r3,r2
  8122e8:	1085883a 	add	r2,r2,r2
  8122ec:	1085883a 	add	r2,r2,r2
  8122f0:	1007883a 	mov	r3,r2
  8122f4:	e0bffe17 	ldw	r2,-8(fp)
  8122f8:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  8122fc:	e03fff15 	stw	zero,-4(fp)
  812300:	e0bfff17 	ldw	r2,-4(fp)
}
  812304:	e037883a 	mov	sp,fp
  812308:	df000017 	ldw	fp,0(sp)
  81230c:	dec00104 	addi	sp,sp,4
  812310:	f800283a 	ret

00812314 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  812314:	defff404 	addi	sp,sp,-48
  812318:	dfc00b15 	stw	ra,44(sp)
  81231c:	df000a15 	stw	fp,40(sp)
  812320:	df000a04 	addi	fp,sp,40
  812324:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812328:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  81232c:	e0bffe03 	ldbu	r2,-8(fp)
  812330:	10800518 	cmpnei	r2,r2,20
  812334:	1000031e 	bne	r2,zero,812344 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  812338:	008011c4 	movi	r2,71
  81233c:	e0bfff15 	stw	r2,-4(fp)
  812340:	00007906 	br	812528 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  812344:	e0bffe03 	ldbu	r2,-8(fp)
  812348:	10800530 	cmpltui	r2,r2,20
  81234c:	1000061e 	bne	r2,zero,812368 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  812350:	e0bffe03 	ldbu	r2,-8(fp)
  812354:	10803fe0 	cmpeqi	r2,r2,255
  812358:	1000031e 	bne	r2,zero,812368 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  81235c:	00800a84 	movi	r2,42
  812360:	e0bfff15 	stw	r2,-4(fp)
  812364:	00007006 	br	812528 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812368:	0005303a 	rdctl	r2,status
  81236c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812370:	e0fff917 	ldw	r3,-28(fp)
  812374:	00bfff84 	movi	r2,-2
  812378:	1884703a 	and	r2,r3,r2
  81237c:	1001703a 	wrctl	status,r2
  
  return context;
  812380:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  812384:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  812388:	e0bffe03 	ldbu	r2,-8(fp)
  81238c:	10803fd8 	cmpnei	r2,r2,255
  812390:	1000081e 	bne	r2,zero,8123b4 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  812394:	008020b4 	movhi	r2,130
  812398:	10a53704 	addi	r2,r2,-27428
  81239c:	10800017 	ldw	r2,0(r2)
  8123a0:	10800c83 	ldbu	r2,50(r2)
  8123a4:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  8123a8:	00800044 	movi	r2,1
  8123ac:	e0bffd05 	stb	r2,-12(fp)
  8123b0:	00000b06 	br	8123e0 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  8123b4:	008020b4 	movhi	r2,130
  8123b8:	10a53704 	addi	r2,r2,-27428
  8123bc:	10800017 	ldw	r2,0(r2)
  8123c0:	10800c83 	ldbu	r2,50(r2)
  8123c4:	10c03fcc 	andi	r3,r2,255
  8123c8:	e0bffe03 	ldbu	r2,-8(fp)
  8123cc:	1880031e 	bne	r3,r2,8123dc <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  8123d0:	00800044 	movi	r2,1
  8123d4:	e0bffd05 	stb	r2,-12(fp)
  8123d8:	00000106 	br	8123e0 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  8123dc:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8123e0:	e0bffe03 	ldbu	r2,-8(fp)
  8123e4:	00c020b4 	movhi	r3,130
  8123e8:	18c1bd04 	addi	r3,r3,1780
  8123ec:	1085883a 	add	r2,r2,r2
  8123f0:	1085883a 	add	r2,r2,r2
  8123f4:	10c5883a 	add	r2,r2,r3
  8123f8:	10800017 	ldw	r2,0(r2)
  8123fc:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  812400:	e0bffc17 	ldw	r2,-16(fp)
  812404:	1004c03a 	cmpne	r2,r2,zero
  812408:	1000071e 	bne	r2,zero,812428 <OSTaskSuspend+0x114>
  81240c:	e0bffa17 	ldw	r2,-24(fp)
  812410:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812414:	e0bff817 	ldw	r2,-32(fp)
  812418:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  81241c:	00801204 	movi	r2,72
  812420:	e0bfff15 	stw	r2,-4(fp)
  812424:	00004006 	br	812528 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  812428:	e0bffc17 	ldw	r2,-16(fp)
  81242c:	10800058 	cmpnei	r2,r2,1
  812430:	1000071e 	bne	r2,zero,812450 <OSTaskSuspend+0x13c>
  812434:	e0bffa17 	ldw	r2,-24(fp)
  812438:	e0bff715 	stw	r2,-36(fp)
  81243c:	e0bff717 	ldw	r2,-36(fp)
  812440:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  812444:	008010c4 	movi	r2,67
  812448:	e0bfff15 	stw	r2,-4(fp)
  81244c:	00003606 	br	812528 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  812450:	e0bffc17 	ldw	r2,-16(fp)
  812454:	10800d03 	ldbu	r2,52(r2)
  812458:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  81245c:	e13ffb03 	ldbu	r4,-20(fp)
  812460:	e0fffb03 	ldbu	r3,-20(fp)
  812464:	008020b4 	movhi	r2,130
  812468:	10a53444 	addi	r2,r2,-27439
  81246c:	10c5883a 	add	r2,r2,r3
  812470:	10800003 	ldbu	r2,0(r2)
  812474:	1007883a 	mov	r3,r2
  812478:	e0bffc17 	ldw	r2,-16(fp)
  81247c:	10800d43 	ldbu	r2,53(r2)
  812480:	0084303a 	nor	r2,zero,r2
  812484:	1884703a 	and	r2,r3,r2
  812488:	1007883a 	mov	r3,r2
  81248c:	008020b4 	movhi	r2,130
  812490:	10a53444 	addi	r2,r2,-27439
  812494:	1105883a 	add	r2,r2,r4
  812498:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  81249c:	e0fffb03 	ldbu	r3,-20(fp)
  8124a0:	008020b4 	movhi	r2,130
  8124a4:	10a53444 	addi	r2,r2,-27439
  8124a8:	10c5883a 	add	r2,r2,r3
  8124ac:	10800003 	ldbu	r2,0(r2)
  8124b0:	10803fcc 	andi	r2,r2,255
  8124b4:	1004c03a 	cmpne	r2,r2,zero
  8124b8:	10000c1e 	bne	r2,zero,8124ec <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  8124bc:	e0bffc17 	ldw	r2,-16(fp)
  8124c0:	10800d83 	ldbu	r2,54(r2)
  8124c4:	0084303a 	nor	r2,zero,r2
  8124c8:	1007883a 	mov	r3,r2
  8124cc:	008020b4 	movhi	r2,130
  8124d0:	10a53404 	addi	r2,r2,-27440
  8124d4:	10800003 	ldbu	r2,0(r2)
  8124d8:	1884703a 	and	r2,r3,r2
  8124dc:	1007883a 	mov	r3,r2
  8124e0:	008020b4 	movhi	r2,130
  8124e4:	10a53404 	addi	r2,r2,-27440
  8124e8:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  8124ec:	e0bffc17 	ldw	r2,-16(fp)
  8124f0:	10800c03 	ldbu	r2,48(r2)
  8124f4:	10800214 	ori	r2,r2,8
  8124f8:	1007883a 	mov	r3,r2
  8124fc:	e0bffc17 	ldw	r2,-16(fp)
  812500:	10c00c05 	stb	r3,48(r2)
  812504:	e0bffa17 	ldw	r2,-24(fp)
  812508:	e0bff615 	stw	r2,-40(fp)
  81250c:	e0bff617 	ldw	r2,-40(fp)
  812510:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  812514:	e0bffd03 	ldbu	r2,-12(fp)
  812518:	10800058 	cmpnei	r2,r2,1
  81251c:	1000011e 	bne	r2,zero,812524 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  812520:	080c40c0 	call	80c40c <OS_Sched>
    }
    return (OS_ERR_NONE);
  812524:	e03fff15 	stw	zero,-4(fp)
  812528:	e0bfff17 	ldw	r2,-4(fp)
}
  81252c:	e037883a 	mov	sp,fp
  812530:	dfc00117 	ldw	ra,4(sp)
  812534:	df000017 	ldw	fp,0(sp)
  812538:	dec00204 	addi	sp,sp,8
  81253c:	f800283a 	ret

00812540 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  812540:	defff504 	addi	sp,sp,-44
  812544:	dfc00a15 	stw	ra,40(sp)
  812548:	df000915 	stw	fp,36(sp)
  81254c:	df000904 	addi	fp,sp,36
  812550:	e17ffe15 	stw	r5,-8(fp)
  812554:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812558:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  81255c:	e0bffd03 	ldbu	r2,-12(fp)
  812560:	10800570 	cmpltui	r2,r2,21
  812564:	1000061e 	bne	r2,zero,812580 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  812568:	e0bffd03 	ldbu	r2,-12(fp)
  81256c:	10803fe0 	cmpeqi	r2,r2,255
  812570:	1000031e 	bne	r2,zero,812580 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  812574:	00800a84 	movi	r2,42
  812578:	e0bfff15 	stw	r2,-4(fp)
  81257c:	00003b06 	br	81266c <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  812580:	e0bffe17 	ldw	r2,-8(fp)
  812584:	1004c03a 	cmpne	r2,r2,zero
  812588:	1000031e 	bne	r2,zero,812598 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  81258c:	00800244 	movi	r2,9
  812590:	e0bfff15 	stw	r2,-4(fp)
  812594:	00003506 	br	81266c <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812598:	0005303a 	rdctl	r2,status
  81259c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8125a0:	e0fffa17 	ldw	r3,-24(fp)
  8125a4:	00bfff84 	movi	r2,-2
  8125a8:	1884703a 	and	r2,r3,r2
  8125ac:	1001703a 	wrctl	status,r2
  
  return context;
  8125b0:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  8125b4:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  8125b8:	e0bffd03 	ldbu	r2,-12(fp)
  8125bc:	10803fd8 	cmpnei	r2,r2,255
  8125c0:	1000051e 	bne	r2,zero,8125d8 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  8125c4:	008020b4 	movhi	r2,130
  8125c8:	10a53704 	addi	r2,r2,-27428
  8125cc:	10800017 	ldw	r2,0(r2)
  8125d0:	10800c83 	ldbu	r2,50(r2)
  8125d4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8125d8:	e0bffd03 	ldbu	r2,-12(fp)
  8125dc:	00c020b4 	movhi	r3,130
  8125e0:	18c1bd04 	addi	r3,r3,1780
  8125e4:	1085883a 	add	r2,r2,r2
  8125e8:	1085883a 	add	r2,r2,r2
  8125ec:	10c5883a 	add	r2,r2,r3
  8125f0:	10800017 	ldw	r2,0(r2)
  8125f4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  8125f8:	e0bffc17 	ldw	r2,-16(fp)
  8125fc:	1004c03a 	cmpne	r2,r2,zero
  812600:	1000071e 	bne	r2,zero,812620 <OSTaskQuery+0xe0>
  812604:	e0bffb17 	ldw	r2,-20(fp)
  812608:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81260c:	e0bff917 	ldw	r2,-28(fp)
  812610:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  812614:	00800a44 	movi	r2,41
  812618:	e0bfff15 	stw	r2,-4(fp)
  81261c:	00001306 	br	81266c <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  812620:	e0bffc17 	ldw	r2,-16(fp)
  812624:	10800058 	cmpnei	r2,r2,1
  812628:	1000071e 	bne	r2,zero,812648 <OSTaskQuery+0x108>
  81262c:	e0bffb17 	ldw	r2,-20(fp)
  812630:	e0bff815 	stw	r2,-32(fp)
  812634:	e0bff817 	ldw	r2,-32(fp)
  812638:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  81263c:	008010c4 	movi	r2,67
  812640:	e0bfff15 	stw	r2,-4(fp)
  812644:	00000906 	br	81266c <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  812648:	e13ffe17 	ldw	r4,-8(fp)
  81264c:	e17ffc17 	ldw	r5,-16(fp)
  812650:	01801b04 	movi	r6,108
  812654:	080c3a00 	call	80c3a0 <OS_MemCopy>
  812658:	e0bffb17 	ldw	r2,-20(fp)
  81265c:	e0bff715 	stw	r2,-36(fp)
  812660:	e0bff717 	ldw	r2,-36(fp)
  812664:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812668:	e03fff15 	stw	zero,-4(fp)
  81266c:	e0bfff17 	ldw	r2,-4(fp)
}
  812670:	e037883a 	mov	sp,fp
  812674:	dfc00117 	ldw	ra,4(sp)
  812678:	df000017 	ldw	fp,0(sp)
  81267c:	dec00204 	addi	sp,sp,8
  812680:	f800283a 	ret

00812684 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  812684:	defffc04 	addi	sp,sp,-16
  812688:	df000315 	stw	fp,12(sp)
  81268c:	df000304 	addi	fp,sp,12
  812690:	e13ffd15 	stw	r4,-12(fp)
  812694:	e17ffe15 	stw	r5,-8(fp)
  812698:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  81269c:	e0bfff0b 	ldhu	r2,-4(fp)
  8126a0:	1080004c 	andi	r2,r2,1
  8126a4:	10803fcc 	andi	r2,r2,255
  8126a8:	1005003a 	cmpeq	r2,r2,zero
  8126ac:	1000101e 	bne	r2,zero,8126f0 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8126b0:	e0bfff0b 	ldhu	r2,-4(fp)
  8126b4:	1080008c 	andi	r2,r2,2
  8126b8:	1005003a 	cmpeq	r2,r2,zero
  8126bc:	10000c1e 	bne	r2,zero,8126f0 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8126c0:	00000806 	br	8126e4 <OS_TaskStkClr+0x60>
                size--;
  8126c4:	e0bffe17 	ldw	r2,-8(fp)
  8126c8:	10bfffc4 	addi	r2,r2,-1
  8126cc:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  8126d0:	e0bffd17 	ldw	r2,-12(fp)
  8126d4:	10000015 	stw	zero,0(r2)
  8126d8:	e0bffd17 	ldw	r2,-12(fp)
  8126dc:	10800104 	addi	r2,r2,4
  8126e0:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8126e4:	e0bffe17 	ldw	r2,-8(fp)
  8126e8:	1004c03a 	cmpne	r2,r2,zero
  8126ec:	103ff51e 	bne	r2,zero,8126c4 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  8126f0:	e037883a 	mov	sp,fp
  8126f4:	df000017 	ldw	fp,0(sp)
  8126f8:	dec00104 	addi	sp,sp,4
  8126fc:	f800283a 	ret

00812700 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  812700:	defff904 	addi	sp,sp,-28
  812704:	dfc00615 	stw	ra,24(sp)
  812708:	df000515 	stw	fp,20(sp)
  81270c:	df000504 	addi	fp,sp,20
  812710:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812714:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812718:	008020b4 	movhi	r2,130
  81271c:	10a53604 	addi	r2,r2,-27432
  812720:	10800003 	ldbu	r2,0(r2)
  812724:	10803fcc 	andi	r2,r2,255
  812728:	1004c03a 	cmpne	r2,r2,zero
  81272c:	1000421e 	bne	r2,zero,812838 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  812730:	e0bfff0b 	ldhu	r2,-4(fp)
  812734:	1005003a 	cmpeq	r2,r2,zero
  812738:	10003f1e 	bne	r2,zero,812838 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81273c:	0005303a 	rdctl	r2,status
  812740:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812744:	e0fffc17 	ldw	r3,-16(fp)
  812748:	00bfff84 	movi	r2,-2
  81274c:	1884703a 	and	r2,r3,r2
  812750:	1001703a 	wrctl	status,r2
  
  return context;
  812754:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  812758:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  81275c:	008020b4 	movhi	r2,130
  812760:	10a53704 	addi	r2,r2,-27428
  812764:	10800017 	ldw	r2,0(r2)
  812768:	10800d03 	ldbu	r2,52(r2)
  81276c:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  812770:	e13ffe03 	ldbu	r4,-8(fp)
  812774:	e0fffe03 	ldbu	r3,-8(fp)
  812778:	008020b4 	movhi	r2,130
  81277c:	10a53444 	addi	r2,r2,-27439
  812780:	10c5883a 	add	r2,r2,r3
  812784:	10800003 	ldbu	r2,0(r2)
  812788:	1007883a 	mov	r3,r2
  81278c:	008020b4 	movhi	r2,130
  812790:	10a53704 	addi	r2,r2,-27428
  812794:	10800017 	ldw	r2,0(r2)
  812798:	10800d43 	ldbu	r2,53(r2)
  81279c:	0084303a 	nor	r2,zero,r2
  8127a0:	1884703a 	and	r2,r3,r2
  8127a4:	1007883a 	mov	r3,r2
  8127a8:	008020b4 	movhi	r2,130
  8127ac:	10a53444 	addi	r2,r2,-27439
  8127b0:	1105883a 	add	r2,r2,r4
  8127b4:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  8127b8:	e0fffe03 	ldbu	r3,-8(fp)
  8127bc:	008020b4 	movhi	r2,130
  8127c0:	10a53444 	addi	r2,r2,-27439
  8127c4:	10c5883a 	add	r2,r2,r3
  8127c8:	10800003 	ldbu	r2,0(r2)
  8127cc:	10803fcc 	andi	r2,r2,255
  8127d0:	1004c03a 	cmpne	r2,r2,zero
  8127d4:	10000e1e 	bne	r2,zero,812810 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8127d8:	008020b4 	movhi	r2,130
  8127dc:	10a53704 	addi	r2,r2,-27428
  8127e0:	10800017 	ldw	r2,0(r2)
  8127e4:	10800d83 	ldbu	r2,54(r2)
  8127e8:	0084303a 	nor	r2,zero,r2
  8127ec:	1007883a 	mov	r3,r2
  8127f0:	008020b4 	movhi	r2,130
  8127f4:	10a53404 	addi	r2,r2,-27440
  8127f8:	10800003 	ldbu	r2,0(r2)
  8127fc:	1884703a 	and	r2,r3,r2
  812800:	1007883a 	mov	r3,r2
  812804:	008020b4 	movhi	r2,130
  812808:	10a53404 	addi	r2,r2,-27440
  81280c:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  812810:	008020b4 	movhi	r2,130
  812814:	10a53704 	addi	r2,r2,-27428
  812818:	10c00017 	ldw	r3,0(r2)
  81281c:	e0bfff0b 	ldhu	r2,-4(fp)
  812820:	18800b8d 	sth	r2,46(r3)
  812824:	e0bffd17 	ldw	r2,-12(fp)
  812828:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81282c:	e0bffb17 	ldw	r2,-20(fp)
  812830:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  812834:	080c40c0 	call	80c40c <OS_Sched>
    }
}
  812838:	e037883a 	mov	sp,fp
  81283c:	dfc00117 	ldw	ra,4(sp)
  812840:	df000017 	ldw	fp,0(sp)
  812844:	dec00204 	addi	sp,sp,8
  812848:	f800283a 	ret

0081284c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  81284c:	defff604 	addi	sp,sp,-40
  812850:	dfc00915 	stw	ra,36(sp)
  812854:	df000815 	stw	fp,32(sp)
  812858:	dc000715 	stw	r16,28(sp)
  81285c:	df000704 	addi	fp,sp,28
  812860:	e13ffb05 	stb	r4,-20(fp)
  812864:	e17ffc05 	stb	r5,-16(fp)
  812868:	e1bffd05 	stb	r6,-12(fp)
  81286c:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  812870:	008020b4 	movhi	r2,130
  812874:	10a53604 	addi	r2,r2,-27432
  812878:	10800003 	ldbu	r2,0(r2)
  81287c:	10803fcc 	andi	r2,r2,255
  812880:	1005003a 	cmpeq	r2,r2,zero
  812884:	1000031e 	bne	r2,zero,812894 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  812888:	00801544 	movi	r2,85
  81288c:	e0bfff15 	stw	r2,-4(fp)
  812890:	00004406 	br	8129a4 <OSTimeDlyHMSM+0x158>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  812894:	e0bffb03 	ldbu	r2,-20(fp)
  812898:	1004c03a 	cmpne	r2,r2,zero
  81289c:	10000c1e 	bne	r2,zero,8128d0 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  8128a0:	e0bffc03 	ldbu	r2,-16(fp)
  8128a4:	1004c03a 	cmpne	r2,r2,zero
  8128a8:	1000091e 	bne	r2,zero,8128d0 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  8128ac:	e0bffd03 	ldbu	r2,-12(fp)
  8128b0:	1004c03a 	cmpne	r2,r2,zero
  8128b4:	1000061e 	bne	r2,zero,8128d0 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  8128b8:	e0bffe0b 	ldhu	r2,-8(fp)
  8128bc:	1004c03a 	cmpne	r2,r2,zero
  8128c0:	1000031e 	bne	r2,zero,8128d0 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  8128c4:	00801504 	movi	r2,84
  8128c8:	e0bfff15 	stw	r2,-4(fp)
  8128cc:	00003506 	br	8129a4 <OSTimeDlyHMSM+0x158>
                }
            }
        }
    }
    if (minutes > 59) {
  8128d0:	e0bffc03 	ldbu	r2,-16(fp)
  8128d4:	10800f30 	cmpltui	r2,r2,60
  8128d8:	1000031e 	bne	r2,zero,8128e8 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  8128dc:	00801444 	movi	r2,81
  8128e0:	e0bfff15 	stw	r2,-4(fp)
  8128e4:	00002f06 	br	8129a4 <OSTimeDlyHMSM+0x158>
    }
    if (seconds > 59) {
  8128e8:	e0bffd03 	ldbu	r2,-12(fp)
  8128ec:	10800f30 	cmpltui	r2,r2,60
  8128f0:	1000031e 	bne	r2,zero,812900 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  8128f4:	00801484 	movi	r2,82
  8128f8:	e0bfff15 	stw	r2,-4(fp)
  8128fc:	00002906 	br	8129a4 <OSTimeDlyHMSM+0x158>
    }
    if (ms > 999) {
  812900:	e0bffe0b 	ldhu	r2,-8(fp)
  812904:	1080fa30 	cmpltui	r2,r2,1000
  812908:	1000031e 	bne	r2,zero,812918 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  81290c:	008014c4 	movi	r2,83
  812910:	e0bfff15 	stw	r2,-4(fp)
  812914:	00002306 	br	8129a4 <OSTimeDlyHMSM+0x158>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  812918:	e0bffb03 	ldbu	r2,-20(fp)
  81291c:	10c38424 	muli	r3,r2,3600
  812920:	e0bffc03 	ldbu	r2,-16(fp)
  812924:	10800f24 	muli	r2,r2,60
  812928:	1887883a 	add	r3,r3,r2
  81292c:	e0bffd03 	ldbu	r2,-12(fp)
  812930:	1885883a 	add	r2,r3,r2
  812934:	1400fa24 	muli	r16,r2,1000
  812938:	e0bffe0b 	ldhu	r2,-8(fp)
  81293c:	1100fa24 	muli	r4,r2,1000
  812940:	0140fa04 	movi	r5,1000
  812944:	08095b40 	call	8095b4 <__udivsi3>
  812948:	8085883a 	add	r2,r16,r2
  81294c:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  812950:	e0bffa17 	ldw	r2,-24(fp)
  812954:	1004d43a 	srli	r2,r2,16
  812958:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  81295c:	e0bffa17 	ldw	r2,-24(fp)
  812960:	10bfffcc 	andi	r2,r2,65535
  812964:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  812968:	e0bffa17 	ldw	r2,-24(fp)
  81296c:	113fffcc 	andi	r4,r2,65535
  812970:	08127000 	call	812700 <OSTimeDly>
    while (loops > 0) {
  812974:	00000706 	br	812994 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
  812978:	01200014 	movui	r4,32768
  81297c:	08127000 	call	812700 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  812980:	01200014 	movui	r4,32768
  812984:	08127000 	call	812700 <OSTimeDly>
        loops--;
  812988:	e0bff90b 	ldhu	r2,-28(fp)
  81298c:	10bfffc4 	addi	r2,r2,-1
  812990:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  812994:	e0bff90b 	ldhu	r2,-28(fp)
  812998:	1004c03a 	cmpne	r2,r2,zero
  81299c:	103ff61e 	bne	r2,zero,812978 <OSTimeDlyHMSM+0x12c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8129a0:	e03fff15 	stw	zero,-4(fp)
  8129a4:	e0bfff17 	ldw	r2,-4(fp)
}
  8129a8:	e037883a 	mov	sp,fp
  8129ac:	dfc00217 	ldw	ra,8(sp)
  8129b0:	df000117 	ldw	fp,4(sp)
  8129b4:	dc000017 	ldw	r16,0(sp)
  8129b8:	dec00304 	addi	sp,sp,12
  8129bc:	f800283a 	ret

008129c0 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  8129c0:	defff404 	addi	sp,sp,-48
  8129c4:	dfc00b15 	stw	ra,44(sp)
  8129c8:	df000a15 	stw	fp,40(sp)
  8129cc:	df000a04 	addi	fp,sp,40
  8129d0:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8129d4:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  8129d8:	e0bffe03 	ldbu	r2,-8(fp)
  8129dc:	10800530 	cmpltui	r2,r2,20
  8129e0:	1000031e 	bne	r2,zero,8129f0 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  8129e4:	00800a84 	movi	r2,42
  8129e8:	e0bfff15 	stw	r2,-4(fp)
  8129ec:	00007206 	br	812bb8 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8129f0:	0005303a 	rdctl	r2,status
  8129f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8129f8:	e0fffb17 	ldw	r3,-20(fp)
  8129fc:	00bfff84 	movi	r2,-2
  812a00:	1884703a 	and	r2,r3,r2
  812a04:	1001703a 	wrctl	status,r2
  
  return context;
  812a08:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812a0c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  812a10:	e0bffe03 	ldbu	r2,-8(fp)
  812a14:	00c020b4 	movhi	r3,130
  812a18:	18c1bd04 	addi	r3,r3,1780
  812a1c:	1085883a 	add	r2,r2,r2
  812a20:	1085883a 	add	r2,r2,r2
  812a24:	10c5883a 	add	r2,r2,r3
  812a28:	10800017 	ldw	r2,0(r2)
  812a2c:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  812a30:	e0bffd17 	ldw	r2,-12(fp)
  812a34:	1004c03a 	cmpne	r2,r2,zero
  812a38:	1000071e 	bne	r2,zero,812a58 <OSTimeDlyResume+0x98>
  812a3c:	e0bffc17 	ldw	r2,-16(fp)
  812a40:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a44:	e0bffa17 	ldw	r2,-24(fp)
  812a48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812a4c:	008010c4 	movi	r2,67
  812a50:	e0bfff15 	stw	r2,-4(fp)
  812a54:	00005806 	br	812bb8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  812a58:	e0bffd17 	ldw	r2,-12(fp)
  812a5c:	10800058 	cmpnei	r2,r2,1
  812a60:	1000071e 	bne	r2,zero,812a80 <OSTimeDlyResume+0xc0>
  812a64:	e0bffc17 	ldw	r2,-16(fp)
  812a68:	e0bff915 	stw	r2,-28(fp)
  812a6c:	e0bff917 	ldw	r2,-28(fp)
  812a70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  812a74:	008010c4 	movi	r2,67
  812a78:	e0bfff15 	stw	r2,-4(fp)
  812a7c:	00004e06 	br	812bb8 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  812a80:	e0bffd17 	ldw	r2,-12(fp)
  812a84:	10800b8b 	ldhu	r2,46(r2)
  812a88:	10bfffcc 	andi	r2,r2,65535
  812a8c:	1004c03a 	cmpne	r2,r2,zero
  812a90:	1000071e 	bne	r2,zero,812ab0 <OSTimeDlyResume+0xf0>
  812a94:	e0bffc17 	ldw	r2,-16(fp)
  812a98:	e0bff815 	stw	r2,-32(fp)
  812a9c:	e0bff817 	ldw	r2,-32(fp)
  812aa0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  812aa4:	00801404 	movi	r2,80
  812aa8:	e0bfff15 	stw	r2,-4(fp)
  812aac:	00004206 	br	812bb8 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  812ab0:	e0bffd17 	ldw	r2,-12(fp)
  812ab4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  812ab8:	e0bffd17 	ldw	r2,-12(fp)
  812abc:	10800c03 	ldbu	r2,48(r2)
  812ac0:	10803fcc 	andi	r2,r2,255
  812ac4:	10800dcc 	andi	r2,r2,55
  812ac8:	1005003a 	cmpeq	r2,r2,zero
  812acc:	10000b1e 	bne	r2,zero,812afc <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  812ad0:	e0bffd17 	ldw	r2,-12(fp)
  812ad4:	10c00c03 	ldbu	r3,48(r2)
  812ad8:	00bff204 	movi	r2,-56
  812adc:	1884703a 	and	r2,r3,r2
  812ae0:	1007883a 	mov	r3,r2
  812ae4:	e0bffd17 	ldw	r2,-12(fp)
  812ae8:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  812aec:	e0fffd17 	ldw	r3,-12(fp)
  812af0:	00800044 	movi	r2,1
  812af4:	18800c45 	stb	r2,49(r3)
  812af8:	00000206 	br	812b04 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  812afc:	e0bffd17 	ldw	r2,-12(fp)
  812b00:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  812b04:	e0bffd17 	ldw	r2,-12(fp)
  812b08:	10800c03 	ldbu	r2,48(r2)
  812b0c:	10803fcc 	andi	r2,r2,255
  812b10:	1080020c 	andi	r2,r2,8
  812b14:	1004c03a 	cmpne	r2,r2,zero
  812b18:	1000221e 	bne	r2,zero,812ba4 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  812b1c:	e0bffd17 	ldw	r2,-12(fp)
  812b20:	10c00d83 	ldbu	r3,54(r2)
  812b24:	008020b4 	movhi	r2,130
  812b28:	10a53404 	addi	r2,r2,-27440
  812b2c:	10800003 	ldbu	r2,0(r2)
  812b30:	1884b03a 	or	r2,r3,r2
  812b34:	1007883a 	mov	r3,r2
  812b38:	008020b4 	movhi	r2,130
  812b3c:	10a53404 	addi	r2,r2,-27440
  812b40:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  812b44:	e0bffd17 	ldw	r2,-12(fp)
  812b48:	10800d03 	ldbu	r2,52(r2)
  812b4c:	11003fcc 	andi	r4,r2,255
  812b50:	e0bffd17 	ldw	r2,-12(fp)
  812b54:	10800d03 	ldbu	r2,52(r2)
  812b58:	10c03fcc 	andi	r3,r2,255
  812b5c:	008020b4 	movhi	r2,130
  812b60:	10a53444 	addi	r2,r2,-27439
  812b64:	10c5883a 	add	r2,r2,r3
  812b68:	10c00003 	ldbu	r3,0(r2)
  812b6c:	e0bffd17 	ldw	r2,-12(fp)
  812b70:	10800d43 	ldbu	r2,53(r2)
  812b74:	1884b03a 	or	r2,r3,r2
  812b78:	1007883a 	mov	r3,r2
  812b7c:	008020b4 	movhi	r2,130
  812b80:	10a53444 	addi	r2,r2,-27439
  812b84:	1105883a 	add	r2,r2,r4
  812b88:	10c00005 	stb	r3,0(r2)
  812b8c:	e0bffc17 	ldw	r2,-16(fp)
  812b90:	e0bff715 	stw	r2,-36(fp)
  812b94:	e0bff717 	ldw	r2,-36(fp)
  812b98:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  812b9c:	080c40c0 	call	80c40c <OS_Sched>
  812ba0:	00000406 	br	812bb4 <OSTimeDlyResume+0x1f4>
  812ba4:	e0bffc17 	ldw	r2,-16(fp)
  812ba8:	e0bff615 	stw	r2,-40(fp)
  812bac:	e0bff617 	ldw	r2,-40(fp)
  812bb0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  812bb4:	e03fff15 	stw	zero,-4(fp)
  812bb8:	e0bfff17 	ldw	r2,-4(fp)
}
  812bbc:	e037883a 	mov	sp,fp
  812bc0:	dfc00117 	ldw	ra,4(sp)
  812bc4:	df000017 	ldw	fp,0(sp)
  812bc8:	dec00204 	addi	sp,sp,8
  812bcc:	f800283a 	ret

00812bd0 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  812bd0:	defffb04 	addi	sp,sp,-20
  812bd4:	df000415 	stw	fp,16(sp)
  812bd8:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812bdc:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812be0:	0005303a 	rdctl	r2,status
  812be4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812be8:	e0fffd17 	ldw	r3,-12(fp)
  812bec:	00bfff84 	movi	r2,-2
  812bf0:	1884703a 	and	r2,r3,r2
  812bf4:	1001703a 	wrctl	status,r2
  
  return context;
  812bf8:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  812bfc:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  812c00:	008020b4 	movhi	r2,130
  812c04:	10a53804 	addi	r2,r2,-27424
  812c08:	10800017 	ldw	r2,0(r2)
  812c0c:	e0bfff15 	stw	r2,-4(fp)
  812c10:	e0bffe17 	ldw	r2,-8(fp)
  812c14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c18:	e0bffc17 	ldw	r2,-16(fp)
  812c1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  812c20:	e0bfff17 	ldw	r2,-4(fp)
}
  812c24:	e037883a 	mov	sp,fp
  812c28:	df000017 	ldw	fp,0(sp)
  812c2c:	dec00104 	addi	sp,sp,4
  812c30:	f800283a 	ret

00812c34 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  812c34:	defffb04 	addi	sp,sp,-20
  812c38:	df000415 	stw	fp,16(sp)
  812c3c:	df000404 	addi	fp,sp,16
  812c40:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  812c44:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812c48:	0005303a 	rdctl	r2,status
  812c4c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c50:	e0fffd17 	ldw	r3,-12(fp)
  812c54:	00bfff84 	movi	r2,-2
  812c58:	1884703a 	and	r2,r3,r2
  812c5c:	1001703a 	wrctl	status,r2
  
  return context;
  812c60:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  812c64:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  812c68:	00c020b4 	movhi	r3,130
  812c6c:	18e53804 	addi	r3,r3,-27424
  812c70:	e0bfff17 	ldw	r2,-4(fp)
  812c74:	18800015 	stw	r2,0(r3)
  812c78:	e0bffe17 	ldw	r2,-8(fp)
  812c7c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c80:	e0bffc17 	ldw	r2,-16(fp)
  812c84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  812c88:	e037883a 	mov	sp,fp
  812c8c:	df000017 	ldw	fp,0(sp)
  812c90:	dec00104 	addi	sp,sp,4
  812c94:	f800283a 	ret

00812c98 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  812c98:	defffd04 	addi	sp,sp,-12
  812c9c:	dfc00215 	stw	ra,8(sp)
  812ca0:	df000115 	stw	fp,4(sp)
  812ca4:	df000104 	addi	fp,sp,4
  812ca8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  812cac:	0814db00 	call	814db0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  812cb0:	00800044 	movi	r2,1
  812cb4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  812cb8:	e037883a 	mov	sp,fp
  812cbc:	dfc00117 	ldw	ra,4(sp)
  812cc0:	df000017 	ldw	fp,0(sp)
  812cc4:	dec00204 	addi	sp,sp,8
  812cc8:	f800283a 	ret

00812ccc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  812ccc:	defffe04 	addi	sp,sp,-8
  812cd0:	dfc00115 	stw	ra,4(sp)
  812cd4:	df000015 	stw	fp,0(sp)
  812cd8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  812cdc:	01004474 	movhi	r4,273
  812ce0:	21240004 	addi	r4,r4,-28672
  812ce4:	000b883a 	mov	r5,zero
  812ce8:	000d883a 	mov	r6,zero
  812cec:	01c0fa04 	movi	r7,1000
  812cf0:	0813b440 	call	813b44 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  812cf4:	01002074 	movhi	r4,129
  812cf8:	211a0904 	addi	r4,r4,26660
  812cfc:	000b883a 	mov	r5,zero
  812d00:	01800044 	movi	r6,1
  812d04:	0812ec00 	call	812ec0 <altera_avalon_jtag_uart_init>
  812d08:	01002074 	movhi	r4,129
  812d0c:	2119ff04 	addi	r4,r4,26620
  812d10:	0812d400 	call	812d40 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  812d14:	01002074 	movhi	r4,129
  812d18:	211e1a04 	addi	r4,r4,30824
  812d1c:	0813c840 	call	813c84 <alt_up_character_lcd_init>
  812d20:	01002074 	movhi	r4,129
  812d24:	211e1a04 	addi	r4,r4,30824
  812d28:	0812d400 	call	812d40 <alt_dev_reg>
}
  812d2c:	e037883a 	mov	sp,fp
  812d30:	dfc00117 	ldw	ra,4(sp)
  812d34:	df000017 	ldw	fp,0(sp)
  812d38:	dec00204 	addi	sp,sp,8
  812d3c:	f800283a 	ret

00812d40 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  812d40:	defffd04 	addi	sp,sp,-12
  812d44:	dfc00215 	stw	ra,8(sp)
  812d48:	df000115 	stw	fp,4(sp)
  812d4c:	df000104 	addi	fp,sp,4
  812d50:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  812d54:	e13fff17 	ldw	r4,-4(fp)
  812d58:	01402074 	movhi	r5,129
  812d5c:	295e2d04 	addi	r5,r5,30900
  812d60:	081429c0 	call	81429c <alt_dev_llist_insert>
}
  812d64:	e037883a 	mov	sp,fp
  812d68:	dfc00117 	ldw	ra,4(sp)
  812d6c:	df000017 	ldw	fp,0(sp)
  812d70:	dec00204 	addi	sp,sp,8
  812d74:	f800283a 	ret

00812d78 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  812d78:	defffa04 	addi	sp,sp,-24
  812d7c:	dfc00515 	stw	ra,20(sp)
  812d80:	df000415 	stw	fp,16(sp)
  812d84:	df000404 	addi	fp,sp,16
  812d88:	e13ffd15 	stw	r4,-12(fp)
  812d8c:	e17ffe15 	stw	r5,-8(fp)
  812d90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812d94:	e0bffd17 	ldw	r2,-12(fp)
  812d98:	10800017 	ldw	r2,0(r2)
  812d9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  812da0:	e0bffc17 	ldw	r2,-16(fp)
  812da4:	11000a04 	addi	r4,r2,40
  812da8:	e0bffd17 	ldw	r2,-12(fp)
  812dac:	11c00217 	ldw	r7,8(r2)
  812db0:	e17ffe17 	ldw	r5,-8(fp)
  812db4:	e1bfff17 	ldw	r6,-4(fp)
  812db8:	08135380 	call	813538 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  812dbc:	e037883a 	mov	sp,fp
  812dc0:	dfc00117 	ldw	ra,4(sp)
  812dc4:	df000017 	ldw	fp,0(sp)
  812dc8:	dec00204 	addi	sp,sp,8
  812dcc:	f800283a 	ret

00812dd0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  812dd0:	defffa04 	addi	sp,sp,-24
  812dd4:	dfc00515 	stw	ra,20(sp)
  812dd8:	df000415 	stw	fp,16(sp)
  812ddc:	df000404 	addi	fp,sp,16
  812de0:	e13ffd15 	stw	r4,-12(fp)
  812de4:	e17ffe15 	stw	r5,-8(fp)
  812de8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812dec:	e0bffd17 	ldw	r2,-12(fp)
  812df0:	10800017 	ldw	r2,0(r2)
  812df4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  812df8:	e0bffc17 	ldw	r2,-16(fp)
  812dfc:	11000a04 	addi	r4,r2,40
  812e00:	e0bffd17 	ldw	r2,-12(fp)
  812e04:	11c00217 	ldw	r7,8(r2)
  812e08:	e17ffe17 	ldw	r5,-8(fp)
  812e0c:	e1bfff17 	ldw	r6,-4(fp)
  812e10:	08137f80 	call	8137f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  812e14:	e037883a 	mov	sp,fp
  812e18:	dfc00117 	ldw	ra,4(sp)
  812e1c:	df000017 	ldw	fp,0(sp)
  812e20:	dec00204 	addi	sp,sp,8
  812e24:	f800283a 	ret

00812e28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  812e28:	defffc04 	addi	sp,sp,-16
  812e2c:	dfc00315 	stw	ra,12(sp)
  812e30:	df000215 	stw	fp,8(sp)
  812e34:	df000204 	addi	fp,sp,8
  812e38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  812e3c:	e0bfff17 	ldw	r2,-4(fp)
  812e40:	10800017 	ldw	r2,0(r2)
  812e44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  812e48:	e0bffe17 	ldw	r2,-8(fp)
  812e4c:	11000a04 	addi	r4,r2,40
  812e50:	e0bfff17 	ldw	r2,-4(fp)
  812e54:	11400217 	ldw	r5,8(r2)
  812e58:	08133d00 	call	8133d0 <altera_avalon_jtag_uart_close>
}
  812e5c:	e037883a 	mov	sp,fp
  812e60:	dfc00117 	ldw	ra,4(sp)
  812e64:	df000017 	ldw	fp,0(sp)
  812e68:	dec00204 	addi	sp,sp,8
  812e6c:	f800283a 	ret

00812e70 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  812e70:	defffa04 	addi	sp,sp,-24
  812e74:	dfc00515 	stw	ra,20(sp)
  812e78:	df000415 	stw	fp,16(sp)
  812e7c:	df000404 	addi	fp,sp,16
  812e80:	e13ffd15 	stw	r4,-12(fp)
  812e84:	e17ffe15 	stw	r5,-8(fp)
  812e88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  812e8c:	e0bffd17 	ldw	r2,-12(fp)
  812e90:	10800017 	ldw	r2,0(r2)
  812e94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  812e98:	e0bffc17 	ldw	r2,-16(fp)
  812e9c:	11000a04 	addi	r4,r2,40
  812ea0:	e17ffe17 	ldw	r5,-8(fp)
  812ea4:	e1bfff17 	ldw	r6,-4(fp)
  812ea8:	08134440 	call	813444 <altera_avalon_jtag_uart_ioctl>
}
  812eac:	e037883a 	mov	sp,fp
  812eb0:	dfc00117 	ldw	ra,4(sp)
  812eb4:	df000017 	ldw	fp,0(sp)
  812eb8:	dec00204 	addi	sp,sp,8
  812ebc:	f800283a 	ret

00812ec0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  812ec0:	defff404 	addi	sp,sp,-48
  812ec4:	dfc00b15 	stw	ra,44(sp)
  812ec8:	df000a15 	stw	fp,40(sp)
  812ecc:	df000a04 	addi	fp,sp,40
  812ed0:	e13ffd15 	stw	r4,-12(fp)
  812ed4:	e17ffe15 	stw	r5,-8(fp)
  812ed8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  812edc:	e0bffd17 	ldw	r2,-12(fp)
  812ee0:	10800c04 	addi	r2,r2,48
  812ee4:	e0bffb15 	stw	r2,-20(fp)
  812ee8:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  812eec:	e13ffc0b 	ldhu	r4,-16(fp)
  812ef0:	e17ffc84 	addi	r5,fp,-14
  812ef4:	080cfb40 	call	80cfb4 <OSFlagCreate>
  812ef8:	1007883a 	mov	r3,r2
  812efc:	e0bffb17 	ldw	r2,-20(fp)
  812f00:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  812f04:	e0bffd17 	ldw	r2,-12(fp)
  812f08:	10800a04 	addi	r2,r2,40
  812f0c:	e0bff915 	stw	r2,-28(fp)
  812f10:	00800044 	movi	r2,1
  812f14:	e0bffa0d 	sth	r2,-24(fp)
  812f18:	e13ffa0b 	ldhu	r4,-24(fp)
  812f1c:	08101b80 	call	8101b8 <OSSemCreate>
  812f20:	1007883a 	mov	r3,r2
  812f24:	e0bff917 	ldw	r2,-28(fp)
  812f28:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  812f2c:	e0bffd17 	ldw	r2,-12(fp)
  812f30:	10800b04 	addi	r2,r2,44
  812f34:	e0bff715 	stw	r2,-36(fp)
  812f38:	00800044 	movi	r2,1
  812f3c:	e0bff80d 	sth	r2,-32(fp)
  812f40:	e13ff80b 	ldhu	r4,-32(fp)
  812f44:	08101b80 	call	8101b8 <OSSemCreate>
  812f48:	1007883a 	mov	r3,r2
  812f4c:	e0bff717 	ldw	r2,-36(fp)
  812f50:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  812f54:	e0fffd17 	ldw	r3,-12(fp)
  812f58:	00800044 	movi	r2,1
  812f5c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  812f60:	e0bffd17 	ldw	r2,-12(fp)
  812f64:	10800017 	ldw	r2,0(r2)
  812f68:	11000104 	addi	r4,r2,4
  812f6c:	e0bffd17 	ldw	r2,-12(fp)
  812f70:	10800817 	ldw	r2,32(r2)
  812f74:	1007883a 	mov	r3,r2
  812f78:	2005883a 	mov	r2,r4
  812f7c:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  812f80:	e13ffe17 	ldw	r4,-8(fp)
  812f84:	e17fff17 	ldw	r5,-4(fp)
  812f88:	d8000015 	stw	zero,0(sp)
  812f8c:	01802074 	movhi	r6,129
  812f90:	318bfe04 	addi	r6,r6,12280
  812f94:	e1fffd17 	ldw	r7,-12(fp)
  812f98:	081453c0 	call	81453c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  812f9c:	e0bffd17 	ldw	r2,-12(fp)
  812fa0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  812fa4:	e0bffd17 	ldw	r2,-12(fp)
  812fa8:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  812fac:	008020b4 	movhi	r2,130
  812fb0:	10a53d04 	addi	r2,r2,-27404
  812fb4:	10800017 	ldw	r2,0(r2)
  812fb8:	100b883a 	mov	r5,r2
  812fbc:	01802074 	movhi	r6,129
  812fc0:	318caf04 	addi	r6,r6,12988
  812fc4:	e1fffd17 	ldw	r7,-12(fp)
  812fc8:	08141040 	call	814104 <alt_alarm_start>
  812fcc:	1004403a 	cmpge	r2,r2,zero
  812fd0:	1000041e 	bne	r2,zero,812fe4 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  812fd4:	e0fffd17 	ldw	r3,-12(fp)
  812fd8:	00a00034 	movhi	r2,32768
  812fdc:	10bfffc4 	addi	r2,r2,-1
  812fe0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  812fe4:	e037883a 	mov	sp,fp
  812fe8:	dfc00117 	ldw	ra,4(sp)
  812fec:	df000017 	ldw	fp,0(sp)
  812ff0:	dec00204 	addi	sp,sp,8
  812ff4:	f800283a 	ret

00812ff8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  812ff8:	defff204 	addi	sp,sp,-56
  812ffc:	dfc00d15 	stw	ra,52(sp)
  813000:	df000c15 	stw	fp,48(sp)
  813004:	df000c04 	addi	fp,sp,48
  813008:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  81300c:	e0bfff17 	ldw	r2,-4(fp)
  813010:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  813014:	e0bffd17 	ldw	r2,-12(fp)
  813018:	10800017 	ldw	r2,0(r2)
  81301c:	e0bffc15 	stw	r2,-16(fp)
  813020:	00000006 	br	813024 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813024:	e0bffc17 	ldw	r2,-16(fp)
  813028:	10800104 	addi	r2,r2,4
  81302c:	10800037 	ldwio	r2,0(r2)
  813030:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  813034:	e0bffb17 	ldw	r2,-20(fp)
  813038:	1080c00c 	andi	r2,r2,768
  81303c:	1005003a 	cmpeq	r2,r2,zero
  813040:	1000991e 	bne	r2,zero,8132a8 <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  813044:	e0bffb17 	ldw	r2,-20(fp)
  813048:	1080400c 	andi	r2,r2,256
  81304c:	1005003a 	cmpeq	r2,r2,zero
  813050:	1000481e 	bne	r2,zero,813174 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  813054:	00800074 	movhi	r2,1
  813058:	e0bffa15 	stw	r2,-24(fp)
  81305c:	00000006 	br	813060 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813060:	e0bffd17 	ldw	r2,-12(fp)
  813064:	10800d17 	ldw	r2,52(r2)
  813068:	10800044 	addi	r2,r2,1
  81306c:	1081ffcc 	andi	r2,r2,2047
  813070:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  813074:	e0bffd17 	ldw	r2,-12(fp)
  813078:	10c00e17 	ldw	r3,56(r2)
  81307c:	e0bff917 	ldw	r2,-28(fp)
  813080:	18802826 	beq	r3,r2,813124 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  813084:	e0bffc17 	ldw	r2,-16(fp)
  813088:	10800037 	ldwio	r2,0(r2)
  81308c:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  813090:	e0bffa17 	ldw	r2,-24(fp)
  813094:	10a0000c 	andi	r2,r2,32768
  813098:	1005003a 	cmpeq	r2,r2,zero
  81309c:	1000211e 	bne	r2,zero,813124 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  8130a0:	e0bffd17 	ldw	r2,-12(fp)
  8130a4:	10c00d17 	ldw	r3,52(r2)
  8130a8:	e0bffa17 	ldw	r2,-24(fp)
  8130ac:	1009883a 	mov	r4,r2
  8130b0:	e0bffd17 	ldw	r2,-12(fp)
  8130b4:	1885883a 	add	r2,r3,r2
  8130b8:	10801104 	addi	r2,r2,68
  8130bc:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8130c0:	e0bffd17 	ldw	r2,-12(fp)
  8130c4:	10800d17 	ldw	r2,52(r2)
  8130c8:	10800044 	addi	r2,r2,1
  8130cc:	10c1ffcc 	andi	r3,r2,2047
  8130d0:	e0bffd17 	ldw	r2,-12(fp)
  8130d4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  8130d8:	e0bffd17 	ldw	r2,-12(fp)
  8130dc:	10800c17 	ldw	r2,48(r2)
  8130e0:	e0bff615 	stw	r2,-40(fp)
  8130e4:	00800044 	movi	r2,1
  8130e8:	e0bff70d 	sth	r2,-36(fp)
  8130ec:	00800044 	movi	r2,1
  8130f0:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8130f4:	008020b4 	movhi	r2,130
  8130f8:	10a52844 	addi	r2,r2,-27487
  8130fc:	10800003 	ldbu	r2,0(r2)
  813100:	10803fcc 	andi	r2,r2,255
  813104:	1005003a 	cmpeq	r2,r2,zero
  813108:	103fd51e 	bne	r2,zero,813060 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  81310c:	e17ff70b 	ldhu	r5,-36(fp)
  813110:	e1bff783 	ldbu	r6,-34(fp)
  813114:	e1fffe04 	addi	r7,fp,-8
  813118:	e13ff617 	ldw	r4,-40(fp)
  81311c:	080dcdc0 	call	80dcdc <OSFlagPost>
    return err;
  813120:	003fcf06 	br	813060 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  813124:	e0bffa17 	ldw	r2,-24(fp)
  813128:	10bfffec 	andhi	r2,r2,65535
  81312c:	1005003a 	cmpeq	r2,r2,zero
  813130:	1000101e 	bne	r2,zero,813174 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813134:	e0bffd17 	ldw	r2,-12(fp)
  813138:	10c00817 	ldw	r3,32(r2)
  81313c:	00bfff84 	movi	r2,-2
  813140:	1886703a 	and	r3,r3,r2
  813144:	e0bffd17 	ldw	r2,-12(fp)
  813148:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  81314c:	e0bffc17 	ldw	r2,-16(fp)
  813150:	11000104 	addi	r4,r2,4
  813154:	e0bffd17 	ldw	r2,-12(fp)
  813158:	10800817 	ldw	r2,32(r2)
  81315c:	1007883a 	mov	r3,r2
  813160:	2005883a 	mov	r2,r4
  813164:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813168:	e0bffc17 	ldw	r2,-16(fp)
  81316c:	10800104 	addi	r2,r2,4
  813170:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  813174:	e0bffb17 	ldw	r2,-20(fp)
  813178:	1080800c 	andi	r2,r2,512
  81317c:	1005003a 	cmpeq	r2,r2,zero
  813180:	103fa81e 	bne	r2,zero,813024 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  813184:	e0bffb17 	ldw	r2,-20(fp)
  813188:	10bfffec 	andhi	r2,r2,65535
  81318c:	1004d43a 	srli	r2,r2,16
  813190:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  813194:	00002706 	br	813234 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  813198:	e13ffc17 	ldw	r4,-16(fp)
  81319c:	e0bffd17 	ldw	r2,-12(fp)
  8131a0:	10c01017 	ldw	r3,64(r2)
  8131a4:	e0bffd17 	ldw	r2,-12(fp)
  8131a8:	1885883a 	add	r2,r3,r2
  8131ac:	10821104 	addi	r2,r2,2116
  8131b0:	10800003 	ldbu	r2,0(r2)
  8131b4:	10c03fcc 	andi	r3,r2,255
  8131b8:	18c0201c 	xori	r3,r3,128
  8131bc:	18ffe004 	addi	r3,r3,-128
  8131c0:	2005883a 	mov	r2,r4
  8131c4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  8131c8:	e0bffd17 	ldw	r2,-12(fp)
  8131cc:	10801017 	ldw	r2,64(r2)
  8131d0:	10800044 	addi	r2,r2,1
  8131d4:	10c1ffcc 	andi	r3,r2,2047
  8131d8:	e0bffd17 	ldw	r2,-12(fp)
  8131dc:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  8131e0:	e0bffd17 	ldw	r2,-12(fp)
  8131e4:	10800c17 	ldw	r2,48(r2)
  8131e8:	e0bff415 	stw	r2,-48(fp)
  8131ec:	00800084 	movi	r2,2
  8131f0:	e0bff50d 	sth	r2,-44(fp)
  8131f4:	00800044 	movi	r2,1
  8131f8:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  8131fc:	008020b4 	movhi	r2,130
  813200:	10a52844 	addi	r2,r2,-27487
  813204:	10800003 	ldbu	r2,0(r2)
  813208:	10803fcc 	andi	r2,r2,255
  81320c:	1005003a 	cmpeq	r2,r2,zero
  813210:	1000051e 	bne	r2,zero,813228 <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  813214:	e17ff50b 	ldhu	r5,-44(fp)
  813218:	e1bff583 	ldbu	r6,-42(fp)
  81321c:	e1fffe44 	addi	r7,fp,-7
  813220:	e13ff417 	ldw	r4,-48(fp)
  813224:	080dcdc0 	call	80dcdc <OSFlagPost>

        space--;
  813228:	e0bff817 	ldw	r2,-32(fp)
  81322c:	10bfffc4 	addi	r2,r2,-1
  813230:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  813234:	e0bff817 	ldw	r2,-32(fp)
  813238:	1005003a 	cmpeq	r2,r2,zero
  81323c:	1000051e 	bne	r2,zero,813254 <altera_avalon_jtag_uart_irq+0x25c>
  813240:	e0bffd17 	ldw	r2,-12(fp)
  813244:	10c01017 	ldw	r3,64(r2)
  813248:	e0bffd17 	ldw	r2,-12(fp)
  81324c:	10800f17 	ldw	r2,60(r2)
  813250:	18bfd11e 	bne	r3,r2,813198 <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  813254:	e0bff817 	ldw	r2,-32(fp)
  813258:	1005003a 	cmpeq	r2,r2,zero
  81325c:	103f711e 	bne	r2,zero,813024 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  813260:	e0bffd17 	ldw	r2,-12(fp)
  813264:	10c00817 	ldw	r3,32(r2)
  813268:	00bfff44 	movi	r2,-3
  81326c:	1886703a 	and	r3,r3,r2
  813270:	e0bffd17 	ldw	r2,-12(fp)
  813274:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813278:	e0bffd17 	ldw	r2,-12(fp)
  81327c:	10800017 	ldw	r2,0(r2)
  813280:	11000104 	addi	r4,r2,4
  813284:	e0bffd17 	ldw	r2,-12(fp)
  813288:	10800817 	ldw	r2,32(r2)
  81328c:	1007883a 	mov	r3,r2
  813290:	2005883a 	mov	r2,r4
  813294:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  813298:	e0bffc17 	ldw	r2,-16(fp)
  81329c:	10800104 	addi	r2,r2,4
  8132a0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  8132a4:	003f5f06 	br	813024 <altera_avalon_jtag_uart_irq+0x2c>
}
  8132a8:	e037883a 	mov	sp,fp
  8132ac:	dfc00117 	ldw	ra,4(sp)
  8132b0:	df000017 	ldw	fp,0(sp)
  8132b4:	dec00204 	addi	sp,sp,8
  8132b8:	f800283a 	ret

008132bc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  8132bc:	defff804 	addi	sp,sp,-32
  8132c0:	dfc00715 	stw	ra,28(sp)
  8132c4:	df000615 	stw	fp,24(sp)
  8132c8:	df000604 	addi	fp,sp,24
  8132cc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  8132d0:	e0bfff17 	ldw	r2,-4(fp)
  8132d4:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  8132d8:	e0bffd17 	ldw	r2,-12(fp)
  8132dc:	10800017 	ldw	r2,0(r2)
  8132e0:	10800104 	addi	r2,r2,4
  8132e4:	10800037 	ldwio	r2,0(r2)
  8132e8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  8132ec:	e0bffc17 	ldw	r2,-16(fp)
  8132f0:	1081000c 	andi	r2,r2,1024
  8132f4:	1005003a 	cmpeq	r2,r2,zero
  8132f8:	10000c1e 	bne	r2,zero,81332c <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  8132fc:	e0bffd17 	ldw	r2,-12(fp)
  813300:	10800017 	ldw	r2,0(r2)
  813304:	11000104 	addi	r4,r2,4
  813308:	e0bffd17 	ldw	r2,-12(fp)
  81330c:	10800817 	ldw	r2,32(r2)
  813310:	10810014 	ori	r2,r2,1024
  813314:	1007883a 	mov	r3,r2
  813318:	2005883a 	mov	r2,r4
  81331c:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  813320:	e0bffd17 	ldw	r2,-12(fp)
  813324:	10000915 	stw	zero,36(r2)
  813328:	00002106 	br	8133b0 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  81332c:	e0bffd17 	ldw	r2,-12(fp)
  813330:	10c00917 	ldw	r3,36(r2)
  813334:	00a00034 	movhi	r2,32768
  813338:	10bfff04 	addi	r2,r2,-4
  81333c:	10c01c36 	bltu	r2,r3,8133b0 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  813340:	e0bffd17 	ldw	r2,-12(fp)
  813344:	10800917 	ldw	r2,36(r2)
  813348:	10c00044 	addi	r3,r2,1
  81334c:	e0bffd17 	ldw	r2,-12(fp)
  813350:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  813354:	e0bffd17 	ldw	r2,-12(fp)
  813358:	10c00917 	ldw	r3,36(r2)
  81335c:	e0bffd17 	ldw	r2,-12(fp)
  813360:	10800117 	ldw	r2,4(r2)
  813364:	18801236 	bltu	r3,r2,8133b0 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  813368:	e0bffd17 	ldw	r2,-12(fp)
  81336c:	10800c17 	ldw	r2,48(r2)
  813370:	e0bffa15 	stw	r2,-24(fp)
  813374:	00800104 	movi	r2,4
  813378:	e0bffb0d 	sth	r2,-20(fp)
  81337c:	00800044 	movi	r2,1
  813380:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  813384:	008020b4 	movhi	r2,130
  813388:	10a52844 	addi	r2,r2,-27487
  81338c:	10800003 	ldbu	r2,0(r2)
  813390:	10803fcc 	andi	r2,r2,255
  813394:	1005003a 	cmpeq	r2,r2,zero
  813398:	1000051e 	bne	r2,zero,8133b0 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  81339c:	e17ffb0b 	ldhu	r5,-20(fp)
  8133a0:	e1bffb83 	ldbu	r6,-18(fp)
  8133a4:	e1fffe04 	addi	r7,fp,-8
  8133a8:	e13ffa17 	ldw	r4,-24(fp)
  8133ac:	080dcdc0 	call	80dcdc <OSFlagPost>
  8133b0:	008020b4 	movhi	r2,130
  8133b4:	10a53d04 	addi	r2,r2,-27404
  8133b8:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  8133bc:	e037883a 	mov	sp,fp
  8133c0:	dfc00117 	ldw	ra,4(sp)
  8133c4:	df000017 	ldw	fp,0(sp)
  8133c8:	dec00204 	addi	sp,sp,8
  8133cc:	f800283a 	ret

008133d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  8133d0:	defffc04 	addi	sp,sp,-16
  8133d4:	df000315 	stw	fp,12(sp)
  8133d8:	df000304 	addi	fp,sp,12
  8133dc:	e13ffd15 	stw	r4,-12(fp)
  8133e0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  8133e4:	00000706 	br	813404 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  8133e8:	e0bffe17 	ldw	r2,-8(fp)
  8133ec:	1090000c 	andi	r2,r2,16384
  8133f0:	1005003a 	cmpeq	r2,r2,zero
  8133f4:	1000031e 	bne	r2,zero,813404 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  8133f8:	00bffd44 	movi	r2,-11
  8133fc:	e0bfff15 	stw	r2,-4(fp)
  813400:	00000b06 	br	813430 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  813404:	e0bffd17 	ldw	r2,-12(fp)
  813408:	10c01017 	ldw	r3,64(r2)
  81340c:	e0bffd17 	ldw	r2,-12(fp)
  813410:	10800f17 	ldw	r2,60(r2)
  813414:	18800526 	beq	r3,r2,81342c <altera_avalon_jtag_uart_close+0x5c>
  813418:	e0bffd17 	ldw	r2,-12(fp)
  81341c:	10c00917 	ldw	r3,36(r2)
  813420:	e0bffd17 	ldw	r2,-12(fp)
  813424:	10800117 	ldw	r2,4(r2)
  813428:	18bfef36 	bltu	r3,r2,8133e8 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  81342c:	e03fff15 	stw	zero,-4(fp)
  813430:	e0bfff17 	ldw	r2,-4(fp)
}
  813434:	e037883a 	mov	sp,fp
  813438:	df000017 	ldw	fp,0(sp)
  81343c:	dec00104 	addi	sp,sp,4
  813440:	f800283a 	ret

00813444 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  813444:	defff804 	addi	sp,sp,-32
  813448:	df000715 	stw	fp,28(sp)
  81344c:	df000704 	addi	fp,sp,28
  813450:	e13ffb15 	stw	r4,-20(fp)
  813454:	e17ffc15 	stw	r5,-16(fp)
  813458:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  81345c:	00bff9c4 	movi	r2,-25
  813460:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  813464:	e0bffc17 	ldw	r2,-16(fp)
  813468:	e0bfff15 	stw	r2,-4(fp)
  81346c:	e0ffff17 	ldw	r3,-4(fp)
  813470:	189a8060 	cmpeqi	r2,r3,27137
  813474:	1000041e 	bne	r2,zero,813488 <altera_avalon_jtag_uart_ioctl+0x44>
  813478:	e0ffff17 	ldw	r3,-4(fp)
  81347c:	189a80a0 	cmpeqi	r2,r3,27138
  813480:	10001b1e 	bne	r2,zero,8134f0 <altera_avalon_jtag_uart_ioctl+0xac>
  813484:	00002706 	br	813524 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  813488:	e0bffb17 	ldw	r2,-20(fp)
  81348c:	10c00117 	ldw	r3,4(r2)
  813490:	00a00034 	movhi	r2,32768
  813494:	10bfffc4 	addi	r2,r2,-1
  813498:	18802226 	beq	r3,r2,813524 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  81349c:	e0bffd17 	ldw	r2,-12(fp)
  8134a0:	10800017 	ldw	r2,0(r2)
  8134a4:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  8134a8:	e0bff917 	ldw	r2,-28(fp)
  8134ac:	10800090 	cmplti	r2,r2,2
  8134b0:	1000071e 	bne	r2,zero,8134d0 <altera_avalon_jtag_uart_ioctl+0x8c>
  8134b4:	e0fff917 	ldw	r3,-28(fp)
  8134b8:	00a00034 	movhi	r2,32768
  8134bc:	10bfffc4 	addi	r2,r2,-1
  8134c0:	18800326 	beq	r3,r2,8134d0 <altera_avalon_jtag_uart_ioctl+0x8c>
  8134c4:	e0bff917 	ldw	r2,-28(fp)
  8134c8:	e0bffe15 	stw	r2,-8(fp)
  8134cc:	00000306 	br	8134dc <altera_avalon_jtag_uart_ioctl+0x98>
  8134d0:	00e00034 	movhi	r3,32768
  8134d4:	18ffff84 	addi	r3,r3,-2
  8134d8:	e0fffe15 	stw	r3,-8(fp)
  8134dc:	e0bffb17 	ldw	r2,-20(fp)
  8134e0:	e0fffe17 	ldw	r3,-8(fp)
  8134e4:	10c00115 	stw	r3,4(r2)
      rc = 0;
  8134e8:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  8134ec:	00000d06 	br	813524 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  8134f0:	e0bffb17 	ldw	r2,-20(fp)
  8134f4:	10c00117 	ldw	r3,4(r2)
  8134f8:	00a00034 	movhi	r2,32768
  8134fc:	10bfffc4 	addi	r2,r2,-1
  813500:	18800826 	beq	r3,r2,813524 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  813504:	e13ffd17 	ldw	r4,-12(fp)
  813508:	e0bffb17 	ldw	r2,-20(fp)
  81350c:	10c00917 	ldw	r3,36(r2)
  813510:	e0bffb17 	ldw	r2,-20(fp)
  813514:	10800117 	ldw	r2,4(r2)
  813518:	1885803a 	cmpltu	r2,r3,r2
  81351c:	20800015 	stw	r2,0(r4)
      rc = 0;
  813520:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  813524:	e0bffa17 	ldw	r2,-24(fp)
}
  813528:	e037883a 	mov	sp,fp
  81352c:	df000017 	ldw	fp,0(sp)
  813530:	dec00104 	addi	sp,sp,4
  813534:	f800283a 	ret

00813538 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  813538:	deffeb04 	addi	sp,sp,-84
  81353c:	dfc01415 	stw	ra,80(sp)
  813540:	df001315 	stw	fp,76(sp)
  813544:	df001304 	addi	fp,sp,76
  813548:	e13ffb15 	stw	r4,-20(fp)
  81354c:	e17ffc15 	stw	r5,-16(fp)
  813550:	e1bffd15 	stw	r6,-12(fp)
  813554:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  813558:	e0bffc17 	ldw	r2,-16(fp)
  81355c:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  813560:	e0bffb17 	ldw	r2,-20(fp)
  813564:	10800a17 	ldw	r2,40(r2)
  813568:	e0bff315 	stw	r2,-52(fp)
  81356c:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  813570:	e17ff40b 	ldhu	r5,-48(fp)
  813574:	e1bffa44 	addi	r6,fp,-23
  813578:	e13ff317 	ldw	r4,-52(fp)
  81357c:	081056c0 	call	81056c <OSSemPend>

  while (space > 0)
  813580:	00006406 	br	813714 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  813584:	e0bffb17 	ldw	r2,-20(fp)
  813588:	10800d17 	ldw	r2,52(r2)
  81358c:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  813590:	e0bffb17 	ldw	r2,-20(fp)
  813594:	10800e17 	ldw	r2,56(r2)
  813598:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  81359c:	e0fff617 	ldw	r3,-40(fp)
  8135a0:	e0bff517 	ldw	r2,-44(fp)
  8135a4:	18800536 	bltu	r3,r2,8135bc <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  8135a8:	e0bff617 	ldw	r2,-40(fp)
  8135ac:	e0fff517 	ldw	r3,-44(fp)
  8135b0:	10c5c83a 	sub	r2,r2,r3
  8135b4:	e0bff715 	stw	r2,-36(fp)
  8135b8:	00000406 	br	8135cc <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  8135bc:	00820004 	movi	r2,2048
  8135c0:	e0fff517 	ldw	r3,-44(fp)
  8135c4:	10c5c83a 	sub	r2,r2,r3
  8135c8:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8135cc:	e0bff717 	ldw	r2,-36(fp)
  8135d0:	1005003a 	cmpeq	r2,r2,zero
  8135d4:	10001f1e 	bne	r2,zero,813654 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  8135d8:	e0fffd17 	ldw	r3,-12(fp)
  8135dc:	e0bff717 	ldw	r2,-36(fp)
  8135e0:	1880022e 	bgeu	r3,r2,8135ec <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  8135e4:	e0bffd17 	ldw	r2,-12(fp)
  8135e8:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  8135ec:	e0bffb17 	ldw	r2,-20(fp)
  8135f0:	10c01104 	addi	r3,r2,68
  8135f4:	e0bff517 	ldw	r2,-44(fp)
  8135f8:	1887883a 	add	r3,r3,r2
  8135fc:	e0bff917 	ldw	r2,-28(fp)
  813600:	1009883a 	mov	r4,r2
  813604:	180b883a 	mov	r5,r3
  813608:	e1bff717 	ldw	r6,-36(fp)
  81360c:	08058440 	call	805844 <memcpy>
      ptr   += n;
  813610:	e0fff717 	ldw	r3,-36(fp)
  813614:	e0bff917 	ldw	r2,-28(fp)
  813618:	10c5883a 	add	r2,r2,r3
  81361c:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  813620:	e0fffd17 	ldw	r3,-12(fp)
  813624:	e0bff717 	ldw	r2,-36(fp)
  813628:	1885c83a 	sub	r2,r3,r2
  81362c:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813630:	e0fff517 	ldw	r3,-44(fp)
  813634:	e0bff717 	ldw	r2,-36(fp)
  813638:	1885883a 	add	r2,r3,r2
  81363c:	10c1ffcc 	andi	r3,r2,2047
  813640:	e0bffb17 	ldw	r2,-20(fp)
  813644:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  813648:	e0bffd17 	ldw	r2,-12(fp)
  81364c:	10800048 	cmpgei	r2,r2,1
  813650:	103fcc1e 	bne	r2,zero,813584 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  813654:	e0fff917 	ldw	r3,-28(fp)
  813658:	e0bffc17 	ldw	r2,-16(fp)
  81365c:	1880301e 	bne	r3,r2,813720 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  813660:	e0bffe17 	ldw	r2,-8(fp)
  813664:	1090000c 	andi	r2,r2,16384
  813668:	1004c03a 	cmpne	r2,r2,zero
  81366c:	10002c1e 	bne	r2,zero,813720 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  813670:	008020b4 	movhi	r2,130
  813674:	10a52844 	addi	r2,r2,-27487
  813678:	10800003 	ldbu	r2,0(r2)
  81367c:	10803fcc 	andi	r2,r2,255
  813680:	10800058 	cmpnei	r2,r2,1
  813684:	1000161e 	bne	r2,zero,8136e0 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  813688:	e0bffb17 	ldw	r2,-20(fp)
  81368c:	10800c17 	ldw	r2,48(r2)
  813690:	e0bff015 	stw	r2,-64(fp)
  813694:	00800144 	movi	r2,5
  813698:	e0bff10d 	sth	r2,-60(fp)
  81369c:	00bfe0c4 	movi	r2,-125
  8136a0:	e0bff185 	stb	r2,-58(fp)
  8136a4:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8136a8:	008020b4 	movhi	r2,130
  8136ac:	10a52844 	addi	r2,r2,-27487
  8136b0:	10800003 	ldbu	r2,0(r2)
  8136b4:	10803fcc 	andi	r2,r2,255
  8136b8:	1005003a 	cmpeq	r2,r2,zero
  8136bc:	1000111e 	bne	r2,zero,813704 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8136c0:	e17ff10b 	ldhu	r5,-60(fp)
  8136c4:	e1bff183 	ldbu	r6,-58(fp)
  8136c8:	e1fff20b 	ldhu	r7,-56(fp)
  8136cc:	e0bffa04 	addi	r2,fp,-24
  8136d0:	d8800015 	stw	r2,0(sp)
  8136d4:	e13ff017 	ldw	r4,-64(fp)
  8136d8:	080d6300 	call	80d630 <OSFlagPend>
    return err;
  8136dc:	00000906 	br	813704 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  8136e0:	e0bffb17 	ldw	r2,-20(fp)
  8136e4:	10c00d17 	ldw	r3,52(r2)
  8136e8:	e0bff617 	ldw	r2,-40(fp)
  8136ec:	1880051e 	bne	r3,r2,813704 <altera_avalon_jtag_uart_read+0x1cc>
  8136f0:	e0bffb17 	ldw	r2,-20(fp)
  8136f4:	10c00917 	ldw	r3,36(r2)
  8136f8:	e0bffb17 	ldw	r2,-20(fp)
  8136fc:	10800117 	ldw	r2,4(r2)
  813700:	18bff736 	bltu	r3,r2,8136e0 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  813704:	e0bffb17 	ldw	r2,-20(fp)
  813708:	10c00d17 	ldw	r3,52(r2)
  81370c:	e0bff617 	ldw	r2,-40(fp)
  813710:	18800326 	beq	r3,r2,813720 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  813714:	e0bffd17 	ldw	r2,-12(fp)
  813718:	10800048 	cmpgei	r2,r2,1
  81371c:	103f991e 	bne	r2,zero,813584 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  813720:	e0bffb17 	ldw	r2,-20(fp)
  813724:	11000a17 	ldw	r4,40(r2)
  813728:	08109640 	call	810964 <OSSemPost>

  if (ptr != buffer)
  81372c:	e0fff917 	ldw	r3,-28(fp)
  813730:	e0bffc17 	ldw	r2,-16(fp)
  813734:	18801926 	beq	r3,r2,81379c <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813738:	0005303a 	rdctl	r2,status
  81373c:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813740:	e0ffef17 	ldw	r3,-68(fp)
  813744:	00bfff84 	movi	r2,-2
  813748:	1884703a 	and	r2,r3,r2
  81374c:	1001703a 	wrctl	status,r2
  
  return context;
  813750:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  813754:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  813758:	e0bffb17 	ldw	r2,-20(fp)
  81375c:	10800817 	ldw	r2,32(r2)
  813760:	10c00054 	ori	r3,r2,1
  813764:	e0bffb17 	ldw	r2,-20(fp)
  813768:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  81376c:	e0bffb17 	ldw	r2,-20(fp)
  813770:	10800017 	ldw	r2,0(r2)
  813774:	11000104 	addi	r4,r2,4
  813778:	e0bffb17 	ldw	r2,-20(fp)
  81377c:	10800817 	ldw	r2,32(r2)
  813780:	1007883a 	mov	r3,r2
  813784:	2005883a 	mov	r2,r4
  813788:	10c00035 	stwio	r3,0(r2)
  81378c:	e0bff817 	ldw	r2,-32(fp)
  813790:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813794:	e0bfee17 	ldw	r2,-72(fp)
  813798:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  81379c:	e0fff917 	ldw	r3,-28(fp)
  8137a0:	e0bffc17 	ldw	r2,-16(fp)
  8137a4:	18800526 	beq	r3,r2,8137bc <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8137a8:	e0fff917 	ldw	r3,-28(fp)
  8137ac:	e0bffc17 	ldw	r2,-16(fp)
  8137b0:	1887c83a 	sub	r3,r3,r2
  8137b4:	e0ffff15 	stw	r3,-4(fp)
  8137b8:	00000906 	br	8137e0 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8137bc:	e0bffe17 	ldw	r2,-8(fp)
  8137c0:	1090000c 	andi	r2,r2,16384
  8137c4:	1005003a 	cmpeq	r2,r2,zero
  8137c8:	1000031e 	bne	r2,zero,8137d8 <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  8137cc:	00bffd44 	movi	r2,-11
  8137d0:	e0bfff15 	stw	r2,-4(fp)
  8137d4:	00000206 	br	8137e0 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  8137d8:	00bffec4 	movi	r2,-5
  8137dc:	e0bfff15 	stw	r2,-4(fp)
  8137e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8137e4:	e037883a 	mov	sp,fp
  8137e8:	dfc00117 	ldw	ra,4(sp)
  8137ec:	df000017 	ldw	fp,0(sp)
  8137f0:	dec00204 	addi	sp,sp,8
  8137f4:	f800283a 	ret

008137f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  8137f8:	deffeb04 	addi	sp,sp,-84
  8137fc:	dfc01415 	stw	ra,80(sp)
  813800:	df001315 	stw	fp,76(sp)
  813804:	df001304 	addi	fp,sp,76
  813808:	e13ffb15 	stw	r4,-20(fp)
  81380c:	e17ffc15 	stw	r5,-16(fp)
  813810:	e1bffd15 	stw	r6,-12(fp)
  813814:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  813818:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  81381c:	e0bffc17 	ldw	r2,-16(fp)
  813820:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  813824:	e0bffb17 	ldw	r2,-20(fp)
  813828:	10800b17 	ldw	r2,44(r2)
  81382c:	e0bff315 	stw	r2,-52(fp)
  813830:	e03ff40d 	sth	zero,-48(fp)
  813834:	e17ff40b 	ldhu	r5,-48(fp)
  813838:	e1bffa04 	addi	r6,fp,-24
  81383c:	e13ff317 	ldw	r4,-52(fp)
  813840:	081056c0 	call	81056c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813844:	00003a06 	br	813930 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  813848:	e0bffb17 	ldw	r2,-20(fp)
  81384c:	10800f17 	ldw	r2,60(r2)
  813850:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  813854:	e0bffb17 	ldw	r2,-20(fp)
  813858:	10801017 	ldw	r2,64(r2)
  81385c:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  813860:	e0fff917 	ldw	r3,-28(fp)
  813864:	e0bff817 	ldw	r2,-32(fp)
  813868:	1880062e 	bgeu	r3,r2,813884 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  81386c:	e0fff817 	ldw	r3,-32(fp)
  813870:	e0bff917 	ldw	r2,-28(fp)
  813874:	1885c83a 	sub	r2,r3,r2
  813878:	10bfffc4 	addi	r2,r2,-1
  81387c:	e0bff715 	stw	r2,-36(fp)
  813880:	00000c06 	br	8138b4 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  813884:	e0bff817 	ldw	r2,-32(fp)
  813888:	1005003a 	cmpeq	r2,r2,zero
  81388c:	1000051e 	bne	r2,zero,8138a4 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  813890:	00820004 	movi	r2,2048
  813894:	e0fff917 	ldw	r3,-28(fp)
  813898:	10c5c83a 	sub	r2,r2,r3
  81389c:	e0bff715 	stw	r2,-36(fp)
  8138a0:	00000406 	br	8138b4 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8138a4:	0081ffc4 	movi	r2,2047
  8138a8:	e0fff917 	ldw	r3,-28(fp)
  8138ac:	10c5c83a 	sub	r2,r2,r3
  8138b0:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8138b4:	e0bff717 	ldw	r2,-36(fp)
  8138b8:	1005003a 	cmpeq	r2,r2,zero
  8138bc:	10001f1e 	bne	r2,zero,81393c <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8138c0:	e0fffd17 	ldw	r3,-12(fp)
  8138c4:	e0bff717 	ldw	r2,-36(fp)
  8138c8:	1880022e 	bgeu	r3,r2,8138d4 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  8138cc:	e0bffd17 	ldw	r2,-12(fp)
  8138d0:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  8138d4:	e0bffb17 	ldw	r2,-20(fp)
  8138d8:	10c21104 	addi	r3,r2,2116
  8138dc:	e0bff917 	ldw	r2,-28(fp)
  8138e0:	1885883a 	add	r2,r3,r2
  8138e4:	e0fffc17 	ldw	r3,-16(fp)
  8138e8:	1009883a 	mov	r4,r2
  8138ec:	180b883a 	mov	r5,r3
  8138f0:	e1bff717 	ldw	r6,-36(fp)
  8138f4:	08058440 	call	805844 <memcpy>
      ptr   += n;
  8138f8:	e0fff717 	ldw	r3,-36(fp)
  8138fc:	e0bffc17 	ldw	r2,-16(fp)
  813900:	10c5883a 	add	r2,r2,r3
  813904:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  813908:	e0fffd17 	ldw	r3,-12(fp)
  81390c:	e0bff717 	ldw	r2,-36(fp)
  813910:	1885c83a 	sub	r2,r3,r2
  813914:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  813918:	e0fff917 	ldw	r3,-28(fp)
  81391c:	e0bff717 	ldw	r2,-36(fp)
  813920:	1885883a 	add	r2,r3,r2
  813924:	10c1ffcc 	andi	r3,r2,2047
  813928:	e0bffb17 	ldw	r2,-20(fp)
  81392c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  813930:	e0bffd17 	ldw	r2,-12(fp)
  813934:	10800048 	cmpgei	r2,r2,1
  813938:	103fc31e 	bne	r2,zero,813848 <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81393c:	0005303a 	rdctl	r2,status
  813940:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813944:	e0fff217 	ldw	r3,-56(fp)
  813948:	00bfff84 	movi	r2,-2
  81394c:	1884703a 	and	r2,r3,r2
  813950:	1001703a 	wrctl	status,r2
  
  return context;
  813954:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  813958:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  81395c:	e0bffb17 	ldw	r2,-20(fp)
  813960:	10800817 	ldw	r2,32(r2)
  813964:	10c00094 	ori	r3,r2,2
  813968:	e0bffb17 	ldw	r2,-20(fp)
  81396c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  813970:	e0bffb17 	ldw	r2,-20(fp)
  813974:	10800017 	ldw	r2,0(r2)
  813978:	11000104 	addi	r4,r2,4
  81397c:	e0bffb17 	ldw	r2,-20(fp)
  813980:	10800817 	ldw	r2,32(r2)
  813984:	1007883a 	mov	r3,r2
  813988:	2005883a 	mov	r2,r4
  81398c:	10c00035 	stwio	r3,0(r2)
  813990:	e0bff617 	ldw	r2,-40(fp)
  813994:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813998:	e0bff117 	ldw	r2,-60(fp)
  81399c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8139a0:	e0bffd17 	ldw	r2,-12(fp)
  8139a4:	10800050 	cmplti	r2,r2,1
  8139a8:	10002d1e 	bne	r2,zero,813a60 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8139ac:	e0bffe17 	ldw	r2,-8(fp)
  8139b0:	1090000c 	andi	r2,r2,16384
  8139b4:	1004c03a 	cmpne	r2,r2,zero
  8139b8:	10002c1e 	bne	r2,zero,813a6c <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8139bc:	008020b4 	movhi	r2,130
  8139c0:	10a52844 	addi	r2,r2,-27487
  8139c4:	10800003 	ldbu	r2,0(r2)
  8139c8:	10803fcc 	andi	r2,r2,255
  8139cc:	10800058 	cmpnei	r2,r2,1
  8139d0:	1000161e 	bne	r2,zero,813a2c <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  8139d4:	e0bffb17 	ldw	r2,-20(fp)
  8139d8:	10800c17 	ldw	r2,48(r2)
  8139dc:	e0bfee15 	stw	r2,-72(fp)
  8139e0:	00800184 	movi	r2,6
  8139e4:	e0bfef0d 	sth	r2,-68(fp)
  8139e8:	00bfe0c4 	movi	r2,-125
  8139ec:	e0bfef85 	stb	r2,-66(fp)
  8139f0:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8139f4:	008020b4 	movhi	r2,130
  8139f8:	10a52844 	addi	r2,r2,-27487
  8139fc:	10800003 	ldbu	r2,0(r2)
  813a00:	10803fcc 	andi	r2,r2,255
  813a04:	1005003a 	cmpeq	r2,r2,zero
  813a08:	1000111e 	bne	r2,zero,813a50 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  813a0c:	e17fef0b 	ldhu	r5,-68(fp)
  813a10:	e1bfef83 	ldbu	r6,-66(fp)
  813a14:	e1fff00b 	ldhu	r7,-64(fp)
  813a18:	e0bffa44 	addi	r2,fp,-23
  813a1c:	d8800015 	stw	r2,0(sp)
  813a20:	e13fee17 	ldw	r4,-72(fp)
  813a24:	080d6300 	call	80d630 <OSFlagPend>
    return err;
  813a28:	00000906 	br	813a50 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  813a2c:	e0bffb17 	ldw	r2,-20(fp)
  813a30:	10c01017 	ldw	r3,64(r2)
  813a34:	e0bff817 	ldw	r2,-32(fp)
  813a38:	1880051e 	bne	r3,r2,813a50 <altera_avalon_jtag_uart_write+0x258>
  813a3c:	e0bffb17 	ldw	r2,-20(fp)
  813a40:	10c00917 	ldw	r3,36(r2)
  813a44:	e0bffb17 	ldw	r2,-20(fp)
  813a48:	10800117 	ldw	r2,4(r2)
  813a4c:	18bff736 	bltu	r3,r2,813a2c <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  813a50:	e0bffb17 	ldw	r2,-20(fp)
  813a54:	10c01017 	ldw	r3,64(r2)
  813a58:	e0bff817 	ldw	r2,-32(fp)
  813a5c:	18800326 	beq	r3,r2,813a6c <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  813a60:	e0bffd17 	ldw	r2,-12(fp)
  813a64:	10800048 	cmpgei	r2,r2,1
  813a68:	103fb11e 	bne	r2,zero,813930 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  813a6c:	e0bffb17 	ldw	r2,-20(fp)
  813a70:	11000b17 	ldw	r4,44(r2)
  813a74:	08109640 	call	810964 <OSSemPost>

  if (ptr != start)
  813a78:	e0fffc17 	ldw	r3,-16(fp)
  813a7c:	e0bff517 	ldw	r2,-44(fp)
  813a80:	18800526 	beq	r3,r2,813a98 <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  813a84:	e0fffc17 	ldw	r3,-16(fp)
  813a88:	e0bff517 	ldw	r2,-44(fp)
  813a8c:	1887c83a 	sub	r3,r3,r2
  813a90:	e0ffff15 	stw	r3,-4(fp)
  813a94:	00000906 	br	813abc <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  813a98:	e0bffe17 	ldw	r2,-8(fp)
  813a9c:	1090000c 	andi	r2,r2,16384
  813aa0:	1005003a 	cmpeq	r2,r2,zero
  813aa4:	1000031e 	bne	r2,zero,813ab4 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  813aa8:	00bffd44 	movi	r2,-11
  813aac:	e0bfff15 	stw	r2,-4(fp)
  813ab0:	00000206 	br	813abc <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  813ab4:	00bffec4 	movi	r2,-5
  813ab8:	e0bfff15 	stw	r2,-4(fp)
  813abc:	e0bfff17 	ldw	r2,-4(fp)
}
  813ac0:	e037883a 	mov	sp,fp
  813ac4:	dfc00117 	ldw	ra,4(sp)
  813ac8:	df000017 	ldw	fp,0(sp)
  813acc:	dec00204 	addi	sp,sp,8
  813ad0:	f800283a 	ret

00813ad4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  813ad4:	defffa04 	addi	sp,sp,-24
  813ad8:	dfc00515 	stw	ra,20(sp)
  813adc:	df000415 	stw	fp,16(sp)
  813ae0:	df000404 	addi	fp,sp,16
  813ae4:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  813ae8:	e0bfff17 	ldw	r2,-4(fp)
  813aec:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  813af0:	e0bfff17 	ldw	r2,-4(fp)
  813af4:	10800104 	addi	r2,r2,4
  813af8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813afc:	0005303a 	rdctl	r2,status
  813b00:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813b04:	e0fffd17 	ldw	r3,-12(fp)
  813b08:	00bfff84 	movi	r2,-2
  813b0c:	1884703a 	and	r2,r3,r2
  813b10:	1001703a 	wrctl	status,r2
  
  return context;
  813b14:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  813b18:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  813b1c:	0814ca00 	call	814ca0 <alt_tick>
  813b20:	e0bffe17 	ldw	r2,-8(fp)
  813b24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813b28:	e0bffc17 	ldw	r2,-16(fp)
  813b2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  813b30:	e037883a 	mov	sp,fp
  813b34:	dfc00117 	ldw	ra,4(sp)
  813b38:	df000017 	ldw	fp,0(sp)
  813b3c:	dec00204 	addi	sp,sp,8
  813b40:	f800283a 	ret

00813b44 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  813b44:	defff804 	addi	sp,sp,-32
  813b48:	dfc00715 	stw	ra,28(sp)
  813b4c:	df000615 	stw	fp,24(sp)
  813b50:	df000604 	addi	fp,sp,24
  813b54:	e13ffc15 	stw	r4,-16(fp)
  813b58:	e17ffd15 	stw	r5,-12(fp)
  813b5c:	e1bffe15 	stw	r6,-8(fp)
  813b60:	e1ffff15 	stw	r7,-4(fp)
  813b64:	e0bfff17 	ldw	r2,-4(fp)
  813b68:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  813b6c:	008020b4 	movhi	r2,130
  813b70:	10a53d04 	addi	r2,r2,-27404
  813b74:	10800017 	ldw	r2,0(r2)
  813b78:	1004c03a 	cmpne	r2,r2,zero
  813b7c:	1000041e 	bne	r2,zero,813b90 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  813b80:	00c020b4 	movhi	r3,130
  813b84:	18e53d04 	addi	r3,r3,-27404
  813b88:	e0bffb17 	ldw	r2,-20(fp)
  813b8c:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  813b90:	e0bffc17 	ldw	r2,-16(fp)
  813b94:	10800104 	addi	r2,r2,4
  813b98:	1007883a 	mov	r3,r2
  813b9c:	008001c4 	movi	r2,7
  813ba0:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  813ba4:	d8000015 	stw	zero,0(sp)
  813ba8:	e13ffd17 	ldw	r4,-12(fp)
  813bac:	e17ffe17 	ldw	r5,-8(fp)
  813bb0:	01802074 	movhi	r6,129
  813bb4:	318eb504 	addi	r6,r6,15060
  813bb8:	e1fffc17 	ldw	r7,-16(fp)
  813bbc:	081453c0 	call	81453c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  813bc0:	e037883a 	mov	sp,fp
  813bc4:	dfc00117 	ldw	ra,4(sp)
  813bc8:	df000017 	ldw	fp,0(sp)
  813bcc:	dec00204 	addi	sp,sp,8
  813bd0:	f800283a 	ret

00813bd4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  813bd4:	defffc04 	addi	sp,sp,-16
  813bd8:	df000315 	stw	fp,12(sp)
  813bdc:	df000304 	addi	fp,sp,12
  813be0:	e13ffe15 	stw	r4,-8(fp)
  813be4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  813be8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  813bec:	e0bfff17 	ldw	r2,-4(fp)
  813bf0:	1004c03a 	cmpne	r2,r2,zero
  813bf4:	1000061e 	bne	r2,zero,813c10 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  813bf8:	e0bffe17 	ldw	r2,-8(fp)
  813bfc:	1007883a 	mov	r3,r2
  813c00:	e0bffd03 	ldbu	r2,-12(fp)
  813c04:	10c4b03a 	or	r2,r2,r3
  813c08:	e0bffd05 	stb	r2,-12(fp)
  813c0c:	00000806 	br	813c30 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  813c10:	e0bffe17 	ldw	r2,-8(fp)
  813c14:	1007883a 	mov	r3,r2
  813c18:	e0bffd03 	ldbu	r2,-12(fp)
  813c1c:	10c4b03a 	or	r2,r2,r3
  813c20:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  813c24:	e0bffd03 	ldbu	r2,-12(fp)
  813c28:	10801014 	ori	r2,r2,64
  813c2c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  813c30:	e0fffd03 	ldbu	r3,-12(fp)
  813c34:	00bfe004 	movi	r2,-128
  813c38:	1884b03a 	or	r2,r3,r2
  813c3c:	10803fcc 	andi	r2,r2,255
}
  813c40:	e037883a 	mov	sp,fp
  813c44:	df000017 	ldw	fp,0(sp)
  813c48:	dec00104 	addi	sp,sp,4
  813c4c:	f800283a 	ret

00813c50 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  813c50:	defffd04 	addi	sp,sp,-12
  813c54:	df000215 	stw	fp,8(sp)
  813c58:	df000204 	addi	fp,sp,8
  813c5c:	e13ffe15 	stw	r4,-8(fp)
  813c60:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  813c64:	e0bffe17 	ldw	r2,-8(fp)
  813c68:	10800a17 	ldw	r2,40(r2)
  813c6c:	e0ffff03 	ldbu	r3,-4(fp)
  813c70:	10c00025 	stbio	r3,0(r2)
}
  813c74:	e037883a 	mov	sp,fp
  813c78:	df000017 	ldw	fp,0(sp)
  813c7c:	dec00104 	addi	sp,sp,4
  813c80:	f800283a 	ret

00813c84 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  813c84:	defffe04 	addi	sp,sp,-8
  813c88:	df000115 	stw	fp,4(sp)
  813c8c:	df000104 	addi	fp,sp,4
  813c90:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  813c94:	e0bfff17 	ldw	r2,-4(fp)
  813c98:	10800a17 	ldw	r2,40(r2)
  813c9c:	1007883a 	mov	r3,r2
  813ca0:	00800044 	movi	r2,1
  813ca4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  813ca8:	e037883a 	mov	sp,fp
  813cac:	df000017 	ldw	fp,0(sp)
  813cb0:	dec00104 	addi	sp,sp,4
  813cb4:	f800283a 	ret

00813cb8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  813cb8:	defffc04 	addi	sp,sp,-16
  813cbc:	dfc00315 	stw	ra,12(sp)
  813cc0:	df000215 	stw	fp,8(sp)
  813cc4:	df000204 	addi	fp,sp,8
  813cc8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  813ccc:	e13fff17 	ldw	r4,-4(fp)
  813cd0:	01402074 	movhi	r5,129
  813cd4:	295e2d04 	addi	r5,r5,30900
  813cd8:	08144780 	call	814478 <alt_find_dev>
  813cdc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  813ce0:	e0bffe17 	ldw	r2,-8(fp)
}
  813ce4:	e037883a 	mov	sp,fp
  813ce8:	dfc00117 	ldw	ra,4(sp)
  813cec:	df000017 	ldw	fp,0(sp)
  813cf0:	dec00204 	addi	sp,sp,8
  813cf4:	f800283a 	ret

00813cf8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  813cf8:	defffb04 	addi	sp,sp,-20
  813cfc:	df000415 	stw	fp,16(sp)
  813d00:	df000404 	addi	fp,sp,16
  813d04:	e13ffd15 	stw	r4,-12(fp)
  813d08:	e17ffe15 	stw	r5,-8(fp)
  813d0c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  813d10:	e03ffc15 	stw	zero,-16(fp)
  813d14:	00000f06 	br	813d54 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  813d18:	e0bffd17 	ldw	r2,-12(fp)
  813d1c:	10800a17 	ldw	r2,40(r2)
  813d20:	11000044 	addi	r4,r2,1
  813d24:	e0fffc17 	ldw	r3,-16(fp)
  813d28:	e0bffe17 	ldw	r2,-8(fp)
  813d2c:	1885883a 	add	r2,r3,r2
  813d30:	10800003 	ldbu	r2,0(r2)
  813d34:	10c03fcc 	andi	r3,r2,255
  813d38:	18c0201c 	xori	r3,r3,128
  813d3c:	18ffe004 	addi	r3,r3,-128
  813d40:	2005883a 	mov	r2,r4
  813d44:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  813d48:	e0bffc17 	ldw	r2,-16(fp)
  813d4c:	10800044 	addi	r2,r2,1
  813d50:	e0bffc15 	stw	r2,-16(fp)
  813d54:	e0fffc17 	ldw	r3,-16(fp)
  813d58:	e0bfff17 	ldw	r2,-4(fp)
  813d5c:	18bfee36 	bltu	r3,r2,813d18 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  813d60:	e037883a 	mov	sp,fp
  813d64:	df000017 	ldw	fp,0(sp)
  813d68:	dec00104 	addi	sp,sp,4
  813d6c:	f800283a 	ret

00813d70 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  813d70:	defffd04 	addi	sp,sp,-12
  813d74:	df000215 	stw	fp,8(sp)
  813d78:	df000204 	addi	fp,sp,8
  813d7c:	e13ffe15 	stw	r4,-8(fp)
  813d80:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  813d84:	00000d06 	br	813dbc <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  813d88:	e0bffe17 	ldw	r2,-8(fp)
  813d8c:	10800a17 	ldw	r2,40(r2)
  813d90:	11000044 	addi	r4,r2,1
  813d94:	e0bfff17 	ldw	r2,-4(fp)
  813d98:	10800003 	ldbu	r2,0(r2)
  813d9c:	10c03fcc 	andi	r3,r2,255
  813da0:	18c0201c 	xori	r3,r3,128
  813da4:	18ffe004 	addi	r3,r3,-128
  813da8:	2005883a 	mov	r2,r4
  813dac:	10c00025 	stbio	r3,0(r2)
		++ptr;
  813db0:	e0bfff17 	ldw	r2,-4(fp)
  813db4:	10800044 	addi	r2,r2,1
  813db8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  813dbc:	e0bfff17 	ldw	r2,-4(fp)
  813dc0:	10800003 	ldbu	r2,0(r2)
  813dc4:	10803fcc 	andi	r2,r2,255
  813dc8:	1080201c 	xori	r2,r2,128
  813dcc:	10bfe004 	addi	r2,r2,-128
  813dd0:	1004c03a 	cmpne	r2,r2,zero
  813dd4:	103fec1e 	bne	r2,zero,813d88 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  813dd8:	e037883a 	mov	sp,fp
  813ddc:	df000017 	ldw	fp,0(sp)
  813de0:	dec00104 	addi	sp,sp,4
  813de4:	f800283a 	ret

00813de8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  813de8:	defffb04 	addi	sp,sp,-20
  813dec:	dfc00415 	stw	ra,16(sp)
  813df0:	df000315 	stw	fp,12(sp)
  813df4:	df000304 	addi	fp,sp,12
  813df8:	e13ffd15 	stw	r4,-12(fp)
  813dfc:	e17ffe15 	stw	r5,-8(fp)
  813e00:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  813e04:	e0bffd17 	ldw	r2,-12(fp)
  813e08:	10800017 	ldw	r2,0(r2)
  813e0c:	1009883a 	mov	r4,r2
  813e10:	e1bfff17 	ldw	r6,-4(fp)
  813e14:	e17ffe17 	ldw	r5,-8(fp)
  813e18:	0813cf80 	call	813cf8 <alt_up_character_lcd_write>
	return 0;
  813e1c:	0005883a 	mov	r2,zero
}
  813e20:	e037883a 	mov	sp,fp
  813e24:	dfc00117 	ldw	ra,4(sp)
  813e28:	df000017 	ldw	fp,0(sp)
  813e2c:	dec00204 	addi	sp,sp,8
  813e30:	f800283a 	ret

00813e34 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  813e34:	defff904 	addi	sp,sp,-28
  813e38:	dfc00615 	stw	ra,24(sp)
  813e3c:	df000515 	stw	fp,20(sp)
  813e40:	df000504 	addi	fp,sp,20
  813e44:	e13ffc15 	stw	r4,-16(fp)
  813e48:	e17ffd15 	stw	r5,-12(fp)
  813e4c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  813e50:	e0bffd17 	ldw	r2,-12(fp)
  813e54:	10800a28 	cmpgeui	r2,r2,40
  813e58:	1000031e 	bne	r2,zero,813e68 <alt_up_character_lcd_set_cursor_pos+0x34>
  813e5c:	e0bffe17 	ldw	r2,-8(fp)
  813e60:	108000b0 	cmpltui	r2,r2,2
  813e64:	1000031e 	bne	r2,zero,813e74 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  813e68:	00bfffc4 	movi	r2,-1
  813e6c:	e0bfff15 	stw	r2,-4(fp)
  813e70:	00000806 	br	813e94 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  813e74:	e13ffd17 	ldw	r4,-12(fp)
  813e78:	e17ffe17 	ldw	r5,-8(fp)
  813e7c:	0813bd40 	call	813bd4 <get_DDRAM_addr>
  813e80:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  813e84:	e17ffb03 	ldbu	r5,-20(fp)
  813e88:	e13ffc17 	ldw	r4,-16(fp)
  813e8c:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
	return 0;
  813e90:	e03fff15 	stw	zero,-4(fp)
  813e94:	e0bfff17 	ldw	r2,-4(fp)
}
  813e98:	e037883a 	mov	sp,fp
  813e9c:	dfc00117 	ldw	ra,4(sp)
  813ea0:	df000017 	ldw	fp,0(sp)
  813ea4:	dec00204 	addi	sp,sp,8
  813ea8:	f800283a 	ret

00813eac <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  813eac:	defff904 	addi	sp,sp,-28
  813eb0:	dfc00615 	stw	ra,24(sp)
  813eb4:	df000515 	stw	fp,20(sp)
  813eb8:	df000504 	addi	fp,sp,20
  813ebc:	e13ffc15 	stw	r4,-16(fp)
  813ec0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  813ec4:	e0bffd17 	ldw	r2,-12(fp)
  813ec8:	1005003a 	cmpeq	r2,r2,zero
  813ecc:	10001e1e 	bne	r2,zero,813f48 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  813ed0:	e0bffd17 	ldw	r2,-12(fp)
  813ed4:	10800050 	cmplti	r2,r2,1
  813ed8:	1000031e 	bne	r2,zero,813ee8 <alt_up_character_lcd_shift_cursor+0x3c>
  813edc:	00800504 	movi	r2,20
  813ee0:	e0bfff05 	stb	r2,-4(fp)
  813ee4:	00000206 	br	813ef0 <alt_up_character_lcd_shift_cursor+0x44>
  813ee8:	00c00404 	movi	r3,16
  813eec:	e0ffff05 	stb	r3,-4(fp)
  813ef0:	e0bfff03 	ldbu	r2,-4(fp)
  813ef4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  813ef8:	e0fffd17 	ldw	r3,-12(fp)
  813efc:	e0fffe15 	stw	r3,-8(fp)
  813f00:	e0fffe17 	ldw	r3,-8(fp)
  813f04:	1804403a 	cmpge	r2,r3,zero
  813f08:	1000031e 	bne	r2,zero,813f18 <alt_up_character_lcd_shift_cursor+0x6c>
  813f0c:	e0bffe17 	ldw	r2,-8(fp)
  813f10:	0085c83a 	sub	r2,zero,r2
  813f14:	e0bffe15 	stw	r2,-8(fp)
  813f18:	e0fffe17 	ldw	r3,-8(fp)
  813f1c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  813f20:	00000306 	br	813f30 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  813f24:	e17ffb43 	ldbu	r5,-19(fp)
  813f28:	e13ffc17 	ldw	r4,-16(fp)
  813f2c:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  813f30:	e0bffb03 	ldbu	r2,-20(fp)
  813f34:	10bfffc4 	addi	r2,r2,-1
  813f38:	e0bffb05 	stb	r2,-20(fp)
  813f3c:	e0bffb03 	ldbu	r2,-20(fp)
  813f40:	10803fd8 	cmpnei	r2,r2,255
  813f44:	103ff71e 	bne	r2,zero,813f24 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  813f48:	e037883a 	mov	sp,fp
  813f4c:	dfc00117 	ldw	ra,4(sp)
  813f50:	df000017 	ldw	fp,0(sp)
  813f54:	dec00204 	addi	sp,sp,8
  813f58:	f800283a 	ret

00813f5c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  813f5c:	defff904 	addi	sp,sp,-28
  813f60:	dfc00615 	stw	ra,24(sp)
  813f64:	df000515 	stw	fp,20(sp)
  813f68:	df000504 	addi	fp,sp,20
  813f6c:	e13ffc15 	stw	r4,-16(fp)
  813f70:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  813f74:	e0bffd17 	ldw	r2,-12(fp)
  813f78:	1005003a 	cmpeq	r2,r2,zero
  813f7c:	10001e1e 	bne	r2,zero,813ff8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  813f80:	e0bffd17 	ldw	r2,-12(fp)
  813f84:	10800050 	cmplti	r2,r2,1
  813f88:	1000031e 	bne	r2,zero,813f98 <alt_up_character_lcd_shift_display+0x3c>
  813f8c:	00800704 	movi	r2,28
  813f90:	e0bfff05 	stb	r2,-4(fp)
  813f94:	00000206 	br	813fa0 <alt_up_character_lcd_shift_display+0x44>
  813f98:	00c00604 	movi	r3,24
  813f9c:	e0ffff05 	stb	r3,-4(fp)
  813fa0:	e0bfff03 	ldbu	r2,-4(fp)
  813fa4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  813fa8:	e0fffd17 	ldw	r3,-12(fp)
  813fac:	e0fffe15 	stw	r3,-8(fp)
  813fb0:	e0fffe17 	ldw	r3,-8(fp)
  813fb4:	1804403a 	cmpge	r2,r3,zero
  813fb8:	1000031e 	bne	r2,zero,813fc8 <alt_up_character_lcd_shift_display+0x6c>
  813fbc:	e0bffe17 	ldw	r2,-8(fp)
  813fc0:	0085c83a 	sub	r2,zero,r2
  813fc4:	e0bffe15 	stw	r2,-8(fp)
  813fc8:	e0fffe17 	ldw	r3,-8(fp)
  813fcc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  813fd0:	00000306 	br	813fe0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  813fd4:	e17ffb43 	ldbu	r5,-19(fp)
  813fd8:	e13ffc17 	ldw	r4,-16(fp)
  813fdc:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  813fe0:	e0bffb03 	ldbu	r2,-20(fp)
  813fe4:	10bfffc4 	addi	r2,r2,-1
  813fe8:	e0bffb05 	stb	r2,-20(fp)
  813fec:	e0bffb03 	ldbu	r2,-20(fp)
  813ff0:	10803fd8 	cmpnei	r2,r2,255
  813ff4:	103ff71e 	bne	r2,zero,813fd4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  813ff8:	e037883a 	mov	sp,fp
  813ffc:	dfc00117 	ldw	ra,4(sp)
  814000:	df000017 	ldw	fp,0(sp)
  814004:	dec00204 	addi	sp,sp,8
  814008:	f800283a 	ret

0081400c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  81400c:	defff904 	addi	sp,sp,-28
  814010:	dfc00615 	stw	ra,24(sp)
  814014:	df000515 	stw	fp,20(sp)
  814018:	df000504 	addi	fp,sp,20
  81401c:	e13ffc15 	stw	r4,-16(fp)
  814020:	e17ffd15 	stw	r5,-12(fp)
  814024:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  814028:	e0bffd17 	ldw	r2,-12(fp)
  81402c:	10800a28 	cmpgeui	r2,r2,40
  814030:	1000031e 	bne	r2,zero,814040 <alt_up_character_lcd_erase_pos+0x34>
  814034:	e0bffe17 	ldw	r2,-8(fp)
  814038:	108000b0 	cmpltui	r2,r2,2
  81403c:	1000031e 	bne	r2,zero,81404c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  814040:	00bfffc4 	movi	r2,-1
  814044:	e0bfff15 	stw	r2,-4(fp)
  814048:	00000e06 	br	814084 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  81404c:	e13ffd17 	ldw	r4,-12(fp)
  814050:	e17ffe17 	ldw	r5,-8(fp)
  814054:	0813bd40 	call	813bd4 <get_DDRAM_addr>
  814058:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  81405c:	e17ffb03 	ldbu	r5,-20(fp)
  814060:	e13ffc17 	ldw	r4,-16(fp)
  814064:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	// NEM Bug Fix. Next loc sends | to the LCD instead of erase
	// Changed to send a simple space. Not really erase but good enough
	//IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, ' ');
  814068:	e0bffc17 	ldw	r2,-16(fp)
  81406c:	10800a17 	ldw	r2,40(r2)
  814070:	10800044 	addi	r2,r2,1
  814074:	1007883a 	mov	r3,r2
  814078:	00800804 	movi	r2,32
  81407c:	18800025 	stbio	r2,0(r3)
	// END NEM Bug Fixs
	return 0;
  814080:	e03fff15 	stw	zero,-4(fp)
  814084:	e0bfff17 	ldw	r2,-4(fp)
}
  814088:	e037883a 	mov	sp,fp
  81408c:	dfc00117 	ldw	ra,4(sp)
  814090:	df000017 	ldw	fp,0(sp)
  814094:	dec00204 	addi	sp,sp,8
  814098:	f800283a 	ret

0081409c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  81409c:	defffd04 	addi	sp,sp,-12
  8140a0:	dfc00215 	stw	ra,8(sp)
  8140a4:	df000115 	stw	fp,4(sp)
  8140a8:	df000104 	addi	fp,sp,4
  8140ac:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  8140b0:	e13fff17 	ldw	r4,-4(fp)
  8140b4:	01400304 	movi	r5,12
  8140b8:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
}
  8140bc:	e037883a 	mov	sp,fp
  8140c0:	dfc00117 	ldw	ra,4(sp)
  8140c4:	df000017 	ldw	fp,0(sp)
  8140c8:	dec00204 	addi	sp,sp,8
  8140cc:	f800283a 	ret

008140d0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  8140d0:	defffd04 	addi	sp,sp,-12
  8140d4:	dfc00215 	stw	ra,8(sp)
  8140d8:	df000115 	stw	fp,4(sp)
  8140dc:	df000104 	addi	fp,sp,4
  8140e0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  8140e4:	e13fff17 	ldw	r4,-4(fp)
  8140e8:	014003c4 	movi	r5,15
  8140ec:	0813c500 	call	813c50 <alt_up_character_lcd_send_cmd>
}
  8140f0:	e037883a 	mov	sp,fp
  8140f4:	dfc00117 	ldw	ra,4(sp)
  8140f8:	df000017 	ldw	fp,0(sp)
  8140fc:	dec00204 	addi	sp,sp,8
  814100:	f800283a 	ret

00814104 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  814104:	defff404 	addi	sp,sp,-48
  814108:	df000b15 	stw	fp,44(sp)
  81410c:	df000b04 	addi	fp,sp,44
  814110:	e13ffb15 	stw	r4,-20(fp)
  814114:	e17ffc15 	stw	r5,-16(fp)
  814118:	e1bffd15 	stw	r6,-12(fp)
  81411c:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  814120:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  814124:	008020b4 	movhi	r2,130
  814128:	10a53d04 	addi	r2,r2,-27404
  81412c:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  814130:	1005003a 	cmpeq	r2,r2,zero
  814134:	1000411e 	bne	r2,zero,81423c <alt_alarm_start+0x138>
  {
    if (alarm)
  814138:	e0bffb17 	ldw	r2,-20(fp)
  81413c:	1005003a 	cmpeq	r2,r2,zero
  814140:	10003b1e 	bne	r2,zero,814230 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  814144:	e0fffb17 	ldw	r3,-20(fp)
  814148:	e0bffd17 	ldw	r2,-12(fp)
  81414c:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  814150:	e0fffb17 	ldw	r3,-20(fp)
  814154:	e0bffe17 	ldw	r2,-8(fp)
  814158:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81415c:	0005303a 	rdctl	r2,status
  814160:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814164:	e0fff817 	ldw	r3,-32(fp)
  814168:	00bfff84 	movi	r2,-2
  81416c:	1884703a 	and	r2,r3,r2
  814170:	1001703a 	wrctl	status,r2
  
  return context;
  814174:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  814178:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  81417c:	008020b4 	movhi	r2,130
  814180:	10a53e04 	addi	r2,r2,-27400
  814184:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  814188:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81418c:	e0fffc17 	ldw	r3,-16(fp)
  814190:	e0bff917 	ldw	r2,-28(fp)
  814194:	1885883a 	add	r2,r3,r2
  814198:	10c00044 	addi	r3,r2,1
  81419c:	e0bffb17 	ldw	r2,-20(fp)
  8141a0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  8141a4:	e0bffb17 	ldw	r2,-20(fp)
  8141a8:	10c00217 	ldw	r3,8(r2)
  8141ac:	e0bff917 	ldw	r2,-28(fp)
  8141b0:	1880042e 	bgeu	r3,r2,8141c4 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  8141b4:	e0fffb17 	ldw	r3,-20(fp)
  8141b8:	00800044 	movi	r2,1
  8141bc:	18800405 	stb	r2,16(r3)
  8141c0:	00000206 	br	8141cc <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  8141c4:	e0bffb17 	ldw	r2,-20(fp)
  8141c8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  8141cc:	e0fffb17 	ldw	r3,-20(fp)
  8141d0:	00802074 	movhi	r2,129
  8141d4:	109e5204 	addi	r2,r2,31048
  8141d8:	e0bff615 	stw	r2,-40(fp)
  8141dc:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8141e0:	e0fff717 	ldw	r3,-36(fp)
  8141e4:	e0bff617 	ldw	r2,-40(fp)
  8141e8:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  8141ec:	e0bff617 	ldw	r2,-40(fp)
  8141f0:	10c00017 	ldw	r3,0(r2)
  8141f4:	e0bff717 	ldw	r2,-36(fp)
  8141f8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8141fc:	e0bff617 	ldw	r2,-40(fp)
  814200:	10c00017 	ldw	r3,0(r2)
  814204:	e0bff717 	ldw	r2,-36(fp)
  814208:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  81420c:	e0fff617 	ldw	r3,-40(fp)
  814210:	e0bff717 	ldw	r2,-36(fp)
  814214:	18800015 	stw	r2,0(r3)
  814218:	e0bffa17 	ldw	r2,-24(fp)
  81421c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814220:	e0bff517 	ldw	r2,-44(fp)
  814224:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  814228:	e03fff15 	stw	zero,-4(fp)
  81422c:	00000506 	br	814244 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  814230:	00bffa84 	movi	r2,-22
  814234:	e0bfff15 	stw	r2,-4(fp)
  814238:	00000206 	br	814244 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  81423c:	00bfde84 	movi	r2,-134
  814240:	e0bfff15 	stw	r2,-4(fp)
  814244:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  814248:	e037883a 	mov	sp,fp
  81424c:	df000017 	ldw	fp,0(sp)
  814250:	dec00104 	addi	sp,sp,4
  814254:	f800283a 	ret

00814258 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  814258:	defffe04 	addi	sp,sp,-8
  81425c:	df000115 	stw	fp,4(sp)
  814260:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  814264:	e03fff15 	stw	zero,-4(fp)
  814268:	00000506 	br	814280 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  81426c:	e0bfff17 	ldw	r2,-4(fp)
  814270:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  814274:	e0bfff17 	ldw	r2,-4(fp)
  814278:	10800804 	addi	r2,r2,32
  81427c:	e0bfff15 	stw	r2,-4(fp)
  814280:	e0bfff17 	ldw	r2,-4(fp)
  814284:	10820030 	cmpltui	r2,r2,2048
  814288:	103ff81e 	bne	r2,zero,81426c <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  81428c:	e037883a 	mov	sp,fp
  814290:	df000017 	ldw	fp,0(sp)
  814294:	dec00104 	addi	sp,sp,4
  814298:	f800283a 	ret

0081429c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  81429c:	defff904 	addi	sp,sp,-28
  8142a0:	dfc00615 	stw	ra,24(sp)
  8142a4:	df000515 	stw	fp,20(sp)
  8142a8:	df000504 	addi	fp,sp,20
  8142ac:	e13ffd15 	stw	r4,-12(fp)
  8142b0:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  8142b4:	e0bffd17 	ldw	r2,-12(fp)
  8142b8:	1005003a 	cmpeq	r2,r2,zero
  8142bc:	1000041e 	bne	r2,zero,8142d0 <alt_dev_llist_insert+0x34>
  8142c0:	e0bffd17 	ldw	r2,-12(fp)
  8142c4:	10800217 	ldw	r2,8(r2)
  8142c8:	1004c03a 	cmpne	r2,r2,zero
  8142cc:	1000071e 	bne	r2,zero,8142ec <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  8142d0:	08143500 	call	814350 <alt_get_errno>
  8142d4:	1007883a 	mov	r3,r2
  8142d8:	00800584 	movi	r2,22
  8142dc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  8142e0:	00bffa84 	movi	r2,-22
  8142e4:	e0bfff15 	stw	r2,-4(fp)
  8142e8:	00001306 	br	814338 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  8142ec:	e0fffd17 	ldw	r3,-12(fp)
  8142f0:	e0bffe17 	ldw	r2,-8(fp)
  8142f4:	e0bffb15 	stw	r2,-20(fp)
  8142f8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  8142fc:	e0fffc17 	ldw	r3,-16(fp)
  814300:	e0bffb17 	ldw	r2,-20(fp)
  814304:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  814308:	e0bffb17 	ldw	r2,-20(fp)
  81430c:	10c00017 	ldw	r3,0(r2)
  814310:	e0bffc17 	ldw	r2,-16(fp)
  814314:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  814318:	e0bffb17 	ldw	r2,-20(fp)
  81431c:	10c00017 	ldw	r3,0(r2)
  814320:	e0bffc17 	ldw	r2,-16(fp)
  814324:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  814328:	e0fffb17 	ldw	r3,-20(fp)
  81432c:	e0bffc17 	ldw	r2,-16(fp)
  814330:	18800015 	stw	r2,0(r3)

  return 0;  
  814334:	e03fff15 	stw	zero,-4(fp)
  814338:	e0bfff17 	ldw	r2,-4(fp)
}
  81433c:	e037883a 	mov	sp,fp
  814340:	dfc00117 	ldw	ra,4(sp)
  814344:	df000017 	ldw	fp,0(sp)
  814348:	dec00204 	addi	sp,sp,8
  81434c:	f800283a 	ret

00814350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814350:	defffd04 	addi	sp,sp,-12
  814354:	dfc00215 	stw	ra,8(sp)
  814358:	df000115 	stw	fp,4(sp)
  81435c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  814360:	00802074 	movhi	r2,129
  814364:	109e3004 	addi	r2,r2,30912
  814368:	10800017 	ldw	r2,0(r2)
  81436c:	1005003a 	cmpeq	r2,r2,zero
  814370:	1000061e 	bne	r2,zero,81438c <alt_get_errno+0x3c>
  814374:	00802074 	movhi	r2,129
  814378:	109e3004 	addi	r2,r2,30912
  81437c:	10800017 	ldw	r2,0(r2)
  814380:	103ee83a 	callr	r2
  814384:	e0bfff15 	stw	r2,-4(fp)
  814388:	00000306 	br	814398 <alt_get_errno+0x48>
  81438c:	008020b4 	movhi	r2,130
  814390:	10a51f04 	addi	r2,r2,-27524
  814394:	e0bfff15 	stw	r2,-4(fp)
  814398:	e0bfff17 	ldw	r2,-4(fp)
}
  81439c:	e037883a 	mov	sp,fp
  8143a0:	dfc00117 	ldw	ra,4(sp)
  8143a4:	df000017 	ldw	fp,0(sp)
  8143a8:	dec00204 	addi	sp,sp,8
  8143ac:	f800283a 	ret

008143b0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  8143b0:	defffd04 	addi	sp,sp,-12
  8143b4:	dfc00215 	stw	ra,8(sp)
  8143b8:	df000115 	stw	fp,4(sp)
  8143bc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8143c0:	00bfff04 	movi	r2,-4
  8143c4:	00c02074 	movhi	r3,129
  8143c8:	18d65d04 	addi	r3,r3,22900
  8143cc:	1885883a 	add	r2,r3,r2
  8143d0:	e0bfff15 	stw	r2,-4(fp)
  8143d4:	00000606 	br	8143f0 <_do_ctors+0x40>
        (*ctor) (); 
  8143d8:	e0bfff17 	ldw	r2,-4(fp)
  8143dc:	10800017 	ldw	r2,0(r2)
  8143e0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  8143e4:	e0bfff17 	ldw	r2,-4(fp)
  8143e8:	10bfff04 	addi	r2,r2,-4
  8143ec:	e0bfff15 	stw	r2,-4(fp)
  8143f0:	e0ffff17 	ldw	r3,-4(fp)
  8143f4:	00802074 	movhi	r2,129
  8143f8:	10965c04 	addi	r2,r2,22896
  8143fc:	18bff62e 	bgeu	r3,r2,8143d8 <_do_ctors+0x28>
        (*ctor) (); 
}
  814400:	e037883a 	mov	sp,fp
  814404:	dfc00117 	ldw	ra,4(sp)
  814408:	df000017 	ldw	fp,0(sp)
  81440c:	dec00204 	addi	sp,sp,8
  814410:	f800283a 	ret

00814414 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  814414:	defffd04 	addi	sp,sp,-12
  814418:	dfc00215 	stw	ra,8(sp)
  81441c:	df000115 	stw	fp,4(sp)
  814420:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814424:	00bfff04 	movi	r2,-4
  814428:	00c02074 	movhi	r3,129
  81442c:	18d65d04 	addi	r3,r3,22900
  814430:	1885883a 	add	r2,r3,r2
  814434:	e0bfff15 	stw	r2,-4(fp)
  814438:	00000606 	br	814454 <_do_dtors+0x40>
        (*dtor) (); 
  81443c:	e0bfff17 	ldw	r2,-4(fp)
  814440:	10800017 	ldw	r2,0(r2)
  814444:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  814448:	e0bfff17 	ldw	r2,-4(fp)
  81444c:	10bfff04 	addi	r2,r2,-4
  814450:	e0bfff15 	stw	r2,-4(fp)
  814454:	e0ffff17 	ldw	r3,-4(fp)
  814458:	00802074 	movhi	r2,129
  81445c:	10965d04 	addi	r2,r2,22900
  814460:	18bff62e 	bgeu	r3,r2,81443c <_do_dtors+0x28>
        (*dtor) (); 
}
  814464:	e037883a 	mov	sp,fp
  814468:	dfc00117 	ldw	ra,4(sp)
  81446c:	df000017 	ldw	fp,0(sp)
  814470:	dec00204 	addi	sp,sp,8
  814474:	f800283a 	ret

00814478 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  814478:	defff904 	addi	sp,sp,-28
  81447c:	dfc00615 	stw	ra,24(sp)
  814480:	df000515 	stw	fp,20(sp)
  814484:	df000504 	addi	fp,sp,20
  814488:	e13ffd15 	stw	r4,-12(fp)
  81448c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  814490:	e0bffe17 	ldw	r2,-8(fp)
  814494:	10800017 	ldw	r2,0(r2)
  814498:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81449c:	e13ffd17 	ldw	r4,-12(fp)
  8144a0:	08005d80 	call	8005d8 <strlen>
  8144a4:	10800044 	addi	r2,r2,1
  8144a8:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8144ac:	00000d06 	br	8144e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  8144b0:	e0bffc17 	ldw	r2,-16(fp)
  8144b4:	11000217 	ldw	r4,8(r2)
  8144b8:	e1bffb17 	ldw	r6,-20(fp)
  8144bc:	e17ffd17 	ldw	r5,-12(fp)
  8144c0:	08155a80 	call	8155a8 <memcmp>
  8144c4:	1004c03a 	cmpne	r2,r2,zero
  8144c8:	1000031e 	bne	r2,zero,8144d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  8144cc:	e0bffc17 	ldw	r2,-16(fp)
  8144d0:	e0bfff15 	stw	r2,-4(fp)
  8144d4:	00000706 	br	8144f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  8144d8:	e0bffc17 	ldw	r2,-16(fp)
  8144dc:	10800017 	ldw	r2,0(r2)
  8144e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  8144e4:	e0fffe17 	ldw	r3,-8(fp)
  8144e8:	e0bffc17 	ldw	r2,-16(fp)
  8144ec:	10fff01e 	bne	r2,r3,8144b0 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  8144f0:	e03fff15 	stw	zero,-4(fp)
  8144f4:	e0bfff17 	ldw	r2,-4(fp)
}
  8144f8:	e037883a 	mov	sp,fp
  8144fc:	dfc00117 	ldw	ra,4(sp)
  814500:	df000017 	ldw	fp,0(sp)
  814504:	dec00204 	addi	sp,sp,8
  814508:	f800283a 	ret

0081450c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  81450c:	defffe04 	addi	sp,sp,-8
  814510:	dfc00115 	stw	ra,4(sp)
  814514:	df000015 	stw	fp,0(sp)
  814518:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
  81451c:	0009883a 	mov	r4,zero
  814520:	01440004 	movi	r5,4096
  814524:	08154cc0 	call	8154cc <alt_icache_flush>
#endif
}
  814528:	e037883a 	mov	sp,fp
  81452c:	dfc00117 	ldw	ra,4(sp)
  814530:	df000017 	ldw	fp,0(sp)
  814534:	dec00204 	addi	sp,sp,8
  814538:	f800283a 	ret

0081453c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81453c:	defff904 	addi	sp,sp,-28
  814540:	dfc00615 	stw	ra,24(sp)
  814544:	df000515 	stw	fp,20(sp)
  814548:	df000504 	addi	fp,sp,20
  81454c:	e13ffc15 	stw	r4,-16(fp)
  814550:	e17ffd15 	stw	r5,-12(fp)
  814554:	e1bffe15 	stw	r6,-8(fp)
  814558:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81455c:	e0800217 	ldw	r2,8(fp)
  814560:	d8800015 	stw	r2,0(sp)
  814564:	e13ffc17 	ldw	r4,-16(fp)
  814568:	e17ffd17 	ldw	r5,-12(fp)
  81456c:	e1bffe17 	ldw	r6,-8(fp)
  814570:	e1ffff17 	ldw	r7,-4(fp)
  814574:	08147100 	call	814710 <alt_iic_isr_register>
}  
  814578:	e037883a 	mov	sp,fp
  81457c:	dfc00117 	ldw	ra,4(sp)
  814580:	df000017 	ldw	fp,0(sp)
  814584:	dec00204 	addi	sp,sp,8
  814588:	f800283a 	ret

0081458c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  81458c:	defff904 	addi	sp,sp,-28
  814590:	df000615 	stw	fp,24(sp)
  814594:	df000604 	addi	fp,sp,24
  814598:	e13ffe15 	stw	r4,-8(fp)
  81459c:	e17fff15 	stw	r5,-4(fp)
  8145a0:	e0bfff17 	ldw	r2,-4(fp)
  8145a4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8145a8:	0005303a 	rdctl	r2,status
  8145ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8145b0:	e0fffb17 	ldw	r3,-20(fp)
  8145b4:	00bfff84 	movi	r2,-2
  8145b8:	1884703a 	and	r2,r3,r2
  8145bc:	1001703a 	wrctl	status,r2
  
  return context;
  8145c0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8145c4:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  8145c8:	e0fffc17 	ldw	r3,-16(fp)
  8145cc:	00800044 	movi	r2,1
  8145d0:	10c4983a 	sll	r2,r2,r3
  8145d4:	1007883a 	mov	r3,r2
  8145d8:	008020b4 	movhi	r2,130
  8145dc:	10a53c04 	addi	r2,r2,-27408
  8145e0:	10800017 	ldw	r2,0(r2)
  8145e4:	1886b03a 	or	r3,r3,r2
  8145e8:	008020b4 	movhi	r2,130
  8145ec:	10a53c04 	addi	r2,r2,-27408
  8145f0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8145f4:	008020b4 	movhi	r2,130
  8145f8:	10a53c04 	addi	r2,r2,-27408
  8145fc:	10800017 	ldw	r2,0(r2)
  814600:	100170fa 	wrctl	ienable,r2
  814604:	e0bffd17 	ldw	r2,-12(fp)
  814608:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81460c:	e0bffa17 	ldw	r2,-24(fp)
  814610:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  814614:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  814618:	e037883a 	mov	sp,fp
  81461c:	df000017 	ldw	fp,0(sp)
  814620:	dec00104 	addi	sp,sp,4
  814624:	f800283a 	ret

00814628 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  814628:	defff904 	addi	sp,sp,-28
  81462c:	df000615 	stw	fp,24(sp)
  814630:	df000604 	addi	fp,sp,24
  814634:	e13ffe15 	stw	r4,-8(fp)
  814638:	e17fff15 	stw	r5,-4(fp)
  81463c:	e0bfff17 	ldw	r2,-4(fp)
  814640:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814644:	0005303a 	rdctl	r2,status
  814648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81464c:	e0fffb17 	ldw	r3,-20(fp)
  814650:	00bfff84 	movi	r2,-2
  814654:	1884703a 	and	r2,r3,r2
  814658:	1001703a 	wrctl	status,r2
  
  return context;
  81465c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  814660:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  814664:	e0fffc17 	ldw	r3,-16(fp)
  814668:	00800044 	movi	r2,1
  81466c:	10c4983a 	sll	r2,r2,r3
  814670:	0084303a 	nor	r2,zero,r2
  814674:	1007883a 	mov	r3,r2
  814678:	008020b4 	movhi	r2,130
  81467c:	10a53c04 	addi	r2,r2,-27408
  814680:	10800017 	ldw	r2,0(r2)
  814684:	1886703a 	and	r3,r3,r2
  814688:	008020b4 	movhi	r2,130
  81468c:	10a53c04 	addi	r2,r2,-27408
  814690:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  814694:	008020b4 	movhi	r2,130
  814698:	10a53c04 	addi	r2,r2,-27408
  81469c:	10800017 	ldw	r2,0(r2)
  8146a0:	100170fa 	wrctl	ienable,r2
  8146a4:	e0bffd17 	ldw	r2,-12(fp)
  8146a8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146ac:	e0bffa17 	ldw	r2,-24(fp)
  8146b0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8146b4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8146b8:	e037883a 	mov	sp,fp
  8146bc:	df000017 	ldw	fp,0(sp)
  8146c0:	dec00104 	addi	sp,sp,4
  8146c4:	f800283a 	ret

008146c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  8146c8:	defffc04 	addi	sp,sp,-16
  8146cc:	df000315 	stw	fp,12(sp)
  8146d0:	df000304 	addi	fp,sp,12
  8146d4:	e13ffe15 	stw	r4,-8(fp)
  8146d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  8146dc:	000530fa 	rdctl	r2,ienable
  8146e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  8146e4:	e0ffff17 	ldw	r3,-4(fp)
  8146e8:	00800044 	movi	r2,1
  8146ec:	10c4983a 	sll	r2,r2,r3
  8146f0:	1007883a 	mov	r3,r2
  8146f4:	e0bffd17 	ldw	r2,-12(fp)
  8146f8:	1884703a 	and	r2,r3,r2
  8146fc:	1004c03a 	cmpne	r2,r2,zero
}
  814700:	e037883a 	mov	sp,fp
  814704:	df000017 	ldw	fp,0(sp)
  814708:	dec00104 	addi	sp,sp,4
  81470c:	f800283a 	ret

00814710 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  814710:	defff404 	addi	sp,sp,-48
  814714:	dfc00b15 	stw	ra,44(sp)
  814718:	df000a15 	stw	fp,40(sp)
  81471c:	df000a04 	addi	fp,sp,40
  814720:	e13ffb15 	stw	r4,-20(fp)
  814724:	e17ffc15 	stw	r5,-16(fp)
  814728:	e1bffd15 	stw	r6,-12(fp)
  81472c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  814730:	00bffa84 	movi	r2,-22
  814734:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  814738:	e0bffc17 	ldw	r2,-16(fp)
  81473c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  814740:	e0bff917 	ldw	r2,-28(fp)
  814744:	10800808 	cmpgei	r2,r2,32
  814748:	1000291e 	bne	r2,zero,8147f0 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81474c:	0005303a 	rdctl	r2,status
  814750:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814754:	e0fff717 	ldw	r3,-36(fp)
  814758:	00bfff84 	movi	r2,-2
  81475c:	1884703a 	and	r2,r3,r2
  814760:	1001703a 	wrctl	status,r2
  
  return context;
  814764:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  814768:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  81476c:	e0bff917 	ldw	r2,-28(fp)
  814770:	00c020b4 	movhi	r3,130
  814774:	18c1d204 	addi	r3,r3,1864
  814778:	100490fa 	slli	r2,r2,3
  81477c:	10c7883a 	add	r3,r2,r3
  814780:	e0bffd17 	ldw	r2,-12(fp)
  814784:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  814788:	e0bff917 	ldw	r2,-28(fp)
  81478c:	00c020b4 	movhi	r3,130
  814790:	18c1d204 	addi	r3,r3,1864
  814794:	100490fa 	slli	r2,r2,3
  814798:	10c5883a 	add	r2,r2,r3
  81479c:	10c00104 	addi	r3,r2,4
  8147a0:	e0bffe17 	ldw	r2,-8(fp)
  8147a4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8147a8:	e0bffd17 	ldw	r2,-12(fp)
  8147ac:	1005003a 	cmpeq	r2,r2,zero
  8147b0:	1000051e 	bne	r2,zero,8147c8 <alt_iic_isr_register+0xb8>
  8147b4:	e17ff917 	ldw	r5,-28(fp)
  8147b8:	e13ffb17 	ldw	r4,-20(fp)
  8147bc:	081458c0 	call	81458c <alt_ic_irq_enable>
  8147c0:	e0bfff15 	stw	r2,-4(fp)
  8147c4:	00000406 	br	8147d8 <alt_iic_isr_register+0xc8>
  8147c8:	e17ff917 	ldw	r5,-28(fp)
  8147cc:	e13ffb17 	ldw	r4,-20(fp)
  8147d0:	08146280 	call	814628 <alt_ic_irq_disable>
  8147d4:	e0bfff15 	stw	r2,-4(fp)
  8147d8:	e0bfff17 	ldw	r2,-4(fp)
  8147dc:	e0bffa15 	stw	r2,-24(fp)
  8147e0:	e0bff817 	ldw	r2,-32(fp)
  8147e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8147e8:	e0bff617 	ldw	r2,-40(fp)
  8147ec:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  8147f0:	e0bffa17 	ldw	r2,-24(fp)
}
  8147f4:	e037883a 	mov	sp,fp
  8147f8:	dfc00117 	ldw	ra,4(sp)
  8147fc:	df000017 	ldw	fp,0(sp)
  814800:	dec00204 	addi	sp,sp,8
  814804:	f800283a 	ret

00814808 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  814808:	defff904 	addi	sp,sp,-28
  81480c:	dfc00615 	stw	ra,24(sp)
  814810:	df000515 	stw	fp,20(sp)
  814814:	df000504 	addi	fp,sp,20
  814818:	e13ffc15 	stw	r4,-16(fp)
  81481c:	e17ffd15 	stw	r5,-12(fp)
  814820:	e1bffe15 	stw	r6,-8(fp)
  814824:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  814828:	e13ffd17 	ldw	r4,-12(fp)
  81482c:	e17ffe17 	ldw	r5,-8(fp)
  814830:	e1bfff17 	ldw	r6,-4(fp)
  814834:	0814a200 	call	814a20 <open>
  814838:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  81483c:	e0bffb17 	ldw	r2,-20(fp)
  814840:	1004803a 	cmplt	r2,r2,zero
  814844:	10001c1e 	bne	r2,zero,8148b8 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
  814848:	e0bffb17 	ldw	r2,-20(fp)
  81484c:	00c02074 	movhi	r3,129
  814850:	18d99f04 	addi	r3,r3,26236
  814854:	10800324 	muli	r2,r2,12
  814858:	10c5883a 	add	r2,r2,r3
  81485c:	10c00017 	ldw	r3,0(r2)
  814860:	e0bffc17 	ldw	r2,-16(fp)
  814864:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  814868:	e0bffb17 	ldw	r2,-20(fp)
  81486c:	00c02074 	movhi	r3,129
  814870:	18d99f04 	addi	r3,r3,26236
  814874:	10800324 	muli	r2,r2,12
  814878:	10c5883a 	add	r2,r2,r3
  81487c:	10800104 	addi	r2,r2,4
  814880:	10c00017 	ldw	r3,0(r2)
  814884:	e0bffc17 	ldw	r2,-16(fp)
  814888:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  81488c:	e0bffb17 	ldw	r2,-20(fp)
  814890:	00c02074 	movhi	r3,129
  814894:	18d99f04 	addi	r3,r3,26236
  814898:	10800324 	muli	r2,r2,12
  81489c:	10c5883a 	add	r2,r2,r3
  8148a0:	10800204 	addi	r2,r2,8
  8148a4:	10c00017 	ldw	r3,0(r2)
  8148a8:	e0bffc17 	ldw	r2,-16(fp)
  8148ac:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  8148b0:	e13ffb17 	ldw	r4,-20(fp)
  8148b4:	080a4500 	call	80a450 <alt_release_fd>
  }
} 
  8148b8:	e037883a 	mov	sp,fp
  8148bc:	dfc00117 	ldw	ra,4(sp)
  8148c0:	df000017 	ldw	fp,0(sp)
  8148c4:	dec00204 	addi	sp,sp,8
  8148c8:	f800283a 	ret

008148cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  8148cc:	defffb04 	addi	sp,sp,-20
  8148d0:	dfc00415 	stw	ra,16(sp)
  8148d4:	df000315 	stw	fp,12(sp)
  8148d8:	df000304 	addi	fp,sp,12
  8148dc:	e13ffd15 	stw	r4,-12(fp)
  8148e0:	e17ffe15 	stw	r5,-8(fp)
  8148e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  8148e8:	01002074 	movhi	r4,129
  8148ec:	2119a204 	addi	r4,r4,26248
  8148f0:	e17ffd17 	ldw	r5,-12(fp)
  8148f4:	01800044 	movi	r6,1
  8148f8:	01c07fc4 	movi	r7,511
  8148fc:	08148080 	call	814808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  814900:	01002074 	movhi	r4,129
  814904:	21199f04 	addi	r4,r4,26236
  814908:	e17ffe17 	ldw	r5,-8(fp)
  81490c:	000d883a 	mov	r6,zero
  814910:	01c07fc4 	movi	r7,511
  814914:	08148080 	call	814808 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  814918:	01002074 	movhi	r4,129
  81491c:	2119a504 	addi	r4,r4,26260
  814920:	e17fff17 	ldw	r5,-4(fp)
  814924:	01800044 	movi	r6,1
  814928:	01c07fc4 	movi	r7,511
  81492c:	08148080 	call	814808 <alt_open_fd>
}  
  814930:	e037883a 	mov	sp,fp
  814934:	dfc00117 	ldw	ra,4(sp)
  814938:	df000017 	ldw	fp,0(sp)
  81493c:	dec00204 	addi	sp,sp,8
  814940:	f800283a 	ret

00814944 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  814944:	defffc04 	addi	sp,sp,-16
  814948:	df000315 	stw	fp,12(sp)
  81494c:	df000304 	addi	fp,sp,12
  814950:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  814954:	e0bffe17 	ldw	r2,-8(fp)
  814958:	10800217 	ldw	r2,8(r2)
  81495c:	10d00034 	orhi	r3,r2,16384
  814960:	e0bffe17 	ldw	r2,-8(fp)
  814964:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  814968:	e03ffd15 	stw	zero,-12(fp)
  81496c:	00002006 	br	8149f0 <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  814970:	e0bffd17 	ldw	r2,-12(fp)
  814974:	00c02074 	movhi	r3,129
  814978:	18d99f04 	addi	r3,r3,26236
  81497c:	10800324 	muli	r2,r2,12
  814980:	10c5883a 	add	r2,r2,r3
  814984:	10c00017 	ldw	r3,0(r2)
  814988:	e0bffe17 	ldw	r2,-8(fp)
  81498c:	10800017 	ldw	r2,0(r2)
  814990:	1880141e 	bne	r3,r2,8149e4 <alt_file_locked+0xa0>
  814994:	e0bffd17 	ldw	r2,-12(fp)
  814998:	00c02074 	movhi	r3,129
  81499c:	18d99f04 	addi	r3,r3,26236
  8149a0:	10800324 	muli	r2,r2,12
  8149a4:	10c5883a 	add	r2,r2,r3
  8149a8:	10800204 	addi	r2,r2,8
  8149ac:	10800017 	ldw	r2,0(r2)
  8149b0:	1004403a 	cmpge	r2,r2,zero
  8149b4:	10000b1e 	bne	r2,zero,8149e4 <alt_file_locked+0xa0>
  8149b8:	e0bffd17 	ldw	r2,-12(fp)
  8149bc:	10800324 	muli	r2,r2,12
  8149c0:	1007883a 	mov	r3,r2
  8149c4:	00802074 	movhi	r2,129
  8149c8:	10999f04 	addi	r2,r2,26236
  8149cc:	1887883a 	add	r3,r3,r2
  8149d0:	e0bffe17 	ldw	r2,-8(fp)
  8149d4:	18800326 	beq	r3,r2,8149e4 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  8149d8:	00bffcc4 	movi	r2,-13
  8149dc:	e0bfff15 	stw	r2,-4(fp)
  8149e0:	00000a06 	br	814a0c <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8149e4:	e0bffd17 	ldw	r2,-12(fp)
  8149e8:	10800044 	addi	r2,r2,1
  8149ec:	e0bffd15 	stw	r2,-12(fp)
  8149f0:	00802074 	movhi	r2,129
  8149f4:	109e2f04 	addi	r2,r2,30908
  8149f8:	10800017 	ldw	r2,0(r2)
  8149fc:	1007883a 	mov	r3,r2
  814a00:	e0bffd17 	ldw	r2,-12(fp)
  814a04:	18bfda2e 	bgeu	r3,r2,814970 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  814a08:	e03fff15 	stw	zero,-4(fp)
  814a0c:	e0bfff17 	ldw	r2,-4(fp)
}
  814a10:	e037883a 	mov	sp,fp
  814a14:	df000017 	ldw	fp,0(sp)
  814a18:	dec00104 	addi	sp,sp,4
  814a1c:	f800283a 	ret

00814a20 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  814a20:	defff404 	addi	sp,sp,-48
  814a24:	dfc00b15 	stw	ra,44(sp)
  814a28:	df000a15 	stw	fp,40(sp)
  814a2c:	df000a04 	addi	fp,sp,40
  814a30:	e13ffb15 	stw	r4,-20(fp)
  814a34:	e17ffc15 	stw	r5,-16(fp)
  814a38:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  814a3c:	00bfffc4 	movi	r2,-1
  814a40:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  814a44:	00bffb44 	movi	r2,-19
  814a48:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  814a4c:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  814a50:	e13ffb17 	ldw	r4,-20(fp)
  814a54:	01402074 	movhi	r5,129
  814a58:	295e2d04 	addi	r5,r5,30900
  814a5c:	08144780 	call	814478 <alt_find_dev>
  814a60:	e0bffa15 	stw	r2,-24(fp)
  814a64:	e0bffa17 	ldw	r2,-24(fp)
  814a68:	1004c03a 	cmpne	r2,r2,zero
  814a6c:	1000051e 	bne	r2,zero,814a84 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  814a70:	e13ffb17 	ldw	r4,-20(fp)
  814a74:	08152b80 	call	8152b8 <alt_find_file>
  814a78:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  814a7c:	00800044 	movi	r2,1
  814a80:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  814a84:	e0bffa17 	ldw	r2,-24(fp)
  814a88:	1005003a 	cmpeq	r2,r2,zero
  814a8c:	1000301e 	bne	r2,zero,814b50 <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
  814a90:	e13ffa17 	ldw	r4,-24(fp)
  814a94:	08153d80 	call	8153d8 <alt_get_fd>
  814a98:	e0bff815 	stw	r2,-32(fp)
  814a9c:	e0bff817 	ldw	r2,-32(fp)
  814aa0:	1004403a 	cmpge	r2,r2,zero
  814aa4:	1000031e 	bne	r2,zero,814ab4 <open+0x94>
    {
      status = index;
  814aa8:	e0bff817 	ldw	r2,-32(fp)
  814aac:	e0bff715 	stw	r2,-36(fp)
  814ab0:	00002906 	br	814b58 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
  814ab4:	e0bff817 	ldw	r2,-32(fp)
  814ab8:	10800324 	muli	r2,r2,12
  814abc:	1007883a 	mov	r3,r2
  814ac0:	00802074 	movhi	r2,129
  814ac4:	10999f04 	addi	r2,r2,26236
  814ac8:	1885883a 	add	r2,r3,r2
  814acc:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  814ad0:	e0fffc17 	ldw	r3,-16(fp)
  814ad4:	00900034 	movhi	r2,16384
  814ad8:	10bfffc4 	addi	r2,r2,-1
  814adc:	1886703a 	and	r3,r3,r2
  814ae0:	e0bff917 	ldw	r2,-28(fp)
  814ae4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  814ae8:	e0bff617 	ldw	r2,-40(fp)
  814aec:	1004c03a 	cmpne	r2,r2,zero
  814af0:	1000061e 	bne	r2,zero,814b0c <open+0xec>
  814af4:	e13ff917 	ldw	r4,-28(fp)
  814af8:	08149440 	call	814944 <alt_file_locked>
  814afc:	e0bff715 	stw	r2,-36(fp)
  814b00:	e0bff717 	ldw	r2,-36(fp)
  814b04:	1004803a 	cmplt	r2,r2,zero
  814b08:	1000131e 	bne	r2,zero,814b58 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  814b0c:	e0bffa17 	ldw	r2,-24(fp)
  814b10:	10800317 	ldw	r2,12(r2)
  814b14:	1005003a 	cmpeq	r2,r2,zero
  814b18:	1000091e 	bne	r2,zero,814b40 <open+0x120>
  814b1c:	e0bffa17 	ldw	r2,-24(fp)
  814b20:	10800317 	ldw	r2,12(r2)
  814b24:	e13ff917 	ldw	r4,-28(fp)
  814b28:	e17ffb17 	ldw	r5,-20(fp)
  814b2c:	e1bffc17 	ldw	r6,-16(fp)
  814b30:	e1fffd17 	ldw	r7,-12(fp)
  814b34:	103ee83a 	callr	r2
  814b38:	e0bfff15 	stw	r2,-4(fp)
  814b3c:	00000106 	br	814b44 <open+0x124>
  814b40:	e03fff15 	stw	zero,-4(fp)
  814b44:	e0bfff17 	ldw	r2,-4(fp)
  814b48:	e0bff715 	stw	r2,-36(fp)
  814b4c:	00000206 	br	814b58 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
  814b50:	00bffb44 	movi	r2,-19
  814b54:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  814b58:	e0bff717 	ldw	r2,-36(fp)
  814b5c:	1004403a 	cmpge	r2,r2,zero
  814b60:	1000091e 	bne	r2,zero,814b88 <open+0x168>
  {
    alt_release_fd (index);  
  814b64:	e13ff817 	ldw	r4,-32(fp)
  814b68:	080a4500 	call	80a450 <alt_release_fd>
    ALT_ERRNO = -status;
  814b6c:	0814ba80 	call	814ba8 <alt_get_errno>
  814b70:	e0fff717 	ldw	r3,-36(fp)
  814b74:	00c7c83a 	sub	r3,zero,r3
  814b78:	10c00015 	stw	r3,0(r2)
    return -1;
  814b7c:	00bfffc4 	movi	r2,-1
  814b80:	e0bffe15 	stw	r2,-8(fp)
  814b84:	00000206 	br	814b90 <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
  814b88:	e0bff817 	ldw	r2,-32(fp)
  814b8c:	e0bffe15 	stw	r2,-8(fp)
  814b90:	e0bffe17 	ldw	r2,-8(fp)
}
  814b94:	e037883a 	mov	sp,fp
  814b98:	dfc00117 	ldw	ra,4(sp)
  814b9c:	df000017 	ldw	fp,0(sp)
  814ba0:	dec00204 	addi	sp,sp,8
  814ba4:	f800283a 	ret

00814ba8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  814ba8:	defffd04 	addi	sp,sp,-12
  814bac:	dfc00215 	stw	ra,8(sp)
  814bb0:	df000115 	stw	fp,4(sp)
  814bb4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  814bb8:	00802074 	movhi	r2,129
  814bbc:	109e3004 	addi	r2,r2,30912
  814bc0:	10800017 	ldw	r2,0(r2)
  814bc4:	1005003a 	cmpeq	r2,r2,zero
  814bc8:	1000061e 	bne	r2,zero,814be4 <alt_get_errno+0x3c>
  814bcc:	00802074 	movhi	r2,129
  814bd0:	109e3004 	addi	r2,r2,30912
  814bd4:	10800017 	ldw	r2,0(r2)
  814bd8:	103ee83a 	callr	r2
  814bdc:	e0bfff15 	stw	r2,-4(fp)
  814be0:	00000306 	br	814bf0 <alt_get_errno+0x48>
  814be4:	008020b4 	movhi	r2,130
  814be8:	10a51f04 	addi	r2,r2,-27524
  814bec:	e0bfff15 	stw	r2,-4(fp)
  814bf0:	e0bfff17 	ldw	r2,-4(fp)
}
  814bf4:	e037883a 	mov	sp,fp
  814bf8:	dfc00117 	ldw	ra,4(sp)
  814bfc:	df000017 	ldw	fp,0(sp)
  814c00:	dec00204 	addi	sp,sp,8
  814c04:	f800283a 	ret

00814c08 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  814c08:	defffa04 	addi	sp,sp,-24
  814c0c:	df000515 	stw	fp,20(sp)
  814c10:	df000504 	addi	fp,sp,20
  814c14:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814c18:	0005303a 	rdctl	r2,status
  814c1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814c20:	e0fffd17 	ldw	r3,-12(fp)
  814c24:	00bfff84 	movi	r2,-2
  814c28:	1884703a 	and	r2,r3,r2
  814c2c:	1001703a 	wrctl	status,r2
  
  return context;
  814c30:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  814c34:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  814c38:	e0bfff17 	ldw	r2,-4(fp)
  814c3c:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  814c40:	e0bffc17 	ldw	r2,-16(fp)
  814c44:	10c00017 	ldw	r3,0(r2)
  814c48:	e0bffc17 	ldw	r2,-16(fp)
  814c4c:	10800117 	ldw	r2,4(r2)
  814c50:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  814c54:	e0bffc17 	ldw	r2,-16(fp)
  814c58:	10c00117 	ldw	r3,4(r2)
  814c5c:	e0bffc17 	ldw	r2,-16(fp)
  814c60:	10800017 	ldw	r2,0(r2)
  814c64:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  814c68:	e0fffc17 	ldw	r3,-16(fp)
  814c6c:	e0bffc17 	ldw	r2,-16(fp)
  814c70:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  814c74:	e0fffc17 	ldw	r3,-16(fp)
  814c78:	e0bffc17 	ldw	r2,-16(fp)
  814c7c:	18800015 	stw	r2,0(r3)
  814c80:	e0bffe17 	ldw	r2,-8(fp)
  814c84:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814c88:	e0bffb17 	ldw	r2,-20(fp)
  814c8c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  814c90:	e037883a 	mov	sp,fp
  814c94:	df000017 	ldw	fp,0(sp)
  814c98:	dec00104 	addi	sp,sp,4
  814c9c:	f800283a 	ret

00814ca0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  814ca0:	defffb04 	addi	sp,sp,-20
  814ca4:	dfc00415 	stw	ra,16(sp)
  814ca8:	df000315 	stw	fp,12(sp)
  814cac:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  814cb0:	d0a02d17 	ldw	r2,-32588(gp)
  814cb4:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  814cb8:	d0a71917 	ldw	r2,-25500(gp)
  814cbc:	10800044 	addi	r2,r2,1
  814cc0:	d0a71915 	stw	r2,-25500(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814cc4:	00003106 	br	814d8c <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  814cc8:	e0bffe17 	ldw	r2,-8(fp)
  814ccc:	10800017 	ldw	r2,0(r2)
  814cd0:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  814cd4:	e0bffe17 	ldw	r2,-8(fp)
  814cd8:	10800403 	ldbu	r2,16(r2)
  814cdc:	10803fcc 	andi	r2,r2,255
  814ce0:	1005003a 	cmpeq	r2,r2,zero
  814ce4:	1000051e 	bne	r2,zero,814cfc <alt_tick+0x5c>
  814ce8:	d0a71917 	ldw	r2,-25500(gp)
  814cec:	1004c03a 	cmpne	r2,r2,zero
  814cf0:	1000021e 	bne	r2,zero,814cfc <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  814cf4:	e0bffe17 	ldw	r2,-8(fp)
  814cf8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  814cfc:	e0bffe17 	ldw	r2,-8(fp)
  814d00:	10c00217 	ldw	r3,8(r2)
  814d04:	d0a71917 	ldw	r2,-25500(gp)
  814d08:	10c01e36 	bltu	r2,r3,814d84 <alt_tick+0xe4>
  814d0c:	e0bffe17 	ldw	r2,-8(fp)
  814d10:	10800403 	ldbu	r2,16(r2)
  814d14:	10803fcc 	andi	r2,r2,255
  814d18:	1004c03a 	cmpne	r2,r2,zero
  814d1c:	1000191e 	bne	r2,zero,814d84 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  814d20:	e0bffe17 	ldw	r2,-8(fp)
  814d24:	10c00317 	ldw	r3,12(r2)
  814d28:	e0bffe17 	ldw	r2,-8(fp)
  814d2c:	11000517 	ldw	r4,20(r2)
  814d30:	183ee83a 	callr	r3
  814d34:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  814d38:	e0bffd17 	ldw	r2,-12(fp)
  814d3c:	1004c03a 	cmpne	r2,r2,zero
  814d40:	1000031e 	bne	r2,zero,814d50 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  814d44:	e13ffe17 	ldw	r4,-8(fp)
  814d48:	0814c080 	call	814c08 <alt_alarm_stop>
  814d4c:	00000d06 	br	814d84 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  814d50:	e0bffe17 	ldw	r2,-8(fp)
  814d54:	10c00217 	ldw	r3,8(r2)
  814d58:	e0bffd17 	ldw	r2,-12(fp)
  814d5c:	1887883a 	add	r3,r3,r2
  814d60:	e0bffe17 	ldw	r2,-8(fp)
  814d64:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  814d68:	e0bffe17 	ldw	r2,-8(fp)
  814d6c:	10c00217 	ldw	r3,8(r2)
  814d70:	d0a71917 	ldw	r2,-25500(gp)
  814d74:	1880032e 	bgeu	r3,r2,814d84 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  814d78:	e0fffe17 	ldw	r3,-8(fp)
  814d7c:	00800044 	movi	r2,1
  814d80:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  814d84:	e0bfff17 	ldw	r2,-4(fp)
  814d88:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  814d8c:	d0e02d04 	addi	r3,gp,-32588
  814d90:	e0bffe17 	ldw	r2,-8(fp)
  814d94:	10ffcc1e 	bne	r2,r3,814cc8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  814d98:	080b7500 	call	80b750 <OSTimeTick>
}
  814d9c:	e037883a 	mov	sp,fp
  814da0:	dfc00117 	ldw	ra,4(sp)
  814da4:	df000017 	ldw	fp,0(sp)
  814da8:	dec00204 	addi	sp,sp,8
  814dac:	f800283a 	ret

00814db0 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  814db0:	deffff04 	addi	sp,sp,-4
  814db4:	df000015 	stw	fp,0(sp)
  814db8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  814dbc:	000170fa 	wrctl	ienable,zero
}
  814dc0:	e037883a 	mov	sp,fp
  814dc4:	df000017 	ldw	fp,0(sp)
  814dc8:	dec00104 	addi	sp,sp,4
  814dcc:	f800283a 	ret

00814dd0 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  814dd0:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  814dd4:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  814dd8:	d1271217 	ldw	r4,-25528(gp)

      stw ra,  0(sp)
  814ddc:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  814de0:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  814de4:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  814de8:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  814dec:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  814df0:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  814df4:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  814df8:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  814dfc:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  814e00:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  814e04:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  814e08:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  814e0c:	08151f00 	call	8151f0 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  814e10:	d1270d17 	ldw	r4,-25548(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  814e14:	d1670507 	ldb	r5,-25580(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  814e18:	d1271215 	stw	r4,-25528(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  814e1c:	d1670545 	stb	r5,-25579(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  814e20:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  814e24:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  814e28:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  814e2c:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  814e30:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  814e34:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  814e38:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  814e3c:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  814e40:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  814e44:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  814e48:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  814e4c:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  814e50:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  814e54:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  814e58:	f800283a 	ret

00814e5c <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  814e5c:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  814e60:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  814e64:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  814e68:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  814e6c:	08151f00 	call	8151f0 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  814e70:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  814e74:	d4a70345 	stb	r18,-25587(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  814e78:	003fe506 	br	814e10 <OSCtxSw+0x40>

00814e7c <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  814e7c:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  814e80:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  814e84:	10800054 	ori	r2,r2,1
      wrctl status, r2
  814e88:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  814e8c:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  814e90:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  814e94:	dec00204 	addi	sp,sp,8

      callr r2
  814e98:	103ee83a 	callr	r2

      nop
  814e9c:	0001883a 	nop

00814ea0 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  814ea0:	defff704 	addi	sp,sp,-36
  814ea4:	dfc00815 	stw	ra,32(sp)
  814ea8:	df000715 	stw	fp,28(sp)
  814eac:	df000704 	addi	fp,sp,28
  814eb0:	e13ffc15 	stw	r4,-16(fp)
  814eb4:	e17ffd15 	stw	r5,-12(fp)
  814eb8:	e1bffe15 	stw	r6,-8(fp)
  814ebc:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  814ec0:	e0bffe17 	ldw	r2,-8(fp)
  814ec4:	1007883a 	mov	r3,r2
  814ec8:	00bfff04 	movi	r2,-4
  814ecc:	1884703a 	and	r2,r3,r2
  814ed0:	10bf0004 	addi	r2,r2,-1024
  814ed4:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  814ed8:	e0bff917 	ldw	r2,-28(fp)
  814edc:	10000015 	stw	zero,0(r2)
  814ee0:	e0bff917 	ldw	r2,-28(fp)
  814ee4:	10c0bb04 	addi	r3,r2,748
  814ee8:	e0bff917 	ldw	r2,-28(fp)
  814eec:	10c00115 	stw	r3,4(r2)
  814ef0:	e0bff917 	ldw	r2,-28(fp)
  814ef4:	1080bb04 	addi	r2,r2,748
  814ef8:	10c01704 	addi	r3,r2,92
  814efc:	e0bff917 	ldw	r2,-28(fp)
  814f00:	10c00215 	stw	r3,8(r2)
  814f04:	e0bff917 	ldw	r2,-28(fp)
  814f08:	1080bb04 	addi	r2,r2,748
  814f0c:	10c02e04 	addi	r3,r2,184
  814f10:	e0bff917 	ldw	r2,-28(fp)
  814f14:	10c00315 	stw	r3,12(r2)
  814f18:	e0bff917 	ldw	r2,-28(fp)
  814f1c:	10000415 	stw	zero,16(r2)
  814f20:	e0bff917 	ldw	r2,-28(fp)
  814f24:	10800504 	addi	r2,r2,20
  814f28:	1009883a 	mov	r4,r2
  814f2c:	01800644 	movi	r6,25
  814f30:	000b883a 	mov	r5,zero
  814f34:	08059c40 	call	8059c4 <memset>
  814f38:	e0bff917 	ldw	r2,-28(fp)
  814f3c:	10000c15 	stw	zero,48(r2)
  814f40:	e0fff917 	ldw	r3,-28(fp)
  814f44:	00802074 	movhi	r2,129
  814f48:	10978f04 	addi	r2,r2,24124
  814f4c:	18800d15 	stw	r2,52(r3)
  814f50:	e0bff917 	ldw	r2,-28(fp)
  814f54:	10000e15 	stw	zero,56(r2)
  814f58:	e0bff917 	ldw	r2,-28(fp)
  814f5c:	10000f15 	stw	zero,60(r2)
  814f60:	e0bff917 	ldw	r2,-28(fp)
  814f64:	10001015 	stw	zero,64(r2)
  814f68:	e0bff917 	ldw	r2,-28(fp)
  814f6c:	10001115 	stw	zero,68(r2)
  814f70:	e0bff917 	ldw	r2,-28(fp)
  814f74:	10001215 	stw	zero,72(r2)
  814f78:	e0bff917 	ldw	r2,-28(fp)
  814f7c:	10001315 	stw	zero,76(r2)
  814f80:	e0bff917 	ldw	r2,-28(fp)
  814f84:	10001415 	stw	zero,80(r2)
  814f88:	e0bff917 	ldw	r2,-28(fp)
  814f8c:	10001515 	stw	zero,84(r2)
  814f90:	e0bff917 	ldw	r2,-28(fp)
  814f94:	10001615 	stw	zero,88(r2)
  814f98:	e0bff917 	ldw	r2,-28(fp)
  814f9c:	10001715 	stw	zero,92(r2)
  814fa0:	e0bff917 	ldw	r2,-28(fp)
  814fa4:	10001805 	stb	zero,96(r2)
  814fa8:	e0bff917 	ldw	r2,-28(fp)
  814fac:	10801f04 	addi	r2,r2,124
  814fb0:	10000015 	stw	zero,0(r2)
  814fb4:	10000115 	stw	zero,4(r2)
  814fb8:	10000215 	stw	zero,8(r2)
  814fbc:	10000315 	stw	zero,12(r2)
  814fc0:	10000415 	stw	zero,16(r2)
  814fc4:	10000515 	stw	zero,20(r2)
  814fc8:	10000615 	stw	zero,24(r2)
  814fcc:	10000715 	stw	zero,28(r2)
  814fd0:	10000815 	stw	zero,32(r2)
  814fd4:	e0bff917 	ldw	r2,-28(fp)
  814fd8:	10002815 	stw	zero,160(r2)
  814fdc:	e0fff917 	ldw	r3,-28(fp)
  814fe0:	00800044 	movi	r2,1
  814fe4:	18802915 	stw	r2,164(r3)
  814fe8:	18002a15 	stw	zero,168(r3)
  814fec:	e0fff917 	ldw	r3,-28(fp)
  814ff0:	008cc384 	movi	r2,13070
  814ff4:	18802b0d 	sth	r2,172(r3)
  814ff8:	e0fff917 	ldw	r3,-28(fp)
  814ffc:	00aaf344 	movi	r2,-21555
  815000:	18802b8d 	sth	r2,174(r3)
  815004:	e0fff917 	ldw	r3,-28(fp)
  815008:	00848d04 	movi	r2,4660
  81500c:	18802c0d 	sth	r2,176(r3)
  815010:	e0fff917 	ldw	r3,-28(fp)
  815014:	00b99b44 	movi	r2,-6547
  815018:	18802c8d 	sth	r2,178(r3)
  81501c:	e0fff917 	ldw	r3,-28(fp)
  815020:	00b7bb04 	movi	r2,-8468
  815024:	18802d0d 	sth	r2,180(r3)
  815028:	e0fff917 	ldw	r3,-28(fp)
  81502c:	00800144 	movi	r2,5
  815030:	18802d8d 	sth	r2,182(r3)
  815034:	e0fff917 	ldw	r3,-28(fp)
  815038:	008002c4 	movi	r2,11
  81503c:	18802e0d 	sth	r2,184(r3)
  815040:	e0bff917 	ldw	r2,-28(fp)
  815044:	10002f15 	stw	zero,188(r2)
  815048:	e0bff917 	ldw	r2,-28(fp)
  81504c:	10003015 	stw	zero,192(r2)
  815050:	e0bff917 	ldw	r2,-28(fp)
  815054:	10003115 	stw	zero,196(r2)
  815058:	e0bff917 	ldw	r2,-28(fp)
  81505c:	10003215 	stw	zero,200(r2)
  815060:	e0bff917 	ldw	r2,-28(fp)
  815064:	10003315 	stw	zero,204(r2)
  815068:	e0bff917 	ldw	r2,-28(fp)
  81506c:	10003415 	stw	zero,208(r2)
  815070:	e0bff917 	ldw	r2,-28(fp)
  815074:	10003e15 	stw	zero,248(r2)
  815078:	e0bff917 	ldw	r2,-28(fp)
  81507c:	10003f15 	stw	zero,252(r2)
  815080:	e0bff917 	ldw	r2,-28(fp)
  815084:	10004015 	stw	zero,256(r2)
  815088:	e0bff917 	ldw	r2,-28(fp)
  81508c:	10004115 	stw	zero,260(r2)
  815090:	e0bff917 	ldw	r2,-28(fp)
  815094:	10004215 	stw	zero,264(r2)
  815098:	e0bff917 	ldw	r2,-28(fp)
  81509c:	10004315 	stw	zero,268(r2)
  8150a0:	e0bff917 	ldw	r2,-28(fp)
  8150a4:	10004415 	stw	zero,272(r2)
  8150a8:	e0bff917 	ldw	r2,-28(fp)
  8150ac:	10004515 	stw	zero,276(r2)
  8150b0:	e0bff917 	ldw	r2,-28(fp)
  8150b4:	10004615 	stw	zero,280(r2)
  8150b8:	e0bff917 	ldw	r2,-28(fp)
  8150bc:	10004715 	stw	zero,284(r2)
  8150c0:	e0bff917 	ldw	r2,-28(fp)
  8150c4:	10003505 	stb	zero,212(r2)
  8150c8:	e0bff917 	ldw	r2,-28(fp)
  8150cc:	10003705 	stb	zero,220(r2)
  8150d0:	e0bff917 	ldw	r2,-28(fp)
  8150d4:	10003d15 	stw	zero,244(r2)
  8150d8:	e0bff917 	ldw	r2,-28(fp)
  8150dc:	10005215 	stw	zero,328(r2)
  8150e0:	e0bff917 	ldw	r2,-28(fp)
  8150e4:	10005315 	stw	zero,332(r2)
  8150e8:	e0bff917 	ldw	r2,-28(fp)
  8150ec:	10005415 	stw	zero,336(r2)
  8150f0:	e0bff917 	ldw	r2,-28(fp)
  8150f4:	10005515 	stw	zero,340(r2)
  8150f8:	e0bff917 	ldw	r2,-28(fp)
  8150fc:	1000b515 	stw	zero,724(r2)
  815100:	e0bff917 	ldw	r2,-28(fp)
  815104:	10007515 	stw	zero,468(r2)
  815108:	e0bff917 	ldw	r2,-28(fp)
  81510c:	1000b715 	stw	zero,732(r2)
  815110:	e0bff917 	ldw	r2,-28(fp)
  815114:	1000b815 	stw	zero,736(r2)
  815118:	e0bff917 	ldw	r2,-28(fp)
  81511c:	1000b915 	stw	zero,740(r2)
  815120:	e0bff917 	ldw	r2,-28(fp)
  815124:	1000ba15 	stw	zero,744(r2)
  815128:	e0bff917 	ldw	r2,-28(fp)
  81512c:	1080bb04 	addi	r2,r2,748
  815130:	1009883a 	mov	r4,r2
  815134:	01804504 	movi	r6,276
  815138:	000b883a 	mov	r5,zero
  81513c:	08059c40 	call	8059c4 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  815140:	e0bff917 	ldw	r2,-28(fp)
  815144:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  815148:	e0bffb17 	ldw	r2,-20(fp)
  81514c:	10bff304 	addi	r2,r2,-52
  815150:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  815154:	e0bffa17 	ldw	r2,-24(fp)
  815158:	10c00c04 	addi	r3,r2,48
  81515c:	e0bffc17 	ldw	r2,-16(fp)
  815160:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  815164:	e0bffa17 	ldw	r2,-24(fp)
  815168:	10c00b04 	addi	r3,r2,44
  81516c:	e0bffd17 	ldw	r2,-12(fp)
  815170:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  815174:	e0bffa17 	ldw	r2,-24(fp)
  815178:	10c00a04 	addi	r3,r2,40
  81517c:	e0bff917 	ldw	r2,-28(fp)
  815180:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  815184:	00802074 	movhi	r2,129
  815188:	10939f04 	addi	r2,r2,20092
  81518c:	10c00104 	addi	r3,r2,4
  815190:	e0bffa17 	ldw	r2,-24(fp)
  815194:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  815198:	e0bffa17 	ldw	r2,-24(fp)
}
  81519c:	e037883a 	mov	sp,fp
  8151a0:	dfc00117 	ldw	ra,4(sp)
  8151a4:	df000017 	ldw	fp,0(sp)
  8151a8:	dec00204 	addi	sp,sp,8
  8151ac:	f800283a 	ret

008151b0 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  8151b0:	defffe04 	addi	sp,sp,-8
  8151b4:	df000115 	stw	fp,4(sp)
  8151b8:	df000104 	addi	fp,sp,4
  8151bc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  8151c0:	e037883a 	mov	sp,fp
  8151c4:	df000017 	ldw	fp,0(sp)
  8151c8:	dec00104 	addi	sp,sp,4
  8151cc:	f800283a 	ret

008151d0 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  8151d0:	defffe04 	addi	sp,sp,-8
  8151d4:	df000115 	stw	fp,4(sp)
  8151d8:	df000104 	addi	fp,sp,4
  8151dc:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  8151e0:	e037883a 	mov	sp,fp
  8151e4:	df000017 	ldw	fp,0(sp)
  8151e8:	dec00104 	addi	sp,sp,4
  8151ec:	f800283a 	ret

008151f0 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  8151f0:	deffff04 	addi	sp,sp,-4
  8151f4:	df000015 	stw	fp,0(sp)
  8151f8:	d839883a 	mov	fp,sp
}
  8151fc:	e037883a 	mov	sp,fp
  815200:	df000017 	ldw	fp,0(sp)
  815204:	dec00104 	addi	sp,sp,4
  815208:	f800283a 	ret

0081520c <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  81520c:	deffff04 	addi	sp,sp,-4
  815210:	df000015 	stw	fp,0(sp)
  815214:	d839883a 	mov	fp,sp
}
  815218:	e037883a 	mov	sp,fp
  81521c:	df000017 	ldw	fp,0(sp)
  815220:	dec00104 	addi	sp,sp,4
  815224:	f800283a 	ret

00815228 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  815228:	deffff04 	addi	sp,sp,-4
  81522c:	df000015 	stw	fp,0(sp)
  815230:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  815234:	e037883a 	mov	sp,fp
  815238:	df000017 	ldw	fp,0(sp)
  81523c:	dec00104 	addi	sp,sp,4
  815240:	f800283a 	ret

00815244 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  815244:	deffff04 	addi	sp,sp,-4
  815248:	df000015 	stw	fp,0(sp)
  81524c:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  815250:	e037883a 	mov	sp,fp
  815254:	df000017 	ldw	fp,0(sp)
  815258:	dec00104 	addi	sp,sp,4
  81525c:	f800283a 	ret

00815260 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  815260:	deffff04 	addi	sp,sp,-4
  815264:	df000015 	stw	fp,0(sp)
  815268:	d839883a 	mov	fp,sp
}
  81526c:	e037883a 	mov	sp,fp
  815270:	df000017 	ldw	fp,0(sp)
  815274:	dec00104 	addi	sp,sp,4
  815278:	f800283a 	ret

0081527c <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  81527c:	deffff04 	addi	sp,sp,-4
  815280:	df000015 	stw	fp,0(sp)
  815284:	d839883a 	mov	fp,sp
}
  815288:	e037883a 	mov	sp,fp
  81528c:	df000017 	ldw	fp,0(sp)
  815290:	dec00104 	addi	sp,sp,4
  815294:	f800283a 	ret

00815298 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  815298:	defffe04 	addi	sp,sp,-8
  81529c:	df000115 	stw	fp,4(sp)
  8152a0:	df000104 	addi	fp,sp,4
  8152a4:	e13fff15 	stw	r4,-4(fp)
}
  8152a8:	e037883a 	mov	sp,fp
  8152ac:	df000017 	ldw	fp,0(sp)
  8152b0:	dec00104 	addi	sp,sp,4
  8152b4:	f800283a 	ret

008152b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  8152b8:	defffa04 	addi	sp,sp,-24
  8152bc:	dfc00515 	stw	ra,20(sp)
  8152c0:	df000415 	stw	fp,16(sp)
  8152c4:	df000404 	addi	fp,sp,16
  8152c8:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  8152cc:	00802074 	movhi	r2,129
  8152d0:	109e2b04 	addi	r2,r2,30892
  8152d4:	10800017 	ldw	r2,0(r2)
  8152d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8152dc:	00003306 	br	8153ac <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  8152e0:	e0bffd17 	ldw	r2,-12(fp)
  8152e4:	11000217 	ldw	r4,8(r2)
  8152e8:	08005d80 	call	8005d8 <strlen>
  8152ec:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  8152f0:	e0bffd17 	ldw	r2,-12(fp)
  8152f4:	10c00217 	ldw	r3,8(r2)
  8152f8:	e0bffc17 	ldw	r2,-16(fp)
  8152fc:	1885883a 	add	r2,r3,r2
  815300:	10bfffc4 	addi	r2,r2,-1
  815304:	10800003 	ldbu	r2,0(r2)
  815308:	10803fcc 	andi	r2,r2,255
  81530c:	1080201c 	xori	r2,r2,128
  815310:	10bfe004 	addi	r2,r2,-128
  815314:	10800bd8 	cmpnei	r2,r2,47
  815318:	1000031e 	bne	r2,zero,815328 <alt_find_file+0x70>
    {
      len -= 1;
  81531c:	e0bffc17 	ldw	r2,-16(fp)
  815320:	10bfffc4 	addi	r2,r2,-1
  815324:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  815328:	e0bffc17 	ldw	r2,-16(fp)
  81532c:	1007883a 	mov	r3,r2
  815330:	e0bffe17 	ldw	r2,-8(fp)
  815334:	1885883a 	add	r2,r3,r2
  815338:	10800003 	ldbu	r2,0(r2)
  81533c:	10803fcc 	andi	r2,r2,255
  815340:	1080201c 	xori	r2,r2,128
  815344:	10bfe004 	addi	r2,r2,-128
  815348:	10800be0 	cmpeqi	r2,r2,47
  81534c:	10000a1e 	bne	r2,zero,815378 <alt_find_file+0xc0>
  815350:	e0bffc17 	ldw	r2,-16(fp)
  815354:	1007883a 	mov	r3,r2
  815358:	e0bffe17 	ldw	r2,-8(fp)
  81535c:	1885883a 	add	r2,r3,r2
  815360:	10800003 	ldbu	r2,0(r2)
  815364:	10803fcc 	andi	r2,r2,255
  815368:	1080201c 	xori	r2,r2,128
  81536c:	10bfe004 	addi	r2,r2,-128
  815370:	1004c03a 	cmpne	r2,r2,zero
  815374:	10000a1e 	bne	r2,zero,8153a0 <alt_find_file+0xe8>
  815378:	e0bffd17 	ldw	r2,-12(fp)
  81537c:	11000217 	ldw	r4,8(r2)
  815380:	e1bffc17 	ldw	r6,-16(fp)
  815384:	e17ffe17 	ldw	r5,-8(fp)
  815388:	08155a80 	call	8155a8 <memcmp>
  81538c:	1004c03a 	cmpne	r2,r2,zero
  815390:	1000031e 	bne	r2,zero,8153a0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  815394:	e0bffd17 	ldw	r2,-12(fp)
  815398:	e0bfff15 	stw	r2,-4(fp)
  81539c:	00000806 	br	8153c0 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  8153a0:	e0bffd17 	ldw	r2,-12(fp)
  8153a4:	10800017 	ldw	r2,0(r2)
  8153a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8153ac:	00c02074 	movhi	r3,129
  8153b0:	18de2b04 	addi	r3,r3,30892
  8153b4:	e0bffd17 	ldw	r2,-12(fp)
  8153b8:	10ffc91e 	bne	r2,r3,8152e0 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  8153bc:	e03fff15 	stw	zero,-4(fp)
  8153c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8153c4:	e037883a 	mov	sp,fp
  8153c8:	dfc00117 	ldw	ra,4(sp)
  8153cc:	df000017 	ldw	fp,0(sp)
  8153d0:	dec00204 	addi	sp,sp,8
  8153d4:	f800283a 	ret

008153d8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  8153d8:	defff804 	addi	sp,sp,-32
  8153dc:	dfc00715 	stw	ra,28(sp)
  8153e0:	df000615 	stw	fp,24(sp)
  8153e4:	df000604 	addi	fp,sp,24
  8153e8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  8153ec:	00bffa04 	movi	r2,-24
  8153f0:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  8153f4:	008020b4 	movhi	r2,130
  8153f8:	10a52004 	addi	r2,r2,-27520
  8153fc:	10800017 	ldw	r2,0(r2)
  815400:	e0bffa15 	stw	r2,-24(fp)
  815404:	e03ffb0d 	sth	zero,-20(fp)
  815408:	e17ffb0b 	ldhu	r5,-20(fp)
  81540c:	e1bffe04 	addi	r6,fp,-8
  815410:	e13ffa17 	ldw	r4,-24(fp)
  815414:	081056c0 	call	81056c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  815418:	e03ffd15 	stw	zero,-12(fp)
  81541c:	00001e06 	br	815498 <alt_get_fd+0xc0>
  {
    if (!alt_fd_list[i].dev)
  815420:	e0bffd17 	ldw	r2,-12(fp)
  815424:	00c02074 	movhi	r3,129
  815428:	18d99f04 	addi	r3,r3,26236
  81542c:	10800324 	muli	r2,r2,12
  815430:	10c5883a 	add	r2,r2,r3
  815434:	10800017 	ldw	r2,0(r2)
  815438:	1004c03a 	cmpne	r2,r2,zero
  81543c:	1000131e 	bne	r2,zero,81548c <alt_get_fd+0xb4>
    {
      alt_fd_list[i].dev = dev;
  815440:	e0bffd17 	ldw	r2,-12(fp)
  815444:	00c02074 	movhi	r3,129
  815448:	18d99f04 	addi	r3,r3,26236
  81544c:	10800324 	muli	r2,r2,12
  815450:	10c7883a 	add	r3,r2,r3
  815454:	e0bfff17 	ldw	r2,-4(fp)
  815458:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  81545c:	00802074 	movhi	r2,129
  815460:	109e2f04 	addi	r2,r2,30908
  815464:	10c00017 	ldw	r3,0(r2)
  815468:	e0bffd17 	ldw	r2,-12(fp)
  81546c:	1880040e 	bge	r3,r2,815480 <alt_get_fd+0xa8>
      {
        alt_max_fd = i;
  815470:	00c02074 	movhi	r3,129
  815474:	18de2f04 	addi	r3,r3,30908
  815478:	e0bffd17 	ldw	r2,-12(fp)
  81547c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  815480:	e0bffd17 	ldw	r2,-12(fp)
  815484:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  815488:	00000606 	br	8154a4 <alt_get_fd+0xcc>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81548c:	e0bffd17 	ldw	r2,-12(fp)
  815490:	10800044 	addi	r2,r2,1
  815494:	e0bffd15 	stw	r2,-12(fp)
  815498:	e0bffd17 	ldw	r2,-12(fp)
  81549c:	10800810 	cmplti	r2,r2,32
  8154a0:	103fdf1e 	bne	r2,zero,815420 <alt_get_fd+0x48>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  8154a4:	008020b4 	movhi	r2,130
  8154a8:	10a52004 	addi	r2,r2,-27520
  8154ac:	11000017 	ldw	r4,0(r2)
  8154b0:	08109640 	call	810964 <OSSemPost>

  return rc;
  8154b4:	e0bffc17 	ldw	r2,-16(fp)
}
  8154b8:	e037883a 	mov	sp,fp
  8154bc:	dfc00117 	ldw	ra,4(sp)
  8154c0:	df000017 	ldw	fp,0(sp)
  8154c4:	dec00204 	addi	sp,sp,8
  8154c8:	f800283a 	ret

008154cc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
  8154cc:	defffb04 	addi	sp,sp,-20
  8154d0:	df000415 	stw	fp,16(sp)
  8154d4:	df000404 	addi	fp,sp,16
  8154d8:	e13ffe15 	stw	r4,-8(fp)
  8154dc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
  8154e0:	e0bfff17 	ldw	r2,-4(fp)
  8154e4:	10840070 	cmpltui	r2,r2,4097
  8154e8:	1000021e 	bne	r2,zero,8154f4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
  8154ec:	00840004 	movi	r2,4096
  8154f0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
  8154f4:	e0fffe17 	ldw	r3,-8(fp)
  8154f8:	e0bfff17 	ldw	r2,-4(fp)
  8154fc:	1885883a 	add	r2,r3,r2
  815500:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  815504:	e0bffe17 	ldw	r2,-8(fp)
  815508:	e0bffd15 	stw	r2,-12(fp)
  81550c:	00000506 	br	815524 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
  815510:	e0bffd17 	ldw	r2,-12(fp)
  815514:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
  815518:	e0bffd17 	ldw	r2,-12(fp)
  81551c:	10800804 	addi	r2,r2,32
  815520:	e0bffd15 	stw	r2,-12(fp)
  815524:	e0fffd17 	ldw	r3,-12(fp)
  815528:	e0bffc17 	ldw	r2,-16(fp)
  81552c:	18bff836 	bltu	r3,r2,815510 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
  815530:	e0bffe17 	ldw	r2,-8(fp)
  815534:	108007cc 	andi	r2,r2,31
  815538:	1005003a 	cmpeq	r2,r2,zero
  81553c:	1000021e 	bne	r2,zero,815548 <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
  815540:	e0bffd17 	ldw	r2,-12(fp)
  815544:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
  815548:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
  81554c:	e037883a 	mov	sp,fp
  815550:	df000017 	ldw	fp,0(sp)
  815554:	dec00104 	addi	sp,sp,4
  815558:	f800283a 	ret

0081555c <atexit>:
  81555c:	200b883a 	mov	r5,r4
  815560:	000d883a 	mov	r6,zero
  815564:	0009883a 	mov	r4,zero
  815568:	000f883a 	mov	r7,zero
  81556c:	081561c1 	jmpi	81561c <__register_exitproc>

00815570 <exit>:
  815570:	defffe04 	addi	sp,sp,-8
  815574:	000b883a 	mov	r5,zero
  815578:	dc000015 	stw	r16,0(sp)
  81557c:	dfc00115 	stw	ra,4(sp)
  815580:	2021883a 	mov	r16,r4
  815584:	08157540 	call	815754 <__call_exitprocs>
  815588:	00802074 	movhi	r2,129
  81558c:	109e2604 	addi	r2,r2,30872
  815590:	11000017 	ldw	r4,0(r2)
  815594:	20800f17 	ldw	r2,60(r4)
  815598:	10000126 	beq	r2,zero,8155a0 <exit+0x30>
  81559c:	103ee83a 	callr	r2
  8155a0:	8009883a 	mov	r4,r16
  8155a4:	08159440 	call	815944 <_exit>

008155a8 <memcmp>:
  8155a8:	00c000c4 	movi	r3,3
  8155ac:	1980032e 	bgeu	r3,r6,8155bc <memcmp+0x14>
  8155b0:	2144b03a 	or	r2,r4,r5
  8155b4:	10c4703a 	and	r2,r2,r3
  8155b8:	10000f26 	beq	r2,zero,8155f8 <memcmp+0x50>
  8155bc:	31ffffc4 	addi	r7,r6,-1
  8155c0:	3000061e 	bne	r6,zero,8155dc <memcmp+0x34>
  8155c4:	00000a06 	br	8155f0 <memcmp+0x48>
  8155c8:	39ffffc4 	addi	r7,r7,-1
  8155cc:	00bfffc4 	movi	r2,-1
  8155d0:	21000044 	addi	r4,r4,1
  8155d4:	29400044 	addi	r5,r5,1
  8155d8:	38800526 	beq	r7,r2,8155f0 <memcmp+0x48>
  8155dc:	20c00003 	ldbu	r3,0(r4)
  8155e0:	28800003 	ldbu	r2,0(r5)
  8155e4:	18bff826 	beq	r3,r2,8155c8 <memcmp+0x20>
  8155e8:	1885c83a 	sub	r2,r3,r2
  8155ec:	f800283a 	ret
  8155f0:	0005883a 	mov	r2,zero
  8155f4:	f800283a 	ret
  8155f8:	180f883a 	mov	r7,r3
  8155fc:	20c00017 	ldw	r3,0(r4)
  815600:	28800017 	ldw	r2,0(r5)
  815604:	18bfed1e 	bne	r3,r2,8155bc <memcmp+0x14>
  815608:	31bfff04 	addi	r6,r6,-4
  81560c:	21000104 	addi	r4,r4,4
  815610:	29400104 	addi	r5,r5,4
  815614:	39bff936 	bltu	r7,r6,8155fc <memcmp+0x54>
  815618:	003fe806 	br	8155bc <memcmp+0x14>

0081561c <__register_exitproc>:
  81561c:	defffa04 	addi	sp,sp,-24
  815620:	00802074 	movhi	r2,129
  815624:	109e2604 	addi	r2,r2,30872
  815628:	dc000015 	stw	r16,0(sp)
  81562c:	14000017 	ldw	r16,0(r2)
  815630:	dd000415 	stw	r20,16(sp)
  815634:	2829883a 	mov	r20,r5
  815638:	81405217 	ldw	r5,328(r16)
  81563c:	dcc00315 	stw	r19,12(sp)
  815640:	dc800215 	stw	r18,8(sp)
  815644:	dc400115 	stw	r17,4(sp)
  815648:	dfc00515 	stw	ra,20(sp)
  81564c:	2023883a 	mov	r17,r4
  815650:	3027883a 	mov	r19,r6
  815654:	3825883a 	mov	r18,r7
  815658:	28002526 	beq	r5,zero,8156f0 <__register_exitproc+0xd4>
  81565c:	29000117 	ldw	r4,4(r5)
  815660:	008007c4 	movi	r2,31
  815664:	11002716 	blt	r2,r4,815704 <__register_exitproc+0xe8>
  815668:	8800101e 	bne	r17,zero,8156ac <__register_exitproc+0x90>
  81566c:	2105883a 	add	r2,r4,r4
  815670:	1085883a 	add	r2,r2,r2
  815674:	20c00044 	addi	r3,r4,1
  815678:	1145883a 	add	r2,r2,r5
  81567c:	0009883a 	mov	r4,zero
  815680:	15000215 	stw	r20,8(r2)
  815684:	28c00115 	stw	r3,4(r5)
  815688:	2005883a 	mov	r2,r4
  81568c:	dfc00517 	ldw	ra,20(sp)
  815690:	dd000417 	ldw	r20,16(sp)
  815694:	dcc00317 	ldw	r19,12(sp)
  815698:	dc800217 	ldw	r18,8(sp)
  81569c:	dc400117 	ldw	r17,4(sp)
  8156a0:	dc000017 	ldw	r16,0(sp)
  8156a4:	dec00604 	addi	sp,sp,24
  8156a8:	f800283a 	ret
  8156ac:	29802204 	addi	r6,r5,136
  8156b0:	00800044 	movi	r2,1
  8156b4:	110e983a 	sll	r7,r2,r4
  8156b8:	30c04017 	ldw	r3,256(r6)
  8156bc:	2105883a 	add	r2,r4,r4
  8156c0:	1085883a 	add	r2,r2,r2
  8156c4:	1185883a 	add	r2,r2,r6
  8156c8:	19c6b03a 	or	r3,r3,r7
  8156cc:	14802015 	stw	r18,128(r2)
  8156d0:	14c00015 	stw	r19,0(r2)
  8156d4:	00800084 	movi	r2,2
  8156d8:	30c04015 	stw	r3,256(r6)
  8156dc:	88bfe31e 	bne	r17,r2,81566c <__register_exitproc+0x50>
  8156e0:	30804117 	ldw	r2,260(r6)
  8156e4:	11c4b03a 	or	r2,r2,r7
  8156e8:	30804115 	stw	r2,260(r6)
  8156ec:	003fdf06 	br	81566c <__register_exitproc+0x50>
  8156f0:	008020b4 	movhi	r2,130
  8156f4:	10821204 	addi	r2,r2,2120
  8156f8:	100b883a 	mov	r5,r2
  8156fc:	80805215 	stw	r2,328(r16)
  815700:	003fd606 	br	81565c <__register_exitproc+0x40>
  815704:	00800034 	movhi	r2,0
  815708:	10800004 	addi	r2,r2,0
  81570c:	1000021e 	bne	r2,zero,815718 <__register_exitproc+0xfc>
  815710:	013fffc4 	movi	r4,-1
  815714:	003fdc06 	br	815688 <__register_exitproc+0x6c>
  815718:	01006404 	movi	r4,400
  81571c:	103ee83a 	callr	r2
  815720:	1007883a 	mov	r3,r2
  815724:	103ffa26 	beq	r2,zero,815710 <__register_exitproc+0xf4>
  815728:	80805217 	ldw	r2,328(r16)
  81572c:	180b883a 	mov	r5,r3
  815730:	18000115 	stw	zero,4(r3)
  815734:	18800015 	stw	r2,0(r3)
  815738:	80c05215 	stw	r3,328(r16)
  81573c:	18006215 	stw	zero,392(r3)
  815740:	18006315 	stw	zero,396(r3)
  815744:	0009883a 	mov	r4,zero
  815748:	883fc826 	beq	r17,zero,81566c <__register_exitproc+0x50>
  81574c:	003fd706 	br	8156ac <__register_exitproc+0x90>

00815750 <register_fini>:
  815750:	f800283a 	ret

00815754 <__call_exitprocs>:
  815754:	00802074 	movhi	r2,129
  815758:	109e2604 	addi	r2,r2,30872
  81575c:	10800017 	ldw	r2,0(r2)
  815760:	defff304 	addi	sp,sp,-52
  815764:	df000b15 	stw	fp,44(sp)
  815768:	d8800115 	stw	r2,4(sp)
  81576c:	00800034 	movhi	r2,0
  815770:	10800004 	addi	r2,r2,0
  815774:	1005003a 	cmpeq	r2,r2,zero
  815778:	d8800215 	stw	r2,8(sp)
  81577c:	d8800117 	ldw	r2,4(sp)
  815780:	dd400815 	stw	r21,32(sp)
  815784:	dd000715 	stw	r20,28(sp)
  815788:	10805204 	addi	r2,r2,328
  81578c:	dfc00c15 	stw	ra,48(sp)
  815790:	ddc00a15 	stw	r23,40(sp)
  815794:	dd800915 	stw	r22,36(sp)
  815798:	dcc00615 	stw	r19,24(sp)
  81579c:	dc800515 	stw	r18,20(sp)
  8157a0:	dc400415 	stw	r17,16(sp)
  8157a4:	dc000315 	stw	r16,12(sp)
  8157a8:	282b883a 	mov	r21,r5
  8157ac:	2039883a 	mov	fp,r4
  8157b0:	d8800015 	stw	r2,0(sp)
  8157b4:	2829003a 	cmpeq	r20,r5,zero
  8157b8:	d8800117 	ldw	r2,4(sp)
  8157bc:	14405217 	ldw	r17,328(r2)
  8157c0:	88001026 	beq	r17,zero,815804 <__call_exitprocs+0xb0>
  8157c4:	ddc00017 	ldw	r23,0(sp)
  8157c8:	88800117 	ldw	r2,4(r17)
  8157cc:	8c802204 	addi	r18,r17,136
  8157d0:	143fffc4 	addi	r16,r2,-1
  8157d4:	80000916 	blt	r16,zero,8157fc <__call_exitprocs+0xa8>
  8157d8:	05bfffc4 	movi	r22,-1
  8157dc:	a000151e 	bne	r20,zero,815834 <__call_exitprocs+0xe0>
  8157e0:	8409883a 	add	r4,r16,r16
  8157e4:	2105883a 	add	r2,r4,r4
  8157e8:	1485883a 	add	r2,r2,r18
  8157ec:	10c02017 	ldw	r3,128(r2)
  8157f0:	a8c01126 	beq	r21,r3,815838 <__call_exitprocs+0xe4>
  8157f4:	843fffc4 	addi	r16,r16,-1
  8157f8:	85bff81e 	bne	r16,r22,8157dc <__call_exitprocs+0x88>
  8157fc:	d8800217 	ldw	r2,8(sp)
  815800:	10003126 	beq	r2,zero,8158c8 <__call_exitprocs+0x174>
  815804:	dfc00c17 	ldw	ra,48(sp)
  815808:	df000b17 	ldw	fp,44(sp)
  81580c:	ddc00a17 	ldw	r23,40(sp)
  815810:	dd800917 	ldw	r22,36(sp)
  815814:	dd400817 	ldw	r21,32(sp)
  815818:	dd000717 	ldw	r20,28(sp)
  81581c:	dcc00617 	ldw	r19,24(sp)
  815820:	dc800517 	ldw	r18,20(sp)
  815824:	dc400417 	ldw	r17,16(sp)
  815828:	dc000317 	ldw	r16,12(sp)
  81582c:	dec00d04 	addi	sp,sp,52
  815830:	f800283a 	ret
  815834:	8409883a 	add	r4,r16,r16
  815838:	88c00117 	ldw	r3,4(r17)
  81583c:	2105883a 	add	r2,r4,r4
  815840:	1445883a 	add	r2,r2,r17
  815844:	18ffffc4 	addi	r3,r3,-1
  815848:	11800217 	ldw	r6,8(r2)
  81584c:	1c001526 	beq	r3,r16,8158a4 <__call_exitprocs+0x150>
  815850:	10000215 	stw	zero,8(r2)
  815854:	303fe726 	beq	r6,zero,8157f4 <__call_exitprocs+0xa0>
  815858:	00c00044 	movi	r3,1
  81585c:	1c06983a 	sll	r3,r3,r16
  815860:	90804017 	ldw	r2,256(r18)
  815864:	8cc00117 	ldw	r19,4(r17)
  815868:	1884703a 	and	r2,r3,r2
  81586c:	10001426 	beq	r2,zero,8158c0 <__call_exitprocs+0x16c>
  815870:	90804117 	ldw	r2,260(r18)
  815874:	1884703a 	and	r2,r3,r2
  815878:	10000c1e 	bne	r2,zero,8158ac <__call_exitprocs+0x158>
  81587c:	2105883a 	add	r2,r4,r4
  815880:	1485883a 	add	r2,r2,r18
  815884:	11400017 	ldw	r5,0(r2)
  815888:	e009883a 	mov	r4,fp
  81588c:	303ee83a 	callr	r6
  815890:	88800117 	ldw	r2,4(r17)
  815894:	98bfc81e 	bne	r19,r2,8157b8 <__call_exitprocs+0x64>
  815898:	b8800017 	ldw	r2,0(r23)
  81589c:	147fd526 	beq	r2,r17,8157f4 <__call_exitprocs+0xa0>
  8158a0:	003fc506 	br	8157b8 <__call_exitprocs+0x64>
  8158a4:	8c000115 	stw	r16,4(r17)
  8158a8:	003fea06 	br	815854 <__call_exitprocs+0x100>
  8158ac:	2105883a 	add	r2,r4,r4
  8158b0:	1485883a 	add	r2,r2,r18
  8158b4:	11000017 	ldw	r4,0(r2)
  8158b8:	303ee83a 	callr	r6
  8158bc:	003ff406 	br	815890 <__call_exitprocs+0x13c>
  8158c0:	303ee83a 	callr	r6
  8158c4:	003ff206 	br	815890 <__call_exitprocs+0x13c>
  8158c8:	88800117 	ldw	r2,4(r17)
  8158cc:	1000081e 	bne	r2,zero,8158f0 <__call_exitprocs+0x19c>
  8158d0:	89000017 	ldw	r4,0(r17)
  8158d4:	20000726 	beq	r4,zero,8158f4 <__call_exitprocs+0x1a0>
  8158d8:	b9000015 	stw	r4,0(r23)
  8158dc:	8809883a 	mov	r4,r17
  8158e0:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
  8158e4:	bc400017 	ldw	r17,0(r23)
  8158e8:	883fb71e 	bne	r17,zero,8157c8 <__call_exitprocs+0x74>
  8158ec:	003fc506 	br	815804 <__call_exitprocs+0xb0>
  8158f0:	89000017 	ldw	r4,0(r17)
  8158f4:	882f883a 	mov	r23,r17
  8158f8:	2023883a 	mov	r17,r4
  8158fc:	883fb21e 	bne	r17,zero,8157c8 <__call_exitprocs+0x74>
  815900:	003fc006 	br	815804 <__call_exitprocs+0xb0>

00815904 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  815904:	defffd04 	addi	sp,sp,-12
  815908:	df000215 	stw	fp,8(sp)
  81590c:	df000204 	addi	fp,sp,8
  815910:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  815914:	e0bfff17 	ldw	r2,-4(fp)
  815918:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  81591c:	e0bffe17 	ldw	r2,-8(fp)
  815920:	1005003a 	cmpeq	r2,r2,zero
  815924:	1000021e 	bne	r2,zero,815930 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  815928:	002af070 	cmpltui	zero,zero,43969
  81592c:	00000106 	br	815934 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  815930:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  815934:	e037883a 	mov	sp,fp
  815938:	df000017 	ldw	fp,0(sp)
  81593c:	dec00104 	addi	sp,sp,4
  815940:	f800283a 	ret

00815944 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  815944:	defffd04 	addi	sp,sp,-12
  815948:	dfc00215 	stw	ra,8(sp)
  81594c:	df000115 	stw	fp,4(sp)
  815950:	df000104 	addi	fp,sp,4
  815954:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  815958:	008020b4 	movhi	r2,130
  81595c:	10a52844 	addi	r2,r2,-27487
  815960:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  815964:	e13fff17 	ldw	r4,-4(fp)
  815968:	08159040 	call	815904 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  81596c:	003fff06 	br	81596c <_exit+0x28>
  815970:	00815750 	cmplti	r2,zero,1373
